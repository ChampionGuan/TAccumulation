---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/10/30 16:36
---
local utf8 = require("Framework.Base.utf8_simple")



---支持cs方式传参
---@param format_str
---@param 参数列表
function string.cs_format(format_str,...)
    local param ={...}
    local res =string.gsub(format_str,"{[^{}]+}",function (value)
        local idx = tonumber(string.sub(value,2,-2))
        return idx and param[idx+1] or value
    end)
    return res
end


---分割字符串
function string.split(input, delimiter, isregex)
    input = tostring(input)
    delimiter = tostring(delimiter)
    if (delimiter=='') then return false end
    local pos,arr = 0, {}
    -- for each divider found
    for st,sp in function() return string.find(input, delimiter, pos, not isregex) end do
        table.insert(arr, string.sub(input, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(input, pos))
    return arr
end

--------------------------------

function string.isnilorempty(str)
    return str == nil or str == ""
end



string._htmlspecialchars_set = {}
string._htmlspecialchars_set["&"] = "&amp;"
string._htmlspecialchars_set["\""] = "&quot;"
string._htmlspecialchars_set["'"] = "&#039;"
string._htmlspecialchars_set["<"] = "&lt;"
string._htmlspecialchars_set[">"] = "&gt;"

-- start --

--------------------------------
-- 将特殊字符转为 HTML 转义符
-- @function [parent=#string] htmlspecialchars
-- @param string input 输入字符串
-- @return string#string  转换结果

--[[--

将特殊字符转为 HTML 转义符

~~~ lua

print(string.htmlspecialchars("<ABC>"))
-- 输出 &lt;ABC&gt;

~~~

]]

-- end --

function string.htmlspecialchars(input)
    for k, v in pairs(string._htmlspecialchars_set) do
        input = string.gsub(input, k, v)
    end
    return input
end

-- start --

--------------------------------
-- 将 HTML 转义符还原为特殊字符，功能与 string.htmlspecialchars() 正好相反
-- @function [parent=#string] restorehtmlspecialchars
-- @param string input 输入字符串
-- @return string#string  转换结果

--[[--

将 HTML 转义符还原为特殊字符，功能与 string.htmlspecialchars() 正好相反

~~~ lua

print(string.restorehtmlspecialchars("&lt;ABC&gt;"))
-- 输出 <ABC>

~~~

]]

-- end --

function string.restorehtmlspecialchars(input)
    for k, v in pairs(string._htmlspecialchars_set) do
        input = string.gsub(input, v, k)
    end
    return input
end

-- start --

--------------------------------
-- 将字符串中的 \n 换行符转换为 HTML 标记
-- @function [parent=#string] nl2br
-- @param string input 输入字符串
-- @return string#string  转换结果

--[[--

将字符串中的 \n 换行符转换为 HTML 标记

~~~ lua

print(string.nl2br("Hello\nWorld"))
-- 输出
-- Hello<br />World

~~~

]]

-- end --

function string.nl2br(input)
    return string.gsub(input, "\n", "<br />")
end

-- start --

--------------------------------
-- 将字符串中的特殊字符和 \n 换行符转换为 HTML 转移符和标记
-- @function [parent=#string] text2html
-- @param string input 输入字符串
-- @return string#string  转换结果

--[[--

将字符串中的特殊字符和 \n 换行符转换为 HTML 转移符和标记

~~~ lua

print(string.text2html("<Hello>\nWorld"))
-- 输出
-- &lt;Hello&gt;<br />World

~~~

]]

-- end --

function string.text2html(input)
    input = string.gsub(input, "\t", "    ")
    input = string.htmlspecialchars(input)
    input = string.gsub(input, " ", "&nbsp;")
    input = string.nl2br(input)
    return input
end

-- start --

--------------------------------
-- 去除输入字符串头部的空白字符，返回结果
-- @function [parent=#string] ltrim
-- @param string input 输入字符串
-- @return string#string  结果
-- @see string.rtrim, string.trim

--[[--

去除输入字符串头部的空白字符，返回结果

~~~ lua

local input = "  ABC"
print(string.ltrim(input))
-- 输出 ABC，输入字符串前面的两个空格被去掉了

~~~

空白字符包括：

-   空格
-   制表符 \t
-   换行符 \n
-   回到行首符 \r

]]

-- end --

function string.ltrim(input)
    return string.gsub(input, "^[ \t\n\r]+", "")
end

-- start --

--------------------------------
-- 去除输入字符串尾部的空白字符，返回结果
-- @function [parent=#string] rtrim
-- @param string input 输入字符串
-- @return string#string  结果
-- @see string.ltrim, string.trim

--[[--

去除输入字符串尾部的空白字符，返回结果

~~~ lua

local input = "ABC  "
print(string.rtrim(input))
-- 输出 ABC，输入字符串最后的两个空格被去掉了

~~~

]]

-- end --

function string.rtrim(input)
    return string.gsub(input, "[ \t\n\r]+$", "")
end

-- start --

--------------------------------
-- 去掉字符串首尾的空白字符，返回结果
-- @function [parent=#string] trim
-- @param string input 输入字符串
-- @return string#string  结果
-- @see string.ltrim, string.rtrim

--[[--

去掉字符串首尾的空白字符，返回结果

]]

-- end --

function string.trim(input)
    input = string.gsub(input, "^[ \t\n\r]+", "")
    return string.gsub(input, "[ \t\n\r]+$", "")
end

-- start --

--------------------------------
-- 将字符串的第一个字符转为大写，返回结果
-- @function [parent=#string] ucfirst
-- @param string input 输入字符串
-- @return string#string  结果

--[[--

将字符串的第一个字符转为大写，返回结果

~~~ lua

local input = "hello"
print(string.ucfirst(input))
-- 输出 Hello

~~~

]]

-- end --

function string.ucfirst(input)
    return string.upper(string.sub(input, 1, 1)) .. string.sub(input, 2)
end

local function urlencodechar(char)
    return "%" .. string.format("%02X", string.byte(char))
end

-- start --

--------------------------------
-- 将字符串转换为符合 URL 传递要求的格式，并返回转换结果
-- @function [parent=#string] urlencode
-- @param string input 输入字符串
-- @return string#string  转换后的结果
-- @see string.urldecode

--[[--

将字符串转换为符合 URL 传递要求的格式，并返回转换结果

~~~ lua

local input = "hello world"
print(string.urlencode(input))
-- 输出
-- hello%20world

~~~

]]

-- end --

function string.urlencode(input)
    -- convert line endings
    input = string.gsub(tostring(input), "\n", "\r\n")
    -- escape all characters but alphanumeric, '.' and '-'
    input = string.gsub(input, "([^%w%.%- ])", urlencodechar)
    -- convert spaces to "+" symbols
    return string.gsub(input, " ", "+")
end

-- start --

--------------------------------
-- 将 URL 中的特殊字符还原，并返回结果
-- @function [parent=#string] urldecode
-- @param string input 输入字符串
-- @return string#string  转换后的结果
-- @see string.urlencode

--[[--

将 URL 中的特殊字符还原，并返回结果

~~~ lua

local input = "hello%20world"
print(string.urldecode(input))
-- 输出
-- hello world

~~~

]]

-- end --

function string.urldecode(input)
    input = string.gsub (input, "+", " ")
    input = string.gsub (input, "%%(%x%x)", function(h) return string.char(checknumber(h,16)) end)
    input = string.gsub (input, "\r\n", "\n")
    return input
end

-- start --

--------------------------------


-- start --

--------------------------------
-- 将数值格式化为包含千分位分隔符的字符串
-- @function [parent=#string] formatnumberthousands
-- @param number num 数值
-- @return string#string  格式化结果

--[[--

将数值格式化为包含千分位分隔符的字符串

~~~ lua

print(string.formatnumberthousands(1924235))
-- 输出 1,924,235

~~~

]]

-- end --

function string.formatnumberthousands(num)
    local formatted = tostring(checknumber(num))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
        if k == 0 then break end
    end
    return formatted
end

---拼接字符串
function string.concat(...)
    local temp = {}
    for k,v in pairs({...}) do
        table.insert(temp,tostring(v))
    end
    return #temp>0 and table.concat(temp) or ''
end

-- 计算 UTF8 字符串的长度，每一个中文算一个字符
-- @function [parent=#string] utf8len
-- @param string input 输入字符串
-- @return integer#integer  长度

--[[--

计算 UTF8 字符串的长度，每一个中文算一个字符

~~~ lua

local input = "你好World"
print(string.utf8len(input))
-- 输出 7

~~~

]]

-- end --

function string.utf8len(input)
    return utf8.len(input)
end

---截取字符串
function string.utf8sub(str,start_index,end_index)
    return utf8.sub(str,start_index,end_index)
end

---@public 获取字符串的长度
---@param inputStr 字符串
---@return length 英文字母或者数字是1个长度，汉字等其他字符算2个长度。（“1”长度是1，“好”长度是2）
function string.getcharaterlength(inputStr)
    if type(inputStr) ~= "string" or string.isnilorempty(inputStr) then
        return 0
    end

    local length = 0 -- 字符的个数
    local singleLength = 0
    local i = 1
    local byteCount = 1
    local lenInByte = string.len(inputStr)
    while i <= lenInByte do
        byteCount, singleLength = string.getbytecountsteplength(inputStr, i)
        i = i + byteCount
        length = length + singleLength
    end
    return length
end

---@public 将中英文字符截取在固定长度内
---@param inputStr string
---@param characterLimit number int
function string.cutoverflow(inputStr, characterLimit)
    local totalLength = string.getcharaterlength(inputStr)
    if totalLength <= characterLimit then
        return inputStr
    end

    local length = 0 -- 字符的个数
    local singleLength = 0
    local i = 1
    local byteCount = 1
    local lenInByte = string.len(inputStr)
    local fixValue
    while i <= lenInByte do
        byteCount, singleLength = string.getbytecountsteplength(inputStr, i)
        length = length + singleLength
        i = i + byteCount

        if length <= characterLimit then
            fixValue = string.sub(inputStr, 1, i - 1)
        end

        ---如果算上当前的长度已经超过了，此时ByteCount，不需要加上了。
        if length >= characterLimit then
            break
        end
    end

    return fixValue
end

---@public 从字符串后面截取多余中英文字符
---@param source string 中英文字符
---@param overFlow number 多余的字符长度
function string.cutlast(source, overFlow)
    if string.isnilorempty(source) then
        return source
    end
    local realLength = string.len(source)
    if overFlow > realLength then
        return source
    end

    local internal_overflow = 0
    local singleLength = 0
    local i = realLength
    local byteCount = 1
    while i >= 1 do
        byteCount, singleLength = string.getbytecountsteplength(source, i)
        internal_overflow = internal_overflow + singleLength
        i = i - byteCount

        ---如果算上当前的长度已经超过了，此时ByteCount，不需要加上了。
        if internal_overflow >= overFlow then
            break
        end
    end

    local fixSource = string.sub(source, 1, i)
    return fixSource
end

---@public 获取当前index在字符串里面的Byte步进值
---@param str 字符串
---@param index 字符串里面的索引值
function string.getbytecount(str, index)
    local byteCount , length = string.getbytecountsteplength(str, index)
    return byteCount
end

---@public 获取当前index在字符串里面的Byte步进值和长度值
---@param str 字符串
---@param index 字符串里面的索引值
function string.getbytecountsteplength(str, index)
    local byteValue = string.byte(str, index)
    local byteCount = 0
    local length = 0
    if byteValue == nil then
        Debug.LogError("byteValue is nil! ", str, index)
        byteCount = 0
        length = 0
    elseif byteValue > 239 then
        byteCount = 4-- 4字节字符
        length = 2
    elseif byteValue > 223 then
        byteCount = 3-- 汉字
        length = 2
    elseif byteValue > 128 then
        byteCount = 2-- 双字节字符
        length = 2
    else
        byteCount = 1-- 单字节字符
        length = 1
    end
    return byteCount,length
end