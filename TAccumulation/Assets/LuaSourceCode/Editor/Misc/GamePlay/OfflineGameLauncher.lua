---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by baozhatou.
--- DateTime: 2023/3/28 15:30
---

local OfflineGameLauncher = {}
local this = OfflineGameLauncher


local LauncherDic = {}

function this.LoadGame(gameType,...)
    local gameLauncher = this.GetLauncher(gameType)
    if gameLauncher ~= nil then
        gameLauncher:EnterGame(...)
    end
end

function this.LoadGameFromRecord(filePath, fileType)
    local gameType ,recordStr = LogicUtil.GetGameTypeFormFile(filePath,false) --LogicUtil.DecodeLogToFile(filePath)
    local gameLauncher = this.GetLauncher("Miao")
    if gameLauncher ~= nil then
        gameLauncher:EnterGameByRecord(recordStr)
    end
end

function this.QuitGame(gameType,...)
    -- 离线模式下，退出游戏只需要切换空场景
    GameStateMgr.Switch(GameState.Empty)
end

---@param filePath string
---@param func fun(localRecord:table, serverRecord:table):boolean 外界传入的自定义校验函数
function this.VerifyGameByRecord(filePath, func)
    require("ServerInit")
    LuaCfgMgr.SetCfgDir("LuaCfg.")
    require("PureLogic.ClientInit")
    local gameType, recordStr = LogicUtil.GetGameTypeFormFile(filePath, false)
    ServerConst.Mode = ServerConst.GameMode.Server
    -- 默认是不从record中加载
    ServerConst.IsNeedLoadCommand = false
    ServerConst.LoadCommandMode = ServerConst.LoadCommandType.FromFile
    local data = LogicUtil.JsonDecode(recordStr)
    if data ~= nil and data.Data ~= nil then
        local res, des = VerifyGamePlay(recordStr, data.Data.Record, gameType, data.LevelId, data.Seed, true, func)
        LogicUtil.Log(res == ServerConst.ErrorCode.Success and "[check success]" or des)
    else
        LogicUtil.Log("[check success]")
    end
end

--region Private

---@private
---@return PureLogicBaseLauncher
function this.GetLauncher(gameType)
    ---@type PureLogicBaseLauncher
    if LauncherDic[gameType] == nil then
        local launcherPath = "Editor.Misc.GamePlay.PureLogic"..gameType.."Launcher"
        gameLauncher = require(launcherPath)
        if(gameLauncher ~= nil) then
            LauncherDic[gameType] = gameLauncher
        end
    end
    return LauncherDic[gameType]
end

---@private
function this.GetFunction(gameType,funcName)
    local launcher = this.GetLauncher(gameType)
    if(launcher ~= nil) then
        return launcher[funcName]
    end
    return {}
end

--endregion

return this

