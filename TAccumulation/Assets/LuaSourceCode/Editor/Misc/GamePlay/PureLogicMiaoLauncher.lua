
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by baozhatou.
--- DateTime: 2023/3/15 11:25
---

---@type PureLogicBaseLauncher
local base = require("Editor.Misc.GamePlay.PureLogicBaseLauncher")
---@class MiaoGameLauncher : PureLogicBaseLauncher
local PureLogicMiaoLauncher = class("PureLogicMiaoLauncher",base)

function PureLogicMiaoLauncher.TryStartMiaoCard(subId,count)
    require("GameInit")
    require("Editor.Misc.EditorGameInit")

    local ATCommandRegister = 'Runtime.System.X3Game.Modules.GamePlayLogic.GamePlay.Miao.Command.Debug.Register'
    local ATComponentRegister = 'Runtime.System.X3Game.Modules.GamePlayLogic.GamePlay.Miao.Component.Register'
    LogicConst.LogicEntityConf[LogicConst.LogicEntityType.Miao].clientCommand = ATCommandRegister
    LogicConst.LogicEntityConf[LogicConst.LogicEntityType.Miao].clientComponent = ATComponentRegister
    
    ServerConst.Mode = ServerConst.GameMode.Offline
    ServerConst.IsNeedLoadCommand = false
    ServerConst.IsNeedSaveCommand = false

    local gameType = ServerConst.GameType.GamePlayTypeMiao
    -- 启动宏开关
    PURELOGIC_MIAO_LOGIC_TEST = true
    -- 重写logError的方法，用于记录ErrorCode
    PURELOGIC_MIAO_TEST_ERROE_INFO = 0
    local logError = Debug.LogError
    local logErrorFormat =function(format,...)
        local content = string.format(format,...)
        logError(content)
    end
    function LogicUtil.LogError(...)
        logError(...)
        PURELOGIC_MIAO_TEST_ERROE_INFO = ...;
    end
    ---@param format string %s
    function LogicUtil.LogErrorFormat(format,...)
        logErrorFormat(format,...)
        PURELOGIC_MIAO_TEST_ERROE_INFO = string.format(format,...);
    end

    local logicEntity = nil
    for i = 1, count do
        if logicEntity then
            logicEntity:Close()
        end
        -- 构造一个随机数种子(如果error了，需要记录这个随机数种子，用于本地复现)
        local seedStr = tostring(os.time()):reverse():sub(1, 7)
        local seed = tonumber(seedStr)
        
        logicEntity = LogicEntityUtil.Open(gameType, subId, seed)
        -- 发起模拟的校验逻辑
        logicEntity:SendToServer(Miao.Command.GM.StartAITestRequest,{})
        local errorCode = PURELOGIC_MIAO_TEST_ERROE_INFO or 0
        if errorCode ~= 0 then
            logicEntity:SendToServer(Miao.Command.GM.AITestSaveDataRequest,{Count = i})
            break
        end
    end
    local errorCode = PURELOGIC_MIAO_TEST_ERROE_INFO
    return tostring(errorCode)
end

function PureLogicMiaoLauncher:OnEnter(recordStr, subId)
    --TryStartMiaoCard()
    --do return end
    local saveKey = "X3UIToolKit.MiaoCard.LatestLaunchRecordIndex";
    PlayerPrefs.SetString(saveKey, ServerConst.SaveFileId);
    
    -- 设置随机数种子
    local seedStr = tostring(os.time()):reverse():sub(1, 7)
    local seed = tonumber(seedStr)
    local gameType = ServerConst.GameType.GamePlayTypeMiao
    local entity = LogicEntityUtil.Open(gameType, subId, seed, recordStr)
    subId = entity:GetLevelId()
    GamePlayMgr.Clear()


    if UNITY_EDITOR then
        -- 针对新手关卡，需要启动新手引导
        BllMgr.GetNoviceGuideBLL():Init({}, true)
    end
    
    --TODO 替换enterType
    EventMgr.Dispatch("GamePlayCmd_EnterGame",
            Define.GamePlayEnterType.GamePlayEnterTypeDaily, gameType, subId,
            function()
                LogicUtil.Log(" MiaoGameLauncher , Enter Game!")
            end)
end

--region 校验

--- 运行时 ，校验当前的内容
function PureLogicMiaoLauncher.TryVerifyGame()
    local gameType = ServerConst.GameType.GamePlayTypeMiao
    local entityType = LogicEntityUtil.GetEntityTypeByGameType(gameType);
    local subId = LogicEntityUtil.GetOrCreate(entityType):GetLevelId()
    local saveFileID = ServerConst.SaveFileId
    CS.PapeGames.X3Editor.X3UIToolKitHelper.LaunchServerVerify("Miao",subId,saveFileID)
end

--endregion


--region GM 相关
-- 这里只声明，实现放在脚本最后
local UIText = {}

if Miao == nil then
    require("PureLogic.Const.CommandConst")
end

---@class PureLogicMiaoLauncher.GMParamType 这里需要和C#枚举保持一致
local GMParamType = {
    Number = 1,
    String = 2,
    Bool = 3,
    Seat = 4,
    CardPos = 5,
    CardId = 6,
    CupPos = 7,
    ColorId = 8,
}

local GMConfig = {
    { "开启喵喵牌明牌模式", 1, "miao changebrandstate" },
    { "修改指定角色的手牌", 5, "miao changecard {0} {1} {2}", "角色ID", GMParamType.Seat, "手牌位置", GMParamType.CardPos, "卡牌ID", GMParamType.CardId },
    { "删指定角色指定index的手牌", 4, "miao deletecard {0} {1}", "角色ID", GMParamType.Seat, "手牌位置", GMParamType.CardPos },
    { "修改已放置猫的杯子数字", 4, "miao slotchange {0} {1}", "杯子位置", GMParamType.CupPos, "卡牌ID", GMParamType.CardId },
    { "修改指定杯子的颜色", 4, "miao slotcolorchange {0} {1}", "杯子位置", GMParamType.CupPos, "颜色序号", GMParamType.ColorId },
    { "移除指定杯子上的牌", 3, "miao deleteslot {0}", "杯子位置", GMParamType.CupPos },
    { "修改指定牌堆的下一张牌为指定牌", 3, "miao changepile {0}", "卡牌ID", GMParamType.CardId },
    { "清空功能牌牌堆", 2, "miao deletefuncpile" },
    { "给指定角色发指定手牌", 4, "miao getcard {0} {1}", "角色ID", GMParamType.Seat, "卡牌ID", GMParamType.CardId },
    { "跳过喵喵牌动画", 1, "miao skipanimation" },
    { "开启喵喵牌日志开关", 1, "miao changelogstate" },
    { "禁止男主当前出任意功能牌和数字牌", 2, "miao banplaycard" },
    { "禁止男主本次使用否决（生效1次）", 2, "miao banvetoonce" },
    { "强制男主本次使用否决（生效1次）", 2, "miao forceplayvetoonce" },
    { "按照出牌列表出牌1次（仅男主）", 3, "catcard playfunccardseq {0}", "例如[2 2201 2212](出2张 第一张为2201 第二张为2212)", GMParamType.String },
    { "开启喵喵牌约会日志开关", 1, "miao changedatelogstate" },
}

--- 读取难度配置表
function PureLogicMiaoLauncher.LoadDiffConfig()
    --local LuaCfgMgr = require("Runtime.Common.LuaCfgMgr")
    ---@type cfg.MiaoCardDifficulty[]
    local cfgs = LuaCfgMgr.GetAll("MiaoCardDifficulty")
    local tb = {}
    for id, cfg in pairs(cfgs) do
        local t = {
            ["ID"] = id,
            ["Name"] = UIText[id] or cfg.ID,
            ["Man"] = cfg.ManType,
        }
        table.insert(tb, t)
    end
    local json = JsonUtil.Encode(tb)
    return json
end

--- 加载GM配置
function PureLogicMiaoLauncher.LoadGMConfig()
    local gmTable = {}
    for _, v in pairs(GMConfig) do
        local t = {
            ["Name"] = v[1],
            ["Type"] = v[2],
            ["Command"] = v[3],
            ["Param1Des"] = v[4],
            ["Param1Type"] = v[5],
            ["Param2Des"] = v[6],
            ["Param2Type"] = v[7],
            ["Param3Des"] = v[8],
            ["Param3Type"] = v[9],
        }
        table.insert(gmTable, t)
    end
    local json = JsonUtil.Encode(gmTable)
    return json
end

--- 执行GM
---@param command string
---@param type number
---@vararg any
function PureLogicMiaoLauncher.ExecuteGMRequest(command, type, ...)
    local param = {...}
    if type == 1 then
        BllMgr.Get("GMCommandBLL"):SendToggleClientGM(command, param[1])
    else
        BllMgr.Get("GMCommandBLL"):SendClientGM(command)
    end
end

--endregion

UIText = {
    [101]    = "基础版-ST",
    [102]    = "基础版-YS",
    [103]    = "基础版-YG",
    [104]    = "基础版-FY",
    [105]    = "基础版-RY",
    -- 明牌
    [201]    = "明牌版-ST",
    [202]    = "明牌版-YS",
    [203]    = "明牌版-YG",
    [204]    = "明牌版-FY",
    [205]    = "明牌版-RY",
    -- 功能
    [301]    = "功能版-ST",
    [302]    = "功能版-YS",
    [303]    = "功能版-YG",
    [304]    = "功能版-FY",
    [305]    = "功能版-RY",
    -- 积分
    [401]    = "积分版-ST",
    [402]    = "积分版-YS",
    [403]    = "积分版-YG",
    [404]    = "积分版-FY",
    [405]    = "积分版-RY",
    -- 宾果
    [501]    = "宾果版-ST",
    [502]    = "宾果版-YS",
    [503]    = "宾果版-YG",
    [504]    = "宾果版-FY",
    [505]    = "宾果版-RY",
    -- 基础新手
    [901]    = "基础版-ST新手",
    [902]    = "基础版-YS新手",
    [903]    = "基础版-YG新手",
    [904]    = "基础版-FY新手",
    [905]    = "基础版-RY新手",
    -- 功能新手
    [1001]   = "功能版-ST新手",
    [1002]   = "功能版-YS新手",
    [1003]   = "功能版-YG新手",
    [1004]   = "功能版-FY新手",
    [1005]   = "功能版-RY新手",
}

return PureLogicMiaoLauncher