---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2021/4/2 17:44
---
require("Editor.Misc.CfgTools.BaseCfgHandler")
require("Editor.Misc.CfgTools.CfgTypeDefine")
local SPLIT = "-"
local TableToStr,ToStringEx

ToStringEx =   function (value)
    if value == nil then
        return value
    end
    local v_type = type(value)
    if v_type=='table' then
        return TableToStr(value)
    elseif v_type == "function" then
        return value()
    elseif v_type=='string' then
        return "\'"..value.."\'"
    else
        return tostring(value)
    end
end

TableToStr =  function (t)
    if t == nil then return "" end
    local retstr= "{"

    local i = 1
    local key_type
    for key,value in pairs(t) do
        local signal = ","
        if i==1 then
            signal = ""
        end
        if key == i then
            retstr =  string.concat(retstr,signal,ToStringEx(value))
        else
            key_type = type(key)
            if key_type == "number" then
                retstr =  string.concat(retstr,signal,'[',ToStringEx(key),"]=",ToStringEx(value))
            elseif key_type == "string" then
                retstr = string.concat(retstr,signal,key,"=",ToStringEx(value))
            else
                retstr = string.concat(retstr,signal,key,"=",ToStringEx(value))
            end
        end

        i = i+1
    end

    retstr = retstr.."}"
    return retstr
end

local function GetCfgStr(cfg_name,name_idx)
    local cfg = LuaCfgMgr.GetAll(cfg_name,name_idx)
    local is_mutil = LuaCfgMgr.IsMultiKey(cfg_name)
    local res ={}
    if cfg then
        for k,v in pairs(cfg) do
            if is_mutil then
                for m,n in pairs(v) do
                    local t = {}
                    for j,h in pairs(n) do
                        local st = h
                        if st~=nil then
                            if type(st) == "table" or type(st) == "function" then
                                st = ToStringEx(table.clone(st,true))
                            end
                        end
                        t[j] = tostring(st)
                    end
                    res[string.concat(k,SPLIT,m)] = t
                end
            else
                local t = {}
                for m,n in pairs(v) do
                    local st = n
                    if st~=nil then
                        if type(st) == "table" or  type(st) == "function" then
                            st = ToStringEx(table.clone(st,true))
                        end
                    end
                    t[m] = tostring(st)
                end
                res[tostring(k)] = t
            end
        end
    end
    return res
end

---保存配置表
local function SaveCfg(cfg_name,cfg)
    if not LUA_CFG_PATH then
        local asset_path = CS.UnityEngine.Application.dataPath
        LUA_CFG_PATH = string.gsub(asset_path,"Client/Assets","Binaries/Tables/LuaCfg/")
        os.remove = CS.System.IO.File.Delete
        io.writefile = CS.System.IO.File.WriteAllText
    end
    local t = {}
    for k,v in pairs(cfg) do
        local s = string.split(k,SPLIT)
        local key = tonumber(s[1])
        local key2
        table.remove(s,1)
        if not t[key] then
            t[key] = {}
        end
        if #s>=1 then
            key2 = tonumber(s[1])
        end
        local t_cfg = {}
        local o = LuaCfgMgr.Get(cfg_name,key,key2)
        if o then
            for m,n in pairs(v) do
                if o[m]~=nil then
                    local _type = type(o[m])
                    if _type ~= type(n) then
                        n = load(string.concat("return ",n))()
                    end
                    o[m] = n
                    t_cfg[m] = n
                else
                    if n~= "nil" then
                        if n == "true" or n == "false" then
                            n = load(string.concat("return ",n))()
                        else
                            n = tonumber(n)~=nil and tonumber(n) or n
                        end
                        t_cfg[m] = n
                        o[m] = n
                    end
                end
            end
        end
        if key2 then
            t[key][key2] = t_cfg
        else
            t[key] = t_cfg
        end
    end
    local file_path = string.concat(LUA_CFG_PATH,string.replace(cfg_name,".","/"),".lua")
    BaseCfgHandler:WriteFile(file_path,t,LuaCfgMgr.IsMultiKey(cfg_name))
    print("[保存文件成功]",file_path)
end


return {GetCfgStr = GetCfgStr,SaveCfg = SaveCfg}