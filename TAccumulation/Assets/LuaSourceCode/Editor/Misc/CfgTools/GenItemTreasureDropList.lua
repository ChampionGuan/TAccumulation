---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aoliao.
--- DateTime: 2023/9/28 14:37
---
--- 本类使用了自动检索所有道具的来源，并生成对应的配置表
---@class GenItemTreasureDropList:BaseCfgHandler
local GenItemTreasureDropList = class("GenItemTreasureDropList", BaseCfgHandler)

---入口
function GenItemTreasureDropList:Execute()
    local file_path = LUA_CFG_PATH .. "ItemTreasureDropList.lua"
    local item_source_list = self:GetPackItemRewardList()
    self:WriteFile(file_path, item_source_list,true)
end
---@param retTab table 引用数组
function GenItemTreasureDropList:GetPackItemRewardList(retTab)
    if not retTab then
        retTab = {}
    end
    local result = {}
    local itemTreasureCfg = LuaCfgMgr.GetAll("ItemTreasure")
    for k, v in pairs(itemTreasureCfg) do
        self:GetPackItemReward(result,v.Id)
    end
    return result
end
---@param retTab table 引用数组
---@param itemId int
---@return table<cfg.s3int> 其中新增isMust 字段代表必定掉落的奖励
function GenItemTreasureDropList:GetPackItemReward(retTab, itemId)
    if not retTab then
        retTab = {}
    end
    if not retTab[itemId] then
        local itemTreasureCfg = LuaCfgMgr.Get("ItemTreasure", itemId)
        if not itemTreasureCfg then
            Debug.LogError("ItemTreasure have not ID => ",itemId)
            return nil
        end
        retTab[itemId] = {}
        local CertainlyDropShow = itemTreasureCfg.CertainlyDropShow ~= nil and #itemTreasureCfg.CertainlyDropShow ~= 0
        local ProbableDropShow = itemTreasureCfg.ProbableDropShow ~= nil and #itemTreasureCfg.ProbableDropShow ~= 0
        local mustDroppingProbability = 1
        if CertainlyDropShow then ---假数据
         for i, v in ipairs(itemTreasureCfg.ProbableDropShow) do
                v.isMust = true
                v.DroppingProbability = mustDroppingProbability
                table.insert(retTab[itemId],self:GenData(v))
            end
        end
        if ProbableDropShow then ---假数据
            for i, v in ipairs(itemTreasureCfg.ProbableDropShow) do
                table.insert(retTab[itemId],self:GenData(v))
            end
        end
        if (not (CertainlyDropShow and ProbableDropShow)) and itemTreasureCfg.ArrayDrop then
            for i, v in ipairs(itemTreasureCfg.ArrayDrop) do
                local items = {}
                local rawItems = {}
                for j, k in pairs(LuaCfgMgr.GetAll("Drop")) do
                    if v == k.GroupID then
                        if k.Item then
                            table.insert(rawItems,k)
                        end
                    end
                end
                ---排序，按Drop表ID从小到大
                table.sort(rawItems,function (a,b)
                    return a.ID < b.ID
                end)
                for j, k in ipairs(rawItems) do
                    for m, n in ipairs(k.Item) do
                        n.Weight = k.Weight
                        table.insert(items,self:GenData(n))
                    end
                end
                local itemsLength = #items
                local totalWeight  = 0---总掉落权重
                if itemsLength ~= 1 then
                    for m, n in ipairs(items) do
                        if n.Weight then
                            totalWeight = n.Weight + totalWeight---计算总权重
                        end
                    end
                end

                for m, n in ipairs(items) do
                    if itemsLength == 1 then ---如果掉落物只有一种则是必掉
                        n.isMust = true
                        n.DroppingProbability = mustDroppingProbability
                        if not CertainlyDropShow then
                            table.insert(retTab[itemId],self:GenData(n))
                        end
                    else
                        if not ProbableDropShow then
                            if  n.Weight then
                                n.DroppingProbability = n.Weight/totalWeight---计算单个掉落概率
                            end
                            table.insert(retTab[itemId],self:GenData(n))
                        end
                    end
                end
            end
        end
        local resultCopy1 = {}
        local resultCopy2 = {}
        for i, v in ipairs(retTab[itemId]) do
            if v.isMust then ---必掉落的冒泡在前
                table.insert(resultCopy1,v)
            else
                table.insert(resultCopy2,v)
            end
        end
        table.insertto(resultCopy1, resultCopy2)
        retTab[itemId] = resultCopy1
        if #retTab[itemId] == 0 then
            retTab[itemId] = nil
        end
    end
    return retTab[itemId]
end

function GenItemTreasureDropList:GenData(v)
    return { ID = v.ID or 0, Num = v.Num or 0, Type = v.Type or 0 ,Weight = v.Weight or 0 , DroppingProbability = v.DroppingProbability or 0 , isMust = v.isMust or false}
end
return GenItemTreasureDropList