---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2021/1/18 10:52
---考虑到脱离引擎，这边会做一些特殊类型处理

local _metable = {__tostring = function (self)
    local values = self.values
    local concats = {}
    local length = #values
    if self.type ~= nil then
        table.insert(concats,self.type)
        table.insert(concats,"(")
    end
    for k,v in ipairs(values) do
        table.insert(concats,v)
        if k~=length then
            table.insert(concats,",")
        end
    end
    if self.type ~=nil then
        table.insert(concats,")")
    end
    return string.concat(table.unpack(concats))
end}

local BaseType = { }

function BaseType.new(type,...)
    local t = {}
    t.type = type
    t.values = { ... }
    setmetatable(t,_metable)
    return function()
        return tostring(t), t
    end
end

---@return Vector2
Vector2 = function (...)
    return BaseType.new("Vector2",...)
end

---@return Vector3
Vector3 = function (...)
    return BaseType.new("Vector3",...)
end

---@return Vector4
Vector4 = function (...)
    return BaseType.new("Vector4",...)
end

FInt = function(...)
    return BaseType.new("FInt",...)
end

FIntM = function(...)
    return BaseType.new("FIntM",...)
end

FVector3M = function(...)
    return BaseType.new("FVector3M",...)
end

LuaStr = function(...)
    local baseType = BaseType.new(nil,...)
    local str,cls = baseType()
    cls.is_need_do_string = true
    return baseType
end

FIntTM = function(...)
    return BaseType.new("FIntTM",...)
end

---@return Int
FIntGet = function(f)
    local _, t = f()
    return t.values[1]
end