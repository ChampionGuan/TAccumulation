---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2021/1/28 17:24
--- 本类使用了自动检索所有道具的来源，并生成对应的配置表
---@class GenItemSourceList:BaseCfgHandler
---@class GenItemSourceList:BaseCfgHandler
local GenItemSourceList = class("GenItemSourceList", BaseCfgHandler)

---入口
function GenItemSourceList:Execute()
    local file_path = LUA_CFG_PATH .. "ItemSourceList.lua"
    local shop_map, shopPack_map = self:GetShopMap()
    local common_stage_map = self:GetCommonStateMap()
    local drop_loot_map = self:GetDropAndLootMap()
    local love_reward_map = self:GetLoveRewardMap()

    local item_source_list = self:GetItemList(common_stage_map, shop_map, shopPack_map, drop_loot_map, love_reward_map)
    self:WriteFile(file_path, item_source_list)
end

---获取来源
function GenItemSourceList:GetItemList(common_stage_map, shop_map, shopPack_map, drop_loot_map, love_reward_map)
    local map_list = {}
    local item_cfg = LuaCfgMgr.GetAll("Item")
    for k, v in pairs(item_cfg) do
        local item_id = v.ID
        local item_type = LuaCfgMgr.Get("ItemType", v.Type)
        if item_type and v.ExamineInclude ~= 2 then
            local needGenSource = item_type.AutoItemSourceControl ~= 0
            if v.OverrideAutoItemSource == 1 then
                needGenSource = true
            elseif v.OverrideAutoItemSource == -1 then
                needGenSource = false
            end
            if needGenSource then
                local rawList = {}
                table.insertto(rawList,self:GetSourceList(item_id,shop_map))
                table.insertto(rawList,self:GetSourceList(item_id,shopPack_map))
                table.insertto(rawList,self:GetSourceList(item_id,common_stage_map))
                table.insertto(rawList,self:GetSourceList(item_id,drop_loot_map))
                table.insertto(rawList,self:GetSourceList(item_id,love_reward_map))

                local list = {}
                if item_type.AutoItemSourceFilter == nil or #item_type.AutoItemSourceFilter == 0 then
                    list = rawList
                else
                    local filter = {}
                    for _ ,v in pairs(item_type.AutoItemSourceFilter) do
                        filter[v] = true
                    end
                    for i = 1, #rawList do
                        if filter[rawList[i].ID] then
                            table.insert(list, rawList[i])
                        end
                    end
                end

                if #list >0 then
                    map_list[item_id] = {ID = item_id,AutoSource = list }
                end
            end
        else
            if item_type == nil then
                error("itemType not exist","item_id",item_id)
            else
                print("提审限定道具：",item_id)
            end
        end
    end
    return map_list
end

---根据map获取来源
function GenItemSourceList:GetSourceList(item_id, map)
    local list = {}
    local cmp = map[item_id]
    if cmp then
        for _, v in pairs(cmp) do
            table.insert(list, v)
        end
    end
    if #list>=2 then
        table.sort(list,function(a,b)
            if a.ID~=b.ID then
                return a.ID<b.ID
            end
            if a.Num~=b.Num then
                return a.Num<b.Num
            end
            if a.Type~=b.Type then
                return a.Type<b.Type
            end
        end)
    end
    return list
end

---商店
function GenItemSourceList:GetShopMap()
    local shop_group = LuaCfgMgr.GetAll("ShopGroup")
    local shop_map = {}
    local shopPack_map = {}
    local _shopType = 102
    local _packType = 103

    for k, v in pairs(shop_group) do
        local shop_id = v.ShopID
        if v.OnSale ~= 0 and v.ExamineInclude ~= 2 then
            local shop = LuaCfgMgr.Get("ShopAll", shop_id)
            if shop and shop.OpenOrClose ~= 0 and shop.ExamineInclude ~= 2 then
                if v.ItemID then
                    for i = 1, #v.ItemID do
                        local tempItem = v.ItemID[i]
                        local id = tempItem.ID
                        if self:CheckItemIdValid(id, tempItem.Type, true, "ShopAll表中ItemID字段") then
                            local map = shop_map[id]
                            if not map then
                                map = {}
                                shop_map[id] = map
                            end
                            if not map[shop_id] then
                                map[shop_id] = self:GenData(_shopType, shop_id)
                            end
                        end

                    end
                end
                if v.IsPack ~= 0 then
                    local packCfg = LuaCfgMgr.Get("ShopPack", v.IsPack)
                    if packCfg and packCfg.PackItemID and packCfg.ExamineInclude ~= 2 then
                        for i = 1, #packCfg.PackItemID do
                            local tempItem = packCfg.PackItemID[i]
                            local id = tempItem.ID
                            if self:CheckItemIdValid(id, tempItem.Type, true, "ShopPack表中ItemID字段") then
                                local map = shopPack_map[id]
                                if not map then
                                    map = {}
                                    shopPack_map[id] = map
                                end
                                if not map[v.ID] then
                                    map[v.ID] = self:GenData(_packType, shop_id, v.ID)
                                end
                            end

                        end
                    end
                end
            end
        end

    end
    return shop_map, shopPack_map
end

---主线
function GenItemSourceList:GetCommonStateMap()
    local cfg = LuaCfgMgr.GetAll("CommonStageEntry")
    local common_map = {}
    local _type = 101

    local function Check(data_list, statge_id, cfg_name)
        if not data_list then
            return
        end
        for _, d in pairs(data_list) do
            local item_id = d.ID
            if self:CheckItemIdValid(item_id, d.Type,true, cfg_name) and d.ExamineInclude ~= 2 then
                local map = common_map[item_id]
                if not map then
                    map = {}
                    common_map[item_id] = map
                end
                if not map[statge_id] then
                    map[statge_id] = self:GenData(_type, statge_id)
                end
            end
            
        end
    end
    local condition = {}
    for k, v in pairs(cfg) do
        if v.Type == 1 and v.ExamineInclude ~= 2 then
            Check(v.FirstReward, v.ID, "主线首通奖励")
            --主线奖励
        --    local rewards = v.CommonReward
        --    local statge_id = v.ID
        --    if rewards then
        --        for m, n in pairs(rewards) do
        --            local drop_id = n.ID
        --            condition.GroupID = drop_id
        --            local dropList = LuaCfgMgr.GetListByCondition("Drop", condition)
        --            if #dropList > 0 then
        --                for _, drop in pairs(dropList) do
        --                    Check(drop.Item, statge_id, "Drop表中Item字段")
        --                end
        --            else
        --                error("CommonStageEntry中CommonReward字段中的dropGroupId,未在Drop中找到drop", "stageId:", statge_id, "drop_group_id", drop_id)
        --            end
        --        end
        --    end
        --    local loot_ids = v.LootID
        --    if loot_ids then
        --        for m, n in pairs(loot_ids) do
        --            local loot = LuaCfgMgr.Get("Loot", n)
        --            if loot and loot.ExamineInclude ~= 2 then
        --                local ItemIDYieldNum = loot.ItemIDYieldNum
        --                if loot.FixItemIDYieldNum then
        --                    if not ItemIDYieldNum then
        --                        ItemIDYieldNum = {}
        --                    end
        --                    table.insertto(ItemIDYieldNum, loot.FixItemIDYieldNum)
        --                end
        --                if ItemIDYieldNum then
        --                    Check(ItemIDYieldNum, statge_id, "Loot表中ItemIDYieldNum字段")
        --                end
        --            else
        --                error("lootID not exist", "stageId", statge_id, "lootID", n)
        --            end
        --        end
        --    end
        end
    end
    return common_map
end

---掉落
function GenItemSourceList:GetDropAndLootMap()
    local drop_loot_map = {}

    local function Check(data_list, ItemSource, cfg_name)
        if data_list then
            for k, v in pairs(data_list) do
                local item_id = v.ID
                if self:CheckItemIdValid(item_id, v.Type,true, cfg_name) then
                    local map = drop_loot_map[item_id]
                    if not map then
                        map = {}
                        drop_loot_map[item_id] = map
                    end
                    if not map[ItemSource] then
                        map[ItemSource] = self:GenData(ItemSource, 0)
                    end
                end
                
            end
        end
    end

    ---遍历drop
    for k, v in pairs(LuaCfgMgr.GetAll("Drop")) do
        local drop_id = v.ID
        local ItemSource = v.ItemSource
        if ItemSource ~= 0 and v.ExamineInclude ~= 2 then
            Check(v.Item, ItemSource, "Drop表中ItemSource字段")
        end

    end

    ---遍历loot
    for k, loot in pairs(LuaCfgMgr.GetAll("Loot")) do
        local ItemSource = loot.ItemSource
        if ItemSource ~= 0 and loot.ExamineInclude ~= 2 then
            local ItemIDYieldNum = loot.ItemIDYieldNum
            if loot.FixItemIDYieldNum then
                if not ItemIDYieldNum then
                    ItemIDYieldNum = {}
                end
                table.insertto(ItemIDYieldNum, loot.FixItemIDYieldNum)
            end
            if ItemIDYieldNum then
                Check(ItemIDYieldNum, ItemSource, "Loot表中FixItemIDYieldNum字段")
            end
        end
    end

    return drop_loot_map

end

function GenItemSourceList:GetLoveRewardMap()
    local love_reward_map ={}
    local loveRewardId = 104

    local function Check(rewardCfg, cfg_name)
        if rewardCfg and rewardCfg.Reward and rewardCfg.ExamineInclude ~= 2 then
            for k, v in pairs(rewardCfg.Reward) do
                local item_id = v.ID
                if self:CheckItemIdValid(item_id, v.Type,true, cfg_name) then
                    local map = love_reward_map[item_id]
                    if not map then
                        map = {}
                        love_reward_map[item_id] = map
                    end
                    if not map[rewardCfg.ID] then
                        map[rewardCfg.ID] = self:GenData(loveRewardId, rewardCfg.RoleID, rewardCfg.LevelID)
                    end
                end

            end
        end
    end


    local allLoveReward = LuaCfgMgr.GetAll("LovePointReward")
    for k, v in pairs(allLoveReward) do
        for kk, vv in pairs(v) do
            Check(vv, "LovePointReward表中Reward字段")
        end
    end
    return love_reward_map
end

function GenItemSourceList:CheckItemIdValid(item_id,item_type, is_log, cfg_des)
    local itemType = LuaCfgMgr.Get("ItemType",item_type)
    ---虚拟导表不收集
    if itemType and itemType.Virtual == 1 then
        return false
    end
    local item = LuaCfgMgr.Get("Item", item_id)
    local is_valid = item and item.ExamineInclude ~= 2
    if not is_valid and is_log then
        if not item then
            error(string.format("道具[%s]在[%s]中被使用,但是item表中没有配置该道具", item_id, cfg_des))
        else
            print(string.format("提审限定道具[%s]在[%s]中被使用，不导出获取途径", item_id, cfg_des))
        end
    end
    return is_valid
end

function GenItemSourceList:GenData(id, num, type)
    return { ID = id, Num = num, Type = type or 0}
end

return GenItemSourceList