---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/5/18 21:21
---
local LUA_CFG = "LuaCfg"
local LUA_DB_CFG = "DBCfg"
local LANGUAGE_PATH = "Locale"
LUA_CFG_PATH = LUA_BINARY_PATH .. "/LuaCfg/"
LUA_BATTLE_CFG = LUA_CFG_PATH .. "Battle/Config/"
LOCAL_PATH = string.format("%s/%s/", LUA_BINARY_PATH, LANGUAGE_PATH)
LOCAL_REGION_PATH = string.format("%s/%s/", LUA_BINARY_PATH, "LocaleRegion")
LOCAL_SOUND_PATH = string.format("%s/%s/", LUA_BINARY_PATH, "LocaleSound")
OUT_JSON_PATH = LUA_BINARY_PATH .. "/JsonCfg/LuaToJson"
LUA_CFG_DIR_NAME = LUA_CFG

require("LuaStart")
require("Editor.Misc.CfgTools.BaseCfgHandler")

-------------------------------Start：顺序很重要，CfgTypeDefine必须在最后，因为CfgTypeDefine改变了全局函数，比如FInt
require("Editor.Misc.CfgTools.CfgTypeDefine")
-------------------------------End：顺序很重要，CfgTypeDefine必须在最后，因为CfgTypeDefine改变了全局函数，比如FInt

---@class LanguageTag
---@field ZH_CN string
---@field ZH_TW string
---@field EN_US string
---@field JA_JP string
---@field KO_KR string
LanguageTag = {
    --中文简体（中国大陆）
    ZH_CN = "zh-CN",
    --中文繁体（港澳台）
    ZH_TW = "zh-TW",
    --英文
    EN_US = "en-US",
    --日本语
    JA_JP = "ja-JP",
    --韩国语
    KO_KR = "ko-KR"
}

---@class LuaLocalType
LuaLocalType = {
    Base = 0, --通用
    Local = 1, --多语言
    Audio = 2, --多语音
    Region = 3, --多地区
}

---@class LuaRegionType
LuaRegionType = {
    US = "US",
    TW = "TW",
    KR = "KR",
    JP = "JP",
    CN = "CN",
}

local LanguageToRegion = {
    [LanguageTag.ZH_CN] = LuaRegionType.CN,
    [LanguageTag.ZH_TW] = LuaRegionType.TW,
    [LanguageTag.EN_US] = LuaRegionType.US,
    [LanguageTag.JA_JP] = LuaRegionType.JP,
    [LanguageTag.KO_KR] = LuaRegionType.KR,
}

LuaCfgMgr.SetLog(nil, nil, error)
LuaCfgMgr.SetWriteEnable(true)

if not IS_CFG_DEBUG then
    LuaCfgMgr.SetCfgDir("")
end

---@param key string
---@param name_id int
---@param language string
---@param language LanguageTag
function LuaCfgMgr.GetByLanguage(key, name_id, language)
    if language ~= nil and language ~= "" then
        LuaCfgMgr.SetCfgDir(IS_CFG_DEBUG and string.format("%s.%s.%s.", LANGUAGE_PATH, language, LUA_CFG) or string.format("%s/%s/", language, LUA_CFG))
    end
    local cfgPath = GetCfgPathByLanguage(key, language)
    if not io.exists(cfgPath) then
        error(string.format("该表[%s]未配置多语言，请联系相关策划确认一下",cfgPath))
        return nil
    end
    LuaCfgMgr.UnLoad(key, name_id)
    return LuaCfgMgr.Get(key, name_id)
end

---@param key string
---@param name_id int
---@param language string
---@param language LanguageTag
function LuaCfgMgr.GetAllByLanguage(key, name_id, language)
    language = language or LanguageTag.ZH_CN
    if language ~= nil and language ~= "" then
        LuaCfgMgr.SetCfgDir(IS_CFG_DEBUG and string.format("%s.%s.%s.", LANGUAGE_PATH, language, LUA_CFG) or string.format("%s/%s/", language, LUA_CFG))
    end
    local cfgPath = GetCfgPathByLanguage(key, language)
    if not io.exists(cfgPath) then
        error(string.format("[%s]该表未配置多语言，请联系相关策划确认一下",key))
        LuaCfgMgr.ResetDirPath()
        return LuaCfgMgr.GetAll(key, name_id)
    end
    LuaCfgMgr.UnLoad(key, name_id)
    return LuaCfgMgr.GetAll(key, name_id)
end

function LuaCfgMgr.ResetDirPath()
    LuaCfgMgr.SetCfgDir(LUA_CFG .. ".")
end

---@param fileName string
---@param language LanguageTag
---@return string
function GetCfgPathByLanguage(fileName, language)
    if language ~= nil and language ~= "" then
        return string.format("%s%s/%s/%s.lua", LOCAL_PATH, language, LUA_CFG, fileName)
    end
    return string.format("%s/%s/%s.lua", LUA_BINARY_PATH, LUA_CFG, fileName)
end

---@param fileName string
---@param regionType LuaRegionType
---@return string
function GetCfgPathByRegion(fileName, regionType)
    if regionType ~= nil and regionType ~= "" then
        return string.format("%s%s/%s/%s.lua", LOCAL_REGION_PATH, regionType, LUA_CFG, fileName)
    end
    return string.format("%s/%s/%s.lua", LUA_BINARY_PATH, LUA_CFG, fileName)
end

---@param fileName string
---@param language LanguageTag
---@return string
function GetCfgPathBySound(fileName, language)
    if language ~= nil and language ~= "" then
        return string.format("%s%s/%s/%s.lua", LOCAL_SOUND_PATH, language, LUA_CFG, fileName)
    end
    return string.format("%s/%s/%s.lua", LUA_BINARY_PATH, LUA_CFG, fileName)
end

---@param language LanguageTag
---@return LuaRegionType
function GetRegionTypeByLanguageType(language)
    return LanguageToRegion[language]
end

---@param fileName string
---@param language LanguageTag
---@return string
function GetDBPathByLanguage(fileName, language)
    if language ~= nil and language ~= "" then
        return string.format("%s%s/%s/%s.db", LOCAL_PATH, language, LUA_DB_CFG, fileName)
    end
    return string.format("%s/%s/%s.db", LUA_BINARY_PATH, LUA_DB_CFG, fileName)
end