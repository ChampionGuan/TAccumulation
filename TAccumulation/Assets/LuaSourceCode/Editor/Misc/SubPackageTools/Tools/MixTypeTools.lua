---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianxin.
--- DateTime: 2022/5/10 17:14
---

local MixTypeTools = class("MixTypeTools")

local X3AssetSubPackageTool = CS.X3GameEditor.SubPackage.X3AssetSubPackageTool

local MixType = {
    CutScene1 = "CutScene1",
    Dialogue1 = "Dialogue1",
    Dialogue2 = "Dialogue2",
    RoleClothSuit1 = "RoleClothSuit1",
    PrefabAbbr1 = "PrefabAbbr1",
    PrefabAbbr2 = "PrefabAbbr2",
    FaceTexture = "FaceTexture",
    BattleStage = "BattleStage",
    BattleStage = "BattleStage",
    PhotoExtraPart = "PhotoExtraPart",
    UIAbbrGif = "UIAbbrGif",
    PhoneCon = "PhoneCon",
    PhoneMoment = "PhoneMoment",
    BattleBuff = "BattleBuff",
    BattleSkill3 = "BattleSkill3",
    CharacterAsset1 = "CharacterAsset1",
    AI = "AI",
    BlushAnim = "BlushAnim",
    TextureAbbr1 = "TextureAbbr1",
}

function MixTypeTools:Init()

end

---@return SubPackageConst.AssetResData[]
function MixTypeTools:MixTypeDispose(tab, examineInclude)
    local resDataTab = {}
    for k, v in pairs(tab) do
        table.insertto(resDataTab, self:MixTypeDisposeWithType(k, v, examineInclude))
    end
    return resDataTab
end

function MixTypeTools:MixTypeDisposeWithType(mixType, value, examineInclude)
    local resDataTab = {}
    if mixType == MixType.CutScene1 then
        table.insertto(resDataTab, self:CutScene1Type(value, examineInclude))
    elseif mixType == MixType.Dialogue1 then
        table.insertto(resDataTab, self:Dialogue1Type(value, examineInclude))
    elseif mixType == MixType.Dialogue2 then
        table.insertto(resDataTab, self:Dialogue2Type(value, examineInclude))
    elseif mixType == MixType.RoleClothSuit1 then
        table.insertto(resDataTab, self:RoleClothSuit1Type(value, examineInclude))
    elseif mixType == MixType.PrefabAbbr1 then
        table.insertto(resDataTab, self:PrefabAbbr1Type(value, examineInclude))
    elseif mixType == MixType.PrefabAbbr2 then
        table.insertto(resDataTab, self:PrefabAbbr2Type(value, examineInclude))
    elseif mixType == MixType.FaceTexture then
        table.insertto(resDataTab, self:FaceTextureType(value, examineInclude))
    elseif mixType == MixType.BattleStage then
        table.insertto(resDataTab, self:BattleStageType(value, examineInclude))
    elseif mixType == MixType.PhotoExtraPart then
        table.insertto(resDataTab, self:PhotoExtraPartType(value, examineInclude))
    elseif mixType == MixType.UIAbbrGif then
        table.insertto(resDataTab, self:UIAbbrGifType(value, examineInclude))
    elseif mixType == MixType.PhoneCon then
        table.insertto(resDataTab, self:PhoneConType(value, examineInclude))
    elseif mixType == MixType.PhoneMoment then
        table.insertto(resDataTab, self:PhoneMomentType(value, examineInclude))
    elseif mixType == MixType.BattleBuff then
        table.insertto(resDataTab, self:BattleBuffType(value, examineInclude))
    elseif mixType == MixType.BattleSkill3 then
        table.insertto(resDataTab, self:BattleSkill3Type(value, examineInclude))
    elseif mixType == MixType.CharacterAsset1 then
        table.insertto(resDataTab, self:CharacterAsset1Type(value, examineInclude))
    elseif mixType == MixType.AI then
        table.insertto(resDataTab, self:AIType(value, examineInclude))
    elseif mixType == MixType.BlushAnim then
        table.insertto(resDataTab, self:BlushAnimType(value, examineInclude))
    elseif mixType == MixType.TextureAbbr1 then
        table.insertto(resDataTab, self:TextureAbbrType(value, examineInclude))
    end
    return resDataTab
end

---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:CutScene1Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        local stringTab = string.split(v, "|")
        for i, v1 in ipairs(stringTab) do
            local valueTab = string.split(v1, "=")
            local cutSceneName = valueTab[2]
            ---@type SubPackageConst.AssetResData
            local assetData = {}
            assetData.type = "CutScene"
            assetData.value = cutSceneName
            assetData.source = source
            assetData.examineInclude = examineInclude
            resDataTab[#resDataTab + 1] = assetData
        end
    end
    return resDataTab
end

---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:Dialogue1Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        local stringTab = string.split(v, "|")
        for i, v1 in ipairs(stringTab) do
            local valueTab = string.split(v1, "=")
            local dialogID = valueTab[2]
            table.insertto(resDataTab, TableTypeTools:GetTableTypeRes("DialogueInfo", dialogID, source, examineInclude))
        end
    end
    return resDataTab
end

---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:Dialogue2Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        table.insertto(resDataTab, TableTypeTools:GetTableTypeRes("DialogueInfo", v[1], source, examineInclude))
    end
    return resDataTab
end

---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:RoleClothSuit1Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        local stringTab = string.split(v, "=")
        table.insertto(resDataTab, TableTypeTools:GetTableTypeRes("RoleClothSuit", stringTab[3], source, examineInclude))
    end
    return resDataTab
end

---拍照动作中携带的部件
---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:PhotoExtraPartType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        local stringTab = string.split(v, "=")
        table.insertto(resDataTab, TableTypeTools:GetTableTypeRes("PartConfig", stringTab[2], source, examineInclude))
    end
    return resDataTab
end

---GIFMIX处理
---@param arg table<string> || string
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:UIAbbrGifType(arg, examineInclude)
    local resDataTab = {}
    if(type(arg) == "table") then
        for source, v in pairs(arg) do
            self:HandleGifType(v, resDataTab)
        end
    else
        self:HandleGifType(arg, resDataTab)
    end
    return resDataTab
end

---GIF虽然改为了索引表，但是保留下批量的支持 12.1 - dl
function MixTypeTools:HandleGifType(v, resDataTab)
    local gifImgInfo = LuaCfgMgr.GetDataByCondition("GifImg", { Prefix = v })
    local gifCount = LuaCfgMgr.Get("GifImgFrame", gifImgInfo.StringKey)
    for i = 1, #gifCount do
        local assetData = {}
        assetData.source = source
        assetData.type = SubPackageConst.ResType.UIAbbr1
        assetData.examineInclude = examineInclude
        assetData.value = string.format("%s_%03d", v, i)
        resDataTab[#resDataTab + 1] = assetData
    end
end

----Mix.PrefabAbbr1 类型 通过 value 在item表里 查找Model字段 再根据type 和 subType进行  娃娃机资源 type:103 subType:2
---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:PrefabAbbr1Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        local condition = {}
        condition["Model"] = v
        local dataTab = LuaCfgMgr.GetListByCondition("Item", condition)
        if #dataTab > 0 then
            local itemData = dataTab[1]
            if itemData.Type == 103 or itemData.SubType == 2 then
                ---@type SubPackageConst.AssetResData
                local assetData = {}
                assetData.source = source
                assetData.type = "Prefab"
                assetData.examineInclude = examineInclude
                assetData.value = string.concat("Assets/Build/Res/GameObjectRes/Entity/Dating/Item/", v, ".prefab")
                resDataTab[#resDataTab + 1] = assetData
            end
        end
    end
    return resDataTab
end

----Mix.PrefabAbbr2  pth Assets/Build/Res/GameObjectRes/Entity/Dating/Item/  key MiaoCard_CupMat_OpponentBlock  通过正则匹配 改目录下所有的prefab
--- 完整路径 Assets/Build/Res/GameObjectRes/Entity/Dating/Item/MiaoCard_CupMat_OpponentBlock_1.prefab
---@param tab table<string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:PrefabAbbr2Type(tab, examineInclude)
    local resDataTab = {}
    local dirPath = string.concat(CS.UnityEngine.Application.dataPath, "/Build/Res/GameObjectRes/Entity/Dating/Item/")
    local namePathTab = GameHelper.ToTable(X3AssetSubPackageTool.GetAllFilesNameInDir(dirPath, "*.prefab"))
    local tempTab = {}
    for source, v in pairs(tab) do
        for i1, v2 in ipairs(namePathTab) do
            if not string.isnilorempty(string.match(v2, v)) then
                local tab = {}
                tab.path = v2
                tab.source = source
                tempTab[#tempTab + 1] = tab
            end
        end
    end
    for i, v in ipairs(tempTab) do
        ---@type SubPackageConst.AssetResData
        local assetData = {}
        assetData.source = v.source
        assetData.type = "Prefab"
        assetData.examineInclude = examineInclude
        assetData.value = string.concat("Assets/Build/Res/GameObjectRes/Entity/Dating/Item/", v.path, ".prefab")
        resDataTab[#resDataTab + 1] = assetData
    end
    return resDataTab
end

----Mix.FaceTexture2  pth Assets/Build/Art/Character/Textures/Female/PL_newbody_tex/PL_makeup_tex/  key PL_Makeup_Skin_01_Face_D  通过正则匹配 查找对应的文件
---@param tab table<string>
---@return SubPackageConst.AssetResData[]
function MixTypeTools:FaceTextureType(tab, examineInclude)
    local resDataTab = {}
    local dirPath = string.concat(CS.UnityEngine.Application.dataPath, "/Build/Art/Character/Textures/Female/PL_body/")
    local tifPathTab = GameHelper.ToTable(X3AssetSubPackageTool.GetFilesUnityPathInDir(dirPath, "*.tif"))
    local pngPathTab = GameHelper.ToTable(X3AssetSubPackageTool.GetFilesUnityPathInDir(dirPath, "*.png"))
    SubPackageMgr.JointTab(tifPathTab, pngPathTab)
    for source, v in pairs(tab) do
        for i1, v2 in ipairs(tifPathTab) do
            if not string.isnilorempty(string.match(v2, v)) then
                ---@type SubPackageConst.AssetResData
                local assetData = {}
                assetData.source = source
                assetData.type = "Prefab"
                assetData.value = v2
                assetData.examineInclude = examineInclude
                resDataTab[#resDataTab + 1] = assetData
            end
        end
    end
    return resDataTab
end

-------Mix.BattleStage  CommonStageEntry表 ID 判断subType == 2 是否是战斗关
------@param tab table<string>
---@param examineInclude int
-----@return SubPackageConst.AssetResData[]
function MixTypeTools:BattleStageType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        ---@type cfg.CommonStageEntry
        local commonStageEntry_cfgData = LuaCfgMgr.GetDataByCondition("CommonStageEntry", {BattleLevelID = v})
        if commonStageEntry_cfgData ~= nil and commonStageEntry_cfgData.SubType == 2 then
            local assetData = {}
            if type(source) ~= "number" then
                assetData.source = source
            end
            assetData.type = "BattleStage"
            assetData.value = v
            assetData.examineInclude = examineInclude
            resDataTab[#resDataTab + 1] = assetData
        end
    end
    return resDataTab
end

---[Asset:Mix.PhoneCon] 根据Type决定分类
---@param tab string[]
---@param examineInclude int
function MixTypeTools:PhoneConType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        ---@type cfg.PhoneMsgConversation
        local phoneData = LuaCfgMgr.Get("PhoneMsgConversation", v)
        if phoneData ~= nil then
            if (phoneData.Type == 3) then
                self:InsertResData(SubPackageConst.ResType.WWise, source, phoneData.Resource, resDataTab, examineInclude);
            elseif (phoneData.Type == 4) then
                self:InsertResData(SubPackageConst.ResType.UIAbbr1, source, phoneData.Resource, resDataTab, examineInclude);
            elseif (phoneData.Type == 5) then
                self:InsertResData(SubPackageConst.ResType.Video, source, phoneData.Resource, resDataTab, examineInclude);
            elseif (phoneData.Type == 20) then
                self:InsertResData(SubPackageConst.ResType.UIAbbr1, source, phoneData.Resource, resDataTab, examineInclude);
            elseif (phoneData.Type == 22) then
                self:InsertResData(SubPackageConst.ResType.UIAbbr1, source, phoneData.Resource, resDataTab, examineInclude);
            end
        end
    end
    return resDataTab
end

---[Asset:Mix.PhoneMoment]
---@param tab string[]
---@param examineInclude int
function MixTypeTools:PhoneMomentType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        ---@type cfg.PhoneMsgConversation
        local phoneData = LuaCfgMgr.Get("PhoneMoment", v)
        if phoneData ~= nil then
            local t = nil
            if (phoneData.ResourceType == 1) then
                t = SubPackageConst.ResType.UIAbbr1
            elseif (phoneData.ResourceType == 2) then
                t = SubPackageConst.ResType.Video
            elseif (phoneData.ResourceType == 3) then
                t = SubPackageConst.ResType.UIAbbr1
            elseif (phoneData.ResourceType == 5) then
                t = SubPackageConst.ResType.WWise
            elseif (phoneData.ResourceType == 6) then
                t = SubPackageConst.ResType.UIAbbr1
            elseif (phoneData.ResourceType == 7) then
                t = SubPackageConst.ResType.UIAbbr1
            elseif (phoneData.ResourceType == 8) then
                t = SubPackageConst.ResType.UIAbbr1
            elseif (phoneData.ResourceType == 10) then
                t = SubPackageConst.ResType.UIAbbr1
            end
            if (t and phoneData.Resource and #phoneData.Resource > 0) then
                for i = 1, #phoneData.Resource do
                    self:InsertResData(t, source, phoneData.Resource[i], resDataTab, examineInclude);
                end
            end
        end
    end
    return resDataTab
end

---[Asset:Mix.BattleBuff]
---@param tab string[]
---@param examineInclude int
function MixTypeTools:BattleBuffType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        if (v and #v > 0) then
            ---@type SubPackageConst.AssetResData
            local assetData = {}
            assetData.source = source
            assetData.type = MixType.BattleBuff
            assetData.value = v[1]
            assetData.examineInclude = examineInclude
            table.insert(resDataTab, assetData)
        end
    end
    return resDataTab
end

---[Asset:Mix.BattleSkill3]
---@param tab string[]
---@param examineInclude int
function MixTypeTools:BattleSkill3Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        if (v and #v > 0) then
            ---@type SubPackageConst.AssetResData
            local assetData = {}
            assetData.source = source
            assetData.type = "BattleSkill1"
            assetData.value = v[1]
            assetData.examineInclude = examineInclude
            table.insert(resDataTab, assetData)
        end
    end
    return resDataTab
end

---[Asset:Mix.CharacterAsset1]
---Assets/Build/Art/Character/FaceMorphCfg/FaceConfig/MorphTemplate下的Asset资产
---@param tab string[]
---@param examineInclude int
function MixTypeTools:CharacterAsset1Type(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        if (v and #v > 0) then
            ---@type SubPackageConst.AssetResData
            local assetData = {}
            assetData.source = source
            assetData.type = "Prefab"
            assetData.examineInclude = examineInclude
            assetData.value = string.concat("Assets/Build/Art/Character/FaceMorphCfg/FaceConfig/MorphTemplate/", v, ".asset")
            table.insert(resDataTab, assetData)
        end
    end
    return resDataTab
end

---[Asset:Mix.AI]
---@param tab table<string, string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:AIType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        local stringTab = string.split(v, "|")
        for _, v1 in ipairs(stringTab) do
            local valueTab = string.split(v1, "=")
            local aiTreeName = valueTab[2]
            ---@type SubPackageConst.AssetResData
            local assetData = {}
            assetData.type = MixType.AI
            assetData.value = aiTreeName
            assetData.source = source
            assetData.examineInclude = examineInclude
            table.insert(resDataTab, assetData)
        end
    end
    return resDataTab
end

function MixTypeTools:TextureAbbrType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        ---@type SubPackageConst.AssetResData
        local assetData = {}
        assetData.type = "Prefab"
        assetData.value = string.concat("Assets/Build/Res/GameObjectRes/Scene/Dynamic2DBackground/", v, ".png")
        assetData.source = source
        assetData.examineInclude = examineInclude
        table.insert(resDataTab, assetData)
    end
    return resDataTab
end

---@param tab table<string, string>
---@param examineInclude int
---@return SubPackageConst.AssetResData[]
function MixTypeTools:BlushAnimType(tab, examineInclude)
    local resDataTab = {}
    for source, v in pairs(tab) do
        ---@type SubPackageConst.AssetResData
        local assetData = {}
        assetData.type = MixType.BlushAnim
        assetData.value = v
        assetData.source = source
        assetData.examineInclude = examineInclude
        table.insert(resDataTab, assetData)
    end
    return resDataTab
end

--按类型填充数据
function MixTypeTools:InsertResData(resType, source, v, resTab, examineInclude)
    if (not string.isnilorempty(v)) then
        ---@type SubPackageConst.AssetResData
        local assetData = {}
        assetData.source = source
        assetData.type = resType
        assetData.value = v
        assetData.examineInclude = examineInclude
        resTab[#resTab + 1] = assetData
    end
end

return MixTypeTools