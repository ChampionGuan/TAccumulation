---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2022/9/19 14:43
---

--local X3DataUnitTest = require("Editor.Misc.X3DataSys.X3DataUnitTest")
---@class X3DataUnitTest 针对X3Data的单元测试类
local X3DataUnitTest = {}
local GetPbc
local X3DataPbc

---@param array table
local LogArray = function(array)
    if array == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "Array: {}")
        return
    end
    
    local result = ""
    for _,v in ipairs(array) do
        result = string.format("%s %s", result, v)
    end
    Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "Array: %s", result)
end


function X3DataUnitTest:DoTest()
    --self:X3DataBaseTest()
    self:X3DataMgrTest()
end

function X3DataUnitTest:UnsubscribeTest()
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Unsubscribe测试")
    local result = X3DataMgr.Unsubscribe(self.TypeCallback)
    -- 插入空数据
    local x3Data = X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: 回调全部解除")
    result = X3DataMgr.UnsubscribeWithTarget(self)
    -- Note 这里 FlagCallback 是无法解绑的，对于没有target的方法解绑必须手动进行
    x3Data:SetPrimaryValue(66)
end

local target1 = {}
setmetatable(target1, {__index = X3DataUnitTest})
local target2 = {}
setmetatable(target2, {__index = X3DataUnitTest})
local target3 = {}
setmetatable(target3, {__index = X3DataUnitTest})

function X3DataUnitTest:SubTest()
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Subscribe测试")
    X3DataMgr.Subscribe(X3DataConst.X3Data.TestPureProtoTypeData, self.FieldNameCallback, self, X3DataConst.X3DataField.TestPureProtoTypeData.floatField)
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.TestPureProtoTypeData, X3DataUnitTest.FlagCallback, nil, X3DataConst.X3DataChangeFlag.AddOrRemove)
    --X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.TestPureProtoTypeData, self.TypeCallback, self, X3DataConst.X3DataChangeFlag.AddOrRemove)
    --X3DataMgr.Subscribe(X3DataConst.X3Data.TestPureProtoTypeData, self.TypeCallback, self)
    --X3DataMgr.Subscribe(X3DataConst.X3Data.TestPureProtoTypeData, self.FieldNameCallback, self, X3DataConst.X3DataField.TestPureProtoTypeData.primaryInt64Key)
    --X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.TestPureProtoTypeData, X3DataUnitTest.FlagCallback, nil, X3DataConst.X3DataChangeFlag.AddOrRemove)
    local data = X3DataMgr.GetOrAdd(X3DataConst.X3Data.TestPureProtoTypeData)
    data:SetFloatField(math.random(1, 100000))
end

function X3DataUnitTest:UnsubscribeTest()
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: UnSubscribe测试")
    X3DataMgr.RemoveAll(X3DataConst.X3Data.TestPureProtoTypeData)
    X3DataMgr.UnsubscribeWithTarget(self)
end

function X3DataUnitTest:HistoryTest()
    local data = X3DataMgr.Create(X3DataConst.X3Data.CombineTestData)
    data:SetIsEnableHistory(true)

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加2号节点 Set")
    data:SetInt32Field(1)
    data:AddMark()
    Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "Int32Field: %s", data:GetInt32Field())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加3号节点 AddTableValue，结果应该是 {1}")
    data:AddInt32TestArrayValue(1)
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加4号节点 AddTableValue，结果应该是 {1, 2}")
    data:AddInt32TestArrayValue(2)
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加5号重置节点，结果应该是 {}")
    data:Reset()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加6号节点 AddTableValue，结果应该是 {1}")
    data:AddInt32TestArrayValue(1)
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加7号节点 UpdateTableValue，结果应该是 {555}")
    data:UpdateInt32TestArrayValue(1, 555)
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加8号节点 RemoveTableValue，结果应该是 {}")
    data:RemoveInt32TestArrayValue()
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加9号节点 AddTableValue，结果应该是 {1}")
    data:AddInt32TestArrayValue(1)
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加10号重置节点，结果应该是 {}")
    data:Reset()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "Undo 回到9，结果应该是 {1}")
    data:Undo()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "Undo 回到8，结果应该是 {}")
    data:Undo()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "Redo 回到9，结果应该是 {1}")
    data:Redo()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "Undo 回到8，结果应该是 {}")
    data:Undo()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "增加11号节点 AddTableValue，结果应该是 {666}")
    data:AddInt32TestArrayValue(666)
    data:AddMark()
    LogArray(data:GetInt32TestArray())

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "Mark中应该已经没有 9 10")
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "发生裁剪子树中应该已经没有 9 及其自己")
end

function X3DataUnitTest:HistoryMemoryTest()
    local data = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
    collectgarbage("stop")
    local before = collectgarbage("count")
    data:SetIsEnableHistory(true)

    ---只统计set
    for i = 1, 10000 do
        local data = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
        --data:SetInt32Field(i)
    end
    
    local after = collectgarbage("count")
    local size = (after - before) / 1024 --MB
    Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "内存占用增加了[%s]MB", size)
end

function X3DataUnitTest:X3DataMgrTest()
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Subscribe测试")
    X3DataMgr.Subscribe(X3DataConst.X3Data.TestPureProtoTypeData, self.TypeCallback, self)
    X3DataMgr.Subscribe(X3DataConst.X3Data.TestPureProtoTypeData, self.FieldNameCallback, self, X3DataConst.X3DataField.TestPureProtoTypeData.primaryInt64Key)
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.TestPureProtoTypeData, self.FlagCallback, nil, X3DataConst.X3DataChangeFlag.AddOrRemove)
    
    local data1 = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
    data1:SetInt32Field(111)
    local data2 = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
    data2:SetInt32Field(222)
    local data3 = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
    data3:SetInt32Field(333)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Add测试")
    local data1New = X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, data1)
    -- Note 这里是错误用法，数据库中的数据已经不是data1了
    -- data1:SetPrimaryValue(55)
    X3DataMgr.Release(data1)
    data1New:SetPrimaryValue(55)

    X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, data2)
    X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, data3, 2)
    -- 目前顺序是 111 333 222
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Get测试")
    local data4 = X3DataMgr.GetByIndex(X3DataConst.X3Data.TestPureProtoTypeData, 2)
    local data5 = X3DataMgr.Get(X3DataConst.X3Data.TestPureProtoTypeData, 55)
    local data6 = X3DataMgr.GetFirst(X3DataConst.X3Data.TestPureProtoTypeData)
    local data7 = X3DataMgr.GetLast(X3DataConst.X3Data.TestPureProtoTypeData)
    local result = PoolUtil.GetTable()
    local firstCount = X3DataMgr.GetFirstByCount(X3DataConst.X3Data.TestPureProtoTypeData, result, 2)
    PoolUtil.ReleaseTable(result)
    result = PoolUtil.GetTable()
    local lastCount = X3DataMgr.GetLastByCount(X3DataConst.X3Data.TestPureProtoTypeData, result, 2)

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Update测试")
    local source = {
        [X3DataConst.X3DataField.TestPureProtoTypeData.boolField] = true,
        [X3DataConst.X3DataField.TestPureProtoTypeData.uint32Field] = 123321,
        ["AAAA"] = "sSS",
        [X3DataConst.X3DataField.TestPureProtoTypeData.floatField] = 45454.45454
    }

    X3DataMgr.Update(X3DataConst.X3Data.TestPureProtoTypeData, 55, source)
    X3DataMgr.UpdateByIndex(X3DataConst.X3Data.TestPureProtoTypeData, 3, source)
    local data3New = X3DataMgr.GetByIndex(X3DataConst.X3Data.TestPureProtoTypeData, 3)
    
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: GetByCondition测试")
    local condition = {
        [X3DataConst.X3DataField.TestPureProtoTypeData.boolField] = true, 
        [X3DataConst.X3DataField.TestPureProtoTypeData.uint32Field] = 123321
    }
    local conditionResult = X3DataMgr.GetByCondition(X3DataConst.X3Data.TestPureProtoTypeData, condition)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: GetAll测试")
    local allFilterFunc = function(x3Data)
        return x3Data:GetUint32Field() > 0
    end
    local allResult = PoolUtil.GetTable()
    local resultCount = X3DataMgr.GetAll(X3DataConst.X3Data.TestPureProtoTypeData, allResult, allFilterFunc)
    PoolUtil.ReleaseTable(allResult)

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Gontains测试")
    local containsPreFunc = function(x3Data)
        return x3Data:GetUint32Field() > 0
    end
    local containsResult = X3DataMgr.Contains(X3DataConst.X3Data.TestPureProtoTypeData, containsPreFunc)

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: 计数测试")
    local count = X3DataMgr.Count(X3DataConst.X3Data.TestPureProtoTypeData)
    local filter = function(x3Data)
        return x3Data:GetInt32Field() > 111
    end
    local count = X3DataMgr.Count(X3DataConst.X3Data.TestPureProtoTypeData, filter)

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: 遍历测试-WithFilter")
    local iterator = function(x3Data)
        Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "遍历测试 %s", x3Data.__uniqueId)
    end
    X3DataMgr.ForEach(X3DataConst.X3Data.TestPureProtoTypeData, iterator, filter)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: 遍历测试")
    X3DataMgr.ForEach(X3DataConst.X3Data.TestPureProtoTypeData, iterator)

    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: Remove 测试")
    local result = X3DataMgr.Remove(X3DataConst.X3Data.TestPureProtoTypeData, 55)
    local removeData = X3DataMgr.Get(X3DataConst.X3Data.TestPureProtoTypeData, 55)
    result = X3DataMgr.RemoveByIndex(X3DataConst.X3Data.TestPureProtoTypeData, 3)
    result = X3DataMgr.RemoveByIndex(X3DataConst.X3Data.TestPureProtoTypeData, 2)
    result = X3DataMgr.RemoveByCondition(X3DataConst.X3Data.TestPureProtoTypeData, condition)
    X3DataMgr.RemoveAll(X3DataConst.X3Data.TestPureProtoTypeData)

    removeData = X3DataMgr.GetByIndex(X3DataConst.X3Data.TestPureProtoTypeData, 1)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr: 测试结束")
end

function X3DataUnitTest:X3DataBaseTest()
    --先添加数据
    X3DataMgr.GetOrAdd(X3DataConst.X3Data.CombineTestData)
    local testData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.CombineTestData)
    --主键设置测试
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataBase: 主键修改测试")
    testData:SetPrimaryValue(555)
    testData:SetPrimaryValue("asd")
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataBase: Array/Map接口")
    testData:AddInt32StringMapValue("asd")
    testData:AddInt32StringMapValue("fgh")
    testData:AddInt32StringMapValue("fgh", 2)
    testData:AddOrUpdateInt32StringMapValue(2, "fgh")
    testData:RemoveInt32StringMapValue(1)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataBase: X3Data的Array/Map接口")
    local testPureProtoTypeData = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
    testData:AddOrUpdateX3DataTestArrayValue("asd", testPureProtoTypeData)
    testData:RemoveInt32StringMapValue(1)
    testData:SetX3Data(testPureProtoTypeData)
    Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3DataBase测试结束")
end

--region X3DataBaseTest
---@param data X3Data.X3DataBase
---@param flag X3DataConst.X3DataChangeFlag
function X3DataUnitTest:TypeCallback(data, flag)
    Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "Type Callback: DataName: %s, Flag: %s", data.__uniqueId, flag == 1000 and "Add" or "Remove")
end

---@param data X3Data.X3DataBase
---@param flag X3DataConst.X3DataChangeFlag
function X3DataUnitTest:FieldNameCallback(data, flag)
    Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "FieldName CallBack: DataName: %s, Flag: %s", data.__uniqueId, flag)
end

---@param data X3Data.X3DataBase
---@param flag X3DataConst.X3DataChangeFlag
function X3DataUnitTest.FlagCallback(data, flag)
    Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "Flag Callback: DataName: %s, Flag: %s", data.__uniqueId, flag)
end

--region 测试编辑器的实时刷新
local curData = 0
---@type X3Data.CombineTestData
local combineData
function X3DataUnitTest:Editor1()
    local combineTestData = X3DataMgr.Create(X3DataConst.X3Data.CombineTestData);
    combineData = X3DataMgr.Add(X3DataConst.X3Data.CombineTestData, combineTestData, 1);
    X3DataMgr.Release(combineTestData)
end

function X3DataUnitTest:EditorAdd()
    curData = curData + 1
    combineData:AddInt32TestArrayValue(curData, 1 )
end

function X3DataUnitTest:EditorRemove()
    combineData:RemoveInt32TestArrayValue(1)
end

function X3DataUnitTest:EditorUpdate()
    curData = curData + 1
    combineData:UpdateInt32TestArrayValue(1, curData)
end
--endregion

---用于初始化和获取pbc，延迟初始化的时间，防止GrpcMgr的pbc clear了X3Data的格式文本
---@return userdata pbc
GetPbc = function()
    if X3DataPbc == nil then
        X3DataPbc = require "pb"
        local buffer = CS.PapeGames.X3.Res.LoadBytes("Assets/Build/Res/GameObjectRes/BasicWidget/X3Data.bytes")
        if X3DataPbc.load(buffer) then
            Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3Data.data Load 成功！！！")
        else
            Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3Data.data Load 失败！！！")
        end
    end
    return X3DataPbc
end

function X3DataUnitTest:EncodeTest()
    local pbc = GetPbc()
    local data = X3DataMgr.Create("CombineTestData")
    
    local result = PoolUtil.GetTable()
    data:SetEnumTestType(X3DataConst.X3DataTestUsageMessageType.ETypeCombineTestData)
    data:Encode(result)
    local pbcStr = pbc.encode('X3Data.CombineTestData', result)
    local decodeResult = pbc.decode('X3Data.CombineTestData', pbcStr, {})

    local result1 = PoolUtil.GetTable()
    data:Encode(result1)
    result1.enumTestType = 2;
    local pbcStr1 = pbc.encode('X3Data.CombineTestData', result1)
    local decodeResult1 = pbc.decode('X3Data.CombineTestData', pbcStr1, {})
    return
end

function X3DataUnitTest:DecodeTest()

end

function X3DataUnitTest:PrimaryAddTest()
    local source = {[X3DataConst.X3DataField.PhotoData.Name] = "998979845__aaaa.png"}
    local x3data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.PhotoData, source, "998979845__aaaa.png")
    x3data:SetPrimaryValue("998979845__aaaa.png")
end

function X3DataUnitTest:PrimaryRemoveTest()
    X3DataMgr.Remove(X3DataConst.X3Data.PhotoData, "998979845__aaaa.png")
end

function X3DataUnitTest:MultiPrimaryRemoveTest()
    X3DataMgr.RemoveAll(X3DataConst.X3Data.TestPureProtoTypeData)
    local sourceData = X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData)
    sourceData:SetPrimaryValue(111)
    local data1 = X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, sourceData)
    data1:SetInt32Field(5)
    data1:SetBoolField(true)
    local data2 = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TestPureProtoTypeData, sourceData, 111)
    data2:SetInt32Field(4)
    local data3 = X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, sourceData)
    data3:SetInt32Field(3)
    data3:SetBoolField(true)
    local data4 = X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, sourceData)
    data4:SetInt32Field(2)
    local data5 = X3DataMgr.Add(X3DataConst.X3Data.TestPureProtoTypeData, sourceData)
    data5:SetInt32Field(1)
    
    local result = {}
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.TestPureProtoTypeData, result)
    Debug.Log("Count: %s", count)
    X3DataMgr.RemoveByCondition(X3DataConst.X3Data.TestPureProtoTypeData, {[X3DataConst.X3DataField.TestPureProtoTypeData.boolField] = true})
    table.clear(result)
    count = X3DataMgr.GetAll(X3DataConst.X3Data.TestPureProtoTypeData, result)
    Debug.Log("Count: %s", count)
end

function X3DataUnitTest:BeforeLoginTest()
    local data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TestPureProtoTypeData, nil, 1)
    if data ~= nil then
        data:SetInt32Field(1)
        data:SetBoolField(true)
    end

    data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TestPureProtoTypeData, nil, 2)
    if data ~= nil then
        data:SetInt32Field(2)
        data:SetBoolField(true)
    end

    data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TestPureProtoTypeData, nil, 3)
    if data ~= nil then
        data:SetInt32Field(3)
        data:SetBoolField(true)
    end
end

function X3DataUnitTest:AfterLoginTest()
    local data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TestPureProtoTypeData, nil, 4)
    if data ~= nil then
        data:SetInt32Field(4)
        data:SetBoolField(true)
    end

    data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TestPureProtoTypeData, nil, 5)
    if data ~= nil then
        data:SetInt32Field(5)
        data:SetBoolField(true)
    end
end

--测试X3Data之间的关系传递
function X3DataUnitTest:RelationTest()
    X3DataMgr.Subscribe(X3DataConst.X3Data.CombineTestData, self.RelationCallback, self, X3DataConst.X3DataField.CombineTestData.x3DataTestMap)
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.CombineTestData, self.RelationCallbackWithFlag, self)
end

function X3DataUnitTest:RelationReleaseTest()
    local data = X3DataMgr.GetOrAdd(X3DataConst.X3Data.CombineTestData)
    data:SetX3Data(X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData))
    X3DataMgr.Release(data)
    X3DataMgr.RemoveByIndex(X3DataConst.X3Data.CombineTestData, 1)
end

function X3DataUnitTest:AssociationTestDataTest()
    local data = X3DataMgr.GetOrAdd(X3DataConst.X3Data.AssociationTestData)
    --测试传递阻断
    --测试连锁传递
    local combineTestData = X3DataMgr.Create(X3DataConst.X3Data.CombineTestData)
    data:AddCombineTestDataArrayValue(combineTestData)
    combineTestData:AddX3DataTestMapValue(X3DataMgr.Create(X3DataConst.X3Data.TestPureProtoTypeData), 1)
    X3DataMgr.Subscribe(X3DataConst.X3Data.AssociationTestData, self.RelationCallback, self)
end

---@param data X3Data.X3DataBase
function X3DataUnitTest:RelationCallback(data)
    Debug.LogErrorFormat("RelationCallback Invoke Primary %s", data:GetPrimaryValue())
end

---@param data X3Data.X3DataBase
---@param flag X3DataConst.X3DataChangeFlag
function X3DataUnitTest:RelationCallbackWithFlag(data, flag)
    Debug.LogErrorFormat("RelationCallbackWithFlag Invoke Primary %s Flag %s", data:GetPrimaryValue(), flag)
end

return X3DataUnitTest