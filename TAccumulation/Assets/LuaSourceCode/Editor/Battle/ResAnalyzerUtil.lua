---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2022/2/8 15:25
---

Const = require("Runtime.System.LuaConst.Const")
require(Const.CFG_CONST_NAME)
require("Runtime.Battle.Common.XECS")
Mathf= require("Runtime.System.Framework.Base.Mathf")
Vector2= require("Runtime.System.Framework.Base.Vector2")
Vector2Helper = require("Runtime.System.Framework.Base.Vector2Helper")
Vector3= require("Runtime.System.Framework.Base.Vector3")
Vector3Helper = require("Runtime.System.Framework.Base.Vector3Helper")
require("Runtime.Battle.Logic.FSM.FSMArg")
require("Runtime.System.Framework.Engine.PlayerPrefs")
require("Runtime.Battle.Logic.Common.BattleEnum")
require("Runtime.Battle.Logic.Common.BattleUtil")
require("Runtime.Battle.View.BattleClientEnum")
require("Runtime.Battle.View.BattleClientUtil")
require('Config.Battle.BattleConfig')
require('Config.Battle.BattleViewConfig')
require("Runtime.Common.Utils.LuaUtil")
require("Runtime.System.Framework.GameBase.BllMgr")
require("Runtime.System.Framework.Engine.Application")
TimerMgr = require("Runtime.System.Framework.GameBase.TimerMgr")
require("Runtime.System.Framework.GameBase.UISystem.Utils.GameObjectUtil")
local GameObject = CS.UnityEngine.GameObject
local ResAnalyzer = require("Runtime.Battle.View.ResAnalyzer.ResAnalyzer")

---@type CharacterUtil
CharacterUtil = require("Runtime.System.X3Game.Modules.Character.CharacterUtil")
---@type CharacterMgr
CharacterMgr = require("Runtime.System.X3Game.Modules.Character.CharacterMgr")

ResAnalyzerUtil = {}

---@param levelID Int
---@param girlID Int
---@param boyID Int
---@param weaponSkinID Int
function ResAnalyzerUtil.Analyze(levelID, girlID, boyID, weaponSkinID)
    ---@type BattleCustomData
    local customData = {}
    customData.LevelID = levelID
    customData.girlID = girlID
    customData.boyID = boyID
    customData.WeaponSkinID = weaponSkinID
    customData.IsPortraitMode = PlayerPrefs.GetInt(BattleClientPrefKey.KeyPortraitMode) == 1

    local clientArg = BattleClientUtil.GetClientArgByCustomData(customData)
    ---@type BattleLevelConfig
    local config = BattleUtil.CreateBattleLevelConfig(clientArg.startup)

    ---资源配置预处理
    ---避免每个使用的地方都进行一次判断
    for k, resConfig in pairs(BattleResConfig) do
        resConfig.maxCacheCount = resConfig.maxCacheCount or BattleClientConst.MaxCacheCount
        resConfig.maxPreloadCount = math.min(resConfig.maxPreloadCount or BattleClientConst.MaxPreloadCount, resConfig.maxCacheCount)
    end

    ---战斗资源分析
    local analyzer = ResAnalyzer.CreateRootAnalyzer(ResAnalyzerType.Battle, config)
    local analyzerResults = analyzer:GetResults()
    for _, resDescs in pairs(analyzerResults) do
        for _, resDesc in pairs(resDescs) do
            resDesc.go = ResAnalyzerUtil.LoadObj(resDesc)
            resDesc.fullPath = BattleClientUtil.GetResPath(resDesc.path, resDesc.type)
            if not BattleClientUtil.IsNull(resDesc.go) and resDesc.go.transform then
                local parentName = ResAnalyzerUtil.GetParentName(resDesc.type)
                local parentGo = GameObject.Find(parentName)
                if BattleClientUtil.IsNull(parentGo) then
                    parentGo = GameObject(parentName)
                end
                if resDesc.type == BattleResType.Hero then
                    resDesc.partPaths = {}
                    local hdPaths = CharacterUtil.GetPartAssetPathList(resDesc.arg, 0)
                    local ldPaths = CharacterUtil.GetPartAssetPathList(resDesc.arg, 1)
                    for _, path in ipairs(hdPaths) do
                        table.insert(resDesc.partPaths, path);
                    end
                    for _, path in ipairs(ldPaths) do
                        table.insert(resDesc.partPaths, path);
                    end
                end
                resDesc.go.transform:SetParent(parentGo.transform)
            end
        end
    end
    ResAnalyzerUtil.analyzer = analyzer
    return analyzer:GetResData()
end

---@param resType BattleResType
function ResAnalyzerUtil.GetParentName(resType)
    for key, value in pairs(BattleResType) do
        if value == resType then
            return key
        end
    end
    return 'Default'
end

function ResAnalyzerUtil.Clear()
    local analyzerResults = ResAnalyzerUtil.analyzer:GetResults()
    for _, resDescs in pairs(analyzerResults) do
        for _, resDesc in pairs(resDescs) do
            if not BattleClientUtil.IsNull(resDesc.go)  then
                ResAnalyzerUtil.UnloadObj(resDesc.go)
            end
        end
    end
    ResAnalyzerUtil.analyzer = nil
    g_BattleResMgr._poolMgr:Uninit()
end

---@param tbName string
---@return number @单位：KB
function ResAnalyzerUtil.CalculateBattleTbSize(tbName)
    local luaPath = string.format('LuaCfg.Battle.Config.%s', tbName)
    return ResAnalyzerUtil.CalculateTbSize(luaPath)
end

---@param luaPath string
---@return number @单位：KB
function ResAnalyzerUtil.CalculateTbSize(luaPath)
    collectgarbage("stop")
    collectgarbage("collect")
    local before = collectgarbage("count")
    require(luaPath)
    collectgarbage("collect")
    local after = collectgarbage("count")
    local size = after - before
    if size < 0 then
        return 0
    else
        return size * 1024
    end
end

---@param resDesc ResDesc
---@return UnityEngine.Object
function ResAnalyzerUtil.LoadObj(resDesc)
    local obj = g_BattleResMgr:Load(resDesc.path, resDesc.type, resDesc.name, resDesc.arg, true)
    return obj
end

function ResAnalyzerUtil.UnloadObj(go)
    g_BattleResMgr:Unload(go)
end

function ResAnalyzerUtil.GetWeaponName(text_id)
    return UITextHelper.GetUIText(text_id)
end