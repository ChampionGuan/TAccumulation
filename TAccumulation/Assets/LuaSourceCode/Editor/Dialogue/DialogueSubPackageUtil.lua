---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/2/15 17:51
---

---给Editor分包统计资源用的接口
---@class DialogueSubPackageUtil
local DialogueSubPackageUtil = class("DialogueSubPackageUtil")

local BG_Path = "Assets/Build/Res/GameObjectRes/Scene/Dynamic2DBackground/%s.png";
local FX_Path = "Assets/Build/Art/Fx/Prefab/Performance/AvgShow/%s.prefab";
local PPVAnim_Path = "Assets/Build/Art/Lightings/ppv_AniClip/%s.anim"
local CutSceneCollector = CS.PapeGames.CutScene.CutSceneCollector
local SVCHelper = CS.PapeGames.X3.SVCHelper

---返回所有剧情资源
---@param name string databaseName
---@return table<string , string[]>
function DialogueSubPackageUtil.GetAllResPath(name)
    Debug.LogFormat("分包搜集开始-%s", name)
    local database = DialogueManager.LoadDatabase(name)
    if database then
        local cfg = database.data
        local assetList = {}

        local cutScene = {}
        assetList.CutScene = cutScene
        local wwise = {}
        assetList.WWise = wwise
        local sceneInfo = {}
        assetList.SceneInfo = sceneInfo
        local MusicFunctionBGMStateConnect = {}
        assetList.MusicFunctionBGMStateConnect = MusicFunctionBGMStateConnect
        local roleClothSuit = {}
        assetList.RoleClothSuit = roleClothSuit
        local roleBaseModelAsset = {}
        assetList.RoleBaseModelAsset = roleBaseModelAsset
        local partConfig = {}
        assetList.PartConfig = partConfig
        local modelAsset = {}
        assetList.ModelAsset = modelAsset
        local proceduralAnimClip = {}
        assetList.ProceduralAnimClip = proceduralAnimClip
        local lipSyncAsset = {}
        assetList.LipSync = lipSyncAsset
        local animationClip = {}
        assetList.AnimationClip = animationClip
        local prefab = {}
        assetList.Prefab = prefab
        local UIAbbr1 = {}
        assetList.UIAbbr1 = UIAbbr1
        local video = {}
        assetList.Video = video
        local FSM = {}
        assetList.FSM = FSM
        --region Actor
        if cfg.actors ~= nil then
            local actors = cfg.actors
            for i = 1, #actors do
                local syncActor = database:GetActor(actors[i].syncActor)
                if not syncActor then
                    if actors[i].actorType == DialogueEnum.ActorType.RoleClothSuit then
                        if string.isnilorempty(actors[i].assetKey) == false then
                            DialogueSubPackageUtil.InsertToList(roleClothSuit, actors[i].assetKey)
                        end
                    elseif actors[i].actorType == DialogueEnum.ActorType.RoleBaseModel then
                        if string.isnilorempty(actors[i].assetKey) == false then
                            DialogueSubPackageUtil.InsertToList(roleBaseModelAsset, actors[i].assetKey)
                        end
                        if actors[i].clothList then
                            for _, v in pairs(actors[i].clothList) do
                                DialogueSubPackageUtil.InsertToList(partConfig, v)
                            end
                        end
                    else
                        DialogueSubPackageUtil.InsertToList(modelAsset, actors[i].assetKey)
                    end
                    if actors[i].alternateGameObjects ~= nil then
                        for j = 1, #actors[i].alternateGameObjects do
                            if actors[i].alternateGameObjects[j].actorType == DialogueEnum.ActorType.RoleClothSuit then
                                if string.isnilorempty(actors[i].alternateGameObjects[j].assetKey) == false then
                                    DialogueSubPackageUtil.InsertToList(roleClothSuit, actors[i].alternateGameObjects[j].assetKey)
                                end
                            elseif actors[i].alternateGameObjects[j].actorType == DialogueEnum.ActorType.RoleBaseModel then
                                if string.isnilorempty(actors[i].alternateGameObjects[j].assetKey) == false then
                                    DialogueSubPackageUtil.InsertToList(roleBaseModelAsset, actors[i].alternateGameObjects[j].assetKey)
                                end
                                if actors[i].alternateGameObjects[j].clothList then
                                    for _, v in pairs(actors[i].alternateGameObjects[j].clothList) do
                                        DialogueSubPackageUtil.InsertToList(partConfig, v)
                                    end
                                end
                            else
                                DialogueSubPackageUtil.InsertToList(modelAsset, actors[i].alternateGameObjects[j].assetKey)
                            end
                        end
                    end
                end
            end
        end
        --endregion
        --region TempObject
        local tempObject = cfg.tempObjects
        if tempObject ~= nil then
            for i = 1, #tempObject do
                if string.isnilorempty(tempObject[i].resKey) == false then
                    if not tempObject[i].loadDirectly then
                        DialogueSubPackageUtil.InsertToList(modelAsset, tempObject[i].resKey)
                    else
                        DialogueSubPackageUtil.InsertToList(prefab, tempObject[i].resKey)
                    end
                end
            end
        end
        --endregion
        --region Conversation
        if cfg.conversations then
            for i = 1, #cfg.conversations do
                local conversation = cfg.conversations[i]
                if conversation.dialogueEntries then
                    for j = 1, #conversation.dialogueEntries do
                        local dialogueEntry = conversation.dialogueEntries[j]
                        --对话样式，气泡样式
                        if dialogueEntry.dialogueActive then
                            local dialogueStyleSetting = database:GetDialogueStyleSetting(dialogueEntry.dialogueTypeSetting)
                            if dialogueStyleSetting then
                                if dialogueStyleSetting.portraitID ~= 0 then
                                    local dialogueHeadImg = LuaCfgMgr.Get("DialogueHeadImg", dialogueStyleSetting.portraitID)
                                    if dialogueHeadImg then
                                        DialogueSubPackageUtil.InsertToList(UIAbbr1, dialogueHeadImg.ImgName)
                                    end
                                end
                                if dialogueStyleSetting.dialogueType == DialogueEnum.DialogueType.Bubble
                                        or dialogueStyleSetting.dialogueType == DialogueEnum.DialogueType.Avg then
                                    local dialogueBubble = LuaCfgMgr.Get("DialogueBubble", dialogueStyleSetting.bubblePrefabID)
                                    if dialogueBubble then
                                        DialogueSubPackageUtil.InsertToList(prefab, Res.GetAssetPath(dialogueBubble.Path, ResType.T_DynamicUIPrefab))
                                        if string.isnilorempty(dialogueBubble.DefaultBg) == false then
                                            DialogueSubPackageUtil.InsertToList(prefab, Res.GetAssetPath(dialogueBubble.DefaultBg, ResType.T_DynamicUIPrefab))
                                        end
                                    end
                                end
                            end
                            if string.isnilorempty(dialogueEntry.voiceName) == false then
                                DialogueSubPackageUtil.InsertToList(wwise, dialogueEntry.voiceName)
                            end
                        end
                        --选项样式
                        if dialogueEntry.conditionType == DialogueEnum.DialogueConditionType.Choice then
                            if dialogueEntry.outgoingLinks ~= nil then
                                for i = 1, #dialogueEntry.outgoingLinks do
                                    local link = dialogueEntry.outgoingLinks[i]
                                    local dynamicUIList = link.conditionData.choiceSetting and string.split(link.conditionData.choiceSetting.dynamicUI, "|") or nil
                                    for _, v in pairs(dynamicUIList) do
                                        DialogueSubPackageUtil.InsertToList(UIAbbr1, v)
                                    end
                                end
                            end
                            local choiceStyleSetting = database:GetChoiceStyleSetting(dialogueEntry.choiceStyleSetting)
                            if choiceStyleSetting.choiceStyle == DialogueEnum.ChoiceStyle.ChoicePrefab then
                                local dialogueChoice = LuaCfgMgr.Get("DialogueChoice", choiceStyleSetting.choiceID)
                                if dialogueChoice then
                                    DialogueSubPackageUtil.InsertToList(prefab, Res.GetAssetPath(dialogueChoice.Path, ResType.T_DynamicUIPrefab))
                                end
                            end
                            --QTE样式
                        elseif dialogueEntry.conditionType == DialogueEnum.DialogueConditionType.QTE then
                            DialogueSubPackageUtil.AnalyzeQTERes(database, assetList, dialogueEntry)
                        end
                        if dialogueEntry.wwiseDatas then
                            for _, wwiseData in pairs(dialogueEntry.wwiseDatas) do
                                DialogueSubPackageUtil.InsertToList(wwise, wwiseData.eventName)
                                if string.isnilorempty(wwiseData.lipSyncAsset) == false then
                                    DialogueSubPackageUtil.InsertToList(lipSyncAsset, wwiseData.lipSyncAsset)
                                end
                            end
                        end
                        if dialogueEntry.eventActive then
                            if dialogueEntry.eventDatas ~= nil then
                                for _, eventData in pairs(dialogueEntry.eventDatas) do
                                    local dialogueFucEvent = LuaCfgMgr.Get("DialogueFucEvent", eventData.eventId)
                                    if dialogueFucEvent then
                                        if dialogueFucEvent.FucType == DialogueEnum.DialogueFucType.Special then
                                            if dialogueFucEvent.EventName == "OpenUI" and
                                                    dialogueFucEvent.Para0 == UIConf.DialogMobile then
                                                DialogueSubPackageUtil.AnalyzePhoneRes(assetList, tonumber(dialogueFucEvent.Para1))
                                            end
                                        elseif dialogueFucEvent.FucType == DialogueEnum.DialogueFucType.Event then
                                            if dialogueFucEvent.EventName == "CAT_CARD_CHANGE_ICON" then
                                                DialogueSubPackageUtil.InsertToList(UIAbbr1, dialogueFucEvent.Para1)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        --region Event
                        if dialogueEntry.eventActive then
                            if dialogueEntry.eventDatas ~= nil then
                                for _, v in pairs(dialogueEntry.eventDatas) do
                                    DialogueSubPackageUtil.AnalyzeEventRes(assetList, v.eventId)
                                end
                            end
                        end
                        --region Action
                        local allActions = {}
                        if dialogueEntry.actions then
                            for _, actionCfg in pairs(dialogueEntry.actions) do
                                table.insert(allActions, #allActions + 1, actionCfg)
                            end
                        end
                        if dialogueEntry.endActions then
                            for _, actionCfg in pairs(dialogueEntry.endActions) do
                                table.insert(allActions, #allActions + 1, actionCfg)
                            end
                        end
                        for _, actionCfg in pairs(allActions) do
                            local realAction = database:GetAction(actionCfg)
                            if realAction then
                                if realAction.type == DialogueEnum.DialogueActionType.ActionGroup then
                                    for i = 1, #realAction.dialogueActions do
                                        local subAction = realAction.dialogueActions[i]
                                        if actionCfg.overrideActions and actionCfg.overrideActions[realAction.dialogueActions[i].id] then
                                            subAction = actionCfg.overrideActions[realAction.dialogueActions[i].id]
                                        end
                                        if actionCfg.mutedAction == nil or table.indexof(actionCfg.mutedAction, subAction.id) == false then
                                            DialogueSubPackageUtil.AnalyzeActionRes(subAction, assetList)
                                        end
                                    end
                                else
                                    DialogueSubPackageUtil.AnalyzeActionRes(realAction, assetList)
                                end
                            end
                        end
                        --endregion
                    end
                end
            end
        end
        --endregion

        DialogueManager.UnloadDatabase(name)
        return assetList
    else
        return {}
    end
end

---@param action DialogueBaseAction
---@param assetList table<string , string[]>
function DialogueSubPackageUtil.AnalyzeActionRes(action, assetList)
    if action.type == DialogueEnum.DialogueActionType.ChangeScene then
        DialogueSubPackageUtil.InsertToList(assetList.SceneInfo, action.sceneName)
    end
    if action.type == DialogueEnum.DialogueActionType.Wwise then
        if action.wwiseDatas then
            for _, wwiseData in pairs(action.wwiseDatas) do
                if wwiseData.soundType == DialogueEnum.WwiseSoundType.Background then
                    DialogueSubPackageUtil.InsertToList(assetList.MusicFunctionBGMStateConnect, wwiseData.eventName)
                else
                    DialogueSubPackageUtil.InsertToList(assetList.WWise, wwiseData.eventName)
                end
            end
        end
    end
    if action.type == DialogueEnum.DialogueActionType.CTSPlay then
        DialogueSubPackageUtil.InsertToList(assetList.CutScene, action.assetName)
        local ctsPath = CutSceneCollector.GetPath(action.assetName)
        if string.isnilorempty(ctsPath) == false then
            DialogueSubPackageUtil.InsertToList(assetList.Prefab, SVCHelper.GetCtsSVCPath(ctsPath))
        end
    end
    if action.type == DialogueEnum.DialogueActionType.Anim then
        if string.isnilorempty(action.assetPath) == false then
            if action.stateType == DialogueEnum.AnimStateType.CutScene then
                DialogueSubPackageUtil.InsertToList(assetList.CutScene, action.stateName)
                local ctsPath = CutSceneCollector.GetPath(action.stateName)
                if string.isnilorempty(ctsPath) == false then
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, SVCHelper.GetCtsSVCPath(ctsPath))
                end
            elseif action.stateType == DialogueEnum.AnimStateType.AnimationClip then
                DialogueSubPackageUtil.InsertToList(assetList.AnimationClip, action.assetPath)
            else
                DialogueSubPackageUtil.InsertToList(assetList.ProceduralAnimClip, action.assetPath)
            end
        end
    end
    if action.type == DialogueEnum.DialogueActionType.Scene2DChange then
        if action.scene2DInfoId and action.scene2DInfoId > 0 then
            DialogueSubPackageUtil.AnalyzeScene2DInfoRes(assetList, action.scene2DInfoId)
        else
            DialogueSubPackageUtil.InsertToList(assetList.Prefab, action.assetPath)
        end
    end
    if action.type == DialogueEnum.DialogueActionType.VideoPlay then
        DialogueSubPackageUtil.InsertToList(assetList.Video, action.videoName)
    end
    if action.type == DialogueEnum.DialogueActionType.SceneFx then
        if action.playList then
            for _, sceneFxData in pairs(action.playList) do
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.format(FX_Path, sceneFxData.fxName))
            end
        end
    end
    if action.type == DialogueEnum.DialogueActionType.Transition3D then
        if action.changeSceneType == DialogueEnum.ChangeSceneType.Scene2D then
            if action.scene2DInfoId and action.scene2DInfoId > 0 then
                DialogueSubPackageUtil.AnalyzeScene2DInfoRes(assetList, action.scene2DInfoId)
            else
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, action.assetPath)
            end
        elseif action.changeSceneType == DialogueEnum.ChangeSceneType.Scene3D then
            DialogueSubPackageUtil.InsertToList(assetList.SceneInfo, action.sceneName)
        end
        local dialogueAvgAction = LuaCfgMgr.Get("DialogueAvgAction",
                action.AVGActionId)
        if dialogueAvgAction then
            DialogueSubPackageUtil.InsertToList(assetList.AnimationClip, string.concat(DialogueConst.PPVAnimPath,
                    dialogueAvgAction.Para1, ".anim"))
            DialogueSubPackageUtil.InsertToList(assetList.AnimationClip, string.concat(DialogueConst.PPVAnimPath,
                    dialogueAvgAction.Para4, ".anim"))
        end
    end
    if action.type == DialogueEnum.DialogueActionType.PPV then
        local dialogueAvgAction = LuaCfgMgr.Get("DialogueAvgAction",
                action.AVGActionId)
        if dialogueAvgAction then
            DialogueSubPackageUtil.InsertToList(assetList.AnimationClip, string.concat(DialogueConst.PPVAnimPath,
                    dialogueAvgAction.Para1, ".anim"))
        end
        if dialogueAvgAction.SubType == DialogueEnum.PPVSubType.Rain and
                string.isnilorempty(dialogueAvgAction.Para3) == false then
            DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.format(DialogueConst.RainTexPath,
                    dialogueAvgAction.Para3))
        end
    end
    if action.type == DialogueEnum.DialogueActionType.SpecialImageText then
        local dialogueAvgAction = LuaCfgMgr.Get("DialogueAvgAction",
                action.AVGActionId)
        DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueAvgAction.Para1, ResType.T_DynamicUIPrefab))
        if action.props then
            for _, v in pairs(action.props) do
                if v.imageTextType == DialogueEnum.SpecialImageTextType.Image then
                    DialogueSubPackageUtil.InsertToList(assetList.UIAbbr1, v.objValue)
                end
            end
        end
        DialogueSubPackageUtil.InsertToList(assetList.WWise, action.eventName)
    end
    if action.type == DialogueEnum.DialogueActionType.CameraAnim then
        local dialogueAvgAction = LuaCfgMgr.Get("DialogueAvgAction",
                action.AVGActionId)
        if dialogueAvgAction then
            DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.concat(DialogueConst.PPVAnimPath,
                    dialogueAvgAction.Para1, ".prefab"))
        end
    end
    if action.type == DialogueEnum.DialogueActionType.Transition2D then
        if action.changeSceneType == DialogueEnum.ChangeSceneType.Scene2D then
            if action.scene2DInfoId and action.scene2DInfoId > 0 then
                DialogueSubPackageUtil.AnalyzeScene2DInfoRes(assetList, action.scene2DInfoId)
            else
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, action.assetPath)
            end
        elseif action.changeSceneType == DialogueEnum.ChangeSceneType.Scene3D then
            DialogueSubPackageUtil.InsertToList(assetList.SceneInfo, action.sceneName)
        end
        local dialogueAvgAction = LuaCfgMgr.Get("DialogueAvgAction", action.AVGActionId)
        DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueAvgAction.Para1, ResType.T_DynamicUIPrefab))
    end
    if action.type == DialogueEnum.DialogueActionType.ForceReplacePLHair then
        if action.replaceEnable then
            local faceHairCfg = LuaCfgMgr.Get("FaceHair", action.faceHairId)
            if faceHairCfg then
                DialogueSubPackageUtil.InsertToList(assetList.UIAbbr1, faceHairCfg.StyleIcon)
                DialogueSubPackageUtil.InsertToList(assetList.UIAbbr1, faceHairCfg.ColorIcon)
                DialogueSubPackageUtil.InsertToList(assetList.PartConfig, faceHairCfg.StyleSourceID)
            end
        end
    end
end

---分析QTE的资源
---@param database DialogueDatabase
---@param assetList table<string , string[]>
---@param dialogueEntry DialogueEntry
function DialogueSubPackageUtil.AnalyzeQTERes(database, assetList, dialogueEntry)
    local qteStyleSetting = database:GetQTEStyleSetting(dialogueEntry.qteStyleSetting)
    if dialogueEntry.outgoingLinks ~= nil then
        for i = 1, #dialogueEntry.outgoingLinks do
            local clickType = dialogueEntry.qteClickType
            local styleId = 0
            local link = dialogueEntry.outgoingLinks[i]
            if dialogueEntry.qteClickType == DialogueEnum.QTEClickType.DIY then
                clickType = link.conditionData.qteSetting.qteClickType
            end
            if dialogueEntry.qteClickType == DialogueEnum.QTEClickType.DIY or qteStyleSetting.qteStyle == DialogueEnum.QTEStyle.DIY then
                local linkQTEStyleSetting = database:GetQTEStyleSetting(link.conditionData.qteSetting.qteStyleSetting)
                if linkQTEStyleSetting and linkQTEStyleSetting.qteStyle == DialogueEnum.QTEStyle.QTEPrefab then
                    styleId = linkQTEStyleSetting.qteID
                end
            else
                if qteStyleSetting.qteStyle == DialogueEnum.QTEStyle.QTEPrefab then
                    styleId = qteStyleSetting.qteID
                end
            end

            if clickType == DialogueEnum.QTEClickType.Click or
                    clickType == DialogueEnum.QTEClickType.ContinuousClick then
                local dialogueQTE = LuaCfgMgr.Get("DialogueQteClick", styleId)
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueQTE.Path, ResType.T_DynamicUIPrefab))
            elseif clickType == DialogueEnum.QTEClickType.LongPress then
                local dialogueQTE = LuaCfgMgr.Get("DialogueQteLongPress", styleId)
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueQTE.Path, ResType.T_DynamicUIPrefab))
            elseif clickType == DialogueEnum.QTEClickType.SliderDirection or clickType == DialogueEnum.QTEClickType.SliderPosition then
                local dialogueQTE = LuaCfgMgr.Get("DialogueQteSlider", styleId)
                if dialogueQTE.Path and #dialogueQTE.Path > 0 then
                    for _, v in pairs(dialogueQTE.Path) do
                        DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(v, ResType.T_DynamicUIPrefab))
                    end
                end
            elseif clickType == DialogueEnum.QTEClickType.Blow then
                local dialogueQTEBlow = LuaCfgMgr.Get("DialogueQteBlow", styleId)
                if dialogueQTEBlow then
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueQTEBlow.Path, ResType.T_DynamicUIPrefab))
                    local dialogueClick = LuaCfgMgr.Get("DialogueQteClick", dialogueQTEBlow.ClickID)
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueClick.Path, ResType.T_DynamicUIPrefab))
                    local dialogueLongPress = LuaCfgMgr.Get("DialogueQteLongPress", dialogueQTEBlow.LongPressID)
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueLongPress.Path, ResType.T_DynamicUIPrefab))
                end
            elseif clickType == DialogueEnum.QTEClickType.Touch then
                local dialogueQTETouch = LuaCfgMgr.Get("DialogueQteTouch", styleId)
                if string.isnilorempty(link.conditionData.qteSetting.touchFX) == false then
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.format(FX_Path, link.conditionData.qteSetting.touchFX))
                end
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueQTETouch.Path, ResType.T_DynamicUIPrefab))
            elseif clickType == DialogueEnum.QTEClickType.SpeechRecognition then
                local dialogueQTEBlow = LuaCfgMgr.Get("DialogueQteBlow", styleId)
                if dialogueQTEBlow then
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueQTEBlow.Path, ResType.T_DynamicUIPrefab))
                    local dialogueClick = LuaCfgMgr.Get("DialogueQteClick", dialogueQTEBlow.ClickID)
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueClick.Path, ResType.T_DynamicUIPrefab))
                    local dialogueLongPress = LuaCfgMgr.Get("DialogueQteClick", dialogueQTEBlow.LongPressID)
                    DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueLongPress.Path, ResType.T_DynamicUIPrefab))
                end
            end
        end
    end
end

---分析剧情手机的资源
---@param assetList table
---@param id int
function DialogueSubPackageUtil.AnalyzePhoneRes(assetList, id)
    local condition = { MsgID = id }
    local phoneDatas = LuaCfgMgr.GetListByCondition("DialoguePhoneMsgConversation", condition)
    for _, phoneData in pairs(phoneDatas) do
        if (phoneData.Type == 3) then
            DialogueSubPackageUtil.InsertToList(assetList.WWise, phoneData.Resource)
        elseif (phoneData.Type == 4) then
            DialogueSubPackageUtil.InsertToList(assetList.UIAbbr1, phoneData.Resource)
        elseif (phoneData.Type == 5) then
            DialogueSubPackageUtil.InsertToList(assetList.Video, phoneData.Resource)
        elseif (phoneData.Type == 20) then
            DialogueSubPackageUtil.InsertToList(assetList.UIAbbr1, phoneData.Resource)
        elseif (phoneData.Type == 22) then
            DialogueSubPackageUtil.InsertToList(assetList.UIAbbr1, phoneData.Resource)
        end
    end
end

---@param assetList table
---@param id int
function DialogueSubPackageUtil.AnalyzeScene2DInfoRes(assetList, id)
    local scene2DInfo = LuaCfgMgr.Get("Scene2DInfo", id)
    if scene2DInfo then
        DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.format(BG_Path, scene2DInfo.SceneName))
        if scene2DInfo.InitialFx then
            for _, name in pairs(scene2DInfo.InitialFx) do
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.format(FX_Path, name))
            end
        end
        if scene2DInfo.InitialPpv then
            for _, name in pairs(scene2DInfo.InitialPpv) do
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, string.format(PPVAnim_Path, name))
            end
        end
    end
end

---@param assetList table
---@param eventId int
function DialogueSubPackageUtil.AnalyzeEventRes(assetList, eventId)
    local dialogueFucEvent = LuaCfgMgr.Get("DialogueFucEvent", eventId)
    if dialogueFucEvent then
        if dialogueFucEvent.FucType == DialogueEnum.DialogueFucType.Special then
            if dialogueFucEvent.EventName == DialogueConst.EventName.OpenUIPrefab or
                    dialogueFucEvent.EventName == DialogueConst.EventName.CloseUIPrefab then
                DialogueSubPackageUtil.InsertToList(assetList.Prefab, Res.GetAssetPath(dialogueFucEvent.Para0, ResType.T_DynamicUIPrefab))
            elseif dialogueFucEvent.EventName == DialogueConst.EventName.FreeMotionStart then
                local freeMotionCfg = LuaCfgMgr.Get("FreeMotion", tonumber(dialogueFucEvent.Para0))
                if freeMotionCfg then
                    DialogueSubPackageUtil.InsertToList(assetList.FSM, freeMotionCfg.Name)
                end
            end
        end
    end
end

---@param list any[]
---@param data any
function DialogueSubPackageUtil.InsertToList(list, data)
    if table.indexof(list, data) == false then
        table.insert(list, #list + 1, data)
    end
end

return DialogueSubPackageUtil