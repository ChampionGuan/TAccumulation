---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/3/8 11:57
---

---@class DialogueDebugger
local DialogueDebugger = class("DialogueDebugger")

---@class DialogueDebuggerData
---@field table<DialogueDebuggerController> controllerList

---@class DialogueDebuggerController
---@field string key
---@field table<DialogueDebuggerSystem> systemList
---@field table<DialogueDebuggerVariable> variableList

---@class DialogueDebuggerSystem
---@field int dialogueInfoId
---@field string dialogueName
---@field bool isPlaying
---@field float dialogueSpeed
---@field table<DialogueDebuggerPipeline> pipelineList

---@class DialogueDebuggerVariable
---@field int key
---@field int value

---@class DialogueDebuggerPipeline
---@field string pipelineKey
---@field DialogueDebuggerNode curNode
---@field table<int> playedRuntimeEntries

---@class DialogueDebuggerNode
---@field int uniqueId
---@field bool dialogueEnd
---@field bool nodeWaitEnd
---@field bool eventEnd
---@field bool voiceEnd
---@field bool selfActionEnd
---@field bool allActionsEnd
---@field bool qteEnd
---@field bool choiceEnd

---@type DialogueDebuggerData
local debuggerData = {}

local CS_Mgr = CS.PapeGames.DialogueEditor.Debugger.DialogueDebuggerMgr.Instance

---获得剧情数据快照
function DialogueDebugger:CreateSnapshot()
    if DialogueManager then
        table.clear(debuggerData)
        debuggerData.controllerList = {}
        local dialogueControllerDict = DialogueManager.GetDialogueControllers()
        for controllerKey, dialogueController in pairs(dialogueControllerDict) do
            table.insert(debuggerData.controllerList, #debuggerData.controllerList + 1,
                    self:CreateControllerSnapshot(controllerKey, dialogueController))
        end
        CS_Mgr:CreateSnapshot(debuggerData)
    end
end

---@param controllerKey string
---@param controller DialogueController
---@return DialogueDebuggerController
function DialogueDebugger:CreateControllerSnapshot(controllerKey, controller)
    local debuggerController = { key = controllerKey, systemList = {}, pipelineList = {} }
    local variableList = {}
    for variableKey, variableValue in pairs(controller.variableStateDict) do
        table.insert(variableList, #variableList + 1, { key = variableKey, value = variableValue })
    end
    for _, dialogueSystem in pairs(controller.dialogueSystemDict) do
        local debuggerSystem = self:CreateSystemSnapshot(dialogueSystem)
        debuggerSystem.variableList = variableList
        table.insert(debuggerController.systemList, #debuggerController.systemList + 1, debuggerSystem)
    end
    for _, dialoguePipeline in pairs(controller.pipelineDict) do
        table.insert(debuggerController.pipelineList, #debuggerController.pipelineList + 1,
                self:CreatePipelineSnapshot(dialoguePipeline))
    end
    return debuggerController
end

---@param system DialogueSystem
---@return DialogueDebuggerSystem
function DialogueDebugger:CreateSystemSnapshot(system)
    local debuggerSystem = { dialogueInfoId = system.dialogueInfoId, dialogueName = (system.database and system.database.name or nil),
                             isPlaying = system.isUpdating, dialogueSpeed = system.dialogueSpeed }
    return debuggerSystem
end

---@param pipeline DialoguePipeline
---@return DialogueDebuggerPipeline
function DialogueDebugger:CreatePipelineSnapshot(pipeline)
    local debuggerPipeline = { pipelineKey = pipeline.uniqueId, playedRuntimeEntries = {} }
    ---Debug暂时只取第一个
    if pipeline.nodePlayerDict then
        for _,v in pairs(pipeline.nodePlayerDict) do
            debuggerPipeline.curNode = self:CreateNodeSnapshot(v.curNodeController)
            break
        end
    end
    local actionList = {}
    debuggerPipeline.playedRuntimeEntries = pipeline.playedRuntimeEntries
    for _, actionGroup in pairs(pipeline.actionGroups) do
        for _, action in pairs(actionGroup.actionList) do
            if action:GetState() ~= DialogueEnum.DialogueActionState.Complete then
               table.insert(actionList, #actionList + 1, string.format("%s_%s", action.nodeUniqueId, action.id))
            end
        end
    end
    debuggerPipeline.actionList = table.concat(actionList, ",")
    debuggerPipeline.isPlaying = pipeline.isActive and pipeline.curNodeController ~= nil and actionCount > 0
    debuggerPipeline.dialogueName = pipeline.dialogueInfo.Name
    return debuggerPipeline
end

---@param nodeController NodeController
---@return DialogueDebuggerNode
function DialogueDebugger:CreateNodeSnapshot(nodeController)
    local debuggerNode = { uniqueId = 0 }
    if nodeController ~= nil then
        debuggerNode.uniqueId = nodeController.dialogueEntry.uniqueID
        debuggerNode.nodeType = nodeController.dialogueEntry.conditionType
        debuggerNode.nodeStartedTime = nodeController.nodeStartedTime
        debuggerNode.dialogueEnd = nodeController.dialogueEnd
        debuggerNode.nodeWaitEnd = nodeController.nodeWaitEnd
        debuggerNode.eventEnd = nodeController.eventEnd
        debuggerNode.CTSEventEnd = nodeController.CTSEventEnd
        debuggerNode.voiceEnd = nodeController.voiceEnd
        debuggerNode.selfActionEnd = nodeController.selfActionEnd
        debuggerNode.allActionsEnd = nodeController.allActionsEnd
        debuggerNode.textMoveoutEnd = nodeController.textMoveoutEnd
        debuggerNode.qteEnd = nodeController.qteEnd
        debuggerNode.choiceEnd = nodeController.choiceEnd
    end
    return debuggerNode
end

return DialogueDebugger