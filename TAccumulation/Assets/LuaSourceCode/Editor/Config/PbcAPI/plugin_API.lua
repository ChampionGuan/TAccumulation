--警告 文件内容通过菜单修改  请勿更改--

---@class pbcmessage.CodeGeneratorRequest @ An encoded CodeGeneratorRequest is written to the plugin's stdin.
---   // The .proto files that were explicitly listed on the command-line.  The
---   // code generator should generate code only for these files.  Each file's
---   // descriptor will be included in proto_file, below.
---@field file_to_generate string[] 
--- 
---   // The generator parameter passed on the command-line.
---@field string boolean 
--- 
---   // FileDescriptorProtos for all files in files_to_generate and everything
---   // they import.  The files will appear in topological order, so each file
---   // appears before any file that imports it.
---   //
---   // protoc guarantees that all proto_files will be written after
---   // the fields above, even though this is not technically guaranteed by the
---   // protobuf wire format.  This theoretically could allow a plugin to stream
---   // in the FileDescriptorProtos and handle them one by one rather than read
---   // the entire set into memory at once.  However, as of this writing, this
---   // is not similarly optimized on protoc's end -- it will store all fields in
---   // memory at once before sending them to the plugin.
---   //
---   // Type names of fields and extensions in the FileDescriptorProto are always
---   // fully qualified.
---@field proto_file pbcmessage.FileDescriptorProto[] 
--- 
---   // The version number of protocol compiler.
---@field Version boolean 
--- 
local  CodeGeneratorRequest  = {}
---@class pbcmessage.CodeGeneratorResponse @ The plugin writes an encoded CodeGeneratorResponse to stdout.
---   // Error message.  If non-empty, code generation failed.  The plugin process
---   // should exit with status code zero even if it reports an error in this way.
---   //
---   // This should be used to indicate errors in .proto files which prevent the
---   // code generator from generating correct code.  Errors which indicate a
---   // problem in protoc itself -- such as the input CodeGeneratorRequest being
---   // unparseable -- should be reported by writing a message to stderr and
---   // exiting with a non-zero status code.
---@field string boolean 
--- 
---   // A bitmask of supported features that the code generator supports.
---   // This is a bitwise "or" of values from the Feature enum.
---@field uint64 boolean 
--- 
---   // Sync with code_generator.h.
---@field  0 pbcmessage.FEATURE_NONE 
---@field  1 pbcmessage.FEATURE_PROTO3_OPTIONAL 
local  CodeGeneratorResponse  = {}
---@class pbcmessage.Version @ The version number of protocol compiler.
---@field int32 boolean 
---@field int32 boolean 
---@field int32 boolean 
---   // A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
---   // be empty for mainline stable releases.
---@field string boolean 
local  Version  = {}
