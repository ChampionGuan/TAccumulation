---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2021/1/14 17:15
--- lua 计时器
---
---@class Timer
local Timer = class("Timer")
---@type TimerMgr
local cs_timer
---@class Timer.UpdateType
local UpdateType = {
    UPDATE = 1,
    LATE_UPDATE = 2,
    FIXED_UPDATE = 3,
    FINAL_UPDATE = 4,
}

Timer.UpdateType = UpdateType

---添加延时回调（忽略scale）
---@param delay number 单位是秒
---@param func function
---@param target table 如果有，调用func的时候就是冒号调用（可以访问方法中的self），如果没有就是点调用
---@param count boolean | number  如果是number的话，执行次数，-1或者true:无限次，>=1 执行count次数
---@param update_type number TimerMgr.UpdateType  1:update 2:lateupdate,3:fixupdate 默认1
---@param tag_name string 标签名称，用于调试
---@return number 用于取消注册的唯一id
function Timer:AddTimer(delay, func, target, count, update_type, is_frame, tag_name)
    return self:GenTimer(delay, func, target, count, false, update_type, is_frame, tag_name)
end

---添加延时回调,考虑scale
---@param delay number 单位是秒
---@param func function
---@param target table 如果有，调用func的时候就是冒号调用（可以访问方法中的self），如果没有就是点调用
---@param count boolean | number  如果是number的话，执行次数，-1或者true:无限次，>=1 执行count次数，是否是循环调用
---@param update_type number TimerMgr.UpdateType  1:update 2:lateupdate,3:fixupdate 默认1
---@param tag_name string 标签名称，用于调试
---@return number 用于取消注册的唯一id
function Timer:AddScaledTimer(delay, func, target, count, update_type, tag_name)
    return self:GenTimer(delay, func, target, count, true, update_type, false, tag_name)
end

---取消延时回调
---@param timer_id number
---@param force_remove boolean default false 是否强制删除，（外部调用请忽略）
function Timer:Discard(timer_id, force_remove)
    if not timer_id then
        return
    end
    local data = self.map[timer_id]
    if data then
        if force_remove then
            self.map[timer_id] = nil
            local update_map = self:GetUpdateMap(data.update_type)
            if update_map then
                update_map[timer_id] = nil
            end
            self:Release(data)
        else
            data.is_deleted = true
        end
    end
end

---返回游戏启动到现在的时间
---@param force boolean
---@return number
function Timer:RealtimeSinceStartup(force)
    return cs_timer and cs_timer.RealtimeSinceStartup(force) or os.time()
end

---返回游戏当前帧数
---@return int
function Timer:GetFrameCount()
    return cs_timer and cs_timer.GetFrameCount()
end

---根据绑定的target取消所有延时回调
---@param target table
function Timer:DiscardTimerByTarget(target)
    local timers = Timer.GetTimersByTarget(target)
    if not timers then
        return
    end
    for _, v in pairs(timers) do
        self:Discard(v)
    end
    target.__timer_pool = nil
    self:Release(timers)
end

---update
---@param delta number
function Timer:Update(delta)
    self:Execute(UpdateType.UPDATE, delta)
end

---lateupdate
---@param delta number
function Timer:LateUpdate(delta)
    self:Execute(UpdateType.LATE_UPDATE, delta)
end

---fixedupdate
---@param delta number
function Timer:FixedUpdate(delta)
    self:Execute(UpdateType.FIXED_UPDATE, delta)
end

---final_updated
---@param delta number
function Timer:FinalUpdate(delta)
    self:Execute(UpdateType.FINAL_UPDATE, delta)
end

---添加late update 回调
---@param func function
---@param target table
---@param tag_name string 标签名称，用于调试
---@return number
function Timer:AddLateUpdate(func, target, tag_name)
    local timer_id = self:GenTimer(0, func, target, true, nil, UpdateType.LATE_UPDATE, false, tag_name)
    if target then
        local func_list = target.__late_update
        if not func_list then
            func_list = self:GetTable()
            target.__late_update = func_list
        end
        table.insert(func_list, timer_id)
    end
    return timer_id
end

---
---清理计时器
---@param timer_id number
function Timer:RemoveLateUpdate(timer_id)
    if not timer_id then
        return
    end
    self:Discard(timer_id)
end

---根据target清理计时器
---@param target
function Timer:RemoveLateUpdateByTarget(target)
    if not target then
        return
    end
    local func_list = target.__late_update
    if func_list  then
        if #func_list>0 then
            for _, v in pairs(func_list) do
                self:RemoveLateUpdate(v)
            end
        end
        target.__late_update = nil
        self:Release(func_list)
    end
end

---添加late update 回调
---@param func function
---@param target table
---@return number
function Timer:AddFixedLateUpdate(func, target)
    local timer_id = self:GenTimer(0, func, target, true)
    if target then
        local func_list = target.__fixed_update
        if not func_list then
            func_list = self:GetTable()
            target.__fixed_update = func_list
        end
        table.insert(func_list, timer_id)
    end
    return timer_id
end

---
---清理计时器
---@param timer_id number
function Timer:RemoveFixedUpdate(timer_id)
    if not timer_id then
        return
    end
    self:Discard(timer_id)
end

---根据target 删除计时器
---@param target table
function Timer:RemoveFixedUpdateByTarget(target)
    if not target then
        return
    end
    local func_list = target.__fixed_update
    if func_list then
        if #func_list > 0 then
            for _, v in pairs(func_list) do
                self:RemoveLateUpdate(v)
            end
        end
        target.__fixed_update = nil
        self:Release(func_list)
    end
end

---添加计时器
---@see TimerMgr.AddLateUpdate
function Timer:AddFinalUpdate(func, target)
    local time_id = self:GenTimer(0, func, target, true, false, UpdateType.FINAL_UPDATE)
    if target then
        local func_list = target.__final_update
        if not func_list then
            func_list = self:GetTable()
            target.__final_update = func_list
        end
        table.insert(func_list, time_id)
    end
    return time_id
end

---清理计时器
---@param timer_id int
function Timer:RemoveFinalUpdate(timer_id)
    if not timer_id then
        return
    end
    self:Discard(timer_id)
end

---根据对象清理
---@param target table
function Timer:RemoveFinalUpdateByTarget(target)
    if not target then
        return
    end
    local func_list = target.__final_update
    if func_list  then
        if #func_list > 0 then
            for _, v in pairs(func_list) do
                self:RemoveFinalUpdate(v)
            end
        end
        target.__final_update = nil
        self:Release(func_list)
    end
end

---清理所有计时器
function Timer:Clear()
    for k, _ in pairs(self.map) do
        self:Discard(k, true)
    end
end

---根据target获取所有计时器
---@return int[]
function Timer.GetTimersByTarget(target)
    return target and rawget(target,"__timer_pool") or nil
end

---计算时间
---@param _time table
---@param delta number
---@param self Timer
local function check_time(_time, delta, self)
    local is_remove = false
    local is_finish = false
    if not _time or not _time.time then
        return true
    end
    --scaled
    if _time.is_scaled then
        _time.time = _time.time - delta
        if _time.time <= 0 then
            is_finish = true
        end
    elseif _time.is_frame then
        ---按帧跑
        if self:GetFrameCount() >= _time.time then
            is_finish = true
        end
    else
        if self:RealtimeSinceStartup() >= _time.time then
            is_finish = true
        end
    end
    if is_finish then
        if _time.count ~= -1 then
            if _time.count <= 1 then
                _time.is_deleted = true
                is_remove = true
            else
                _time.count = _time.count - 1
            end
        end
        if not is_remove then
            self:CalcTime(_time)
        end
        if _time.func then
            local need_sample = not string.isnilorempty(_time.tag_name)
            if need_sample then
                cs_timer.BeginSample(_time.tag_name)
            end
            _time.func(_time.target)
            if need_sample then
                cs_timer.EndSample(_time.tag_name)
            end
        end
    end
    return is_remove
end

local _update_map
local _timer
local remove_list = {}

---执行计时器
---@param update_type int
---@param delta number
function Timer:Execute(update_type, delta)
    _update_map = self:GetUpdateMap(update_type)
    if _update_map then
        for k, v in pairs(_update_map) do
            _timer = self:GetTimer(v)
            if _timer and not _timer.is_deleted then
                if check_time(_timer, delta, self) then
                    table.insert(remove_list, k)
                end
            else
                table.insert(remove_list, k)
            end
        end
    end
    if #remove_list > 0 then
        for k, v in pairs(remove_list) do
            self:Discard(v, true)
            remove_list[k] = nil
        end
    end
end

---生成时间数据
---@param delay number
---@param func function
---@param target table
---@param is_scaled boolean
---@param update_type int
---@param is_frame boolean
---@param tag_name string
---@return int
function Timer:GenTimer(delay, func, target, count, is_scaled, update_type, is_frame, tag_name)
    if count ~= nil then
        if count == true then
            count = -1
        else
            if tonumber(count) then
                count = count
            else
                count = 1
            end
        end
    else
        count = 1
    end
    delay = delay or 0
    update_type = update_type or UpdateType.UPDATE
    target = target and target or self
    local __timer_pool = Timer.GetTimersByTarget(target)
    if not __timer_pool then
        __timer_pool = self:GetTable()
        rawset(target,"__timer_pool",__timer_pool)
    end
    local cache = self:GetCache()
    local id = cache.id
    cache.delay = delay
    cache.func = func
    cache.target = target ~= self and target or nil
    cache.count = count
    cache.is_frame = is_frame
    cache.is_scaled = is_scaled
    cache.update_type = update_type
    cache.is_deleted = false
    if DEBUG_GM then
        cache.tag_name = tag_name and tag_name or target.__cname
    end
    self:CalcTime(cache)
    self.map[id] = cache
    local update_map = self:GetUpdateMap(update_type)
    if update_map then
        update_map[id] = id
    end
    table.insert(__timer_pool, id)
    return id
end

---重新计算时间
---@param timer
function Timer:CalcTime(timer)
    if timer.is_frame then
        timer.time = timer.delay + self:GetFrameCount()
    elseif timer.is_scaled then
        timer.time = timer.delay
    else
        timer.time = timer.delay + self:RealtimeSinceStartup(true)
    end
end

---@param timer_id int
---@return table<int,>
function Timer:GetTimer(timer_id)
    return self.map[timer_id]
end

---@param update_type Timer.UpdateType
---@return table<int,int>
function Timer:GetUpdateMap(update_type)
    return update_type and self.update_map[update_type] or nil
end

---@return _timer
function Timer:GetCache()
    ---@type _timer
    local data = self:GetTable()
    data.id = self:GetId()
    return data
end

---@return table
function Timer:GetTable()
    local t
    if self.pool_get then
        t  = self.pool_get()
    end
    if not t then
        t = #self.cache>0 and table.remove(self.cache) or {}
    end
    return t
end

---@param data table
function Timer:Release(data)
    if not data then return end
    if self.pool_release then
        self.pool_release(data)
    else
        table.clear(data)
        table.insert(self.cache,data)
    end
end

---@return int
function Timer:GetId()
    self.timer_id = self.timer_id + 1
    return self.timer_id
end

---@class _timer
---@field id int
---@field delay number
---@field func function
---@field target table
---@field count int
---@field is_frame boolean
---@field is_scaled boolean
---@field update_type Timer.UpdateType
---@field is_deleted boolean
---@field tag_name string
function Timer:ctor()
    self.timer_id = 0
    ---@type table<int,_timer>
    self.map = {}
    ---@type table<int,int>
    self.update_map = {}
    ---缓存池获取方法
    ---@type fun():table
    self.pool_get = nil
    ---缓存池释放方法
    ---@type fun(type:table):void
    self.pool_release = nil
    for _, v in pairs(UpdateType) do
        self.update_map[v] = {}
    end
    self.cache = {}
end

---设置缓存池
---@param pool_get fun():table
---@param pool_release fun(type:table)
function Timer:SetPool(pool_get, pool_release)
    self.pool_get = pool_get
    self.pool_release = pool_release
end

---设置引擎计时器
---@param timer
function Timer:SetEngineTimer(timer)
    cs_timer = timer
end

return Timer