---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/12/19 20:33
--- 提供有序table
---可以进行确定性遍历的table
---@class OrderTable
---@field __keys any[]
---@field __map table<any, any>
local OrderTable = {}

local meta,_pairs

---@return OrderTable
function OrderTable.new()
    local t = {}
    t.__keys = {}
    t.__map = {}
    for k,v in pairs(OrderTable) do
        t[k] =v
    end
    return setmetatable(t, meta)
end

---@param dt table
---@return boolean
local function _isOrderTable(dt)
    return dt and dt.__keys ~= nil
end

---@param dt OrderTable
---@return int
function OrderTable.Len(dt)
    return meta.__len(dt)
end

---根据key添加的先后顺序，从后往前，倒叙序遍历
---@generic K, V
---@param dt table<K, V>|V[]
---@return fun(tbl: table<K, V>):K, V
function OrderTable.Pairs(dt)
    if not dt then return end
    if not _isOrderTable(dt) then
        return pairs(dt)
    end
    local m = getmetatable(dt)
    return m.__pairs(dt)
end

---根据插入的顺序从后往前
---@param dt OrderTable
---@param itor fun(type:any,type:any) 迭代器
function OrderTable.PairsByDescending(dt,itor)
    if not dt or not itor then
        return
    end
    if not _isOrderTable(dt) then
        return pairs(dt)
    end
    local len = dt.Len(dt)
    for i = len, 1,-1 do
        itor(dt.__keys[i],dt.GetValueByIndex(dt,i))
    end
end

---@param dt OrderTable
---@param idx int
---@return any
function OrderTable.GetValueByIndex(dt,idx)
    if not dt or not idx then return end
    if not _isOrderTable(dt) then
        return dt and dt[idx] or nil
    end
    return dt[dt.__keys[idx]]
end

---清空table数据
---@param dt OrderTable
function OrderTable.Clear(dt)
    if not dt then return end
    if not _isOrderTable(dt) then
        return table.clear(dt)
    end
    table.clear(dt.__keys)
    table.clear(dt.__map)
end

--region private
_pairs = function(t,key)
    local map = t.__map
    local keys = t.__keys
    if key~=nil then
        key = table.indexof(keys,key)
    end
    local nk, nv = next(keys, key)
    if nk then
        nk = nv
        nv =map[nv]
    end
    return nk, nv
end

meta = {
    __index = function(t,k)
        return rawget(t.__map,k)
    end,
    __newindex = function(t,k,v)
        local value = rawget(t.__map, k)
        --如果相同就删除
        if value == v then
            return
        end
        local keys = t.__keys

        ---删除之前的key，视为新插入
        if value~=nil then
            table.removebyvalue(keys,k)
        end
        rawset(t.__map, k, v)
        if v~=nil then
            table.insert(keys, k)
        end
    end,
    __len = function(t) return #t.__keys  end,
    __pairs = function(t,key)
        return _pairs,t
    end,
}
--endregion

return OrderTable