---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/8/27 17:40
---
---缓存数据相关，重复用的数据或者gameObject
---@class PoolUtil
local PoolUtil = {}
---table 缓存池
---@type Pool
local TABLE_POOL = nil
local POOL_MAP = {}
---@class Pool
local Pool = class("Pool",nil,true)

---@param create_func fun(type:any):any  创建函数
---@param release_func fun(type:any) 清理函数
---@param max_count int
---@return Pool
function PoolUtil.Get(create_func, release_func,max_count)
    return PoolUtil._GetPool(create_func, release_func,max_count)
end

---清理pool
---@param pool Pool
function PoolUtil.Release(pool)
    if pool then
        if not pool.__Pool then
            Debug.LogWarningFormat("[PoolUtil.Release] failed:[%s]",pool.__cname)
            return
        end
        pool:Clear()
        table.insert(POOL_MAP, pool)
    end
end

---clear
function PoolUtil.Clear()
    TABLE_POOL = nil
    POOL_MAP = {}
end

---从缓存池中取
---@return table
function PoolUtil.GetTable()
    if not TABLE_POOL then
        TABLE_POOL = PoolUtil.Get(function()
            return {}
        end, function(t)
            table.clear(t)
        end, 500)
    end
    return TABLE_POOL:Get()
end

---释放table
---@param t table
function PoolUtil.ReleaseTable(t)
    if TABLE_POOL then
        TABLE_POOL:Release(t)
    end
end

---获取数据
---@return any
function Pool:Get(...)
    local p
    if #self.cache_list > 0 then
        p = table.remove(self.cache_list)
        self.map[p] = nil
    else
        p = self.create_func(...)
    end
    return p
end

---清理数据
---@param data any
function Pool:Release(data)
    if not data then
        return
    end
    if self.map[data] then
        return
    end
    if self.release_func then
        self.release_func(data)
    end
    if self.max_count==nil or  #self.cache_list<=self.max_count then
        self.map[data] = true
        table.insert(self.cache_list, data)
    end
end

---@param create_func fun(type:any):any
---@param release_func fun(type:any)
---@param max_count int
function PoolUtil._GetPool(create_func, release_func,max_count)
    local pool
    if #POOL_MAP > 0 then
        pool = table.remove(POOL_MAP)
    else
        pool = Pool.new()
    end
    pool:Set(create_func, release_func,max_count)
    return pool
end

function Pool:ctor()
    self.cache_list = {}
    self.map = {}
end

---@param create_func fun(type:any):any
---@param release_func fun(type:any)
---@param max_count int
function Pool:Set(create_func, release_func,max_count)
    self.create_func = create_func
    self.release_func = release_func
    self.max_count = max_count
end

function Pool:Clear()
    self.create_func = nil
    self.release_func = nil
    self.max_count = nil
    self:ClearCache()
end

function Pool:ClearCache()
    for k, v in pairs(self.cache_list) do
        self:Release(v)
    end
    table.clear(self.map)
    table.clear(self.cache_list)
end

return PoolUtil