---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fuqiang.
---

local CSX3Battle = CS.X3Battle
local CSBattleClient = CSX3Battle.BattleClient
local CSBattle = CSX3Battle.Battle

require("Runtime.Battle.Common.XECS")
require("Runtime.Battle.Common.LuaPool")
require("Runtime.Battle.Common.BattleEnum")
require("Runtime.Battle.Common.BattleUtil")

---@type SimpleStateMachine
local StateMachine = require("Runtime.Battle.Common.SimpleStateMachine").SimpleStateMachine
local StartupState = require("Runtime.Battle.SubState.StartupState")
local InBattleState = require("Runtime.Battle.SubState.InBattleState")
local ShutdownState = require("Runtime.Battle.SubState.ShutdownState")
local SettlementState = require("Runtime.Battle.SubState.SettlementState")

---@class BattleLauncher
local BattleLauncher = XECS.class("BattleLauncher")

function BattleLauncher:ctor()
    self.startupState = StartupState.new(self)
    self.inBattleState = InBattleState.new(self)
    self.shutdownState = ShutdownState.new(self)
    self.settlementState = SettlementState.new(self)
    self.stateMachine = StateMachine.new()
end

---开启一场副本战斗
---@param dungeon pbcmessage.DungeonCreateUpdateReply
function BattleLauncher:StartupByDungeon(dungeon)
    CriticalLog.Log("[战斗][启动流程][BattleLauncher.StartupByDungeon()],开启一场在线战斗！")
    --- 清理战场
    self:CleanupBattlefield(false)
    --- 切换到战前状态
    local battleArg = BattleUtil.CreateBattleArgOnline(dungeon)
    self.stateMachine:Switch(self.startupState, battleArg)
end

---自定义战斗启动
---@param battleArg CS.X3Battle.BattleArg
function BattleLauncher:StartupByCustom(battleArg)
    CriticalLog.Log("[战斗][启动流程][BattleLauncher.StartupByCustom()] 开启一场离线战斗！")
    --- 清理战场
    self:CleanupBattlefield(false)
    --- 切换到战前状态
    BattleUtil.CreateBattleArgOffline(battleArg)
    self.stateMachine:Switch(self.startupState, battleArg)
end

---快速重启战斗
function BattleLauncher:QuickRestart()
    if self.stateMachine.currState ~= self.inBattleState then
        CriticalLog.Log("[BattleLauncher:QuickRestart()]重启战斗失败，当前不在战斗中状态，请检查！")
        return
    end

    CriticalLog.Log("[战斗][启动流程][BattleLauncher.QuickRestart()],重新开启一场战斗！")
    -- 清理引导数据
    BattleUtil.SendCleanGuideEvent()
    -- 记录启动数据
    local battleArg = CSBattle.Instance.arg
    -- 清理战场
    self:CleanupBattlefield(false)
    -- 切换到战前状态
    battleArg.fromGameState = GameStateMgr.GetCurStateName()
    self.stateMachine:Switch(self.startupState, battleArg)
end

---结束当前战斗
---@param result boolean
function BattleLauncher:End(result)
    if self.stateMachine.currState ~= self.inBattleState then
        CriticalLog.Log("[BattleLauncher:End()]结束战斗失败，当前不在战斗中状态，请检查！")
        return
    end

    CSBattleClient.Instance:End(result)
end

---进入退出状态，清理战场（销毁战斗实例，卸载战斗资源，恢复系统和游戏设置）
---@param isCoroutine boolean 是否使用协程
function BattleLauncher:CleanupBattlefield(isCoroutine, onCompleteFunc)
    if not self:CanShutdown() then
        CriticalLog.Log("[BattleLauncher:CleanupBattlefield()]清理战场失败，当前不允许进入退出状态，请检查！")
        return
    end

    --- 切换到退出战斗状态
    self.stateMachine:Switch(self.shutdownState, BattleShutdownType.CleanupBattlefield, isCoroutine, onCompleteFunc)
end

---进入退出状态，退出战斗（拉起竖屏，并清理战场）
---todo:是否一定要成功！！
function BattleLauncher:Shutdown()
    if not self:CanShutdown() then
        CriticalLog.Log("[BattleLauncher:Shutdown()]退出战斗失败，当前不允许进入退出状态，请检查！")
        return
    end

    --- 切换到退出战斗状态
    self.stateMachine:Switch(self.shutdownState, BattleShutdownType.ExitMainState)
end

--- 设置战斗退出时的回调函数
--- 在战斗空闲时直接触发回调，或者在战斗退出完成时触发此回调
--- 此函数由系统组调用（等待战斗逻辑结束）
function BattleLauncher:SetShutdownCompletedFunc(onCompleteFunc)
    if self.stateMachine.currState == nil then
        XECS.XPCall(onCompleteFunc)
    else
        CriticalLog.Log("[战斗][BattleLauncher.SetDestroyCompletedFunc()],设置战斗退出时的回调函数！！")
        self.shutdownState._onShutdownCompleted = onCompleteFunc
    end
end

--- 是否可退出战斗
function BattleLauncher:CanShutdown()
    local currState = self.stateMachine.currState
    return currState == nil or (currState:CanExit(self.shutdownState) and self.shutdownState:CanEnter(currState))
end

g_battleLauncher = BattleLauncher.new()
return g_battleLauncher
