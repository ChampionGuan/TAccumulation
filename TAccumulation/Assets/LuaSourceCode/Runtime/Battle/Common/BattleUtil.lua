---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2022/6/6 10:53
---

local xluaUtil = require("Runtime.Common.BuildIn.xlua.util")
---@type GraphicsSettingConst
local GraphicsSettingConst = require("Runtime.System.X3Game.GameConst.GraphicsSettingConst")

local CoroutineProxy = CS.PapeGames.X3.CoroutineProxy
local IsNull = CS.XLuaHelper.IsNull
local csBattleUtil = CS.X3Battle.BattleUtil
local BattleStartupType = CS.X3Battle.BattleStartupType
local TargetLockModeType = CS.X3Battle.TargetLockModeType
local SkillSlotType = CS.X3Battle.SkillSlotType
local AttrType = CS.X3Battle.AttrType
local RoleType = CS.X3Battle.RoleType
local AfterBroken = CS.X3Battle.BattleResTag.AfterBrokenShirt
local OriginalSkin = CS.X3Battle.BattleResTag.OriginalSkin
local ResTypeSprite = CS.X3Battle.BattleResType.Sprite
local ResTypeUI = CS.X3Battle.BattleResType.UI

local CSGetDictValue = xlua.get_generic_method(csBattleUtil, "GetDictValue")
local CSForeachDict = xlua.get_generic_method(csBattleUtil, "ForeachDict")
local CSRes = CS.PapeGames.X3.Res
local CSSystemGC = CS.System.GC
local CSUnityEngineResources = CS.UnityEngine.Resources
local CSX3Battle = CS.X3Battle

-- key： 表格名：BattleSkill， sheet名：SkillTypeConfig。 server端定义的技能类型
--- value： 战斗逻辑中定义的技能槽位类型
local GirlSkillTypeToSlotType = {
    [1] = SkillSlotType.Attack,
    [2] = SkillSlotType.Active,
    [3] = SkillSlotType.Dodge,
    [4] = SkillSlotType.Passive,
    [6] = SkillSlotType.QTEDodge,
    [9] = SkillSlotType.Special,
    [10] = SkillSlotType.Dead,
    [28] = SkillSlotType.Born,
    [29] = SkillSlotType.Support,
}

local BoySkillTypeToSlotType = {
    [11] = SkillSlotType.Attack,
    [12] = SkillSlotType.Active,
    [13] = SkillSlotType.Dodge,
    [14] = SkillSlotType.Passive,
    [15] = SkillSlotType.Love,
    [19] = SkillSlotType.Fill,
    [20] = SkillSlotType.Dead,
    [21] = SkillSlotType.Coop,
    [22] = SkillSlotType.Ultra, -- 男主给女主的爆发技能
    [23] = SkillSlotType.Combo,
    [24] = SkillSlotType.Fill,
    [25] = SkillSlotType.Coop, -- 男主给自己的连携技
    [26] = SkillSlotType.Coop, -- 男主给女主的连携技
    [27] = SkillSlotType.Born,
    [30] = SkillSlotType.Support,
}

local BuffImageNameToID = {
    ["a2_battlebuff_common_buff"] = 0,
    ["a2_battlebuff_common_debuff"] = 1,
    ["a2_battlebuff_common_attack_decrease"] = 2,
    ["a2_battlebuff_common_attack_increase"] = 3,
    ["a2_battlebuff_common_defense_increase"] = 4,
    ["a2_battlebuff_common_gaindamage_increase"] = 5,
    ["a2_battlebuff_common_state_burning"] = 6,
    ["a2_battlebuff_common_state_frozen"] = 7,
}

---@class BattleUtil
BattleUtil = {}

local MemorySnapName = ""

function BattleUtil.PrintAllCSType()
    local str = ""
    for type, _ in pairs(CS.X3Battle) do
        str = str .. "typeof(" .. type .. "),"
    end

    Debug.LogError(str)
end

function BattleUtil.CloseBattleUI(levelId)
    UIMgr.Close("BattleWnd", false)
    UIMgr.Close("BattleTipsWnd", false)
    ---跟策划（亚森）约定为新手关卡
    if csBattleUtil.IsGuideLevel(levelId) then
        UIMgr.Close("NoviceGuideWnd", false)
    end
end

function BattleUtil.ClearMemory()
    CSUnityEngineResources.UnloadUnusedAssets()
    collectgarbage("collect")
    collectgarbage("collect")
    -- 卸载无用的资源加载器
    CSRes.UnloadUnusedLoaders()
    CSSystemGC.Collect()
end

---@param dir Vector3
---@return Vector3 @0 ~ 180
function BattleUtil.GetAngle(dir)
    local zPos = Vector3(0, 0, 1)
    local angle = Vector3.Angle(zPos, dir)
    if dir.x < 0 then
        angle = 360 - angle
    end
    return angle
end

----180度的条件下，正时针为负  反之为正
---@param from Vector3
---@param to Vector3
---@return Vector3 @-180 ~ 180
function BattleUtil.GetAngleFromTo(from, to)
    local forwardAngle = BattleUtil.GetAngle(from)
    local dirAngle = BattleUtil.GetAngle(to)

    local deltaAngle = dirAngle - forwardAngle
    if deltaAngle < 0 then
        deltaAngle = deltaAngle + 360
    end

    local angle = Vector3.Angle(from, to)
    if deltaAngle < 180 then
        angle = -angle
    end
    return angle
end

---@param camTransform UnityEngine.Transform
---@param q Vector3
function BattleUtil.GetCameraFlatPos(camTransform, q)
    local p = camTransform.position
    local n = camTransform.forward
    local q1 = q - (Vector3.Dot(q, n) - Vector3.Dot(p, n)) * n
    return q1
end

function BattleUtil.IsNull(obj)
    return obj == nil or IsNull(obj)
end

---@param tgt UnityEngine.Transform
---@param name string
---@return UnityEngine.Transform
function BattleUtil.FindChild(tgt, name)
    if not tgt or not name or "" == name then
        return nil
    end
    if tgt.name == name then
        return tgt
    end

    local t
    for i = 0, tgt.childCount - 1 do
        t = BattleUtil.FindChild(tgt:GetChild(i), name)
        if t then
            return t
        end
    end
    return nil
end

---获取字典key对应的值
---@return any
function BattleUtil.GetDictValue(type, dict, key)
    local func = CSGetDictValue(type)
    return func(dict, key)
end

---遍历字典
---@return any
function BattleUtil.ForeachDict(type, dict, call)
    local func = CSForeachDict(type)
    return func(dict, call)
end

---获取所有关卡配置
---@return X3Battle.BattleLevelConfig
function BattleUtil.GetBattleLevelConfig(id)
    return TbUtil.GetBattleLevelConfig(id)
end

---获取怪角色属性
---@return X3Battle.MonsterProperty
function BattleUtil.GetMonsterProperty(id)
    return TbUtil.GetMonsterProperty(id)
end

---获取角色配置
---@param Id int 怪物模板Id
---@return X3Battle.RoleCfg
function BattleUtil.GetActorConfig(id)
    return TbUtil.GetActorCfg(id)
end

---快速战斗专用，暂不优化
---获取所有武器配置
---@return Dictionary<int, X3Battle.WeaponSkinConfig>
function BattleUtil.GetWeaponSkinConfigs()
    return TbUtil.weaponSkinConfigs
end

---获取武器皮肤配置
---@return X3Battle.WeaponLogicConfig
function BattleUtil.GetWeaponLogicConfig(id)
    return TbUtil.GetWeaponLogicConfig(id)
end

---获取武器配置
---@return X3Battle.WeaponSkinConfig
function BattleUtil.GetWeaponSkinConfig(id)
    return TbUtil.GetWeaponSkinConfig(id)
end

---获取男主配置
---@return X3Battle.BoyCfg
function BattleUtil.GetBoyConfig(id)
    return TbUtil.GetBoyCfg(id)
end

---获取女主配置
---@return X3Battle.RoleCfg
function BattleUtil.GetGirlConfig(id)
    return TbUtil.GetGirlCfg(id)
end

---获取技能配置
---注意：主动技能、被动技能，都从这个配置中获取，他们是相同的数据结构
---@param skillID Int
---@return X3Battle.SkillCfg
function BattleUtil.GetSkillConfig(skillID)
    return TbUtil.GetSkillCfg(skillID)
end

---获取技能配置
---注意：主动技能、被动技能，都从这个配置中获取，他们是相同的数据结构
---@param skillID Int
---@param level Int 等级
---@return X3Battle.SkillLevelCfg
function BattleUtil.GetSkillLevelConfig(skillID, level)
    return TbUtil.GetSkillLevelCfg(skillID, level)
end

---根据weaponID获得技能描述相关信息
---@param weaponID int
---@return SkillInfo[]
function BattleUtil.GetSkillInfoByWeaponID(weaponID)
    local WeaponSkinConfig = BattleUtil.GetWeaponSkinConfig(weaponID)
    if not WeaponSkinConfig then
        Debug.LogErrorFormat("WeaponSkinConfig is nil. weaponID = %s ", tostring(weaponID))
        return
    end
    local weaponLogicConfig = BattleUtil.GetWeaponLogicConfig(WeaponSkinConfig.WeaponLogicID)
    if not weaponLogicConfig then
        Debug.LogErrorFormat("weaponLogicConfig is nil. weaponID = %s ", tostring(weaponID))
        return
    end
    local skillInfoList = {}
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(weaponLogicConfig.AttackDescriptionID, SkillType.Attack, 1))
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(weaponLogicConfig.DodgeDescriptionID, SkillType.Dodge, 1))
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(weaponLogicConfig.ActiveSkillDescriptionID, SkillType.Active, 1))
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(weaponLogicConfig.PassiveSkillDescriptionID, SkillType.Passive, 1))
    return skillInfoList
end

---根据scoreID获得技能描述相关信息
---@param scoreID int
---@return SkillInfo[]
function BattleUtil.GetSkillInfoByScoreID(scoreID)
    local boycfg = BattleUtil.GetBoyConfig(scoreID)
    if not boycfg then
        Debug.LogErrorFormat("boycfg is nil. scoreID = %s ", tostring(scoreID))
        return
    end
    local skillInfoList = {}
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(boycfg.PassiveSkillDescriptionID, SkillType.Passive, 1))
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(boycfg.ActiveSkillDescriptionID, SkillType.MaleActive, 1))
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(boycfg.CoopSkillDescriptionID, SkillType.Coop, 1))
    table.insert(skillInfoList, BattleUtil.GetSkillInfo(boycfg.UltraSkillDescriptionID, SkillType.Ultra, 1))
    return skillInfoList
end


---@class SkillInfo
---@field id int
---@field skillType int
---@field name string
---@field icon string
---@field typeName string
---@field description string
---@field cd number
---@field cost number

---获得技能描述相关信息
---@param skillId int
---@param level int
---@param skillType SkillType
---@return SkillInfo
function BattleUtil.GetSkillInfo(skillId, skillType, level)
    local skillInfo = BattleUtil.GetSkillInfoWithoutDescription(skillId, skillType, level)
    if skillInfo ~= nil then
        skillInfo.description = csBattleUtil.GetSkillLevelDetailDesc(skillInfo.id)
    end
    return skillInfo
end

---获得技能描述相关信息,描述信息先放空，用于战斗中使用时优化字符串传递的消耗。
---@param skillId int
---@param level int
---@param skillType SkillType
---@return SkillInfo
function BattleUtil.GetSkillInfoWithoutDescription(skillId, skillType, level)
    if skillId == 0 then
        return nil
    end
    level = level or 1
    local skillLevelCfg = BattleUtil.GetSkillLevelConfig(skillId, level)
    if not skillLevelCfg then
        Debug.LogErrorFormat("skillLevelCfg is nil. skillId = %s,  skillLevel = %s", tostring(skillId), tostring(level))
        return nil
    end
    ---@type SkillInfo
    local skillInfo = {}
    skillInfo.skillType = skillType
    skillInfo.id = skillLevelCfg.SkillID
    skillInfo.name = UITextHelper.GetUIText(skillLevelCfg.SkillName)

    -- 技能CD
    skillInfo.cd = tonumber(skillLevelCfg.CD)
    -- 技能消耗
    local attrCost = skillLevelCfg.AttrCost1
    --根据技能ID去战斗表格中的【BattleSkill】中的【&SkillLevelConfig^】切页中的【AttrCost】字段，字段的第一个值为1101才显示能量消耗字段，能量消耗具体数值为，第三个值除以100
    if attrCost and attrCost.Length == 3 and attrCost[0] == 1101 and attrCost[2] > 0 then
        skillInfo.cost = math.modf(attrCost[2] / 100)
    else
        skillInfo.cost = 0
    end
    local skillTypeName
    if skillType == SkillType.Attack then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8486)
    elseif skillType == SkillType.Dodge then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8498)
    elseif skillType == SkillType.Passive then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8487)
    elseif skillType == SkillType.Active then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8488)
    elseif skillType == SkillType.MaleActive then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8449)
    elseif skillType == SkillType.Coop then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8489)
    elseif skillType == SkillType.MaleActive then
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_20020)
    else
        skillTypeName = UITextHelper.GetUIText(UITextConst.UI_TEXT_8497)
    end
    skillInfo.typeName = skillTypeName
    skillInfo.icon = skillLevelCfg.SkillIcon
    return skillInfo
end

---获取角色配置
---@param id int 怪物模板Id
---@return X3Battle.BattleGuide
function BattleUtil.GetBattleGuide(id)
    return TbUtil.GetBattleGuide(id)
end

---逗逗那边图鉴使用，涉及她的逻辑暂不修改
---获取战斗沟通配置字典
---@return table<int, X3Battle.DialogueConfig>
function BattleUtil.GetBattleDialogueConfigs()
    return TbUtil.dialogueConfigs
end

---获取战斗沟通配置
---@return X3Battle.DialogueConfig
function BattleUtil.GetBattleDialogueConfig(id)
    return TbUtil.GetDialogueConfig(id)
end

---获取引导
function BattleUtil.BattleBossIntroduction(id)
    return TbUtil.GetBattleBossIntroduction(id)
end

---获取关卡下所有怪配置IDs
---@param levelID Int
---@return table<number>
function BattleUtil.GetLevelAllMonsterCfgIDs(levelID)
    return csBattleUtil.GetLevelAllMonsterCfgIDs(levelID)
end

function BattleUtil.GetPlayerId()
    if SelfProxyFactory == nil then
        Debug.LogError("获取PlayerID失败")
        return 0
    end
    return SelfProxyFactory.GetPlayerInfoProxy():GetUid()
end

function BattleUtil.GetLockMode(isOnline)
    if isOnline then
        local onlineValue = BllMgr.GetSystemSettingBLL():GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_LOCKMODE)
        if onlineValue == 0 then
            return TargetLockModeType.Smart
        else
            return TargetLockModeType.Manual
        end
    else
        local outlineValue = PlayerPrefs.GetInt("KeyLockMode", 2)
        if outlineValue == 2 then
            return TargetLockModeType.Smart
        else
            return TargetLockModeType.Manual
        end
    end
end

---@param on bool
function BattleUtil.SetEnergySavingModel(on)
    local systemSettingBLL = BllMgr.GetSystemSettingBLL()
    if not systemSettingBLL then
        Debug.LogError("systemSettingBLL不存在，无法进行节能设置")
        return
    end
    -- TODO 因obt上的对应代码尚未合并到BattleMain，所以这里暂时注释掉
    --local setting = GraphicsSettingConst.EnergySavingGrade.On
    --if not on then
    --    setting = GraphicsSettingConst.EnergySavingGrade.Off
    --end
    --systemSettingBLL:SetEnergySavingSetting(setting)
    Debug.LogFormat("节能设置：%s", setting)
end

---@return bool 节能设置 是否打开.
function BattleUtil.GetEnergySavingModel()
    local systemSettingBLL = BllMgr.GetSystemSettingBLL()
    if not systemSettingBLL then
        Debug.LogError("systemSettingBLL不存在，无法获取当前节能设置，认为没有打开false")
        return false
    end
    --TODO 因obt上的对应代码尚未合并到BattleMain，所以这里暂时注释掉
    --local on = GraphicsSettingConst.EnergySavingGrade.On
    --return systemSettingBLL:GetCurEnergySavingSetting() == on
end

---@param enable bool
function BattleUtil.EnableFSR(enable)
    local systemSettingBLL = BllMgr.GetSystemSettingBLL()
    if not systemSettingBLL then
        Debug.LogError("systemSettingBLL不存在，无法设置FSR")
        return false
    end
    systemSettingBLL:SetFsrEnableState(enable)
    Debug.LogFormat("FSR设置：%s", enable)
end

function BattleUtil.GetFSREnableState()
    local systemSettingBLL = BllMgr.GetSystemSettingBLL()
    if not systemSettingBLL then
        Debug.LogError("systemSettingBLL不存在，无法获得FSR状态")
        return false
    end
    return systemSettingBLL:GetFsrEnableState()
end

function BattleUtil.SetLoadingEnable(loadingType, isEnable, onComplete, isFullScreen)
    ---@type _ViewInfo
    local param = {}
    param.IsFullScreen = isFullScreen
    if isEnable then
        param.MoveInCallBack = onComplete
    else
        param.MoveOutCallBack = onComplete
    end
    UICommonUtil.SetLoadingEnableWithOpenParam(param, loadingType, isEnable)
end

function BattleUtil.GetMemorySizeLevel()
    local systemSettingBLL = BllMgr.GetSystemSettingBLL()
    if not systemSettingBLL then
        Debug.LogError("systemSettingBLL不存在，无法获得内存等级")
        return 0
    end
    return systemSettingBLL:GetMemorySizeLevel()
end

function BattleUtil.GetLockBtnActive(isOnline)
    local btnValue
    if isOnline then
        btnValue = BllMgr.GetSystemSettingBLL():GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_LOCKBUTTON)
    else
        btnValue = PlayerPrefs.GetInt("KeyLockBtnActive", 0)
    end
    return btnValue == 0
end

function BattleUtil.SetLockBtnActive(btnActive)
    local battle = CS.X3Battle.Battle.Instance
    local isOnline = battle.arg.startupType == BattleStartupType.Online
    local btnValue
    if btnActive then
        btnValue = 0
    else
        btnValue = 1
    end
    if isOnline then
        BllMgr.GetSystemSettingBLL():Set(X3_CFG_CONST.SYSTEM_SETTING_TYPE_LOCKBUTTON, btnValue)
    else
        PlayerPrefs.SetInt("KeyLockBtnActive", btnValue)
    end
    battle.setting:SetLockBtnActive(btnActive)
end

---@param battleArg CS.X3Battle.BattleArg
function BattleUtil.CreateBattleArgOffline(battleArg)
    if battleArg.girlID == 0 then
        battleArg.girlID = TbUtil.GetGirlDefaultCfgID()
    end

    if battleArg.boyID == 0 then
        battleArg.boyID = TbUtil.GetBoyDefaultCfgIDBySuitID(battleArg.boySuitID)
    end

    BattleUtil.CreateActorCfgOffline(battleArg)

    battleArg.fromGameState = GameStateMgr.GetCurStateName() or GameState.OfflineBattleEntry

    ---关卡配置
    local stageCfg = LuaCfgMgr.Get("CommonStageEntry", battleArg.levelID)
    if stageCfg ~= nil then
        battleArg.isShowTips = stageCfg.BattleTipsShowType > 0
    end

    ---测试开启自动战斗不显示tips
    if battleArg.isOpenAuto then
        battleArg.isShowTips = false
    end

    ---离线战斗男主tag赋值
    --[[    local boyCfg = BattleUtil.GetBoyConfig(battleArg.boyID)
        if boyCfg ~= nil then
            local mScoreInfo = LuaCfgMgr.Get("SCoreBaseInfo", boyCfg.ScoreID)
            if mScoreInfo ~= nil then
                --for _, v in pairs(mScoreInfo.Tag) do
                ---Debug.LogErrorFormat("v = %d  boyCfg.ScoreID = %d ", v, boyCfg.ScoreID)
                --battleArg.scoreTags:Add(v)
                --end
            end
        end]]

    BllMgr.GetNoviceGuideBLL():Init({}, true)

    -- 如果是回放录像模式，battle arg 使用录像中的arg
    if battleArg.replayMode == CSX3Battle.BattleReplayMode.Replay then
        local recordPath = battleArg.replayPath
        if not string.isnilorempty(recordPath) then
            local gameRecord = CSX3Battle.GameRecord.Deserialize(recordPath)
            if gameRecord == nil then
                Debug.LogErrorFormat("回放文件读取失败，无法进行录像回放")
                return
            end
            battleArg = gameRecord.battleArg
            battleArg.replayMode = CSX3Battle.BattleReplayMode.Replay
            battleArg.replayPath = recordPath
            battleArg.fromGameState = GameStateMgr.GetCurStateName() or GameState.OfflineBattleEntry
        end
    end

    return battleArg
end

---@param dungeon pbcmessage.DungeonCreateUpdateReply
---@return CS.X3Battle.BattleArg
function BattleUtil.CreateBattleArgOnline(dungeon)
    local battleArg = CS.X3Battle.BattleArg()
    battleArg.levelID = dungeon.DungeonID
    battleArg.commonStageId = dungeon.StageID

    -- 默认值
    local girlID = 0
    local girlSuitID = 1101
    local girlWeaponID = 71010
    local boyID = 0
    local boySuitID = 2101
    local boyEntity = nil

    -- 找到boyEntity
    for index, entity in ipairs(dungeon.EntityList) do
        if entity.EntityID == ServerEntityID.Girl then
            -- 女主
            if entity.CfgID == 0 then
                entity.CfgID = TbUtil.GetGirlDefaultCfgID()
            end
            girlID = entity.CfgID
            girlSuitID = entity.SuitID
            girlWeaponID = entity.WeaponSkinID
        elseif entity.EntityID == ServerEntityID.Boy then
            -- 男主
            if entity.CfgID == 0 then
                entity.CfgID = TbUtil.GetBoyDefaultCfgIDBySuitID(entity.SuitID)
            end
            boyID = entity.CfgID
            boySuitID = entity.SuitID
            boyEntity = entity
        end
    end

    for _, entity in ipairs(dungeon.EntityList) do
        local isGirl = girlSuitID == entity.SuitID
        local bornCfg = BattleUtil._CreateActorConfig(entity, boyEntity, isGirl)
        for k, v in pairs(entity.Attributes) do
            bornCfg.AttrsOnline:Add(k, v)
        end
        if isGirl then
            bornCfg.AnimatorCtrlName = csBattleUtil.GenGirlAnimatorCtrlName(girlWeaponID, boyID)
        end
        battleArg.cacheBornCfgs:Add(bornCfg.ConfigID, bornCfg)
    end

    battleArg.girlID = girlID
    battleArg.girlSuitID = girlSuitID
    battleArg.boySuitID = boySuitID
    battleArg.boyID = boyID
    battleArg.girlWeaponID = girlWeaponID

    --tag 赋值
    if dungeon.Tag ~= nil then
        if dungeon.Tag.ScoreTags ~= nil then
            for q, v in pairs(dungeon.Tag.ScoreTags) do
                battleArg.scoreTags:Add(v)
            end
        end

        if dungeon.Tag.StageTags ~= nil then
            for q, v in pairs(dungeon.Tag.StageTags) do
                battleArg.levelTags:Add(v)
            end
        end

        battleArg.isShowTips = dungeon.Tag.TipsShow
    end

    -- 词缀
    BattleUtil._AddAffix(battleArg.affixesSkillSlotConfigs, dungeon.Affixes)

    battleArg.startedLockMode = BattleUtil.GetLockMode(true)
    battleArg.startedLockBtnActive = BattleUtil.GetLockBtnActive(true)
    battleArg.startupType = BattleStartupType.Online
    battleArg.isNumberMode = true
    battleArg.playerID = BattleUtil.GetPlayerId()
    battleArg.replayPath = nil
    battleArg.sceneName = nil
    battleArg.fromGameState = GameStateMgr.GetCurStateName()
    if DEBUG_GM and CS.X3Battle.Debugger.Utils.IsNeedRecord() then
        battleArg.replayMode = CSX3Battle.BattleReplayMode.Record
    end

    return battleArg
end

---@param affixes pbcmessage.Skill[]
function BattleUtil._AddAffix(affixesSkillSlotConfigs, affixes)
    if not affixes then
        return
    end
    local index = 0
    for q, v in pairs(affixes) do
        local skillSlotConfig = CS.X3Battle.SkillSlotConfig()
        skillSlotConfig.SkillID = v.ID
        skillSlotConfig.SkillLevel = v.Level
        skillSlotConfig.SlotType = CS.X3Battle.SkillSlotType.Passive
        skillSlotConfig.ID = csBattleUtil.GetSlotID(CS.X3Battle.SkillSlotType.Passive, index);
        affixesSkillSlotConfigs:Add(skillSlotConfig)
        index = index + 1
    end
end

---@param entity pbcmessage.BattleEntity
---@param boyEntity pbcmessage.BattleEntity
---@return CS.X3Battle.ActorCacheBornCfg
function BattleUtil._CreateActorConfig(entity, boyEntity, isGirl)
    local bornConfig = CS.X3Battle.ActorCacheBornCfg()
    bornConfig.ConfigID = entity.CfgID
    bornConfig.Level = entity.Level
    -- 22 男主给女主的协作技，  26 男主给你女主的爆发技能
    local boyToGirlUltra = 22
    local boyToGirlCoop = 26

    ---@ type Dictionary
    local skillSlots = bornConfig.SkillSlots
    -- 常规技能
    if entity.Skills then
        for k, v in pairs(entity.Skills) do
            local cSlotType = BattleUtil._ServerSkillTypeToSlotType(k, isGirl)
            local isNeed = cSlotType ~= nil
            if not isGirl then
                -- 忽略给女主的技能
                isNeed = isNeed and k ~= boyToGirlUltra and k ~= boyToGirlCoop
            else
                -- 女主的， 协作普攻技能，协作技, 连携技, 爆发技数据，来源于男主
                isNeed = isNeed and cSlotType ~= SkillSlotType.CoopAttack
                        and cSlotType ~= SkillSlotType.Coop
                        and cSlotType ~= SkillSlotType.Combo
                        and cSlotType ~= SkillSlotType.Ultra
            end
            if isNeed then
                BattleUtil._CreateSkillSlot(skillSlots, cSlotType, v)
            end
        end
    end
    -- 被动技能
    if entity.PassiveSkills then
        local idLevels = { Skills = {} }
        for k, v in pairs(entity.PassiveSkills) do
            for index, idLevel in ipairs(v.Skills or {}) do
                table.insert(idLevels.Skills, idLevel)
            end
        end
        BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Passive, idLevels)
    end

    local boyToGirlSkillSlots = csBattleUtil.NewSkillSlotConfigDict()
    -- 女主的， 协作技, 连携技, 爆发技数据，来源于男主
    if isGirl and boyEntity.Skills then
        for k, v in pairs(boyEntity.Skills) do
            if k == boyToGirlUltra or k == boyToGirlCoop then
                local cSlotType = BattleUtil._ServerSkillTypeToSlotType(k, false)
                if cSlotType ~= SkillSlotType.Num then
                    BattleUtil._CreateSkillSlot(boyToGirlSkillSlots, cSlotType, v)
                end
            end
        end

        -- 记录他人给女主的技能来源查找表.
        for k, slotCfg in pairs(boyToGirlSkillSlots) do
            -- 将技能添加进列表.
            skillSlots:Add(slotCfg.ID, slotCfg)
            bornConfig.SkillSourceTable:Add(slotCfg.ID, boyEntity.CfgID)
        end
    end

    -- buff 数据
    for i, buff in ipairs(entity.BuffList) do
        local buffData = CS.X3Battle.BuffData()
        buffData.ID = buff.ID
        buffData.Level = buff.Level
        bornConfig.BuffDatas:Add(buffData)
    end
    return bornConfig
end

function BattleUtil._ServerSkillTypeToSlotType(serverSkillType, isGirl)
    local csSlotType = nil
    if isGirl then
        csSlotType = GirlSkillTypeToSlotType[serverSkillType]
    else
        csSlotType = BoySkillTypeToSlotType[serverSkillType]
    end
    if not csSlotType then
        local str = isGirl and "Girl" or "Boy"
        Debug.LogErrorFormat("%s Server技能类型:%s 转Client技能槽位失败：", str, serverSkillType);
    end
    return csSlotType
end

---@param skillSlots Dictionary<int,SkillSlotConfig>
---@param slotType SkillSlotType
---@param idsOrIdLvs pbcmessage.Skill[] | list<int>
function BattleUtil._CreateSkillSlot(skillSlots, slotType, idsOrIdLvs, isOffline)
    if not idsOrIdLvs then
        return
    end
    if not isOffline then
        local idLevels = idsOrIdLvs.Skills or {}
        for index, idLevel in ipairs(idLevels) do
            ---@type CS.X3Battle.SkillSlotConfig
            local skillSlot = CS.X3Battle.SkillSlotConfig()
            skillSlot.ID = csBattleUtil.GetSlotID(slotType, index - 1)
            skillSlot.SlotType = slotType
            skillSlot.SkillID = idLevel.ID
            skillSlot.SkillLevel = idLevel.Level
            if not skillSlots:ContainsKey(skillSlot.ID) then
                skillSlots:Add(skillSlot.ID, skillSlot)
            else
                Debug.LogErrorFormat("SkillID:%s, SkillSlotID：%s重复, slotType: %s", idLevel.ID, skillSlot.ID, slotType)
            end
        end
    else
        local ids = idsOrIdLvs
        for i = 1, ids.Length do
            local index = i - 1
            ---@type CS.X3Battle.SkillSlotConfig
            local skillSlot = CS.X3Battle.SkillSlotConfig()
            skillSlot.ID = csBattleUtil.GetSlotID(slotType, index)
            skillSlot.SlotType = slotType
            skillSlot.SkillID = ids[index]
            skillSlot.SkillLevel = 1
            skillSlots:Add(skillSlot.ID, skillSlot)
        end
    end
end

---@param battleArg CS.X3Battle.BattleArg
function BattleUtil.CreateActorCfgOffline(battleArg)
    if not BattleUtil.GetGirlConfig(battleArg.girlID) then
        -- 此时 主控角色可能为 男性角色或者怪物， 可以不为女性角色
        Debug.LogFormat("女主表:GirlCfg，id:%s 缺失", battleArg.girlID)
        return
    end
    local girlBornCfg = CS.X3Battle.ActorCacheBornCfg()
    girlBornCfg.ConfigID = battleArg.girlID
    girlBornCfg.Level = 1
    local skillSlots = girlBornCfg.SkillSlots
    -- create girl baseConfig
    local boyCfg = BattleUtil.GetBoyConfig(battleArg.boyID)
    if not boyCfg then
        Debug.LogErrorFormat("男主表:BoyCfg，id:%s 缺失", battleArg.boyID)
        return
    end
    for k, slotCfg in pairs(boyCfg.GirlSkillSlots) do
        local skillSlot = CS.X3Battle.SkillSlotConfig()
        skillSlot.ID = slotCfg.ID
        skillSlot.SlotType = slotCfg.SlotType
        skillSlot.SkillID = slotCfg.SkillID
        skillSlot.SkillLevel = slotCfg.SkillLevel
        skillSlots:Add(skillSlot.ID, skillSlot)

        -- 记录他人给女主的技能来源查找表.
        girlBornCfg.SkillSourceTable:Add(skillSlot.ID, boyCfg.ID)
    end
    -- create girl weaponConfig
    local skinConfig = BattleUtil.GetWeaponSkinConfig(battleArg.girlWeaponID)
    if not skinConfig then
        Debug.LogErrorFormat("武器皮肤表:WeaponSkinConfig，id:%s 缺失", battleArg.girlWeaponID)
        return
    end
    local logicConfig = BattleUtil.GetWeaponLogicConfig(skinConfig.WeaponLogicID)
    if not logicConfig then
        Debug.LogErrorFormat("武器逻辑表:WeaponLogicConfig，id:%s 缺失", skinConfig.WeaponLogicID)
        return
    end
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Attack, logicConfig.AttackIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Active, logicConfig.ActiveSkillIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Special, logicConfig.SpecialSkillIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Passive, logicConfig.PassiveSkillIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Dodge, logicConfig.DodgeSkillIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.QTEDodge, logicConfig.QTEDodgeSkillIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Dead, logicConfig.DeadSkillIDs, true)
    BattleUtil._CreateSkillSlot(skillSlots, SkillSlotType.Born, logicConfig.BornSkillIDs, true)
    girlBornCfg.AnimatorCtrlName = csBattleUtil.GenGirlAnimatorCtrlName(battleArg.girlWeaponID, battleArg.boyID)
    battleArg.cacheBornCfgs:Add(girlBornCfg.ConfigID, girlBornCfg)

    -- 初始化词缀功能
    local inputAffixStr = CS.UnityEngine.PlayerPrefs.GetString("keyAffix", "");
    local inputAffixs = string.split(inputAffixStr, "|")

    ---@type pbcmessage.Skill[]
    local affixIDS = {}
    for i, v in ipairs(inputAffixs) do
        local skillID = tonumber(v)
        if skillID then
            ---@type pbcmessage.Skill
            local skill = { ID = skillID, Level = 1, Slot = nil }
            table.insert(affixIDS, skill)
        end
    end
    BattleUtil._AddAffix(battleArg.affixesSkillSlotConfigs, affixIDS)
end

--- 逻辑调用内存快照的接口，进行快照保存到本地，该文件可以用MemoryProfiler工具直接打开
--- 截屏需要Playing状态下可用
--- 什么情况下可用待不出
--- fileName不需要后缀
function BattleUtil.MemorySnapShot(fileName, isNeedScreenShot)
    isNeedScreenShot = isNeedScreenShot or false
    if not fileName then
        return
    end
    local path = string.concat(CS.UnityEngine.Application.persistentDataPath, "/SnapShots")
    local util = CS.MemorySnapShotUtil
    local isOk = false
    local timeStamp = os.date("%H_%M_%S")
    fileName = fileName .. "_" .. timeStamp
    if util then
        isOk = util.SnapShot(path, fileName, isNeedScreenShot)
    end
    Debug.LogFormat("内存快照保存成功：%s, 位置：%s", isOk, path)
end

function BattleUtil.StartCoroutine(func, ...)
    if not func then return end
    return CoroutineProxy.Instance:StartCoroutine(xluaUtil.cs_generator(func, ...))
end

function BattleUtil.StopCoroutine(func)
    if not func then return end
    CoroutineProxy.Instance:StopCoroutine(func)
end

function BattleUtil.IntToEnum(i, resType)
    for k, v in pairs(resType) do
        if v == i then
            return k
        end
    end

    return ""
end

function BattleUtil.GetBuffImageID(str)
    local id = BuffImageNameToID[str]
    if id ~= nil then
        return id
    end
    return 0
end

function BattleUtil.IsNeedPreloadRes(resDes)
    if resDes:IsHaveTag(AfterBroken) then
        return false -- 爆衣后资源无需preload
    end
    if resDes:IsHaveTag(OriginalSkin) then
        return false -- 原始皮肤不需要加载
    end
    if resDes.type == ResTypeSprite then
        return false -- 动态引用的icon不走统一的预加载
    end
    if resDes.type == ResTypeUI then
        return false -- UI 预加载，UI模块自己控制
    end
    return true
end

-- 用于把预加载阶段资源加载的详细（每一个资源）耗时信息，写到本地（格式：CSV）
function BattleUtil:WriteResLoadInfo(levelID)
    local node = CS.X3Game.PreloadBatchMgr.GetPreloadBatchNode(PreloadBatchType.Battle, levelID)
    local timeStamp = os.date("%H_%M")
    local path = CS.UnityEngine.Application.persistentDataPath .. string.format("/PreloadInfo_%s_%s.csv", levelID, timeStamp)
    local isOk = false
    if node then
        isOk = node:WriteLoadInfo(path)
    end
    Debug.LogFormat("资源预加载信息输出:%s，位置：%s", isOk and "成功" or "失败", path);
end

-- 用于记录战斗loading时，各个阶段的耗时。（方式：追加，会记录多场战斗， 格式：csv）
function BattleUtil:RecordLoadingTime(levelID)
    -- 计时器统计到的资源加载数
    local counterMgr = CS.X3Battle.BattleCounterMgr.Instance
    local analyzeUsedTime = g_battlePreloadEstimator.analyzeUsedTime
    local analyzeLoadUsedTime = g_battlePreloadEstimator.analyzeLoadUsedTime
    local analyzeABLoadUsedTime = g_battlePreloadEstimator.analyzeABLoadUsedTime
    local analyzeInstantiateUsedTime = g_battlePreloadEstimator.analyzeInstantiateUsedTime

    -- 启动流程统计耗时
    local startupState = g_battleLauncher.startupState
    local openLoadingUITime = startupState.openLoadingUIElapsedTime
    local closeLoadingUITime = startupState.closeLoadingUIElapsedTime
    local enterBattleStateTime = startupState.switchBattleStateElapsedTime
    local prepareLoadResTime = startupState.unloadExtraResElapsedTime
    local loadResTime = startupState.prepareAssetElapsedTime
    local preLoadTime = startupState.preloadAssetInsElapsedTime
    local warmUpTime = startupState.svcWarmUpElapsedTime
    local createBattleTime = startupState.createBattleElapsedTime
    local loadingKeepTime = startupState.startupBattleElapsedTime

    local abTotalTime = counterMgr:Count(CS.X3Battle.CounterType.ABLoad)
    local insTotalTime = counterMgr:Count(CS.X3Battle.CounterType.Instantiate)
    -- 理论上： loadTotalTime = abTotalTime + insTotalTime
    local loadTotalTime = abTotalTime + insTotalTime
    -- 战斗接口BattleResMgr.Load 调用总耗时
    local battleLoad = counterMgr:Count(CS.X3Battle.CounterType.BattleLoad)

    local node = CS.X3Game.PreloadBatchMgr.GetPreloadBatchNode(PreloadBatchType.Battle, levelID)
    local sceneLoadTime = -1
    local sceneSwitchTime = -1
    if node then
        sceneLoadTime = node:GetSceneLoadTime()
        sceneSwitchTime = node:GetSceneSwitchTime()
    end

    local path = string.concat(CS.UnityEngine.Application.persistentDataPath, "/BattleLoadingTime.csv")
    local fun = function()
        -- 提示信息
        local tips = "loadingKeepTime: 是总的LoadingUI存在的阶段，总时间 \
        loadingKeepTime = LoadingResTime + preLoadTime + warmUpTime + createBattleTime + openLoadingUITime + enterBattleStateTime + prepareLoadResTime + closeLoadingUITime + other\
        loadTotalTime(整个阶段LoadRes的总耗时) = abTotalTime(LoadAB总耗时) + insTotalTime(实例化总耗时) \
        battleLoad：战斗接口BattleResMgr.Load 调用总耗时。 该接口资源分析，战斗逻辑的资源加载，角色加载实例化使用 \
        sceneSwitchTime(场景切换耗时) = sceneUnLoadTime(卸载上一个场景) + sceneLoadTime(加载当前场景) \
        analyzeUsedTime(分析阶段总耗时) = analyzeLoadUsedTime(Load资源耗时) + 分析逻辑耗时 \
        analyzeLoadUsedTime(Load资源耗时) = analyzeABLoadUsedTime(loadAB耗时) + analyzeInstantiateUsedTime(实例化耗时) \n\n"
        -- 标题栏
        local title0 = "LevelID,SceneName,"
        local title1 = "loadingKeepTime,LoadingResTime,preLoadTime,warmUpTime,CreateBattleTime,openLoadingUITime,enterBattleStateTime,prepareLoadResTime,closeLoadingUITime,,"
        local title2 = "loadTotalTime, abTotalTime, insTotalTime, 其中BattleResMgr.Load占, 其中SceneLoad占,,"
        local title3 = "analyzeUsedTime, analyzeLoadUsedTime, analyzeABLoadUsedTime, analyzeInstantiateUsedTime \n"
        local title = string.format("%s%s%s%s", title0, title1, title2, title3)

        local sceneName = CS.X3Battle.BattleUtil.GetSceneName()
        local levelInfo = string.format("%s,%s,", levelID, sceneName)
        -- 总的loading UI时间耗时组成
        local loadingInfo = string.format("%s,%s,%s,%s,%s,%s,%s,%s,%s,,", loadingKeepTime, loadResTime, preLoadTime, warmUpTime, createBattleTime,
                openLoadingUITime, enterBattleStateTime, prepareLoadResTime, closeLoadingUITime)
        -- LoadRes耗时组成
        local loadResInfo = string.format("%s,%s,%s,%s,%s,,", loadTotalTime, abTotalTime, insTotalTime, battleLoad, sceneLoadTime)
        -- 资源分析耗时组成
        local analyzeInfo = string.format("%s,%s,%s,%s", analyzeUsedTime, analyzeLoadUsedTime, analyzeABLoadUsedTime, analyzeInstantiateUsedTime)
        local content = string.format("%s%s%s%s \n", levelInfo, loadingInfo, loadResInfo, analyzeInfo)

        local isNeedWriteTitle = not io.exists(path)
        local file, e = io.open(path, "a")
        if not file then
            return error(e)
        end
        if isNeedWriteTitle then
            file:write(tips)
            file:write(title)
        end
        file:write(content)
        file:close()
    end
    local isOk = XECS.XPCall(fun, self)
    Debug.LogFormat("战斗启动流程耗时信息输出:%s，位置：%s", isOk and "成功" or "失败", path);
end

function BattleUtil:WriteSVCWarmUpInfo(levelID, infos)
    local fileName = string.format("/SVCWarmUpInfo_%s.csv", levelID)
    local path = string.concat(CS.UnityEngine.Application.persistentDataPath, fileName)
    local file, e = io.open(path, "w+")
    if not file then
        return error(e)
    end
    file:write("SVC fullPath, name, warmUpUsedTime \n")
    for i, v in ipairs(infos) do
        file:write(v .. "\n")
    end
    file:close()
    Debug.LogFormat("SVC warmUp信息输出完成，位置：%s", path);
end

---自动化测试截取内存
function BattleUtil:TryBattleMemorySnapShot(type)
    if not AIRTEST then
        return
    end
    local CSTime = CS.UnityEngine.Time
    Debug.LogFormat("TryBattleMemorySnapShot, type:%s", type)
    if type == 1 then
        --开战前
        MemorySnapName = string.format("_levelID=%d_girlSuitID=%d_boySuitID=%d_boyID=%d_girlWeaponID=%d",
                g_battleLauncher._battleArg.levelID,
                g_battleLauncher._battleArg.girlSuitID,
                g_battleLauncher._battleArg.boySuitID,
                g_battleLauncher._battleArg.boyID,
                g_battleLauncher._battleArg.girlWeaponID)
        local name = string.format("%s_1_Time=%f_BattleBeginBefore", MemorySnapName, CSTime.realtimeSinceStartup)
        CS.Paper.U3dProfiler.MemoryProfiler.TakeMemorySnapShot(name)
    elseif type == 2 then
        --开战后
        local name = string.format("%s_2_Time=%f_BattleBeginAfter", MemorySnapName, CSTime.realtimeSinceStartup)
        CS.Paper.U3dProfiler.MemoryProfiler.TakeMemorySnapShot(name)
    elseif type == 3 then
        if not g_battleLauncher._cSBattleClient then
            return
        end
        --结束前
        local name = string.format("%s_3_Time=%f_BattleEndBefore", MemorySnapName, CSTime.realtimeSinceStartup)
        CS.Paper.U3dProfiler.MemoryProfiler.TakeMemorySnapShot(name)
    elseif type == 4 then
        --结束后
        local name = string.format("%s_4_Time=%f_BattleEndAfter", MemorySnapName, CSTime.realtimeSinceStartup)
        CS.Paper.U3dProfiler.MemoryProfiler.TakeMemorySnapShot(name)
    end
end

---获取要上传的Lua端的OSS日志信息
---@param formationStr string 编队信息
function BattleUtil.GetOSSInfoData(formationStr)
    if GrpcMgr == nil then
        Debug.LogError("获取GetZoneID失败")
        return 0
    end

    if SelfProxyFactory == nil then
        Debug.LogError("获取PlayerID失败")
        return 0
    end

    ---游戏服务器ID
    local Id = "BattleInfo_GameSvrId:" .. tostring(GrpcMgr.GetMetaData("ZoneID")) .. "\n"

    ---游戏分区分服ID
    local serverID = "BattleInfo_IZoneAreaID:" .. tostring(BllMgr.GetLoginBLL():GetServerId()) .. "\n"

    ---玩家UID
    local playerID = "BattleInfo_VRoleID:" .. tostring(SelfProxyFactory.GetPlayerInfoProxy():GetUid()) .. "\n"

    ---玩家等级
    local playerLevel = "BattleInfo_Level:" .. tostring(SelfProxyFactory.GetPlayerInfoProxy():GetLevel()) .. "\n"

    ---关卡ID
    local levelID = "BattleInfo_BattleID:" .. tostring(g_battleLauncher.levelID) .. "\n"

    ---战斗类型
    local stageCfg = LuaCfgMgr.Get("CommonStageEntry", g_battleLauncher.commonStageId)
    local stageType = 0
    if stageCfg ~= nil then
        stageType = stageCfg.Type
    end

    local stageTypeStr = "BattleInfo_BattleType:" .. tostring(stageType) .. "\n"

    formationStr = formationStr .. Id
    formationStr = formationStr .. serverID
    formationStr = formationStr .. playerID
    formationStr = formationStr .. playerLevel
    formationStr = formationStr .. levelID
    formationStr = formationStr .. stageTypeStr
    return formationStr
end

---获取防作弊编队信息
function BattleUtil.GetFormation(formation)
    if formation == nil then
        return
    end

    ---出战scoreid
    local scoreID = "BattleInfo_ScoreID:" .. tostring(formation.SCoreID) .. "\n"

    ---羁绊卡的ID列表
    local cards = "BattleInfo_CardIDs:"
    for k, v in pairs(formation.CardIDs) do
        cards = cards .. tostring(v) .. "|"
    end
    cards = cards .. "\n"

    ---羁绊卡的等级
    local cardLevels = "BattleInfo_CardLevels:"
    local cardStarLevels = "BattleInfo_CardStars:"
    local cardPhases = "BattleInfo_CardPhases:"
    local cardBreaks = "BattleInfo_CardBreaks:"
    local cardGemCoreLevels = ""

    for k, v in pairs(formation.CardIDs) do
        local cardData = SelfProxyFactory.GetCardDataProxy():GetData(v)
        if cardData == nil then
            break
        end
        cardLevels = cardLevels .. tostring(cardData:GetLevel()) .. "|" -- 等级
        cardStarLevels = cardStarLevels .. tostring(cardData:GetStarLevel()) .. "|"  -- 星级
        cardPhases = cardPhases .. tostring(cardData:GetPhaseLevel()) .. "|" -- 品阶
        cardBreaks = cardBreaks .. tostring(cardData:GetAwaken()) .. "|"  -- 觉醒状态

        ---获取星核等级
        local gemCoreLevels = "BattleInfo_GemCoreLevels:" .. v .. "|"
        local cardGemCoreList = BllMgr.GetFormationBLL():GetGemCores(formation.Guid ,v)
        if cardGemCoreList ~= nil then
            for i = 1, #cardGemCoreList do
                local gemCoreData = cardGemCoreList[i]
                gemCoreLevels = gemCoreLevels .. tostring(gemCoreData:GetLevel()) .. "|"
            end
        end

        cardGemCoreLevels = cardGemCoreLevels .. gemCoreLevels .. "\n"

        ---@type table<int,int> 获取思念属性
        local properties = "BattleInfo_GemCoreATTRs:" .. v .. "|"
        local cardProperties = SelfProxyFactory.GetCardDataProxy():GetCardCurProperties(v)
        if cardProperties ~= nil then
            for k1, v1 in pairs(cardProperties) do
                properties = properties .. k1 .. "-" .. v1 .. "|"
            end
        end

        cardGemCoreLevels = cardGemCoreLevels .. properties .. "\n"
    end

    local formationStr = scoreID .. cards
    formationStr = formationStr .. cardLevels .. "\n"
    formationStr = formationStr .. cardStarLevels .. "\n"
    formationStr = formationStr .. cardPhases .. "\n"
    formationStr = formationStr .. cardBreaks .. "\n"
    formationStr = formationStr .. cardGemCoreLevels
    return formationStr
end

--- 通过新手引导参数执行技能.
function BattleUtil.ExecuteSkillByNoviceGuide(param1)
    local battle = CS.X3Battle.Battle.Instance
    if not battle then
        Debug.LogError("BattleUtil.ExecuteSkillByNoviceGuide Battle.Instance实例为nil!")
        return
    end
    local playerInput = battle.input
    if not playerInput then
        Debug.LogError("BattleUtil.ExecuteSkillByNoviceGuide Battle.Instance.input实例为nil!")
        return
    end
    local playerBtnType = GuidePlayerBtnType[param1]
    if not playerBtnType then
        Debug.LogError("BattleUtil.ExecuteSkillByNoviceGuide 【GuideBehavior】表【" .. param1 .. "】参数配置错误!")
        return
    end
    local player = battle.player
    if not player then
        Debug.LogError("BattleUtil.ExecuteSkillByNoviceGuide Battle.Instance.player为nil!")
        return
    end
    local playerInsID = player.insID
    Debug.Log("【战斗新手引导】触发了保底释放技能行为. BattleUtil.ExecuteSkillByNoviceGuide.PlayerInput:TryCastSkill(" .. tostring(playerBtnType) .. ", " .. tostring(playerInsID) .. ", true")
    playerInput:TryCastSkill(playerBtnType, playerInsID, true)
end

--- 发送清理引导事件
function BattleUtil.SendCleanGuideEvent()
    if EventMgr and Const then
        Debug.LogFormat("BattleUtil:SendCleanGuideEvent")
        EventMgr.Dispatch(Const.Event.CLIENT_TO_GUIDE, NoviceGuideDefine.Event.CLEAN_GUIDE)
    end
end

function BattleUtil.GenOfflineHeroBornCfg(bornCfg, roleType)
    -- DONE: 查系统表 CardSet
    local property = LuaCfgMgr.Get("CardSet", bornCfg.PropertyID)
    if not property then
        Debug.LogError("请联系策划【苍真】，数值模式下【Team-CardSet】表没有该ID=" .. bornCfg.PropertyID)
        return
    end

    bornCfg.IsAIActive = true
    bornCfg.Level = property.Level
    bornCfg.Attrs:Add(AttrType.MaxHP, property.MaxHP)
    bornCfg.Attrs:Add(AttrType.HP, property.MaxHP)
    bornCfg.Attrs:Add(AttrType.PhyAttack, property.PhyAtk)
    bornCfg.Attrs:Add(AttrType.PhyDefence, property.PhyDef)
    bornCfg.Attrs:Add(AttrType.CritVal, property.CritVal)
    bornCfg.Attrs:Add(AttrType.CritHurtAdd, property.CritHurtAdd)

    bornCfg.Attrs:Add(AttrType.HpShield, 0)
    bornCfg.Attrs:Add(AttrType.HpShieldHurtAdd, 0)
    bornCfg.Attrs:Add(AttrType.HpShieldHurtDec, 0)
    bornCfg.Attrs:Add(AttrType.WeakPoint, 0)
    bornCfg.Attrs:Add(AttrType.FinalDamageAdd, 0)
    bornCfg.Attrs:Add(AttrType.FinalDamageDec, 0)
    bornCfg.Attrs:Add(AttrType.IgnoreDefence, 0)
    bornCfg.Attrs:Add(AttrType.RootMotionMutiplierXZ, 1)
    bornCfg.Attrs:Add(AttrType.RootMotionMutiplierY, 1)
    bornCfg.Attrs:Add(AttrType.CoreDamageRatio, 1)
    bornCfg.Attrs:Add(AttrType.ElementRatio, 200)
    bornCfg.Attrs:Add(AttrType.TurnSpeed, 0)
    bornCfg.Attrs:Add(AttrType.MoveSpeed, 1000)
    bornCfg.Attrs:Add(AttrType.FinalDmgAddRate, 0)
    bornCfg.Attrs:Add(AttrType.WeakPeriodRate, 0)
    bornCfg.Attrs:Add(AttrType.WeakPeriodAdd, 0)

    -- 附加角色属性.
    if property.AttrAddList then
        for i, v in ipairs(property.AttrAddList) do
            local attrId = v.ID
            local attrAddValue = v.Num
            local attrType = AttrType.__CastFrom(attrId)
            if not bornCfg.Attrs:ContainsKey(attrType) then
                bornCfg.Attrs:Add(attrType, attrAddValue)
            else
                bornCfg.Attrs[attrType] = bornCfg.Attrs[attrType] + attrAddValue
            end
        end
    end

    -- 处理角色技能.
    local propertyPassiveSkill = nil
    if roleType == RoleType.Girl then
        propertyPassiveSkill = property.FemaleSkillPassive
        local girlCritHurtAdd = g_battleLuaBridge:GetCritHurtAdd(CS.X3Battle.Battle.Instance.arg.boyID)
        bornCfg.Attrs[AttrType.CritHurtAdd] = bornCfg.Attrs[AttrType.CritHurtAdd] + girlCritHurtAdd
    elseif roleType == RoleType.Boy then
        propertyPassiveSkill = property.MaleSkillPassive
        local boyCritHurtAdd = g_battleLuaBridge:GetCritHurtAdd(bornCfg.CfgID)
        bornCfg.Attrs[AttrType.CritHurtAdd] = bornCfg.Attrs[AttrType.CritHurtAdd] + boyCritHurtAdd
    end

    if propertyPassiveSkill then
        local skillSlotType = CS.X3Battle.SkillSlotType.Passive
        local maxIndex = csBattleUtil.GetSlotMaxIndex(bornCfg.SkillSlots, skillSlotType)
        for i, v in ipairs(propertyPassiveSkill) do
            local skillSlotConfig = CS.X3Battle.SkillSlotConfig()
            skillSlotConfig.SkillID = v.ID
            skillSlotConfig.SkillLevel = v.Num
            skillSlotConfig.SlotType = skillSlotType
            maxIndex = maxIndex + 1
            skillSlotConfig.ID = csBattleUtil.GetSlotID(skillSlotType, maxIndex)
            bornCfg.SkillSlots:Add(skillSlotConfig.ID, skillSlotConfig)
        end
    end
end

-- 获取场上特效数量 (性能工具函数)
local hierarchyFXResult = ""
function BattleUtil.HierarchyFXCount()
    hierarchyFXResult = "";

    local allObjs = CS.UnityEngine.GameObject.FindObjectsOfType(typeof(CS.UnityEngine.GameObject))
    local roots = { }

    for i = 0, allObjs.Length - 1 do
        local obj = allObjs[i];
        if CS.XLuaHelper.IsNull(obj.transform.parent) then
            roots[#roots + 1] = obj;
        end
    end

    for i = 1, #roots do
        BattleUtil._RecursionAnalyze(roots[i].transform, 0)
    end

    CriticalLog.Log(hierarchyFXResult)
end

function BattleUtil._RecursionAnalyze(trans, ident)
    if ident > 2 then
        return
    end

    local coms = trans:GetComponentsInChildren(typeof(CS.UnityEngine.ParticleSystem), true)
    if coms and coms.Length > 0 then
        local line = string.format("%s 【PS数量: %d】", trans.name, coms.Length);
        for i = 1, ident do
            line = "    " .. line;
        end

        if ident == 0 then
            line = "根节点：" .. line;
            line = "\n\n\n\n" .. line;
        end
        line = "\n" .. line;

        hierarchyFXResult = hierarchyFXResult .. line;

        ident = ident + 1;
        for i = 0, trans.childCount - 1 do
            local child = trans:GetChild(i);
            BattleUtil._RecursionAnalyze(child, ident)
        end
    end
end

function BattleUtil.PauseDialogue(flag)
    local battle = CS.X3Battle.Battle.Instance
    if battle ~= nil and battle.dialogue ~= nil then
        battle.dialogue:Pause(flag)
    end
end

--- testCamera
--function BattleUtil:CreateFactory()
--    local battle = CS.X3Battle.Battle.Instance
--    battle.cameraTrace:CreateFactory()
--end
--
--function BattleUtil:CreateGeometries()
--    local battle = CS.X3Battle.Battle.Instance
--    battle.cameraTrace:CreateGeometries()
--end
--
--function BattleUtil:AddCubes(num)
--    local battle = CS.X3Battle.Battle.Instance
--    battle.cameraTrace:AddCubes(num)
--end
---end