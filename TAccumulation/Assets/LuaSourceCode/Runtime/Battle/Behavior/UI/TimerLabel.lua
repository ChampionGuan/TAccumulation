---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/18 11:04
---

local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")

---@class TimerLabel:UIBehaviorBase
local TimerLabel = XECS.class("TimerLabel", UIBehaviorBase)
TimerLabel.Type = BattleUIBehaviorType.TimerLabel
local csBattleUtil = CS.X3Battle.BattleUtil

function TimerLabel:ctor()
    UIBehaviorBase.ctor(self)
end

function TimerLabel:Awake()
    UIBehaviorBase.Awake(self)
    self._parentName = "OCX_left_up"
    self._transformName = "OCX_txt_GameTimer"
    self._parent = self:GetComponent(self._parentName, "Transform")
    self._affixTrans = self:GetComponent("OCX_bg_Promote", "Transform")
    self._affixText = self:GetComponent("OCX_txt_Promote", "TextMeshProUGUI")
    self._transform = self:GetComponent(self._transformName, "Transform")
    self._timerText = self:GetComponent(self._transformName, "TextMeshProUGUI")
    self._affixEnum = self:GetComponent("OCX_bg_Promote", "StyleEnum")
    self._warningTimerTrans = self:GetComponent("OCX_txt_warningTimer", "Transform")
    self._warningTimerText = self:GetComponent("OCX_txt_warningTimer", "TextMeshProUGUI")
    self._lifeTime = self._battleUI.levelFlow.lifeTime
    self._levelTime = self._battleUI.levelFlow.levelTime
    self._isCountDown = (self._battleUI.csBattle.config.TimeLimitType or 1) == BattleTimeLimitDispType.CountDown
    self._isIllegal = self._isCountDown and self._lifeTime == -1
    self._levelSecondCount = self._levelTime
    self._levelWarningTime = self._battleUI.levelFlow.levelWarningTime
    self._warningTimer = false
    self._resultTip = false

    self:SetActive(self._affixTrans, true)
end

function TimerLabel:Start()
    self:SetNodeVisible(self._parent, true)
    self:SetNodeVisible(self._transform, true)
    ---优化性能
    self:SetActive(self._warningTimerTrans, false)
    self:SetNodeVisible(self._affixTrans, false)
    if self._isIllegal then
        self:SetGoActive(false)
    end
end

function TimerLabel:SetAffixVisible(visible, id)
    local guideConfig = BattleUtil.GetBattleGuide(id)
    if not guideConfig then
        return
    end
    if visible then
        local text = UITextHelper.GetUIText(guideConfig.Content)
        self:SetText(self._affixText, text)
    end
    self:SetNodeVisible(self._affixTrans, visible)
end

function TimerLabel:SetAffixTimeColor(type)
    self._affixEnum:SetIdx(type)
end

function TimerLabel:HideTimerLabel()
    self._resultTip = true
    if self._warningTimer then
        self._warningTimer = false
        self:SetActive(self._warningTimerTrans, false)
    end
end

function TimerLabel:_OnUpdate()
    if self._isIllegal or self._resultTip then
        return
    end
    if self._lifeTime ~= self._battleUI.levelFlow.lifeTime then
        self._lifeTime = self._battleUI.levelFlow.lifeTime
        self._levelWarningTime = self._battleUI.levelFlow.levelWarningTime
    end
    self._levelTime = self._battleUI.levelFlow.levelTime

    local realTime
    if self._isCountDown then
        local countdownTime = self._lifeTime - self._levelTime
        if countdownTime < 0 then
            countdownTime = 0
            self:SetActive(self._warningTimerTrans, false)
        end
        if countdownTime < self._levelWarningTime then
            if not self._warningTimer then
                self._warningTimer = true
                self:SetActive(self._warningTimerTrans, true)
                self:PlayCustomMotion(self._warningTimerText, 0)
                ---self:SetValue(self._transform, self._warningTimer)
            end
        else
            if self._warningTimer then
                self._warningTimer = false
                self:SetActive(self._warningTimerTrans, false)
                ---self:SetValue(self._transform, self._warningTimer)
            end
        end
        realTime = countdownTime
    else
        realTime = self._levelTime
    end

    if self._levelTime < self._levelSecondCount then
        return
    end
    self._levelSecondCount = self._levelSecondCount + 0.3
    csBattleUtil.SetTimerText(self._timerText, realTime)
    if self._warningTimer then
        csBattleUtil.SetCountDownText(self._warningTimerText, realTime)
    end
end

---@param active bool
function TimerLabel:SetGoActive(active)
    self:SetNodeVisible(self._parent, active)
    self:SetNodeVisible(self._transform, active)
    self:SetActive(self._warningTimerTrans, active)
end

function TimerLabel:OnDestroy()
    self._parentName = nil
    self._timerText = nil
    self._warningTimerText = nil
    self._warningTimerTrans = nil
    self._lifeTime = nil
    self._levelTime = nil
    self._isCountDown = nil
    self._isIllegal = nil
    self._levelSecondCount = nil
    self._warningTimer = nil
    self._parent = nil
    UIBehaviorBase.OnDestroy(self)
end

return TimerLabel