---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by bge.
--- DateTime: 2023/6/8 17:50
---

local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")

---@class TextBubble:UIBehaviorBase
local TextBubble = XECS.class("TextBubble", UIBehaviorBase)
TextBubble.Type = BattleBubbleBehaviorType.TextBubble
local csTime = CS.UnityEngine.Time

function TextBubble:ctor()
    UIBehaviorBase.ctor(self)
    ---@type string
    self._messageNodeName = nil
    ---@type string
    self._actorName = nil
    ---@type string
    self._contentName = nil
    ---@type Transform
    self._actorNameTrans = nil
    ---@type Transform
    self._contentTrans = nil
    ---@type Transform
    self._messageNodeTrans = nil
    ---@type float
    self._beginTime = nil
    ---@type float
    self._showTime = nil
    ---@type bool
    self._state = nil
end

function TextBubble:Awake()
    UIBehaviorBase.Awake(self)

    self._contentName = "OCX_Dialogue_txt_content"
    self._actorName = "OCX_Dialogue_txt_name"
    self._messageNodeName = "OCX_Caption"

    self._actorNameTrans = self:GetComponent(self._actorName, "Transform")
    self._contentTrans = self:GetComponent(self._contentName, "Transform")
    self._messageNodeTrans = self:GetComponent(self._messageNodeName, "Transform")

    self:SetNodeVisible(self._messageNodeTrans, false)
    self:Register()
end

function TextBubble:Start()
    UIBehaviorBase.Start(self)
    self._beginTime = 0.0
    self._showTime = 0.0
    self._state = false
end

function TextBubble:_OnUpdate()
    if self._state == false then
        return
    end

    local duringTime = csTime.unscaledTime - self._beginTime

    if duringTime > self._showTime then
        self._beginTime = 0
        self._showTime = 0
        self._state = false
        self:PlayCustomMotion(self._messageNodeTrans, 1, g_BattleClient:SafeHandler(self,self._HideMessageNode))
    end
end

function TextBubble:_HideMessageNode()
    --回调回来时加保护
    if self._battleUI ~= nil then
        self:SetNodeVisible(self._messageNodeTrans, false)
    end
end

function TextBubble:Register()
    UIBehaviorBase.Register(self)
    g_BattleClient:AddListener(EventType.DialogueText, self, self._OnActorText, "BubbleBase._OnActorText")
end

---@param data DialogueText
function TextBubble:_OnActorText(_, data)
    if self:PowerSkillIsCast() then
       return
    end

    self._beginTime = csTime.unscaledTime
    self._showTime = data.time
    self._state = true

    Profiler.BeginSample("TextBubble:_OnActorText--4")
    self:SetText(self._contentTrans, data.content)
    if data.name ~= 0 then
        self:SetText(self._actorNameTrans, data.name)
    else
        self:SetText(self._actorNameTrans, "")
    end
    Profiler.EndSample("TextBubble:_OnActorText--4")

    Profiler.BeginSample("TextBubble:_OnActorText--5")
    self:SetNodeVisible(self._messageNodeTrans, true)
    --停掉当前正在播放的淡出动画
    self:StopAllCustomMotions(self._messageNodeTrans, 0)
    self:PlayCustomMotion(self._messageNodeTrans, 0)
    Profiler.EndSample("TextBubble:_OnActorText--5")
end

function TextBubble:Unregister()
    g_BattleClient:RemoveListener(EventType.DialogueText, self, self._OnActorText)
    UIBehaviorBase.Unregister(self)
end

function TextBubble:OnDestroy()
    self:Unregister()
    self._messageNodeName = nil
    self._actorName = nil
    self._contentName = nil
    self._actorNameTrans = nil
    self._contentTrans = nil
    self._messageNodeTrans = nil
    self._beginTime = nil
    self._showTime = nil
    UIBehaviorBase.OnDestroy(self)
end

return TextBubble