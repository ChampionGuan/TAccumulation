---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liuwei
--- DateTime: 2021/11/10 11:00
---
---
local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")
local CSBattleUtil = CS.X3Battle.BattleUtil
local CSGameObject = CS.UnityEngine.GameObject
local X3Buff = CS.X3Battle.X3Buff

---@class BuffHud:UIBehaviorBase
local BuffHud = XECS.class("BuffHud", UIBehaviorBase)
BuffHud.Type = BattleHudBehaviorType.BuffHud

---@class BuffHudData
---@field obj UnityEngine.GameObject
---@field trans  UnityEngine.Transform
---@field iconTrans UnityEngine.GameObject
---@field floorActive bool
---@field floorTrans UnityEngine.GameObject
---@field floorText UnityEngine.UI.Text
---@field progressImg UnityEngine.Transform
---@field floor Int
---@field curTime Fix 预留
---@field totalTime Fix 预留
---@field progress float

function BuffHud:ctor()
    UIBehaviorBase.ctor(self)
    ---@type Role
    self._role = nil
    ---@type UnityEngine.Transform
    self._parent = nil
    ---@type Int
    self._maxNumber = nil
    ---@type float
    ---self._offsetX = nil
    ---@type BuffHudData[]
    self._pool = nil
    ---@type bool
    self._inited = nil

    self._buffOwner = nil
    ---@type Int
    self._curNumber = 0
end

function BuffHud:Awake()
    UIBehaviorBase.Awake(self)
    local hudTrans = self:GetComponent("OCX_BuffHud", "Transform")
    if not GameObjectUtil.IsNull(hudTrans) then
        self._hudObj = hudTrans.gameObject
        self:SetNodeVisible(hudTrans, false)
    end

    self._pool = {}
    self._maxNumber = 6
    self._parent = self:GetComponent("OCX_Root", "Transform")
    for _ = 1, self._maxNumber do
        local hudData = self:_InstantiateHudData()
        if hudData then
            self:SetNodeVisible(hudData.trans, false)
            table.insert(self._pool, hudData)
        end
    end

    self._perUpdateTime = 0.2
    self:Register()
end

function BuffHud:SetParent(parent)
    self._parent = parent
    for i = 1, self._maxNumber do
        local buffHud = self._pool[i]
        GameObjectUtil.SetParent(buffHud.trans, self._parent)
    end
end

function BuffHud:SetLayer(layer)
    for i = 1, self._maxNumber do
        local buffHud = self._pool[i]
        GameObjectUtil.SetLayer(buffHud.obj, layer, true)
    end
end

function BuffHud:Init(role)
    ---@type Role
    self._role = role
    self._buffOwner = self._role.buffOwner
    self._inited = true
    self._curNumber = 0
    self:_UpdateDatas()
end

function BuffHud:_UpdateDatas()
    ---@type BuffFSM[]
    Profiler.BeginSample("BuffHud._UpdateDatas")
    Profiler.BeginSample("BuffHud._UpdateDatas.UpdateUIBuffDatas")
    local lastNumber =  self._curNumber
    --self._buffFsmDatas = self._role.buffOwner:GetUIBuffs()
    self._curNumber = self._buffOwner:UpdateUIBuffDatas()
    Profiler.EndSample("BuffHud._UpdateDatas.UpdateUIBuffDatas")
    if self._curNumber <= 0 and lastNumber <=0 then
        Profiler.EndSample("BuffHud._UpdateDatas")
        return
    end
    for i = 1, self._maxNumber do
        ---@type BuffHudData
        local buffHud = self._pool[i]
        if i > self._curNumber then
            self:SetNodeVisible(buffHud.trans, false)
        else
            local buffFsm = self._buffOwner:GetUIBuffData(i - 1)
            buffHud.floor = buffFsm.layer
            if buffFsm.showLevel then
                Profiler.BeginSample("BuffHud._UpdateDatas.tostring")
                CSBattleUtil.SetTextByFloat(buffHud.floorText, buffHud.floor)
                Profiler.EndSample("BuffHud._UpdateDatas.tostring")
                if not buffHud.floorActive then
                    Profiler.BeginSample("BuffHud._UpdateDatas.SetNodeVisible")
                    self:SetNodeVisible(buffHud.floorTrans, true)
                    buffHud.floorActive = true
                    Profiler.EndSample("BuffHud._UpdateDatas.SetNodeVisible")
                end
            else
                if buffHud.floorActive then
                    Profiler.BeginSample("BuffHud._UpdateDatas.SetNodeVisible")
                    self:SetNodeVisible(buffHud.floorTrans, false)
                    buffHud.floorActive = false
                    Profiler.EndSample("BuffHud._UpdateDatas.SetNodeVisible")
                end
            end
            -- 顺序变化时不马上修改进度
            --if buffFsm.curTime <= 0 or buffFsm.totalTime <0 then
            --    buffHud.progress = 0
            --else
            --    buffHud.progress = buffFsm.curTime / buffFsm.totalTime
            --end
            --self:SetBarProgress(buffHud.progressImg, buffHud.progress)

            Profiler.BeginSample("BuffHud._UpdateDatas.SetImage")

            CSBattleUtil.SetBuffIcon(buffHud.iconTrans,buffFsm.ID)
            Profiler.EndSample("BuffHud._UpdateDatas.SetImage")

            self:SetNodeVisible(buffHud.trans, true)
        end
    end
    Profiler.EndSample("BuffHud._UpdateDatas")
end

---@param state bool
function BuffHud:SetGoActive(state)
    for k, v in ipairs(self._pool) do
        if k <= self._curNumber then
            v.active = state
            self:SetNodeVisible(v.obj.transform, v.active)
        end
    end
end

function BuffHud:_InstantiateHudData()
    if GameObjectUtil.IsNull(self._hudObj) then
        return nil
    end
    local hudData = {}
    Profiler.BeginSample("BuffHud._InstantiateHudData.InstantiateGameObject")
    hudData.obj = GameObjectUtil.InstantiateGameObject(self._hudObj, self._parent)
    Profiler.EndSample("BuffHud._InstantiateHudData.InstantiateGameObject")

    hudData.trans = hudData.obj.transform
    hudData.trans.parent = self._parent
    hudData.iconTrans = hudData.trans:Find("icon_Buff")
    hudData.floorActive = true
    hudData.floorTrans = hudData.trans:Find("txt_Num")
    if not GameObjectUtil.IsNull(hudData.floorTrans) then
        hudData.floorText = hudData.floorTrans:GetComponent("TextMeshProUGUI")
    end
    local maskProgress = hudData.trans:Find("mask_Progress")
    if not GameObjectUtil.IsNull(maskProgress) then
        hudData.progressImg = maskProgress:GetComponent("X3Image")
    end
    if not GameObjectUtil.IsNull(hudData.iconTrans) then
        hudData.imageEnum = hudData.iconTrans:GetComponent("ImageEnum")
    end
    self:SetNodeVisible(hudData.obj.transform, true)
    return hudData
end

function BuffHud:Register()
    UIBehaviorBase.Register(self)
    g_BattleClient:AddListener(EventType.BuffChange, self, self._OnBuffChange, "BuffHud._OnBuffChange1")
    g_BattleClient:AddListener(EventType.BuffLayerChange, self, self._OnBuffLayerChange, "BuffHud._OnBuffChange2")
end

function BuffHud:_OnBuffLayerChange(_, data)
    if not self._inited then
        return
    end
    if data.target ~= self._role then
        return
    end

    if data.buffUIIndex <= 0 then
        return
    end

    local buffHud = self._pool[data.buffUIIndex]
    buffHud.floor = data.currentLayer
    if buffHud.floor > 0 then
        Profiler.BeginSample("BuffHud._OnBuffLayerChange.tostring")
        CSBattleUtil.SetTextByFloat(buffHud.floorText, buffHud.floor)
        Profiler.EndSample("BuffHud._OnBuffLayerChange.tostring")
        if not buffHud.floorActive then
            Profiler.BeginSample("BuffHud._OnBuffLayerChange.SetNodeVisible")
            self:SetNodeVisible(buffHud.floorTrans, true)
            buffHud.floorActive = true
            Profiler.EndSample("BuffHud._OnBuffLayerChange.SetNodeVisible")
        end
    else
        if buffHud.floorActive then
            Profiler.BeginSample("BuffHud._OnBuffLayerChange.SetNodeVisible")
            self:SetNodeVisible(buffHud.floorTrans, false)
            buffHud.floorActive = false
            Profiler.EndSample("BuffHud._OnBuffLayerChange.SetNodeVisible")
        end
    end
end

function BuffHud:_OnBuffChange(_, data)
    Profiler.BeginSample("BuffHud.OnBuffChange")
    if not self._inited then
        Profiler.EndSample("BuffHud.OnBuffChange")
        return
    end
    if data.target ~= self._role then
        Profiler.EndSample("BuffHud.OnBuffChange")
        return
    end

    if self._curNumber <= 0 and data.currentBuffNum <=0 then
        Profiler.EndSample("BuffHud.OnBuffChange")
        return
    end

    self._curNumber = data.currentBuffNum
    --buff更新当前所有图标，重新排序
    for i = 1, self._maxNumber do
        ---@type BuffHudData
        local buffHud = self._pool[i]
        if i > self._curNumber then
            self:SetNodeVisible(buffHud.trans, false)
        else
            buffHud.floor = data:GetUIBuffLayer(i-1)
            if buffHud.floor > 0 then
                Profiler.BeginSample("BuffHud._OnBuffChange.tostring")
                CSBattleUtil.SetTextByFloat(buffHud.floorText, buffHud.floor)
                Profiler.EndSample("BuffHud._OnBuffChange.tostring")
                if not buffHud.floorActive then
                    Profiler.BeginSample("BuffHud._OnBuffChange.SetNodeVisible")
                    self:SetNodeVisible(buffHud.floorTrans, true)
                    buffHud.floorActive = true
                    Profiler.EndSample("BuffHud._OnBuffChange.SetNodeVisible")
                end
            else
                if buffHud.floorActive then
                    Profiler.BeginSample("BuffHud._OnBuffChange.SetNodeVisible")
                    self:SetNodeVisible(buffHud.floorTrans, false)
                    buffHud.floorActive = false
                    Profiler.EndSample("BuffHud._OnBuffChange.SetNodeVisible")
                end
            end

            Profiler.BeginSample("BuffHud._OnBuffChange.SetImage")

            CSBattleUtil.SetBuffIcon(buffHud.iconTrans,data:GetUIBuffID(i-1))
            Profiler.EndSample("BuffHud._OnBuffChange.SetImage")

            self:SetNodeVisible(buffHud.trans, true)
        end
    end


    Profiler.EndSample("BuffHud.OnBuffChange")
end

function BuffHud:Unregister()
    UIBehaviorBase.Unregister(self)
    g_BattleClient:RemoveListener(EventType.BuffChange, self, self._OnBuffChange)
    g_BattleClient:RemoveListener(EventType.BuffLayerChange, self, self._OnBuffChange)
end

function BuffHud:OnDestroy()
    self:Unregister()
    self._inited = nil
    self._role = nil
    self._buffOwner = nil
    self._parent = nil
    self._maxNumber = nil
    ---self._offsetX = nil
    for _, v in ipairs(self._pool) do
        CSGameObject.Destroy(v.obj)
        v.obj = nil
    end
    self._pool = nil
    self._buffFsmDatas = nil
    self._hudObj = nil
    UIBehaviorBase.OnDestroy(self)
end

function BuffHud:_OnUpdate()
    --[[if self._perUpdateTime > 0 then
        self._perUpdateTime = self._perUpdateTime - self._battleUI.csBattle.deltaTime
        return
    end
    self._perUpdateTime = 0.1]]

    if self._curNumber <= 0 then
        return
    end
    for i = 1, self._maxNumber do
        ---@type BuffHudData
        local buffHud = self._pool[i]
        if i <= self._curNumber then
            local buffFsm = self._buffOwner:GetUIBuffData(i - 1)
            if buffFsm ~= nil then
                if buffFsm.curTime <= 0 or buffFsm.totalTime <= 0 then
                    buffHud.progress = 0
                else
                    buffHud.progress = buffFsm.curTime / buffFsm.totalTime
                end
                self:SetBarProgress(buffHud.progressImg, buffHud.progress)
            end
        end
    end
end

return BuffHud