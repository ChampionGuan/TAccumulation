---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/18 11:04
---

---@class HpInfo
---@field obj UnityEngine.GameObject ---小怪
---@field trans UnityEngine.Transform
---@field fading UnityEngine.Transform
---@field cur UnityEngine.Transform
---@field anchorPicTrans UnityEngine.Transform
---@field curNextTrans UnityEngine.Transform
---@field numTextTrans UnityEngine.Transform
---@field numText TMPro.TextMeshProUGUI
---@field value float
---@field curHp float
---@field maxNum int
---@field curNum int
---@field fadingNum int
---@field fadingValue float
---@field perHpReciprocal float
---@field perHp float
---@field enabled bool
---@field paused bool
---@field endStopHpAnimTime float
---@field x float
---@field width float
---@field hpRatio float
---@field hpFadeTime float
---@field curHpFadeTime float
---@field curHpReadyTime float
---@field offsetValue float ---boss
---@field ready bool
---@field effect bool

local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")
local csBattleUtil = CS.X3Battle.BattleUtil
local csTime = CS.UnityEngine.Time
local AttrType = CS.X3Battle.AttrType

---@class HudBase:UIBehaviorBase
local HudBase = XECS.class("HudBase", UIBehaviorBase)

function HudBase:ctor()
    UIBehaviorBase.ctor(self)
    self._perFrame = 0
    self._fabeTimeRatio = 1
end

function HudBase:Awake()
    UIBehaviorBase.Awake(self)
    self.hpReadyTime = TbUtil.battleConsts.HPReadyTime
    self.hpTotalFadeTime = TbUtil.battleConsts.HPPreviewTime * self._fabeTimeRatio
    self.hpFabeThresholdTime = TbUtil.battleConsts.HPPreviewThresholdTime * self._fabeTimeRatio
    self.hpFabeCompensationTime = TbUtil.battleConsts.HPPreviewCompensationTime  * self._fabeTimeRatio
end

---@param hpData HpInfo
function HudBase:InitHp(hpData)
    hpData.fadingValue = 1
    hpData.value = 1
    hpData.enabled = false
    hpData.paused = false
    hpData.endStopHpAnimTime = -1
    hpData.fadingNum = 0
    hpData.curNum = 0
    hpData.hpFadeTime = self.hpTotalFadeTime
    hpData.curHpFadeTime = hpData.hpFadeTime
    hpData.curHpReadyTime = -1

    if hpData.effect then
        self:SetFabe(hpData, 0)
    else
        self:SetBarProgress(hpData.fading, hpData.fadingValue)
    end
end

---@param hpData HpInfo
function HudBase:EvaluateFabe(hpData, role)
    if hpData.endStopHpAnimTime > 0 then
        if csTime.unscaledTime > hpData.endStopHpAnimTime then
            hpData.paused = false
            hpData.endStopHpAnimTime = -1
        end
    end

    if hpData.curHpReadyTime > 0 then
        hpData.curHpReadyTime = hpData.curHpReadyTime - role.unscaledDeltaTime
        if hpData.curHpReadyTime < 0 then
            hpData.curHpReadyTime = -1
            hpData.enabled = true
        end
    end

    if hpData.enabled and not hpData.paused then
        local unscaledDeltaTime = role.unscaledDeltaTime
        hpData.fadingValue = hpData.fadingValue - hpData.hpRatio * unscaledDeltaTime
        hpData.curHpFadeTime = hpData.curHpFadeTime - unscaledDeltaTime
        if hpData.fadingValue < hpData.value or hpData.curHpFadeTime < 0 then
            hpData.fadingValue = hpData.value
            hpData.enabled = false
        end
        if hpData.effect then
            if hpData.enabled then
                local ratio = 1
                if hpData.hpFadeTime > 0 then
                    ratio = hpData.curHpFadeTime / hpData.hpFadeTime
                else
                    Debug.LogError("hpData.hpFadeTime<=0")
                end
                local easeValue = 1 - (1 - ratio) * (1 - ratio)
                local value = hpData.offsetValue * easeValue
                self:SetFabe(hpData, value)
            else
                self:SetFabe(hpData, 0)
            end
        else
            self:SetBarProgress(hpData.fading, hpData.fadingValue)
        end
    end
end

function HudBase:SetPerHpReciprocal(attrOwner, hpData)
    local maxHp = attrOwner:GetAttrValue(AttrType.MaxHP)
    if maxHp <= 0 then
        maxHp = 100
    end
    hpData.perHpReciprocal = hpData.maxNum / maxHp
    hpData.perHp = maxHp / hpData.maxNum
end

---设置血量
---@param hpData HpInfo
function HudBase:SetHp(hpData, firstFlag, curHp)
    local offset
    if hpData.curHp then
        offset = hpData.curHp - curHp
    else
        offset = 0
    end
    hpData.curHp = curHp
    if hpData.maxNum == 1 then
        hpData.value = hpData.curHp * hpData.perHpReciprocal
    else
        hpData.curNum, hpData.value = math.modf(hpData.curHp / hpData.perHp)
        if hpData.value == 0 and hpData.curNum > 0 then
            hpData.value = 1
        else
            hpData.curNum = hpData.curNum + 1
        end
        if hpData.fadingNum ~= hpData.curNum then
            hpData.fadingNum = hpData.curNum
            hpData.fadingValue = 1
            csBattleUtil.SetBossHudNumText(hpData.numText, hpData.curNum)
            if hpData.curNum == 1 then
                self:SetNodeVisible(hpData.curNextTrans, false)
            end
        end
    end

    if firstFlag or offset < 0 then---首次设置或者加血
        hpData.enabled = false
        hpData.fadingValue = hpData.value
        hpData.fadingNum = hpData.curNum
        hpData.curHpReadyTime = -1
        hpData.hpFadeTime = -1
        hpData.curHpFadeTime = -1
    else
        ---在非动画状态下，重置等待时间和动画时间
        if not hpData.enabled then
            if hpData.ready then
                if hpData.curHpReadyTime < 0 then
                    hpData.curHpReadyTime = self.hpReadyTime
                end
            else
                hpData.enabled = true
            end
            hpData.hpFadeTime = self.hpTotalFadeTime
            hpData.curHpFadeTime = hpData.hpFadeTime
        else
            if hpData.curHpFadeTime < self.hpFabeThresholdTime then
                hpData.curHpFadeTime = self.hpFabeCompensationTime
            end
            hpData.hpFadeTime = hpData.curHpFadeTime
        end

        ---计算缓动血量进度
        hpData.offsetValue = hpData.fadingValue - hpData.value
        hpData.hpRatio = hpData.offsetValue / hpData.hpFadeTime
    end
    ---设置当前血量进度
    self:SetBarProgress(hpData.cur, hpData.value)
    ---设置当前血量缓动进度
    if hpData.effect then
        self:SetFabe(hpData)
    else
        self:SetBarProgress(hpData.fading, hpData.fadingValue)
    end

    ---计算亮点位置
    ---local anchorX = hpData.x + hpData.width * hpData.value
    ---csBattleUtil.SetLocalPosX(hpData.anchorPicTrans, anchorX)
end

---@param hpData HpInfo
function HudBase:SetFabe(hpData, value)
    local posX = (hpData.value - 0.5) * hpData.width
    csBattleUtil.SetLocalPosX(hpData.fading, posX)
    local width
    if value then
        width = value * hpData.width
    else
        width = (hpData.fadingValue - hpData.value) * hpData.width
    end
    csBattleUtil.SetSizeDeltaX(hpData.fading, width)
end

return HudBase