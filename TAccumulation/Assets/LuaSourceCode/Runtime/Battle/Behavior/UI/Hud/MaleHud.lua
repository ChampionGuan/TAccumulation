---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/18 11:39
---

local RoleHud = require("Runtime.Battle.Behavior.UI.Hud.RoleHud")
local ActorLifeStateType = CS.X3Battle.ActorLifeStateType
local AttrType = CS.X3Battle.AttrType

---@class MaleHud:RoleHud
local MaleHud = XECS.class("MaleHud", RoleHud)
MaleHud.Type = BattleHudBehaviorType.MaleHud

function MaleHud:ctor()
    RoleHud.ctor(self)
end

function MaleHud:Awake()
    self._transformName = "OCX_Head_Boy"
    self._hpFadingName = "OCX_Boy_img_blood_fading"
    self._hpImgName = "OCX_Boy_img_blood_cur"
    self._anchorPicName = "OCX_Boy_img_anchor"
    self._headImgName = "OCX_Boy_img_head"
    self._buffParentName = "OCX_Boy_pnl_buff"
    self._buffTipParentName = "OCX_Boy_pos_buff"
    self._headTrans = nil
    self._playerAttrOwner = nil
    self._boyAttrOwner = nil
    --男主关联能量
    self._maleEnergyAttr = AttrType.None
    self._maxMaleEnergy = 0
    --男主能量格数
    self._energyCount = 0
    --男主能量增长方式
    --1：整格增长
    self._EnergyRecoverType = 0
    self._slots = {}
    self._fabeTimeRatio = TbUtil.battleConsts.HPPreviewBoyTimeRatio
    RoleHud.Awake(self)
    self._headImg = self:GetComponent(self._headImgName, "Transform").gameObject
    self._boy_energy_bg = self:GetComponent("OCX_Boy_energy_bg", "Transform")
    self._energy_segment = self:GetComponent("OCX_Boy_energy_segment", "Transform")
    self._energyBgTrans = self:GetComponent("OCX_Boy_energy", "Transform")
    local energyWidth, _ = self:GetSizeDeltaXY("OCX_Boy_energy")
    self._energyWidth = energyWidth
    self:_PreLoadEnergyObjs()
end

function MaleHud:Start()
    self._actor = self._battleUI.boy
    if not self._actor then
        return
    end
    self:_UpdateData()
end

function MaleHud:_UpdateData()
    local cfg_FormationSuit = LuaCfgMgr.Get("FormationSuit", self._actor.suitID)
    if cfg_FormationSuit then
        self:SetImage(self._headImg, cfg_FormationSuit.HeadIcon)
    else
        Debug.Log("FormationSuit cfg id is null : ", self._actor.suitID)
    end

    self._energyCount = self._actor.boyCfg.MaleEnergyCount
    if self._energyCount > 0 then
        self._energyCountReciprocal = 1 / self._energyCount
    end
    self._EnergyRecoverType = self._actor.boyCfg.MaleEnergyRecoverType
    if self._actor.boyCfg.Energy ~= nil and self._actor.boyCfg.Energy.Length > 0 then
        self._maleEnergyAttr = AttrType.__CastFrom(self._actor.boyCfg.Energy[0])
    end
    --男主能量最大值策划目前认为不会在游戏的进行中变化，后面如果变化，获取就移到update中
    if self._actor.boyCfg.MaxEnergy ~= nil and self._actor.boyCfg.MaxEnergy.Length > 0 then
        self._maxMaleEnergy = self._actor.boyCfg.MaxEnergy[0]
    end
    --男主能量现在也是挂在女主身上
    self._playerAttrOwner = self._battleUI.player.attributeOwner
    self._boyAttrOwner = self._actor.attributeOwner
    self._attrOwner = self._actor.attributeOwner
    self:SetNodeVisible(self._energy_segment, true)
    self:_InitEnergySlot()
    self:SetNodeVisible(self._energy_segment, false)
    --如果策划没有配置，则直接不显示.AttrType.MaleEnergy 1009
    if self._actor:IsEnergyMode() == true and self._maleEnergyAttr == AttrType.MaleEnergy then
        self:SetNodeVisible(self._boy_energy_bg, true)
    else
        self:SetNodeVisible(self._boy_energy_bg, false)
    end
    RoleHud.Start(self)
end

function MaleHud:_OnUpdate()
    RoleHud._OnUpdate(self)
    if not self._actor then
        return
    end
    self:_UpdateEnergy()
end

function MaleHud:_UpdateEnergy()
    if self._maxMaleEnergy == 0 or self._maleEnergyAttr == AttrType.None then
        return
    end
    --男主能量取女主玩家的attrOwner，其他的取男主自己的attrOwner
    local attrOwner = self._playerAttrOwner
    if self._maxMaleEnergy > 0 then
        local progress = attrOwner:GetAttrValue(self._maleEnergyAttr) / self._maxMaleEnergy
        if self._EnergyRecoverType == 1 and self._energyCount > 0 then
            progress = math.floor(progress * self._energyCount) * self._energyCountReciprocal
        end
        self:SetBarProgress(self._energyBgTrans, progress)
    end
end

function MaleHud:_PreLoadEnergyObjs()
    self._slotPool = {}
    for i = 1, 5 do
        local segmentObj = GameObjectUtil.InstantiateGameObject(self._energy_segment, self._boy_energy_bg)
        self:SetNodeVisible(segmentObj.transform, false)
        table.insert(self._slotPool, segmentObj)
    end
end

function MaleHud:_GetEnergyObj()
    local energyObj
    if #self._slotPool > 0 then
        energyObj = self._slotPool[1]
        table.remove(self._slotPool,1)
    else
        energyObj = GameObjectUtil.InstantiateGameObject(self._energy_segment, self._boy_energy_bg)
    end
    self:SetNodeVisible(energyObj.transform, true)
    return energyObj
end

function MaleHud:_InitEnergySlot()
    for _, energyObj in ipairs(self._slots) do
        self:SetNodeVisible(energyObj.transform,false)
        table.insert(self._slotPool, energyObj)
    end
    if self._energyCount <= 1 then
        return
    end
    for i = 1, self._energyCount - 1 do
        table.insert(self._slots, self:_GetEnergyObj())
    end

    if self._energyCount > 0 then
        local offsetX = self._energyWidth * self._energyCountReciprocal
        for i = 1, #self._slots do
            self._slots[i].anchoredPosition = Vector2(offsetX * i, 0)
        end
    else
        Debug.LogError("self._energyCount<=0!")
    end

end

---@param actor X3Battle.Actor
function MaleHud:ActorChange(actor, state)
    if state ~= ActorLifeStateType.Born then
        return
    end
    if actor == self._battleUI.boy then
        if self._actor then
            self._actor = actor
        else
            self._actor = actor
            self:_UpdateData()
        end
        self._buffHud:Init(actor)
    end
end

function MaleHud:OnDestroy()
    for i, v in ipairs(self._slotPool) do
        GameObjectUtil.Destroy(v.gameObject)
    end
    self._slotPool = nil
    for _, v in ipairs(self._slots) do
        GameObjectUtil.Destroy(v.gameObject)
    end
    self._slots = nil
    RoleHud.OnDestroy(self)
end

return MaleHud