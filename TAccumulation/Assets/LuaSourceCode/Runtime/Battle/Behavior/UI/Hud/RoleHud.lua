---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/18 11:04
---

local HudBase = require("Runtime.Battle.Behavior.UI.Hud.HudBase")
local BuffHud = require("Runtime.Battle.Behavior.UI.Hud.BuffHud")
local AttrType = CS.X3Battle.AttrType

---@class RoleHud:HudBase
local RoleHud = XECS.class("RoleHud", HudBase)

function RoleHud:ctor()
    HudBase.ctor(self)
    ---@type X3Battle.Actor
    self._actor = nil
    ---@type X3Battle.AttributeOwner
    self._attrOwner = nil
    ---@type float
    self._maxSwordInsight = nil
    ---@type string
    self._hpImgName = nil
    ---@type string
    self._anchorPicName = nil
    ---@type GameObject
    self._headImg = nil
    ---@type string
    self._headImgName = nil
    ---@type bool
    self._isNearDead = nil
    ---@type float
    self._nearDeathHpRatio = nil
    ---@type bool
    self._energyActive = nil
    ---@type Transform
    self._buffParent = nil
    ---@type Transform
    self._buffTipParent = nil
    ---@type string
    self._buffParentName = nil
    ---@type string
    self._buffTipParentName = nil
    ---@type string
    self._hpFadingName = nil
end

function RoleHud:Awake()
    HudBase.Awake(self)
    self.battleUI = self._battleUI

    ---@type HpInfo
    self._hpData = {}

    self._hpData.cur = self:GetComponent(self._hpImgName, "Transform")
    local hpX,_,_ = self:GetLocalPositionXYZ(self._anchorPicName)
    self._hpData.x = hpX
    local hpWidth,_ = self:GetSizeDeltaXY(self._hpImgName)
    self._hpData.width = hpWidth

    self._transform = self:GetComponent(self._transformName, "Transform")
    self._buffParent = self:GetComponent(self._buffParentName, "Transform")
    self._buffTipParent = self:GetComponent(self._buffTipParentName, "Transform")
    self._hpData.anchorPicTrans = self:GetComponent(self._anchorPicName, "Transform")
    self._hpData.fading = self:GetComponent(self._hpFadingName, "Transform")
    self:SetActive(self._hpData.fading, true)
    self._hpData.enabled = false

    ---@type BuffHud
    self._buffHud = self:AddBehavior(BuffHud.new())
    self._buffHud:SetParent(self._buffParent)
    self:Register()
end

function RoleHud:Start()
    HudBase.Start(self)
    if not self._actor then
        return
    end

    self._isNearDead = false
    self._lastIsNearDead = false
    self._nearDeathHpRatio = 0.2
    self._attrOwner = self._actor.attributeOwner

    self._hpData.ready = false
    self._hpData.effect = true
    self:InitHp(self._hpData)

    self._hpData.maxNum = 1
    self:SetPerHpReciprocal(self._attrOwner, self._hpData)
    self:SetHp(self._hpData, true, self._attrOwner:GetAttrValue(AttrType.HP))
end

function RoleHud:_OnUpdate()
    if not self._actor then
        return
    end
    self:EvaluateFabe(self._hpData, self._actor)
end

function RoleHud:Register()
    HudBase.Register(self)
    g_BattleClient:AddListener(EventType.ActorHealthChange, self, self._OnActorHealthChange, "RoleHud._OnActorHealthChange")
    g_BattleClient:AddListener(EventType.MaxHpChange, self, self._OnMaxHpChange, "RoleHud._OnMaxHpChange")
end

function RoleHud:IsNearDead()
    return self._isNearDead
end

function RoleHud:_OnMaxHpChange(_, data)
    local actor = data.actor
    if self._actor ~= actor then
        return
    end
    self:SetPerHpReciprocal(self._attrOwner, self._hpData)
    self:SetHp(self._hpData, false, self._hpData.curHp)
    self:_UpdateNearDead(self._hpData.curHp)
end

function RoleHud:_OnActorHealthChange(_, data)
    local actor = data.actor
    if self._actor == actor then
        Profiler.BeginSample("RoleHud:SetHp")
        self:SetHp(self._hpData, false, data.currentValue)
        self:_UpdateNearDead(data.currentValue)
        Profiler.EndSample("RoleHud:SetHp")
    end
end

function RoleHud:_UpdateNearDead(hpValue)
    self._isNearDead = hpValue * self._hpData.perHpReciprocal < self._nearDeathHpRatio
    if self._lastIsNearDead ~= self._isNearDead then
        self._lastIsNearDead = self._isNearDead
        self:SetValue(self._hpData.cur, self._isNearDead)
    end
end

---美术自定义战斗下隐藏hud数据集合对应的UI
function RoleHud:SetArtEditorState()
    self:SetGoActive(false)
end

function RoleHud:Unregister()
    g_BattleClient:RemoveListener(EventType.ActorHealthChange, self, self._OnActorHealthChange)
    g_BattleClient:RemoveListener(EventType.MaxHpChange, self, self._OnMaxHpChange)
    HudBase.Unregister(self)
end

function RoleHud:OnDestroy()
    self:Unregister()
    self._actor = nil
    self._attrOwner = nil
    self._maxSwordInsight = nil
    self._hpImgName = nil
    self._anchorPicName = nil
    self._headImg = nil
    self._headImgName = nil
    self._isNearDead = nil
    self._nearDeathHpRatio = nil
    self._energyActive = nil
    self._buffParent = nil
    self._buffTipParent = nil
    self._buffParentName = nil
    self._buffTipParentName = nil
    HudBase.OnDestroy(self)
end

return RoleHud