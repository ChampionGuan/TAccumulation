---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sanxi.
--- DateTime: 2022/12/1 11:19
---
local Time = CS.UnityEngine.Time
local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")
local csBattleUtil = CS.X3Battle.BattleUtil

---@class BattleEnd:UIBehaviorBase
local BattleEnd = XECS.class("BattleEnd", UIBehaviorBase)
BattleEnd.Type = BattleUIBehaviorType.BattleEnd

function BattleEnd:ctor()
    UIBehaviorBase.ctor(self)
end

function BattleEnd:Awake()
    UIBehaviorBase.Awake(self)
    self.isCountDown = false
    self._isFail = false
    self._battleDeltaTime = 0.03
    self._levelTime = self._battleUI.levelFlow.levelTime
    self._parentName = "OCX_CountDown"
    self._parent = self:GetComponent(self._parentName, "Transform")
    self._winTrans = self:GetComponent("OCX_Win", "Transform")
    self._loseTrans = self:GetComponent("OCX_Lose", "Transform")
    self._timeTrans = self:GetComponent("OCX_Time", "Transform")
    self._countDownText = self:GetComponent("OCX_Number", "Transform")
    self._TextTime = 0

    --区分连战关卡的显示
    self._textNormalEnd = UITextConst.UI_TEXT_20002
    self._textToNextLevel = UITextConst.UI_TEXT_20018
    self._stageID = self._battleUI.csBattle.arg.commonStageId
end

function BattleEnd:Start()
    self:SetActive(self._parent, true)
    self:SetActive(self._winTrans, true)
    self:SetActive(self._loseTrans, true)
    self:SetActive(self._timeTrans, true)
    self:SetNodeVisible(self._winTrans, false)
    self:SetNodeVisible(self._loseTrans, false)
    self:SetNodeVisible(self._timeTrans, false)
    self._timeActive = false
    self._countDownEndTime = -1
    self._closeAction = nil
end

function BattleEnd:_StartCountDown()
    ---Debug.LogErrorFormat("【BattleEnd】开启结束倒计时Tip（第二步）")
    self.isCountDown = true
    self._countDownEndTime = self._battleUI.csBattle.time + csBattleUtil:GetCountDownTime()
end

function BattleEnd:Show(isWin, closeAction)
    ---Debug.LogErrorFormat("【BattleEnd】打开战斗Tip（第一步）")
    self._isFail = not isWin
    self._closeAction = closeAction
    if isWin then
        self:SetNodeVisible(self._winTrans, true)
        self:PlayCustomMotion(self._parent, 0, g_BattleClient:SafeHandler(self, self._StartCountDown))
    else
        self:SetNodeVisible(self._loseTrans, true)
        self:PlayCustomMotion(self._parent, 1, g_BattleClient:SafeHandler(self, self._StartCountDown))
    end
end

function BattleEnd:GetTime(cdNum)
    local cd = 0
    if cdNum > 0 then
        cd = math.ceil(cdNum)
    end
    if cd < 0 then
        cd = 0
    end
    return cd
end

function BattleEnd:_OnUpdate()
    if self.isCountDown and self._countDownEndTime > 0 then
        local curTime = self._battleUI.csBattle.time
        if curTime > self._countDownEndTime then
            self._countDownEndTime = -1
            self:SetNodeVisible(self._timeTrans, false)

            if self._closeAction ~= nil then
                self._closeAction()
            end
            self._closeAction = nil
        else
            local time = self:GetTime(self._countDownEndTime - curTime)
            if self._TextTime ~= time then
                self._TextTime = time
                --根据连战关卡显示不同文本
                local isMultiLevel, currentIdx, maxLevel = ChapterStageManager:CheckIfBattleMultiLevel(self._stageID)
                if isMultiLevel == 1 and maxLevel > currentIdx and self._isFail == false then
                    self:SetText(self._countDownText, self._textToNextLevel, time)
                else
                    self:SetText(self._countDownText, self._textNormalEnd, time)
                end
            end
            if not self._timeActive then
                self:SetNodeVisible(self._timeTrans, true)
                self._timeActive = true
            end
        end
    end
end

function BattleEnd:OnDestroy()
    self._parentName = nil
    self._parent = nil
    self._winTrans = nil
    self._loseTrans = nil
    self._timeTrans = nil
    self._countDownText = nil
    self._TextTime = 0
    self._closeAction = nil
    UIBehaviorBase.OnDestroy(self)
end

return BattleEnd
