---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2023/12/27 14:31
---

local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")

---@class RogueUI:UIBehaviorBase
local RogueUI = XECS.class("RogueUI", UIBehaviorBase)
local csScreen = CS.UnityEngine.Screen
local csFpsOperateType = CS.X3Battle.FpsOperateType

RogueUI.Type = BattleUIBehaviorType.RogueUI

function RogueUI:ctor()
    UIBehaviorBase.ctor(self)
    self._perFrame = 0

    self._minAmmunitionCursor = 1
    self._maxAmmunitionCursor = 7
    self._forceRecoverGap = 5
    self._autoRecoverGap = 7
end

function RogueUI:Awake()
    UIBehaviorBase.Awake(self)

    self._transform = self:GetComponent("OCX_WindowFPS", "Transform")
    self._joystickTrans = self:GetComponent("OCX_GJoystick", "Transform")
    self._joystickObj = self._joystickTrans.gameObject
    self._accurateTrans = self:GetComponent("OCX_Accurate", "Transform")
    self._ammunitionTrans = {}
    for i = 1, 12 do
        table.insert(self._ammunitionTrans, self:GetComponent("OCX_g" .. i, "Transform"))
    end
    self._skillTrans = self:GetComponent("OCX_Skill", "Transform")
    self._attackTrans = self:GetComponent("OCX_Attack", "Transform")
    self._reloadTrans = self:GetComponent("OCX_Reload", "Transform")
    self._skillEffect = self:GetComponent("OCX_fx_ui_skill_click", "ParticleSystem")
    self._attackEffect = self:GetComponent("OCX_fx_ui_attack_click", "ParticleSystem")
    self._reloadEffect = self:GetComponent("OCX_fx_ui_reload_click", "ParticleSystem")
    self._accurateX = 0
    self._accurateY = 0
    local realWidth = 1920
    local width = csScreen.width
    local height = csScreen.height
    self._ratio = width / realWidth
    local realHeight = height / self._ratio
    self._minX = -0.5 * realWidth
    self._maxX = 0.5 * realWidth
    self._minY = -0.5 * realHeight
    self._maxY = 0.5 * realHeight
    self:SetLocalPosition(self._accurateTrans, self._accurateX, self._accurateY, 0)
    self._isAxisDrag = false
    self._ammunitionCursor = self._minAmmunitionCursor
    self._ammunitionTimes = 0
    self._reloadTimes = 0
    self._curTime = 0
    self._forceRecover = false
    self:Register()
end

function RogueUI:Start()
    UIBehaviorBase.Start(self)
    self._sightSpeed = TbUtil.battleConsts.SightSpeed
    self._recoverGap = self._autoRecoverGap
    self._ammunitionTimes = 0
    self._reloadTimes = 0
    self:SetGoActive(not g_BattleClient:IsPrologueChapter())
end

function RogueUI:Register()
    self:AddButtonListener(self._skillTrans, g_BattleClient:SafeHandler(self, self._OnSkill))
    self:AddButtonListener(self._attackTrans, g_BattleClient:SafeHandler(self, self._OnAttack))
    self:AddButtonListener(self._reloadTrans, g_BattleClient:SafeHandler(self, self._OnReload))
    self:AddJoystickDownUpListener("OCX_GJoystick", g_BattleClient:SafeHandler(self, self._OnJoystickDown), g_BattleClient:SafeHandler(self, self._OnJoystickUp))
    self:AddJoystickXYUpdateListener("OCX_GJoystick", g_BattleClient:SafeHandler(self, self._OnJoystickDragUpdate))
end

function RogueUI:_OnUpdate()
    if self._ammunitionCursor == self._minAmmunitionCursor then
        return
    end
    self._curTime = self._curTime + self._battleUI.csBattle.deltaTime
    if self._curTime >= self._recoverGap then
        if self._ammunitionCursor == 0 then
            self._ammunitionCursor = self._maxAmmunitionCursor
        else
            self._ammunitionCursor = self._ammunitionCursor -1
        end
        if self._ammunitionCursor == self._minAmmunitionCursor then
            self._forceRecover = false
            self._recoverGap = self._autoRecoverGap
        end
        self:SetActive(self._ammunitionTrans[self._ammunitionCursor], true)
        self._curTime = 0
    end
end

---@param eventData UnityEngine.EventSystems.PointerEventData
function RogueUI:_OnJoystickDown(eventData)
    self._isAxisDrag = true
end

---@param eventData UnityEngine.EventSystems.PointerEventData
function RogueUI:_OnJoystickUp(eventData)
    self._isAxisDrag = false
end

---@param x number
---@param y number
function RogueUI:_OnJoystickDragUpdate(x, y)
    if not self._joystickObj.visibleInHierarchy then
        self._isAxisDrag = false
        return
    end
    if self._battleUI.playerInput and self._isAxisDrag then
        self._accurateX = self._accurateX + x * self._sightSpeed
        self._accurateY = self._accurateY + y * self._sightSpeed
        if self._accurateX < self._minX then
            self._accurateX = self._minX
        elseif self._accurateX > self._maxX then
            self._accurateX = self._maxX
        end
        if self._accurateY < self._minY then
            self._accurateY = self._minY
        elseif self._accurateY > self._maxY then
            self._accurateY = self._maxY
        end
        self:SetLocalPosition(self._accurateTrans, self._accurateX, self._accurateY, 0)
    end
end

---释放主动技能
function RogueUI:_OnSkill()
    self._skillEffect:Play()
end

---释放普通技能
function RogueUI:_OnAttack()
    if self._ammunitionCursor == 0 or self._forceRecover then
        return
    end
    self._attackEffect:Play()
    local x = (self._accurateX + self._maxX) * self._ratio
    local y = (self._accurateY + self._maxY) * self._ratio
    self._battleUI.playerInput:ShootBtn(x, y)
    self:SetActive(self._ammunitionTrans[self._ammunitionCursor], false)
    self._ammunitionTimes = self._ammunitionTimes + 1
    self._battleUI._csUi:DispatchFpsOperateChange(csFpsOperateType.OpenFire, self._ammunitionTimes)
    self._ammunitionCursor = self._ammunitionCursor + 1
    if self._ammunitionCursor > self._maxAmmunitionCursor then
        self._ammunitionCursor = 0
        self._ammunitionTimes = 0
        self._forceRecover = true
        self._recoverGap = self._forceRecoverGap
    end
end

---重新装载子弹
function RogueUI:_OnReload()
    if self._forceRecover then
        return
    end
    self._reloadEffect:Play()
    self._ammunitionCursor = self._minAmmunitionCursor
    for _, v in ipairs(self._ammunitionTrans) do
        self:SetActive(v, true)
    end
    self._ammunitionTimes = 0
    self._reloadTimes = self._reloadTimes + 1
    self._battleUI._csUi:DispatchFpsOperateChange(csFpsOperateType.Reload, self._reloadTimes)
end

function RogueUI:AddAmmunition(count)
    local ammunitionCursor = self._ammunitionCursor - count
    if ammunitionCursor < self._minAmmunitionCursor then
        ammunitionCursor = self._minAmmunitionCursor
    end
    for i = ammunitionCursor, self._ammunitionCursor do
        self:SetActive(self._ammunitionTrans[i], true)
    end
    self._ammunitionCursor = ammunitionCursor
end

function RogueUI:Unregister()

end

function RogueUI:OnDestroy()
    self:Unregister()
    self._joystickTrans = nil
    self._joystickObj = nil
    self._accurateTrans = nil
    self._ammunitionTrans = nil
    self._skillTrans = nil
    self._attackTrans = nil
    self._reloadTrans = nil
    self._skillEffect = nil
    self._attackEffect = nil
    self._reloadEffect = nil
    UIBehaviorBase.OnDestroy(self)
end

return RogueUI