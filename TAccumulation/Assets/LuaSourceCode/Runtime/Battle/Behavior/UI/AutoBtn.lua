---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/18 11:04
---

local UIBehaviorBase = require("Runtime.Battle.Behavior.UI.UIBehaviorBase")

local ActorLifeStateType = CS.X3Battle.ActorLifeStateType
local csParticleSystemStopBehavior = CS.UnityEngine.ParticleSystemStopBehavior
---@class AutoBtn:UIBehaviorBase
local AutoBtn = XECS.class("AutoBtn", UIBehaviorBase)
AutoBtn.Type = BattleUIBehaviorType.AutoBtn

function AutoBtn:ctor()
    UIBehaviorBase.ctor(self)
    self._requiredUpdate = false
    ---@type bool
    self._enabled = nil
    ---@type bool
    self._unlocked = nil
    ---@type bool
    self._automatic = nil
end

function AutoBtn:Awake()
    UIBehaviorBase.Awake(self)
    self._transformName = "OCX_btn_Auto"
    self._transform = self:GetComponent(self._transformName, "Transform")
    self._styleEnum = self:GetComponent(self._transformName, "StyleEnum")
    self._disableTrans = self:GetComponent("OCX_Disable", "Transform")
    self._unlockTrans = self:GetComponent("OCX_Lock", "Transform")
    self._autoEffect = self:GetComponent("OCX_FX_effectAuto", "ParticleSystem")
end

function AutoBtn:Start()
    UIBehaviorBase.Start(self)
    local levelConfig = BattleUtil.GetBattleLevelConfig(self._battleUI.csBattle.arg.levelID)
    self._enabled = levelConfig.AutoModeUISwitch
    self._isOnline = self._battleUI.battleArg.startupType == BattleStartupType.Online
    if self._isOnline then
        self._unlocked = ChapterStageManager.GetIsAutoBattleUnLock()
        if self:IsRunning() then
            self._automatic = ChapterStageManager.GetAutoBattleState()
        else
            self._automatic = false
        end
    else
        self._unlocked = true
        self._automatic = false
    end
    if not self._enabled then---未启用
        ---显示【未启用】UI组件
        self._styleEnum:SetIdx(2)
    elseif not self._unlocked then---未解锁
        ---显示【未解锁】UI组件
        self._styleEnum:SetIdx(1)
    else
        self._styleEnum:SetIdx(0)
    end
    self._autoEffect:Stop(true, csParticleSystemStopBehavior.StopEmittingAndCleanup)
    if not self:IsRunning() then
        self._battleUI._battleWnd:SetEnable(self._transform, "SwitchButton", false)
    end
    self:AddSwitchButtonListener(self._transform, g_BattleClient:SafeHandler(self, self._AutoBattle))
    self:AddButtonListener(self._disableTrans, g_BattleClient:SafeHandler(self, self._ShowDisableTip))
    self:AddButtonListener(self._unlockTrans, g_BattleClient:SafeHandler(self, self._ShowLockTip))
end

function AutoBtn:IsRunning()
    return self._enabled and self._unlocked
end

function AutoBtn:Save()
    if not self._isOnline or not self:IsRunning() then
        return
    end
    ChapterStageManager.SetAutoBattleState(self._automatic)
end

function AutoBtn:_ShowDisableTip()
    UICommonUtil.ShowMessage(UITextConst.UI_TEXT_20025)
end

function AutoBtn:_ShowLockTip()
    UICommonUtil.ShowMessage(ChapterStageManager.GetAutoBattleLockTips())
end

---自动/手动战斗  true/false
function AutoBtn:_AutoBattle(_, isOn)
    self._automatic = isOn
    if self._battleUI.playerInput then
        self._battleUI.playerInput:TrySwitchAuto(self._automatic)
    end
    if self._isBorn then
        return
    end
    if isOn then
        self._autoEffect:Play()
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_20016)
    else
        self._autoEffect:Stop(true, csParticleSystemStopBehavior.StopEmittingAndCleanup)
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_20017)
    end
end

---自动/手动战斗  true/false
---@param isOn bool
function AutoBtn:LogicAutoBattle(isOn)
    if not self:IsRunning() then
        return
    end
    if isOn ~= self._automatic then
        self:SetValue(self._transform, isOn)
    end
end

function AutoBtn:ActorChange(actor, state)
    if not actor:IsRole() then
        return
    end
    if state == ActorLifeStateType.Born and actor == self._battleUI.player then
        self._isBorn = true
        local isOn = self._battleUI._battleWnd:GetBoolValue(self._transform)
        if self._automatic ~= isOn then
            self:SetValue(self._transform, self._automatic)
        else
            if self._battleUI.playerInput then
                self._battleUI.playerInput:TrySwitchAuto(self._automatic)
            end
            if self._automatic then
                self._autoEffect:Play()
            else
                self._autoEffect:Stop(true, csParticleSystemStopBehavior.StopEmittingAndCleanup)
            end
        end
        self._isBorn = false
        --isOpenAuto 只会在测试环境中设置为true
        local csBattleArg = self._battleUI.csBattle.arg
        if not csBattleArg.isOpenAuto then
            return
        end
        self._battleUI.playerInput:TrySwitchAuto(true)
    end
end

function AutoBtn:Unregister()

end

function AutoBtn:OnDestroy()
    self:Save()
    self:Unregister()
    self._styleEnum = nil
    self._autoEffect = nil
    UIBehaviorBase.OnDestroy(self)
end

return AutoBtn