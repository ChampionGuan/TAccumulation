---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/18 11:04
---

local Behavior = require("Runtime.Battle.Common.Behavior")
local AttackSlot = require("Runtime.Battle.Behavior.UI.Slot.AttackSlot")
local ActiveSlot = require("Runtime.Battle.Behavior.UI.Slot.ActiveSlot")
local DodgeSlot = require("Runtime.Battle.Behavior.UI.Slot.DodgeSlot")
local CoopSlot = require("Runtime.Battle.Behavior.UI.Slot.CoopSlot")
local PowerSlot = require("Runtime.Battle.Behavior.UI.Slot.PowerSlot")
local BoyActiveSlot = require("Runtime.Battle.Behavior.UI.Slot.BoyActiveSlot")

local ActorLifeStateType = CS.X3Battle.ActorLifeStateType

---@class SlotMgr:Behavior
local SlotMgr = XECS.class("SlotMgr", Behavior)
SlotMgr.Type = BattleUIBehaviorType.SlotMgr

function SlotMgr:ctor()
    Behavior.ctor(self)
    ---@type BattleUI
    self.battleUI = nil
    ---@type AttackSlot
    self._attackSlot = nil
    ---@type ActiveSlot
    self._activeSlot = nil
    ---@type DodgeSlot
    self._dodgeSlot = nil
    ---@type CoopSlot
    self._coopSlot = nil
    ---@type PowerSlot
    self._powerSlot = nil
end

function SlotMgr:Awake()
    self.battleUI = self.owner

    self._attackSlot = self:AddBehavior(AttackSlot.new())
    self._activeSlot = self:AddBehavior(ActiveSlot.new())
    self._dodgeSlot = self:AddBehavior(DodgeSlot.new())
    self._coopSlot = self:AddBehavior(CoopSlot.new())
    self._powerSlot = self:AddBehavior(PowerSlot.new())
    self._boyActiveSlot = self:AddBehavior(BoyActiveSlot.new())
    ---@type SlotBase[]
    self._slots = {}
    table.insert(self._slots, self._attackSlot)
    table.insert(self._slots, self._activeSlot)
    table.insert(self._slots, self._dodgeSlot)
    table.insert(self._slots, self._coopSlot)
    table.insert(self._slots, self._powerSlot)
    table.insert(self._slots, self._boyActiveSlot)
    SlotMgr.super.Awake(self)

    self:Register()
end

function SlotMgr:_OnUpdate()
    SlotMgr.super._OnUpdate(self)
    for _, v in ipairs(self._slots) do
        v:UpdateProgress()
    end
end

function SlotMgr:StopEffect()
    self._attackSlot:StopEffect()
    self._activeSlot:StopEffect()
end

function SlotMgr:_DebugUpdateAllSlot()
    for _, v in ipairs(self._slots) do
        v:DebugSetSlot()
    end
end

---@param active bool
function SlotMgr:SetAllGoActive(active)
    for _, v in ipairs(self._slots) do
        v:SetGoActive(active)
    end
end

---@param active bool
function SlotMgr:SetAttackGoActive(active)
    self._attackSlot:SetGoActive(active)
end

---@param active bool
function SlotMgr:SetActiveGoActive(active)
    self._activeSlot:SetGoActive(active)
end

---@param active bool
function SlotMgr:SetDodgeGoActive(active)
    self._dodgeSlot:SetGoActive(active)
end

---@param active bool
function SlotMgr:SetCoopGoActive(active)
    self._coopSlot:SetGoActive(active)
end

---@param active bool
function SlotMgr:SetPowerGoActive(active)
    self._powerSlot:SetGoActive(active)
end

---@param active bool
function SlotMgr:SetBoyActiveGoActive(active)
    self._boyActiveSlot:SetGoActive(active)
end

---@param active bool
function SlotMgr:DebugSetSlotEffectActive(active)
    for _, v in ipairs(self._slots) do
        v:DebugSetSlotEffectActive(active)
    end
end

function SlotMgr:SetSkillSlot(actor, btnType, skillSlot)
    for _, v in ipairs(self._slots) do
        if v:SetSkillSlot(actor, btnType, skillSlot) then
            return
        end
    end
end

function SlotMgr:UpdateBtnState()
    for _, v in ipairs(self._slots) do
        v:UpdateBtnState()
    end
end

function SlotMgr:ActorChange(actor, state)
    if not actor:IsRole() then
        return
    end
    if state == ActorLifeStateType.Born then
        if actor == self.battleUI.player then
            self._attackSlot:SetSlot()
            self._activeSlot:SetSlot()
            self._dodgeSlot:SetSlot()
            self._coopSlot:SetSlot()
            self._powerSlot:SetSlot()
        elseif actor == self.battleUI.boy then
            self._boyActiveSlot:SetSlot()
        end
    elseif state == ActorLifeStateType.Dead then
        if actor == self.battleUI.girl or actor == self.battleUI.boy then
            for _, v in ipairs(self._slots) do
                v:SetLeftDeadBtnState()
            end
        end
    end
end

function SlotMgr:Register()
    g_BattleClient:AddListener(EventType.RefreshSlotData, self, self._DebugUpdateAllSlot, "SlotMgr._DebugUpdateAllSlot")
end

function SlotMgr:Unregister()
    g_BattleClient:RemoveListener(EventType.RefreshSlotData, self, self._DebugUpdateAllSlot)
end

function SlotMgr:OnDestroy()
    self:Unregister()
    self.battleUI = nil
    self._attackSlot = nil
    self._activeSlot = nil
    self._dodgeSlot = nil
    self._coopSlot = nil
    self._powerSlot = nil
    self._boyActiveSlot = nil
    self._slots = nil
    Behavior.OnDestroy(self)
end

return SlotMgr