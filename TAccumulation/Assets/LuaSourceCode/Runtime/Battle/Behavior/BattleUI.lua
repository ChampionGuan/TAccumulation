---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canglan.
--- DateTime: 2021/11/30 11:00
---
---
local BattleBehavior = require("Runtime.Battle.Common.BattleBehavior")
local HudMgr = require("Runtime.Battle.Behavior.UI.HudMgr")
local BubbleMgr = require("Runtime.Battle.Behavior.UI.BubbleMgr")
local SlotMgr = require("Runtime.Battle.Behavior.UI.SlotMgr")
local GuideArrow = require("Runtime.Battle.Behavior.UI.GuideArrow")
local Joystick = require("Runtime.Battle.Behavior.UI.Joystick")
local AutoBtn = require("Runtime.Battle.Behavior.UI.AutoBtn")
local TimerLabel = require("Runtime.Battle.Behavior.UI.TimerLabel")
local QuitBtn = require("Runtime.Battle.Behavior.UI.QuitBtn")
local WarningFx = require("Runtime.Battle.Behavior.UI.WarningFx")
local DragLens = require("Runtime.Battle.Behavior.UI.DragLens")
local BattleEnd = require("Runtime.Battle.Behavior.UI.BattleEnd")
local MissionTips = require("Runtime.Battle.Behavior.UI.MissionTips")
local BigSpiral = require("Runtime.Battle.Behavior.UI.BigSpiral")
local RogueUI = require("Runtime.Battle.Behavior.UI.RogueUI")

local ActorLifeStateType = CS.X3Battle.ActorLifeStateType
local BattleWndMode = CS.X3Battle.BattleWndMode
local UIComponentType = CS.X3Battle.UIComponentType
local csTime = CS.UnityEngine.Time
local csBattleUtil = CS.X3Battle.BattleUtil
local DebugUIHideType = CS.X3Battle.DebugUIHideType
---@class BattleUI:BattleBehavior
local BattleUI = XECS.class("BattleUI", BattleBehavior)
BattleUI.Type = BattleBehaviorType.BattleUI

function BattleUI:ctor()
    BattleUI.super.ctor(self)
    ---@type bool
    self._isInit = nil
    ---@type BattleWnd
    self._battleWnd = nil
    ---@type BattleUI
    self.battleUI = nil
    ---@type HudMgr
    self._hudMgr = nil
    ---@type BubbleMgr
    self._bubbleMgr = nil
    ---@type SlotMgr
    self._slotMgr = nil
    ---@type GuideArrow
    self._guideArrow = nil
    ---@type Joystick
    self._joystick = nil
    ---@type AutoBtn
    self._autoBtn = nil
    ---@type TimerLabel
    self._timerLabel = nil
    ---@type QuitBtn
    self._quitBtn = nil
    ---@type WarningFx
    self._warningFx = nil
    ---@type DragLens
    self._dragLens = nil
    ---@type bool
    self._powerSkillIsCast = nil
    ---@type float
    self._endHideUITime = nil
    ---@type BattleEnd
    self._battleEnd = nil
    ---@type MissionTips
    self._missionTips = nil
    ---@type BigSpiral
    self._bigSpiral = nil
    ---@type bool
    self._levelEndHideBtn = false
    ---@type bool
    self._isBigSpiral = false
end

function BattleUI:Preload()
    UIMgr.Open("BattleWnd")
    ---跟策划约定为新手关卡
    if csBattleUtil.IsGuideLevel(self.csBattle.config.ID) then
        UIMgr.Open("NoviceGuideWnd")
        self._oldGuideOpen = PlayerPrefs.GetBool("GuideOpen")
        self._oldGuideManualGuideOpen = PlayerPrefs.GetBool("GuideManualGuideOpen")
        PlayerPrefs.SetBool("GuideOpen", true)
        PlayerPrefs.SetBool("GuideManualGuideOpen", true)
    end

    local iteration = function(UIName)
        UIMgr.Open(UIName)
    end
    -- 这里把字典的遍历放到C#端， 避免lua端遍历字典的时候，通过反射访问字典
    CS.X3Battle.BattleUtil.ForeachAnalyzeUINames(g_battlePreloadEstimator.battleResAnalyzeResult, iteration)
    g_battlePreloadEstimator:Clear()
end

---@param battleWnd UIViewContext_BattleWnd
function BattleUI:Init(battleWnd)
    ---@type UIViewContext_BattleWnd
    self._battleWnd = battleWnd

    self.battleUI = self

    self.playerInput = self.csBattle.input
    self.actorMgr = self.csBattle.actorMgr
    self.levelFlow = self.csBattle.levelFlow
    self.cameraTrace = self.csBattle.cameraTrace
    self.setting = self.csBattle.setting
    self._csUi = self.csBattle.ui
    g_csInput = self.playerInput
    self.battleArg = self.csBattle.arg

    self.player = self.actorMgr.player
    if self.player then
        self.playerAttrOwner = self.player.attributeOwner
    end
    g_csPlayer = self.player
    self.girl = self.actorMgr.girl
    if self.girl then
        self.girlSkillOwner = self.girl.skillOwner
        self.disableController = self.girlSkillOwner.disableController
    end
    g_csGirl = self.girl
    self.boy = self.actorMgr.boy
    if self.boy then
        self.boySkillOwner = self.boy.skillOwner
    end
    g_csBoy = self.boy
    self.boss = self.actorMgr.boss
    self.isArtEditor = false

    self.rootTrans = self:GetComponent("OCX_Root", "Transform")
    self.rootObj = self.rootTrans.gameObject
    self.floatParent = self:GetComponent("OCX_FloatParent", "Transform")

    self._isBigSpiral = false
    ---@type HudMgr
    self._hudMgr = self:AddBehavior(HudMgr.new())
    ---@type BubbleMgr
    self._bubbleMgr = self:AddBehavior(BubbleMgr.new())

    self._slotMgr = self:AddBehavior(SlotMgr.new())
    --隐藏按钮的时候快速重试，重新开始的时候先设置按钮可见
    self._slotMgr:SetAllGoActive(true)
    ---@type GuideArrow
    self._guideArrow = self:AddBehavior(GuideArrow.new())
    ---@type Joystick
    self._joystick = self:AddBehavior(Joystick.new())
    ---@type AutoBtn
    self._autoBtn = self:AddBehavior(AutoBtn.new())
    ---@type TimerLabel
    self._timerLabel = self:AddBehavior(TimerLabel.new())
    ---@type QuitBtn
    self._quitBtn = self:AddBehavior(QuitBtn.new())
    ---@type WarningFx
    self._warningFx = self:AddBehavior(WarningFx.new())
    ---@type DragLens
    self._dragLens = self:AddBehavior(DragLens.new())
    ---@type BattleEnd
    self._battleEnd = self:AddBehavior(BattleEnd.new())
    ---@type MissionTips
    self._missionTips = self:AddBehavior(MissionTips.new())
    ---@type BigSpiral
    self._bigSpiral = self:AddBehavior(BigSpiral.new())
    ---@type RogueUI
    self._rogueUI = self:AddBehavior(RogueUI.new())
    self._isDestroyed = false

    self:SetUIMode(false)

    self._csUi:AddWindow(self._battleWnd.transform)
    self.csBattle.floatWordMgr:SetParent(self.floatParent)

    -- 战斗录像回放，需要关掉的操作UI
    if not string.isnilorempty(self.csBattle.arg.replayPath) then
        self:SetNodeVisible(self._slotMgr, false)
        self:SetNodeVisible(self._joystick, false)
    end

    self:Register()

    self._csUi:PreCreateUIPlayable()
end


function BattleUI:Start()
    BattleUI.super.Start(self)
    if self.csBattle.arg.replayMode == CS.X3Battle.BattleReplayMode.Replay then
        self:SetJoystickActive(false)
        local slotTrans = self:GetComponent("OCX_Slots", "Transform")
        self:SetNodeVisible(slotTrans, false)
    end
    self._powerSkillIsCast = false
    self._endHideUITime = 0
end

function BattleUI:_OnUpdate()
    if not self._isInit then
        return
    end
    BattleUI.super._OnUpdate(self)

    if self._endHideUITime ~= 0 then
        if csTime.unscaledTime > self._endHideUITime then
            self:SetNodeVisible(self._battleWnd.transform, true)
            self._endHideUITime = 0
        end
    end
end

function BattleUI:OnDestroy()
    self._csUi:RemoveWindow(self._battleWnd.transform)
    if csBattleUtil.IsGuideLevel(self.csBattle.config.ID) then
        PlayerPrefs.SetBool("GuideOpen", self._oldGuideOpen)
        PlayerPrefs.SetBool("GuideManualGuideOpen", self._oldGuideManualGuideOpen)
    end
    GameHelper.SetGlobalTouchEnable(true)
    UIMgr.SetCanRestoreHistory(false)
    ---by 沧澜 ui卸载
    UIMgr.Close("BattleMonsterInf", false)
    UIMgr.Close("BattleInfoPopup", false)
    UIMgr.Close("BattleMainTips", false)
    UIMgr.Close("BattleTipsWnd", false)
    UIMgr.Close("BattleSettingWnd",false)
    UIMgr.Close("BattleSoulTrialLayer",false)
    UIMgr.Close("BattleInterActorPopup",false)

    UIMgr.Close("Debug_BattleWnd", false)

    BattleUI.super.OnDestroy(self)
    g_csInput = nil
    g_csPlayer = nil
    g_csGirl = nil
    g_csBoy = nil
    self._isInit = nil
    self._battleWnd = nil
    self.battleUI = nil
    self.floatParent = nil
    self._powerSkillIsCast = nil
    self._endHideUITime = nil

    self.playerInput = nil
    self.actorMgr = nil
    self.levelFlow = nil
    self.cameraTrace = nil
    self.setting = nil
    self.battleArg = nil

    self.player = nil
    self.girl = nil
    self.girlSkillOwner = nil
    self.boy = nil
    self.boySkillOwner = nil
    self.qteController = nil
    self.boss = nil
    self.isArtEditor = nil

    self.rootTrans = nil
end

---内部方法 start---
function BattleUI:RemoveAllBehaviors()
    self._isDestroyed = true
    self:Unregister()
    for i = #self._behaviors, 1, -1 do
        XECS.XPCall(self._behaviors[i].OnDestroy, self._behaviors[i])
    end
    self._behaviors = {}
    self._hudMgr = nil
    self._bubbleMgr = nil
    self._slotMgr = nil
    self._guideArrow = nil
    self._joystick = nil
    self._autoBtn = nil
    self._timerLabel = nil
    self._quitBtn = nil
    self._warningFx = nil
    self._dragLens = nil
    self._missionTips = nil
    self._battleEnd = nil
    self._bigSpiral = nil
    self._rogueUI = nil
end

function BattleUI:IsVisible()
    return self.rootObj.visibleInHierarchy
end

function BattleUI:LeftIsNearDead()
    return self._hudMgr:LeftIsNearDead()
end

---@param active boolean
function BattleUI:SetJoystickActive(active)
    self._joystick:SetGoActive(active)
    if not active and self.playerInput then
        self.playerInput:EndAxisDrag()
    end
end

---@param isOn bool
function BattleUI:LogicAutoBattle(isOn)
    self._autoBtn:LogicAutoBattle(isOn)
end

function BattleUI:PowerSkillIsCast()
    return self._powerSkillIsCast
end

function BattleUI:SetIsBigSpiral(isBigSpiral)
    self._isBigSpiral = isBigSpiral
end

function BattleUI:GetIsBigSpiral()
    return self._isBigSpiral
end
---内部方法 end---

---外部方法 start---
function BattleUI:SetSkillSlot(actor, btnType, skillSlot)
    if self._isDestroyed then
        return
    end
    self._slotMgr:SetSkillSlot(actor, btnType, skillSlot)
end

function BattleUI:HideAllMonsterHuds()
    if self._isDestroyed then
        return
    end
    self._hudMgr:HideAllMonsterHuds()
end

function BattleUI:SetUIMode(wndMode)
    if self._isDestroyed then
        return
    end
    if wndMode == BattleWndMode.Fps then
        self._rogueUI:SetGoActive(true)
        self:SetNodeVisible(self.rootTrans, false)
        self._bubbleMgr:SetGoActive(false)
    else
        self._rogueUI:SetGoActive(false)
        self:SetNodeVisible(self.rootTrans, true)
        self._bubbleMgr:SetGoActive(true)
    end
end

function BattleUI:ShowBattleEndUI(isWin, closeAction)
    if self._isDestroyed then
        return
    end
    self._timerLabel:HideTimerLabel()
    self._battleEnd:Show(isWin, closeAction)
end

function BattleUI:UpdateBtnState()
    if self._isDestroyed then
        return
    end
    self._slotMgr:UpdateBtnState()
end

function BattleUI:SetAffixVisible(visible, id)
    if self._isDestroyed then
        return
    end
    self._timerLabel:SetAffixVisible(visible, id)
end

function BattleUI:SetAffixTimeColor(type)
    if self._isDestroyed then
        return
    end
    self._timerLabel:SetAffixTimeColor(type)
end

function BattleUI:HideQuitBtn()
    if self._isDestroyed then
        return
    end
    self._levelEndHideBtn = true
    --目前提前卸载UI会在OnLevelEnd之后
    if self._quitBtn ~= nil and self._quitBtn._battleUI ~= nil then
        self._quitBtn:SetGoActive(false)
    end
end

function BattleUI:AddAmmunition(count)
    self._rogueUI:AddAmmunition(count)
end
---外部方法 end---

function BattleUI:Register()
    self.battle:AddListener(EventType.CastSkill, self, self._OnActorCastSkill, "BattleUI._OnActorCastSkill")
    self.battle:AddListener(EventType.EndSkill, self, self._OnActorEndSkill, "BattleUI._OnActorEndSkill")
    self.battle:AddListener(EventType.UIComponentActive, self, self._OnSetComponentActive, "BattleUI._OnSetComponentActive")
    self.battle:AddListener(EventType.DebugHideUI, self, self._OnDebugHideUI, "BattleUI._OnDebugHideUI")
    self.battle:AddListener(EventType.Actor, self, self._OnActorChange, "BattleUI.OnActorChange")
    self.battle:AddListener(EventType.ArtEditorState, self, self._OnSetArtEditorState, "BattleUI._OnSetArtEditorState")
end

---@param data X3Battle.EventActor
function BattleUI:_OnActorChange(_, data)
    Profiler.BeginSample("BattleUI._OnActorChange-data.actor")
    local curActor = data.actor
    Profiler.EndSample("BattleUI._OnActorChange-data.actor")
    if not data.isRole and not data.isItem then
        return
    end
    Profiler.BeginSample("BattleUI._OnActorChange-data.state")
    local curState = data.state
    Profiler.EndSample("BattleUI._OnActorChange-data.state")
    if curState == ActorLifeStateType.Born then
        Profiler.BeginSample("BattleUI._OnActorChange-Born.player")
        if curActor == self.actorMgr.player then
            self.player = curActor
            self.playerAttrOwner = self.player.attributeOwner
        end
        Profiler.EndSample("BattleUI._OnActorChange-Born.player")
        if curActor == self.actorMgr.girl then
            Profiler.BeginSample("BattleUI._OnActorChange-Born.girl")
            self.girl = curActor
            self.girlSkillOwner = self.girl.skillOwner
            self.disableController = self.girlSkillOwner.disableController
            Profiler.EndSample("BattleUI._OnActorChange-Born.girl")
        elseif curActor == self.actorMgr.boy then
            Profiler.BeginSample("BattleUI._OnActorChange-Born.boy")
            self.boy = curActor
            self.boySkillOwner = self.boy.skillOwner
            self.qteController = self.boySkillOwner.qteController
            Profiler.EndSample("BattleUI._OnActorChange-Born.boy")
        elseif curActor:IsBoss() then
            Profiler.BeginSample("BattleUI._OnActorChange-Born.boss")
            self.boss = curActor
            Profiler.EndSample("BattleUI._OnActorChange-Born.boss")
        end

    elseif curState == ActorLifeStateType.Recycle then
        Profiler.BeginSample("BattleUI._OnActorChange-Recycle")
        if self.boss == curActor then
            self.boss = nil
        end
        Profiler.EndSample("BattleUI._OnActorChange-Recycle")
    end
    Profiler.BeginSample("BattleUI._OnActorChange-hudMgr")
    self._hudMgr:ActorChange(curActor, curState)
    Profiler.EndSample("BattleUI._OnActorChange-hudMgr")
    Profiler.BeginSample("BattleUI._OnActorChange-bubbleMgr")
    self._bubbleMgr:ActorChange(curActor, curState)
    Profiler.EndSample("BattleUI._OnActorChange-bubbleMgr")
    Profiler.BeginSample("BattleUI._OnActorChange-guideArrow")
    self._guideArrow:ActorChange(curActor, curState)
    Profiler.EndSample("BattleUI._OnActorChange-guideArrow")
    Profiler.BeginSample("BattleUI._OnActorChange-slotMgr")
    self._slotMgr:ActorChange(curActor, curState)
    Profiler.EndSample("BattleUI._OnActorChange-slotMgr")
    Profiler.BeginSample("BattleUI._OnActorChange-autoBtn")
    self._autoBtn:ActorChange(curActor, curState)
    Profiler.EndSample("BattleUI._OnActorChange-autoBtn")
end

---@param data EventComponentActive
function BattleUI:_OnDebugHideUI(_, data)
    if data.UIHideType == DebugUIHideType.FriendUI then
        self._hudMgr:SetLeftGoActive(data.Active)
    end
    if data.UIHideType == DebugUIHideType.EnemyUI then
        self._hudMgr:SetRightGoActive(data.Active)
    end
    if data.UIHideType == DebugUIHideType.OperatingTips then
        self:SetAlpha("OCX_Slots", data.Active and 1 or 0)
        self:SetAlpha("OCX_Joystick", data.Active and 1 or 0)
        self._slotMgr:DebugSetSlotEffectActive(data.Active)
        self._timerLabel:SetGoActive(data.Active)
    end
    if data.UIHideType == DebugUIHideType.JumpWords then
        self:SetNodeVisible(self.floatParent,data.Active)
    end
    if data.UIHideType == DebugUIHideType.CommunicateUI then
        self._bubbleMgr:SetGoActive(data.Active)
        self:SetActive(self._bubbleMgr._femaleBubble._messageTrans,data.Active)
        self:SetActive(self._bubbleMgr._maleBubble._messageTrans,data.Active)
        self:SetActive(self._bubbleMgr._bossBubble._messageTrans,data.Active)
    end
    if data.UIHideType == DebugUIHideType.OutScreenTipUI then
        self:SetActive(self._guideArrow._boyGuideTrans,data.Active)
        self:SetActive(self._guideArrow._bossGuideTrans,data.Active)
    end
end

---@param data EventComponentActive
function BattleUI:_OnSetComponentActive(_, data)
    self:SetBtnState(data.type, data.active, data.insId)
end

---@param uiType int
---@param isActive bool
function BattleUI:SetBtnState(uiType, isActive, insId)
    if self.csBattle.arg.replayMode == CS.X3Battle.BattleReplayMode.Replay then
        return
    end
    --TODO 本应配表控制 先临时这么写
    if uiType == UIComponentType.Joystick then
        self._joystick:SetGroupActive(isActive)
    elseif uiType == UIComponentType.Attack then
        self._slotMgr:SetAttackGoActive(isActive)
    elseif uiType == UIComponentType.Active then
        self._slotMgr:SetActiveGoActive(isActive)
    elseif uiType == UIComponentType.BoyActive then
        self._slotMgr:SetBoyActiveGoActive(isActive)
        --现在男主主动技和男主头像合成同一个了
        self._hudMgr:SetMaleHudGoActive(isActive)
    elseif uiType == UIComponentType.Coop then
        self._slotMgr:SetCoopGoActive(isActive)
    elseif uiType == UIComponentType.Power then
        self._slotMgr:SetPowerGoActive(isActive)
    elseif uiType == UIComponentType.Dodge then
        self._slotMgr:SetDodgeGoActive(isActive)
    elseif uiType == UIComponentType.Switch then

    elseif uiType == UIComponentType.Auto then
        self._autoBtn:SetGoActive(isActive)
    elseif uiType == UIComponentType.Timer then
        self._timerLabel:SetGoActive(isActive)
    elseif uiType == UIComponentType.Quit then
        if self._levelEndHideBtn == false then
            self._quitBtn:SetGoActive(isActive)
        end
    elseif uiType == UIComponentType.SelfHud then
        self._hudMgr:SetLeftGoActive(isActive)
    elseif uiType == UIComponentType.EnemyHud then
        if insId == 0 then
            self._csUi:SetIsMonsterGuide(isActive)
            self._hudMgr:SetRightGoActive(isActive)
        else
            self._csUi:SetRequiredVisible(insId, isActive)
            self._hudMgr:SetEnemyById(insId, isActive)
        end
    elseif uiType == UIComponentType.Slot then
        self._slotMgr:SetAllGoActive(isActive)
    elseif uiType == UIComponentType.Drag then
        self._dragLens:SetGoActive(isActive)
    elseif uiType == UIComponentType.PlayerEnergy then
        self._hudMgr:SetEnergyGoActive(isActive)
    elseif uiType == UIComponentType.AllArrow then
        self._guideArrow:SetGoActive(isActive)
    elseif uiType == UIComponentType.BoyArrow then
        self._guideArrow:SetArrowVisible(self.boy, isActive)
    end
end

---@param data EventCastSkill
function BattleUI:_OnActorCastSkill(_, data)
    Profiler.BeginSample("BattleUI._OnActorCastSkill:skill:actor")
    local skill = data.skill
    local actor = skill.actor
    Profiler.EndSample("BattleUI._OnActorCastSkill:skill:actor")
    if not actor or not actor:IsRole() then
        return
    end
    if skill.slotID == BattleConst.DefaultUltraSlotID then
        Profiler.BeginSample("BattleUI._OnActorCastSkill:UltraSlot")
        self._bubbleMgr:SetAimFlag(false)
        self._bubbleMgr:SetCacheAimFlag(false)
        self._slotMgr:StopEffect()
        self._hudMgr:PauseHudAnimation(true)
        self._powerSkillIsCast = true
        Profiler.EndSample("BattleUI._OnActorCastSkill:UltraSlot")
    elseif skill.slotID == BattleConst.DefaultCoopSlotID then
        Profiler.BeginSample("BattleUI._OnActorCastSkill:CoopSlot")
        self._guideArrow:SetGoActive(false)
        Profiler.EndSample("BattleUI._OnActorCastSkill:CoopSlot")
    end
end

---@param data EventEndSkill
function BattleUI:_OnActorEndSkill(_, data)
    local skill = data.skill
    local actor = skill.actor
    if not actor or not actor:IsRole() then
        return
    end
    if data.skill.slotID == BattleConst.DefaultUltraSlotID then
        self._hudMgr:PauseHudAnimation(false)
        self._powerSkillIsCast = false
    elseif skill.slotID == BattleConst.DefaultCoopSlotID then
        self._guideArrow:SetGoActive(true)
    end
end

function BattleUI:_OnSetArtEditorState()
    self.isArtEditor = true
    self._csUi:SetIsArtEdit(true)
end

function BattleUI:Unregister()
    self.battle:RemoveListener(EventType.CastSkill, self, self._OnActorCastSkill)
    self.battle:RemoveListener(EventType.EndSkill, self, self._OnActorEndSkill)
    self.battle:RemoveListener(EventType.UIComponentActive, self, self._OnSetComponentActive)
    self.battle:RemoveListener(EventType.DebugHideUI, self, self._OnDebugHideUI)
    self.battle:RemoveListener(EventType.Actor, self, self._OnActorChange)
    self.battle:RemoveListener(EventType.ArtEditorState, self, self._OnSetArtEditorState)
end

--region 设置progress[Slider,Image]
---设置是否可以交互点击
---@param key_or_path UObject | string
---@param progress boolean
function BattleUI:SetBarProgress(key_or_path,progress)
    self._battleWnd:SetBarProgress(key_or_path,progress)
end

---@param key_or_path string | UnityEngine.Object
---@return  UnityEngine.Vector2
function BattleUI:GetSizeDeltaXY(key_or_path)
    return self._battleWnd:GetSizeDeltaXY(key_or_path)
end

--region DragHandler
---添加DragHandler的onDrag回调
---支持DragHandler
---@param key_or_path string | UObject
---@param onDrag fun(type:PointerEventData)
---@param onPointerDown fun(type:PointerEventData)
---@param onPointerUp fun(type:PointerEventData)
function BattleUI:AddDragListener(key_or_path, onDrag, onPointerDown, onPointerUp)
    self._battleWnd:AddDragListener(key_or_path, onDrag, onPointerDown, onPointerUp)
end

---设置图片Sprite
---@param key_or_path string | UObject
---@vararg string | string | boolean
function BattleUI:SetImage(key_or_path, ...)
    self._battleWnd:SetImage(key_or_path, ...)
end

---设置颜色（支持：Image和文本）
---eg:
---    self:SetColor(key_or_path, Color)
---    self:SetColor(key_or_path, r, g, b)
---    self:SetColor(key_or_path, r, g, b, a)
---    self:SetColor(key_or_path, htmlColorString)
---@param key_or_path string
---@vararg Color | number | string
function BattleUI:SetColor(key_or_path, ...)
    self._battleWnd:SetColor(key_or_path, ...)
end

---设置Alpha（支持：CanvasGroup、Image和文本）
---@param key_or_path string | UObject
---@param alpha number[0~1]
function BattleUI:SetAlpha(key_or_path, alpha)
    self._battleWnd:SetAlpha(key_or_path, alpha)
end

--region MotionHandler
---播放MotionHandler动画
---@param keyOrPathOrObj string|UObject
---@param motionKeyOrIdx string|int 动画Key或序号
---@param onCompleteCB fun() 动效播放完毕的回调
function BattleUI:PlayMotion(keyOrPathOrObj, motionKeyOrIdx, onCompleteCB)
    self._battleWnd:PlayMotion(keyOrPathOrObj, motionKeyOrIdx, onCompleteCB)
end

--region MotionHandler
---战斗内直接用PlayableGraph播放动画
---@param keyOrPathOrObj string|UObject
---@param motionKeyOrIdx string|int 动画Key或序号
---@param onCompleteCB fun() 动效播放完毕的回调
function BattleUI:PlayCustomMotion(keyOrPathOrObj, motionKeyOrIdx, onCompleteCB)
    local obj = self._battleWnd:_InterpretToObj(keyOrPathOrObj)
    if obj == nil then
        return
    end
    if type(motionKeyOrIdx) == "string" then
        if string.isnilorempty(motionKeyOrIdx) then
            return
        else
            motionKeyOrIdx = string.hash(motionKeyOrIdx)
            CS.X3Battle.BattleUtil.BattleUIMotionPlayHash(obj, motionKeyOrIdx, onCompleteCB)
            return
        end
    end
    CS.X3Battle.BattleUtil.BattleUIMotionPlayIndex(obj, motionKeyOrIdx, onCompleteCB)
end

---停止MotionHandler所有正在播放的动画
---@param keyOrPathOrObj string|UObject
---@param autoComplete boolean 是否需要执行动画最后一帧
function BattleUI:StopAllMotions(keyOrPathOrObj, autoComplete)
    self._battleWnd:StopAllMotions(keyOrPathOrObj, autoComplete)
end

---战斗内UI停止所有正在播放的动画，与BattleUIPlayMotion对应
---@param keyOrPathOrObj string|UObject
function BattleUI:StopAllCustomMotions(keyOrPathOrObj)
    local obj = self._battleWnd:_InterpretToObj(keyOrPathOrObj)
    if obj == nil then
        return
    end
    CS.X3Battle.BattleUtil.BattleUIStopAllMotion(obj)
end

---设置ToggleButton, SwitchButton, ExcSelectable的On/Off状态
---@param key_or_path string | UObject
---@param isOn boolean
function BattleUI:SetValue(key_or_path, isOn)
    self._battleWnd:SetValue(key_or_path, isOn)
end

---@param key_or_path string | UObject
---@varagr string | number --文本id或者文本内容
function BattleUI:SetText(key_or_path, ...)
    self._battleWnd:SetText(key_or_path, ...)
end

---设置Transform相关属性
---vec3 or x,y,z
---@param key_or_path string | UnityEngine.Object
---@vararg number | UnityEngine.Vector3
function BattleUI:SetPosition(key_or_path, ...)
    self._battleWnd:SetPosition(key_or_path, ...)
end

---@param key_or_path string | UnityEngine.Object
---@return number,number,number
function BattleUI:GetPositionXYZ(key_or_path)
    return self._battleWnd:GetPositionXYZ(key_or_path)
end

---vec3 or x,y,z
---@param key_or_path string | UnityEngine.Object
---@vararg number | UnityEngine.Vector3
function BattleUI:SetLocalPosition(key_or_path, ...)
    self._battleWnd:SetLocalPosition(key_or_path, ...)
end

---@param key_or_path string | UnityEngine.Object
---@return number,number,number
function BattleUI:GetLocalEulerAnglesXYZ(key_or_path)
    return self._battleWnd:GetLocalEulerAnglesXYZ(key_or_path)
end

---设置欧拉角
---@param key_or_path string | UObject
---@vararg number | Vector3
function BattleUI:SetLocalEulerAngles(key_or_path,...)
    self._battleWnd:SetLocalEulerAngles(key_or_path,...)
end

---获取坐标x,y,z
---@param key_or_path string | UnityEngine.Object
---@return number,number,number
function BattleUI:GetLocalPositionXYZ(key_or_path)
    return self._battleWnd:GetLocalPositionXYZ(key_or_path)
end

function BattleUI:SetActive(key_or_path, active)
    if not key_or_path then
        return
    end
    self._battleWnd:SetActive(key_or_path, active)
end

---@param node UnityEngine.Transform
---@param visible bool
function BattleUI:SetNodeVisible(node, visible)
    if not node then
        return
    end
    if not self._csUi then
        return
    end
    self._csUi:SetNodeVisible(node, visible)
end

function BattleUI:GetComponent(name, type_str, is_recursion, no_log)
    return self._battleWnd:GetComponent(name, type_str, is_recursion, no_log)
end

function BattleUI:GetRealParticle(tranParent, name)
    return tranParent:Find(name):GetChild(0):GetComponent("ParticleSystem")
end

---设置SwitchButton回调
---@param key_or_path string | UObject
---@param cb fun(type:GameObject,type:boolean)
function BattleUI:AddSwitchButtonListener(key_or_path, cb)
    self._battleWnd:AddSwitchButtonListener(key_or_path, cb)
end

---添加长按
---@param key_or_path string | UObject
---@param cb fun(type:GameObject,type:number)
function BattleUI:AddLongPressListener(key_or_path, cb)
    self._battleWnd:AddLongPressListener(key_or_path, cb)
end

---设置Button回调
---@param key_or_path string | UObject  OCX key_or_path
---@param onclick fun(type:GameObject) 点击回调方法
---@param onTouchDown fun(type:GameObject) 按下回调方法
---@param onTouchUp fun(type:GameObject) 弹起回调方法
---@param onTouchExit fun(type:GameObject) 移出回调方法
function BattleUI:AddButtonListener(key_or_path, onclick, onTouchDown, onTouchUp, onTouchExit)
    self._battleWnd:AddButtonListener(key_or_path, onclick, onTouchDown, onTouchUp, onTouchExit)
end

function BattleUI:AddJoystickDownUpListener(name, onJoystickDown, onJoystickUp)
    self._battleWnd:AddJoystickDownUpListener(name, onJoystickDown, onJoystickUp)
end

function BattleUI:AddJoystickUpdateListener(name, onJoystickUpdate)
    self._battleWnd:AddJoystickUpdateListener(name, onJoystickUpdate)
end

function BattleUI:AddJoystickXYUpdateListener(name, onJoystickUpdate)
    self._battleWnd:AddJoystickXYUpdateListener(name, onJoystickUpdate)
end

function BattleUI:RemoveJoystickListener(name)
    self._battleWnd:RemoveJoystickListener(name)
end

return BattleUI