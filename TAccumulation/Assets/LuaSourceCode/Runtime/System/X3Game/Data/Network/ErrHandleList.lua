---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/1/13 19:54
---
---@class ErrHandleList
local ErrHandleList = {}

function ErrHandleList.ReadMail(errCode, reply)
    if errCode == X3_CFG_CONST.MAILEXPIRE then
        EventMgr.Dispatch("MailExpire")
    end
end

function ErrHandleList.DrawMail(errCode, reply)
    if errCode == X3_CFG_CONST.MAILEXPIRE then
        EventMgr.Dispatch("MailExpire")
    end
end

function ErrHandleList.DrawAllMails(errCode, reply)
    if errCode == X3_CFG_CONST.MAILEXPIRE then
        EventMgr.Dispatch("MailExpire")
    end
end

function ErrHandleList.DecorationPrefabNameReply()
    BllMgr.GetCollectionRoomBLL():DecorationPrefabNameReply(false)
end

function ErrHandleList.DecorationPrefabUnlockReply()
    BllMgr.GetCollectionRoomBLL():DecorationPrefabUnlockReply(false)
end

---错误信息处理
function ErrHandleList.MainUIEventFinishReply(data, reply)
    local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_RECEIVE_MSG, MainHomeConst.NetworkType.EVENT_FINISH)
end

function ErrHandleList.GetBoxLoveTokenReply(data, reply)
    local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_RECEIVE_MSG, MainHomeConst.NetworkType.GET_BOX_LOVE_TOKEN)
end

function ErrHandleList.GetBoxRewardReply(data, reply)
    local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_RECEIVE_MSG, MainHomeConst.NetworkType.GET_BOX_REWARD)
end

function ErrHandleList.MainUIEventSetReply(data, reply)
    local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_RECEIVE_MSG, MainHomeConst.NetworkType.SET_EVENT)
end

function ErrHandleList.AddRoleInteractiveNumReply(data)
    local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_RECEIVE_MSG, MainHomeConst.NetworkType.ADD_ROLE_INTERACTIVE_NUM)
end

function ErrHandleList.SetPersonalDescReply(errCode, reply)
    if errCode == X3_CFG_CONST.PAPERDIRTYFAILED or errCode == X3_CFG_CONST.NAMEDIRTYWORDS or errCode == X3_CFG_CONST.NAMEDIRTYWORDS then
        EventMgr.Dispatch("Desc_UpdateCallBack")
    end
end

function ErrHandleList.SetNameReply(errCode, reply)
    EventMgr.Dispatch("Event_ChangeName_Failed")
end

function ErrHandleList.SetNicknameReply(errCode, reply)
    EventMgr.Dispatch("Event_ChangeNickName_Failed")
end

function ErrHandleList.SetNudgeSignReply(errCode, reply)
    EventMgr.Dispatch("Event_Contact_SetNudgeSign_Failed")
end

function ErrHandleList.SetContactSignReply(errCode, reply)
    EventMgr.Dispatch("Event_Contact_SetDest_Failed")
end

function ErrHandleList.SetKneadFaceTemplateReply(errCode, reply)
    local FaceEditConst = require("Runtime.System.X3Game.GameConst.FaceEditConst")
    EventMgr.Dispatch(FaceEditConst.Event.TemplateChangeError)
end

function ErrHandleList.EditDiaryContent(errorCode, reply)
    if errorCode == 287 then
        EventMgr.Dispatch("EditDiaryContentReply")
    end
end

function ErrHandleList.DoStage(errCode, reply)
    EventMgr.Dispatch("Stage_ErrorCallBack", errCode)
    print("========Error" .. errCode)
end

function ErrHandleList.MainLineRewardOneKey(errCode, reply)

    BllMgr.GetTaskBLL():SetIsRefreshView(true)

    Debug.Log("========MainLineRewardOneKeyError" .. errCode)
end

function ErrHandleList.DoStageReply(errCode, reply)
    BllMgr.GetChapterAndStageBLL():OnDoStageError(errCode, reply)
end

function ErrHandleList.FinStageReply(errCode, reply)
    BllMgr.GetChapterAndStageBLL():OnFinStageReply(errCode, reply)
end

function ErrHandleList.DungeonEndReply(errCode, reply)
    BllMgr.GetChapterAndStageBLL():OnFinStageReply(errCode, reply)
end

function ErrHandleList.SignInTotalReply(errCode, reply)
    EventMgr.Dispatch("WelfareEvent_SignIn_SignInTotalReply")
end

function ErrHandleList.SignInReply()
    EventMgr.Dispatch("WelfareEvent_SignIn_SignInTotalReply")
end

function ErrHandleList.SCoreUpgradeStarReply(errCode, reply)
    EventMgr.Dispatch(ScoreConst.Event.SCORE_ADD_EXP_ERROR_REPLY, errCode)
end

function ErrHandleList.CardStarUpReply()
    EventMgr.Dispatch("Card_Star_StarUpErrorCallBack")
end

function ErrHandleList.SCoreProgressReply()
    EventMgr.Dispatch("SCORE_PROGRESS_ERROR_REPLY")
end

function ErrHandleList.CheckUFOCatcherDialogueReply()
    EventMgr.Dispatch("CheckUFOCatcherDialogueReply")
end

function ErrHandleList.CheckSpecialDateDialogueReply()
    EventMgr.Dispatch("CheckSpecialDateDialogueReply", { Result = false })
end

function ErrHandleList.CheckBlockTowerDialogueReply()
    EventMgr.Dispatch("CheckBlockTowerDialogueReply")
end

function ErrHandleList.CheckBirthdayDialogueReply()
    EventMgr.Dispatch("CheckBirthdayDialogueReply")
end

function ErrHandleList.CatchDollReply()
    EventMgr.Dispatch("CatchDollReply")
end

function ErrHandleList.GetUFOCatcherRewardReply()
    EventMgr.Dispatch("GetUFOCatcherRewardReply")
end

function ErrHandleList.GetBlockTowerRewardReply()
    EventMgr.Dispatch("GetBlockTowerRewardReply")
end

function ErrHandleList.GetMiaoRewardReply(errorCode, reply)
    EventMgr.Dispatch("GetMiaoRewardReply", reply)
end

function ErrHandleList.EasterEggEffectReply(errCode, reply)
    local eggInfoList = reply.Eggs
    if table.isnilorempty(eggInfoList) then
        return
    end
    for _, v in pairs(eggInfoList) do
        SelfProxyFactory.GetEasterEggProxy():UpdateData(v.Egg, EasterEggEnum.DebugEventMap.EasterEggEffect)

        SelfProxyFactory.GetEasterEggProxy():PoolRewardList(v.RewardList)
    end
end

function ErrHandleList.EasterEggTriggerReply(errCode, reply)
    SelfProxyFactory.GetEasterEggProxy():UpdateDataByMap(reply.Eggs, EasterEggEnum.DebugEventMap.EasterEggTrigger)
end

function ErrHandleList.SetPersonalDescReply(errCode, reply)
    EventMgr.Dispatch(PlayerEnum.EventMap.PlayerDescUpdateErrorReply)
end

---login失败需要断开连接
function ErrHandleList.LoginReply(errorCode, reply)
    GrpcMgr.OnLoginReplyError()
    if GameStateMgr.GetCurStateName() == GameState.Login and errorCode == X3_CFG_CONST.USERISCOOLDOWN then
        return
    end
    GrpcMgr.Disconnect()
    if GameStateMgr.GetCurStateName() ~= GameState.Login then
        local cfg = LuaCfgMgr.Get("ServerError", errorCode)
        local info
        if cfg then
            if DEBUG_GM then
                info = string.concat(UITextHelper.GetUIText(cfg.Msg), string.format("（%s）", errorCode))
            else
                info = UITextHelper.GetUIText(cfg.Msg)
            end
        else
            info = tostring(errorCode)
        end
        if errorCode == X3_CFG_CONST.USERISBANNED then
            local banMessage = ErrHandleList.GetBanMessageWithLangType(reply.BanInfo.BanMessage, Locale.GetCMSLangName())
            if reply.BanInfo.BanEndTime == -1 then
                info = UITextHelper.GetUIText(UITextConst.UI_TEXT_5181, banMessage)
            else
                local time = os.date("!%Y-%m-%d-%H:%M:%S", reply.BanInfo.BanEndTime + TimerMgr.GetTimeZone() * 3600)
                info = UITextHelper.GetUIText(UITextConst.UI_TEXT_5180, time, banMessage)
            end
        end
        UICommonUtil.ShowMessageBoxWithOpenParam({ PanelOrder = GameConst.MessageBoxOrder.High }, info, {
            { btn_type = GameConst.MessageBoxBtnType.CONFIRM,
              btn_call = function()
                  GameStateMgr.Switch(GameState.Logout)
              end,
              btn_text = UITextHelper.GetUIText(UITextConst.UI_TEXT_5701),
            }
        }, AutoCloseMode.None)
    end
end

function ErrHandleList.GetBanMessageWithLangType(banMessageStr, langType)
    local message = ""
    local banMessage = JsonUtil.Decode(banMessageStr) or {}
    for k, v in pairs(banMessage) do
        if v.lang == langType then
            message = v.text
        end
    end
    return message
end

function ErrHandleList.QuestFinishReply(errorCode, reply)
    ---Insert Your Code Here!
    BllMgr.GetTaskBLL():QuestFinishCallBack(reply)
end

function ErrHandleList.CounterGMTestReply(errorCode, reply)
    if UNITY_EDITOR then
        EventMgr.DispatchEventToCS("OnCounterTestGMReplyError")
    end
end

function ErrHandleList.MessageNormalStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

function ErrHandleList.MessageRecallStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

function ErrHandleList.MessageNudgeStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

function ErrHandleList.MessageChatStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

function ErrHandleList.MessageManNudgeSignStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

function ErrHandleList.MessageManHeadStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

function ErrHandleList.MessageManBubbleStart(errorCode, reply)
    BllMgr.GetPhoneMsgBLL():StartMsgFailed()
end

return ErrHandleList
