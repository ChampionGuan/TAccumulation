---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/3/11 14:58
---@class LovePointData
local LovePointData = class("LovePointData")
---@type CollectionConst
local CollectionConst = require "Runtime.System.X3Game.UI.UIView.CollectionRoomWnd.Data.CollectionConst"
local LoveTaskGroupData = require(CollectionConst.COLLECTION_LOVEPOINT_TASK_DATA)
local LovePointDiaryData = require(CollectionConst.COLLECTION_LOVEPOINT_DIARY_DATA)
local LovePointAboutData = require(CollectionConst.COLLECTION_LOVEPOINT_ABOUT_DATA)
local LovePointVoiceData = require(CollectionConst.COLLECTION_LOVEPOINT_VOICE_DATA)
local LovePointLvRewardData = require(CollectionConst.COLLECTION_LOVEPOINT_LVREWARD_DATA)
local LovePointTipsData = require(CollectionConst.COLLECTION_LOVEPOINT_TIPS_DATA)
function LovePointData:ctor()
    ---@type LoveTaskGroupData[]
    self.taskGroup = {}         --备忘录数据
    ---@type int
    self.selectRole = 0         --当前选择男主
    ---@type LovePointDiaryData[]
    self.diaryGroup = {}        --日记数据
    ---@type LovePointAboutData[]
    self.aboutGroup = {}        --他的小事数据
    ---@type LovePointVoiceData[]
    self.voiceGroup = {}        --语音收藏
    self.rankGroup = {}         --排行数据
    ---@type pbcmessage.RankReward[]
    self.rankReward = nil       --排行榜奖励
    self.lastRankData = nil     --往期排行数据
    ---@type LovePointLvRewardData[]
    self.lvRewardGroup = {}     --等级奖励数据
    self.loveTipsData = nil    --牵绊度提示数据 
    self.enter_red_id = X3_CFG_CONST.RED_LOVEPOINT_HOME
    self.loveCfg = CollectionConst.LovePointConfig[CollectionConst.LovePointType.CollectEdit]
    self.collect_red_id = self.loveCfg.red_id
    self.collect_system_unlock = self.loveCfg.system_unlock
    self.isCheckReward = tonumber(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.LOVEPOINTRANKINGLISTSETTLESWITCH)) == 1
    self.collBll = BllMgr.GetCollectionRoomBLL()
end

function LovePointData:AddRoleData(role_id)
    self:InitAboutData({}, role_id)
end

-------------------------------------------备忘录Start---------------------------------------------

function LovePointData:InitTaskData()
    local groupCfg = LuaCfgMgr.GetAll("LoveTaskGroup")
    for role_id, v in pairs(groupCfg) do
        if not self.taskGroup[role_id] then
            self.taskGroup[role_id] = LoveTaskGroupData.new(role_id)
        end
        for type, value in pairs(v) do
            self.taskGroup[role_id]:SetData(type, value)
        end
    end
end

function LovePointData:GetTaskGroup()
    return self.taskGroup
end

function LovePointData:CheckLoveTaskRed()
    if self.selectRole == 0 then
        return
    end
    self.taskGroup[self.selectRole]:CheckRed()
end

function LovePointData:UpdateLoveTask(quests, is_show_tip)
    for i, v in pairs(self.taskGroup) do
        v:UpdateTaskData(quests, is_show_tip)
    end
end

function LovePointData:GetTaskByRoleID(role_id)
    return self.taskGroup[role_id]
end

function LovePointData:GetTypeTaskData(role_id, type_id)
    if self.taskGroup[role_id] then
        return self.taskGroup[role_id]:GetTypeData(type_id)
    end
end
-------------------------------------------备忘录End---------------------------------------------

-------------------------------------------日记Start---------------------------------------------
function LovePointData:InitDiaryDate(roleMap)
    local role_map = {}
    for i, v in pairs(roleMap) do
        self:UpdateDiaryDate(v.Id, v.DiaryMap)
        role_map[v.Id] = true
    end
end

function LovePointData:UpdateDiaryDate(role_id, list)
    if not role_id then
        return
    end
    self.diaryGroup[role_id] = self:GetDiaryData(role_id)
    self.diaryGroup[role_id]:UpdateDiary(list)
end

---@return LovePointDiaryData
function LovePointData:GetDiaryData(role_id)
    if not self.diaryGroup[role_id] then
        self.diaryGroup[role_id] = LovePointDiaryData.new(role_id)
    end
    return self.diaryGroup[role_id]
end

---@return LovePointDiaryDayData[]
function LovePointData:GetDiaryList(role_id)
    if self.diaryGroup[role_id] then
        if not self.diaryGroup[role_id]:IsUnlock() then
            return
        end
        local diaryList = {}
        local diaryMap = self.diaryGroup[role_id]:GetDiaryMap()
        for i, v in pairs(diaryMap) do
            table.insert(diaryList, v)
        end
        table.sort(diaryList, function(a, b)
            return a:GetDate() > b:GetDate()
        end)
        return diaryList
    end
end

function LovePointData:GetNewDiaryData(role_id)
    local diaryList = self:GetDiaryList(role_id)
    local newData, date
    if diaryList then
        for _, v in ipairs(diaryList) do
            local nd = v:GetNewDiary()
            if nd then
                newData = nd
                date = v:GetTitle()
                break
            end
        end
    end
    return newData, date
end

---判断是否激活指定日记
function LovePointData:CheckActiveByID(diary_id, role_id)
    if self.diaryGroup[role_id] then
        return self.diaryGroup[role_id]:CheckActiveByID(diary_id)
    end
    return false
end

function LovePointData:ClearDiaryRed(role_id, diaryList)
    if self.diaryGroup[role_id] then
        self.diaryGroup[role_id]:ClearRed(diaryList)
    end
end
-------------------------------------------日记End---------------------------------------------

-------------------------------------------他的小事Start--------------------------------------
function LovePointData:InitAboutData(infoMap, role_id)
    self.aboutOrder = 0
    local init_role = function(role_id)
        if not self.aboutGroup[role_id] then
            self.aboutGroup[role_id] = LovePointAboutData.new(role_id)
        end
        self.aboutGroup[role_id]:InitData(infoMap[role_id] and infoMap[role_id].InfoList or {})
    end
    if not role_id then
        local role_list = BllMgr.GetRoleBLL():GetUnlockedRoleCfg()
        for _, v in pairs(role_list) do
            init_role(v.ID)
        end
    else
        init_role(role_id)
    end
end

function LovePointData:NewInfoUpdate(infoMap, is_show_tip)
    is_show_tip = is_show_tip == nil and true or is_show_tip
    for i, v in pairs(infoMap) do
        local manType = v.ManType or v.Id
        if self.aboutGroup[manType] then
            if is_show_tip then
                if BllMgr.GetRoleBLL():IsUnlocked(manType) then
                    if BllMgr.GetLovePointBLL():GetLoveData():GetAboutData(manType):IsUnLock() then
                        for _, v2 in pairs(v.NewInfoList) do
                            ErrandMgr.Add(X3_CFG_CONST.POPUP_INFORMATION_GET, v2)
                        end
                    end
                end
            end
            self.aboutGroup[manType]:UpdateAboutData(v.NewInfoList or v.InfoList)
        end
    end
end

function LovePointData:GetAboutData(role_id)
    return self.aboutGroup[role_id]
end

function LovePointData:IsHasInformation(info_id)
    for i, v in pairs(self.aboutGroup) do
        local isHas = v:IsHasInformation(info_id)
        if isHas then
            return true
        end
    end
    return false
end

-------------------------------------------他的小事End----------------------------------------

-------------------------------------------语音收藏Start----------------------------------------
function LovePointData:InitVoiceData(infoMap)
    local roleList = BllMgr.GetRoleBLL():GetRoleCfgList()
    for _, v in pairs(roleList) do
        if not self.voiceGroup[v.ID] then
            self.voiceGroup[v.ID] = LovePointVoiceData.new(v.ID)
        end
        self.voiceGroup[v.ID]:UpdateVoice(infoMap and infoMap[v.ID] or {})
    end
end

---@param reply pbcmessage.CollectQuotationReply
function LovePointData:UpdateQuotationData(reply)
    if self.voiceGroup[reply.ManType] then
        self.voiceGroup[reply.ManType]:UpdateQuotation(reply)
    end
end

---@param reply pbcmessage.CollectBroadcastingReply
function LovePointData:UpdateCollectBPData(reply)
    if self.voiceGroup[reply.ManType] then
        self.voiceGroup[reply.ManType]:UpdateCollectBP(reply)
    end
end

---@param reply pbcmessage.ActiveVoicesReply
function LovePointData:UpdateBattleData(reply)
    if self.voiceGroup[reply.ManType] then
        self.voiceGroup[reply.ManType]:UpdateBattle(reply)
    end
end

---@return LovePointVoiceData
function LovePointData:GetVoiceData(role_id)
    return self.voiceGroup[role_id]
end

function LovePointData:GetIsFavoriteDialogue(role_id, dialogueId, nodeId)
    if self.voiceGroup[role_id] then
        return self.voiceGroup[role_id]:GetIsFavoriteDialogue(dialogueId, nodeId)
    end
    return false
end

function LovePointData:GetIsFavoriteBroadCast(role_id, broadcastId, subtitleID)
    if self.voiceGroup[role_id] then
        return self.voiceGroup[role_id]:GetIsFavoriteBroadCast(broadcastId, subtitleID)
    end
    return false
end

---@param role_id int
---@param callId int cfg.PhoneCall.ID
---@param conversation int cfg.PhoneCallConversation.ID
function LovePointData:GetIsFavoritePhoneCall(role_id, calliId, conversation)
    if self.voiceGroup[role_id] then
        return self.voiceGroup[role_id]:GetIsFavoritePhoneCall(calliId, conversation)
    end
end

-------------------------------------------语音收藏End----------------------------------------

-------------------------------------------等级提升奖励Start-----------------------------------

function LovePointData:InitLvRewardData(role_map)
    for i, v in pairs(role_map) do
        if not self.lvRewardGroup[v.Id] then
            self.lvRewardGroup[v.Id] = LovePointLvRewardData.new(v.Id)
        end
        self.lvRewardGroup[v.Id]:UpdateRewardData(v.LvUpRewards)
    end
end

---@param roleId: 男主id
---@param lv :男主牵绊度等级
---@param rewards: 等级奖励数据
function LovePointData:AddLvRewardData(roleId, lv, rewards)
    if not self.lvRewardGroup[roleId] then
        self.lvRewardGroup[roleId] = LovePointLvRewardData.new(roleId)
    end
    self.lvRewardGroup[roleId]:AddRewardData(lv, rewards)
end

function LovePointData:GetRewardDataByLv(roleId, lv)
    if not self.lvRewardGroup[roleId] then
        return {}
    end
    return self.lvRewardGroup[roleId]:GetRewardDataByLv(lv)
end

-------------------------------------------等级提升奖励End-----------------------------------

---@param rankReward table 排行榜奖励
function LovePointData:InitRankData(rankReward)
    local rankList = LuaCfgMgr.GetListByCondition("RankList", { RankType = 4 })
    for i, v in pairs(rankList) do
        self.rankGroup[v.RoleID] = v
    end
    self:SetRankReward(rankReward)
end

function LovePointData:SetRankReward(rankReward)
    self.rankReward = rankReward
end

function LovePointData:GetRankReward()
    return self.rankReward
end

function LovePointData:ResetRankReward()
    self.rankReward = nil
end

---@param rankData pbcmessage.RankRewardInfo[]
function LovePointData:SetLastRankData(rankData)
    self.lastRankData = rankData
end

---@return pbcmessage.RankRewardInfo[]
function LovePointData:GetLastRankData()
    return self.lastRankData
end

function LovePointData:ResetLastRankData()
    self.lastRankData = nil
end

function LovePointData:GetRankData(role_id)
    return self.rankGroup[role_id]
end

function LovePointData:SetCurRole(role_id)
    self.selectRole = role_id or 0
    self:RefreshRed(role_id)
    self:RefreshRoleX3Data(role_id)
end

---更新埋点role数据
function LovePointData:RefreshRoleX3Data(role_id)
    local data = X3DataMgr.Get(X3DataConst.X3Data.LovePointRole, 1)
    if not data then
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.LovePointRole, nil, 1)
    end
    data:SetRoleID(role_id)
end

function LovePointData:SetJumpRole(role_id)
    self.jump_select_role = role_id
end

function LovePointData:GetCardSmall(role_id)
    local cfg = LuaCfgMgr.Get("LovePointRole", role_id)
    return cfg and cfg.LoveDiaryCardSmall or ""
end

function LovePointData:GetRoleFlower(role_id)
    local cfg = LuaCfgMgr.Get("LovePointRole", role_id)
    return cfg and cfg.FlowerImage or ""
end

function LovePointData:SetJumpWnd(view_tag)
    if view_tag then
        self.jump_wnd = view_tag
        UIMgr.Close(view_tag)
    else
        if self.jump_wnd then
            UIMgr.Open(self.jump_wnd)
            self.jump_wnd = nil
        end
    end
end

function LovePointData:GetJumpWnd()
    return self.jump_wnd
end

function LovePointData:GetJumpRole()
    return self.jump_select_role
end

function LovePointData:RefreshEnterRed(role_id)
    local count = 0
    if self.taskGroup[role_id] and self.taskGroup[role_id]:GetShowRed() then
        count = count + 1
    end
    if self.diaryGroup[role_id] and self.diaryGroup[role_id]:GetShowRed() then
        count = count + 1
    end
    if self.aboutGroup[role_id] and self.aboutGroup[role_id]:GetShowRed() then
        count = count + 1
    end
    if self:CheckRankReward() then
        count = count + 1
    end

    RedPointMgr.UpdateCount(self.enter_red_id, count, role_id)
end

function LovePointData:CheckRankReward()
    --排行榜奖励关闭时不处理红点
    if not self.isCheckReward then
        return false
    end
    if not self.rankReward then
        return false
    end
    for _, v in pairs(self.rankReward) do
        for _, item in pairs(v.Rewards) do
            if not item.Get then
                return true
            end
        end
    end
    return false
end

function LovePointData:RefreshCollectRed(role_id)
    local count = RedPointMgr.GetCount(self.enter_red_id, role_id)
    local collectCount = self.collBll:CheckCollectionShowRed(role_id)
    if not SysUnLock.IsUnLock(self.collect_system_unlock) then
        collectCount = 0
    end
    count = count + collectCount
    RedPointMgr.UpdateCount(self.collect_red_id, collectCount, role_id)
    RedPointMgr.UpdateCount(self.enter_red_id, count, role_id)
end

function LovePointData:RefreshRed(role_id)
    if self.taskGroup[role_id] then
        self.taskGroup[role_id]:RefreshRed()
    end
    if self.diaryGroup[role_id] then
        self.diaryGroup[role_id]:RefreshRed()
    end
    if self.aboutGroup[role_id] then
        self.aboutGroup[role_id]:RefreshRed()
    end
    self:RefreshEnterRed(role_id)
end

function LovePointData:GetCurRole()
    if self.jump_select_role then
        return self.jump_select_role
    end
    return self.selectRole
end

---@return LovePointTipsData
function LovePointData:GetLoveTipsData()
    if not self.loveTipsData then
        self.loveTipsData = LovePointTipsData.new()
    end
    return self.loveTipsData
end

return LovePointData