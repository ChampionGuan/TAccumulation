---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiantao.
--- DateTime: 2023/11/4 10:41
---
---@class QuestionProxy
local QuestionProxy = class("QuestionProxy", BaseProxy)

---问卷被激活的时间
local _questionnairActiveTime = "_Ques_Active_%s_%s"

function QuestionProxy:OnInit(owner)
    self.super.OnInit(self, owner)
    ---@type table<int, bool> 问卷领取相关数据
    self.questionData = {}

    self.questionConfigMap = {}

    ---@type table<int, int> 等待领取问卷时间
    self.questionWaitInfo = {}
end

--region 问卷

QuestionProxy.QuestionTypeEnum = {
    platForm = 1,
    wjxForm = 2,
    googleForm = 3,
}

function QuestionProxy:SetQuestionList(serverDataList)
    self.questionConfigMap = self.questionConfigMap or {}
    table.clear(self.questionConfigMap)
    for i = 1, #serverDataList do
        local questionConfig = {}
        local serverData = serverDataList[i]
        questionConfig.QuestionnaireID = serverData.ID
        questionConfig.StartTime = serverData.StartTime
        questionConfig.EndTime = serverData.EndTime
        questionConfig.Conditions = serverData.Extra.Conditions
        questionConfig.Url = serverData.Extra.URL
        questionConfig.Priority = serverData.Order
        questionConfig.Type = serverData.Extra.Type
        questionConfig.PlatIDs = serverData.PlatIDs
        questionConfig.ZoneIDs = serverData.ZoneIDs
        self.questionConfigMap[questionConfig.QuestionnaireID] = questionConfig
        Debug.LogFormat("问卷地址：%s; 问卷ID: %s; 问卷开始时间：%s; 问卷结束时间：%s", serverData.Extra.URL, questionConfig.QuestionnaireID, serverData.StartTime, serverData.EndTime)
    end
end

---全量刷服务器问卷相关数据
function QuestionProxy:RefreshQuestionData(serverData)
    self.questionData = self.questionData or {}
    table.clear(self.questionData)
    if (serverData and serverData.ClaimedRewards) then
        for i, v in pairs(serverData.ClaimedRewards) do
            self.questionData[i] = v
        end
    end
    self.questionWaitInfo = self.questionWaitInfo or {}
    table.clear(self.questionWaitInfo)
    if (serverData and serverData.RewardWaitSend) then
        for i, v in pairs(serverData.RewardWaitSend) do
            self.questionWaitInfo[i] = v
        end
    end
    TimerMgr.DiscardTimerByTarget(self)
    local curTime = TimerMgr.GetCurTimeSeconds()
    for i, v in pairs(self.questionWaitInfo) do
        if v > curTime then
            TimerMgr.AddTimer(v - curTime, function()
                EventMgr.Dispatch("Questionnaire_Info_Update")
            end)
        end
    end
end
---更新问卷领取信息（问卷星）
function QuestionProxy:OnQuestionnaireUpdate(serverData)
    self.questionData = self.questionData or {}
    if (serverData and serverData.RewardedQIDs) then
        for id, v in pairs(serverData.RewardedQIDs) do
            self.questionData[id] = v
        end
    end
end

---问卷是否未领取，且满足区服配置
function QuestionProxy:IsQuestionAvailable(questionnaireID)
    local questionCfg = self.questionConfigMap[questionnaireID]
    if not questionCfg then
        return false
    end
    local platid =  SDKMgr.GetPlatID()
    local zoneid = BllMgr.GetLoginBLL():GetServerId()
    local isFitPlat = false
    if questionCfg.PlatIDs then
        for i = 1, #questionCfg.PlatIDs do
            if platid == questionCfg.PlatIDs[i] or questionCfg.PlatIDs[i] == 0 then
                isFitPlat = true
                break
            end
        end
    end
    if not isFitPlat then
        return false
    end
    local isFitZone = false
    if questionCfg.ZoneIDs then
        for i = 1, #questionCfg.ZoneIDs do
            if zoneid == questionCfg.ZoneIDs[i] or questionCfg.ZoneIDs[i] == 0 then
                isFitZone = true
                break
            end
        end
    end
    if not isFitZone then
        return false
    end
    if not self.questionData[questionnaireID] then
        return true
    else
        if self.questionWaitInfo[questionnaireID] == nil then
            return false
        else
            return self.questionWaitInfo[questionnaireID] > TimerMgr.GetCurTimeSeconds()
        end
    end
end

---谷歌问卷是否申请领取
function QuestionProxy:IsQuestionStart(questionnaireID)
    if self.questionData[questionnaireID] == nil then
        return false
    end
    return self.questionData[questionnaireID]
end

function QuestionProxy:SetQuestionFinished(questionnaireID)
    self.questionData = self.questionData or {}
    self.questionData[questionnaireID] = true
    ---谷歌问卷问卷申请领取后刷新数据
    local questionConfig = self.questionConfigMap[questionnaireID]
    if questionConfig.Type == self.QuestionTypeEnum.googleForm then
        local time = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.QUESTIONAIREAWARDTIME)
        self.questionWaitInfo[questionnaireID] = TimerMgr.GetCurTimeSeconds() + 60 * time
        TimerMgr.AddTimer(60 * time, function()
            EventMgr.Dispatch("Questionnaire_Info_Update")
        end)
    end
end

function QuestionProxy:GetQuestionCfgByID(questionnaireID)
    if self.questionConfigMap then
        return self.questionConfigMap[questionnaireID]
    end
end

---获取可用的问卷配置
function QuestionProxy:GetAvailableQuestionConfig()
    if (not self.questionData) then
        --Debug.LogWarning("NO questionData")
        return
    end
    local playerId = SelfProxyFactory.GetPlayerInfoProxy():GetUid()

    local tempList = {}
    for index, config in pairs(self.questionConfigMap) do
        if self:IsQuestionAvailable(config.QuestionnaireID) then
            --Debug.LogError(" config ", config.QuestionnaireID, " checkResult ", ConditionCheckUtil.CheckConditionByIntList(config.TouchOffPoint))
            if (TimerMgr.GetCurTimeSeconds() < config.EndTime and TimerMgr.GetCurTimeSeconds() > config.StartTime) then
                local conditionCheck = true
                if (not (config.Conditions == nil or #config.Conditions <= 0)) then
                    for i = 1, #config.Conditions do
                        if not ConditionCheckUtil.SingleConditionCheck(config.Conditions[i].Type, config.Conditions[i].Param) then
                            conditionCheck = false
                            break
                        end
                    end
                end
                if (conditionCheck) then
                    table.insert(tempList, config)
                    local recordKey = string.format(_questionnairActiveTime, playerId, config.QuestionnaireID)
                    local recordTime = PlayerPrefs.GetInt(recordKey, 0)
                    ---本地没有记录时需要记录激活时间
                    if (recordTime == 0) then
                        PlayerPrefs.SetInt(recordKey, TimerMgr.GetCurTimeSeconds())
                    end
                end
            end
        end
    end
    table.sort(tempList, function(a, b)
        if (a.Priority ~= b.Priority) then
            return a.Priority < b.Priority
        else
            local aKey = string.format(_questionnairActiveTime, playerId, a.QuestionnaireID)
            local bKey = string.format(_questionnairActiveTime, playerId, b.QuestionnaireID)
            local aTime = PlayerPrefs.GetInt(aKey, 0)
            local bTime = PlayerPrefs.GetInt(bKey, 0)
            if (aTime ~= bTime) then
                return aTime > bTime
            else
                return a.QuestionnaireID < b.QuestionnaireID
            end
        end
    end)

    -----测试用
    --if(tempList[1]) then
    --    Debug.LogError("本次优先展示的调查问卷ID为：", tempList[1].QuestionnaireID)
    --    Debug.LogError("当前调查问卷队列如下：")
    --    for i = 1, #tempList do
    --        Debug.LogError("排名：", i, " id ", tempList[i].QuestionnaireID)
    --    end
    --end

    return tempList[1]
end

--endregion

return QuestionProxy