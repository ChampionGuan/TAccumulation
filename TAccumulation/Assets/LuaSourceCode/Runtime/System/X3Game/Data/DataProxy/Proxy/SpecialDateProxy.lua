---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/4/24 19:20
---
---特殊约会数据
---@class SpecialDateProxy : BaseProxy
local SpecialDateProxy = class("SpecialDateProxy", BaseProxy)

---@class SpecialDateTreeNode
---@field id int 节点Id
---@field status SpecialDateTreeNodeStatus 节点状态
---@field isSatisfiedCondition boolean 是否满足条件

---初始化
---@param owner ProxyFactory
function SpecialDateProxy:OnInit(owner)
    self.super.OnInit(self, owner)
    ---@type int 正在进行的约会Id
    self.currentID = 0
    ---@type table<int, int> 约会进度记录
    self.processRateList = {}
    ---@type table<int, int> 约会开启列表
    self.activeDict = {}
    ---@type table<int, SpecialDateTreeNode> 约会节点信息（真实数据）
    self.storyTreeNodeDict = {}
    ---@type table<int, SpecialDateTreeNode> 约会节点信息（显示用，用来做解锁效果）
    self.storyTreeNodeForShowDict = {}
    ---@type table<int, boolean> 已领奖信息
    self.processRewardList = {}
    ---@type table<int,SpecialDateState>
    self.stateDict = {}
    ---@type table<int, cfg.SpecialDateStoryTreeProcess[]> 根据特约Id整理SpecialDateStoryTreeProcess的数据，减少扫表
    self.specialDateTreeProcessDict = {}
    ---@type table<int, cfg.SpecialDateStoryTree[]> 根据特约Id整理SpecialDateStoryTree的数据，减少扫表
    self.specialDateTreeDict = {}
    ---@type table<int, int>
    self.nodePriorityDict = {}
    ---@type table<int, boolean> = {}
    self.unlockDict = {}
    ---@type table<int, cfg.SpecialDateEntry> 羁绊卡对应特约的dict，获得羁绊卡解锁特约使用
    self.card2SpecialDateDict = {}
    ---@type table<int, cfg.SpecialDateEntry[]> 男主对应特约的dict，男主牵绊度等级提升解锁特约使用
    self.man2SpecialDateDict = {}
    ---@type table<int, cfg.SpecialDateStoryTreeJump[]>
    self.treeNodeJumpDict = {}

    local specialDateStoryTreeProcesses = LuaCfgMgr.GetAll("SpecialDateStoryTreeProcess")
    for _, v in pairs(specialDateStoryTreeProcesses) do
        local dateID = v.DateID
        if self.specialDateTreeProcessDict[dateID] == nil then
            self.specialDateTreeProcessDict[dateID] = {}
        end
        table.insert(self.specialDateTreeProcessDict[dateID], #self.specialDateTreeProcessDict[dateID] + 1, v)
    end
    local specialDateStoryTree = LuaCfgMgr.GetAll("SpecialDateStoryTree")
    for _, v in pairs(specialDateStoryTree) do
        local dateID = v.DateID
        if self.specialDateTreeDict[dateID] == nil then
            self.specialDateTreeDict[dateID] = {}
        end
        if v.NodeType == SpecialDateTreeDefine.SpecialDateTreeNodeType.Start then
            self:CalculatePriority(v.ID)
        end
        table.insert(self.specialDateTreeDict[dateID], #self.specialDateTreeDict[dateID] + 1, v)
    end
    local allSpecialDataEntry = LuaCfgMgr.GetAll("SpecialDateEntry")
    for _, v in pairs(allSpecialDataEntry) do
        if v.IsOpen == 1 then
            if v.CardCheck and v.CardCheck > 0 then
                self.card2SpecialDateDict[v.CardCheck] = v
            end
            if v.ManType and v.ManType > 0 then
                if nil == self.man2SpecialDateDict[v.ManType] then
                    self.man2SpecialDateDict[v.ManType] = {}
                end
                table.insert(self.man2SpecialDateDict[v.ManType], v)
            end
        end
    end
    local allSpecialDateStoryTreeJump = LuaCfgMgr.GetAll("SpecialDateStoryTreeJump")
    for _, v in pairs(allSpecialDateStoryTreeJump) do
        if self.treeNodeJumpDict[v.ConditionGroup] == nil then
            self.treeNodeJumpDict[v.ConditionGroup] = {}
        end
        table.insert(self.treeNodeJumpDict[v.ConditionGroup], v)
    end
end

--获得当前正在进行的约会Id
---@return int
function SpecialDateProxy:GetCurrentID()
    return self.currentID
end

---
---@return table<int, cfg.SpecialDateStoryTreeProcess[]>
function SpecialDateProxy:GetAllTreeProcess()
    return self.specialDateTreeProcessDict
end

---获取特约奖励数据
---@param specialDateId int
---@return cfg.SpecialDateStoryTreeProcess[]
function SpecialDateProxy:GetTreeProcessList(specialDateId)
    return self.specialDateTreeProcessDict[specialDateId]
end

---获取特约奖励数据
---@param specialDateId int
---@return cfg.SpecialDateStoryTree[]
function SpecialDateProxy:GetTree(specialDateId)
    return self.specialDateTreeDict[specialDateId]
end

---返回激活列表
---@return  table<int, int>
function SpecialDateProxy:GetActiveDict()
    return self.activeDict
end

---返回羁绊卡对应特约的dict，获得羁绊卡解锁特约使用
---@return table<int, cfg.SpecialDateEntry>
function SpecialDateProxy:GetCard2SpecialDateDict()
    return self.card2SpecialDateDict
end

---返回男主对应特约的dict，男主牵绊度等级提升解锁特约使用
---@return table<int, cfg.SpecialDateEntry[]>
function SpecialDateProxy:GetMan2SpecialDateDict()
    return self.man2SpecialDateDict
end

---返回男主对应特约的dict，男主牵绊度等级提升解锁特约使用
---@return cfg.SpecialDateEntry[]
function SpecialDateProxy:GetSpecialDateListByManType(manType)
    return self.man2SpecialDateDict[manType]
end

---解析登录的数据
---@param msg pbcmessage.SpecialDateBriefData
function SpecialDateProxy:ParseSpecialDateBrief(msg)
    if msg.ProcessRewardList then
        for i = 1, #msg.ProcessRewardList do
            self.processRewardList[msg.ProcessRewardList[i]] = true
        end
    end
    self:UpdateCurrentID(msg.CurrentId)
    if msg.ProcessMap ~= nil then
        self.processRateList = msg.ProcessMap
    end
    if msg.Unlocks ~= nil then
        self:UpdateUnlockList(msg.Unlocks)
    end
    if msg.States then
        self:UpdateAllSpecialDateState(msg.States)
    end
end

---更新当前正在进行的约会
---@param id int
function SpecialDateProxy:UpdateCurrentID(id)
    if id == nil then
        id = 0
    end
    self.currentID = id
end

---@param specialDateId int
function SpecialDateProxy:IsSpecialDateCfgValid(specialDateId)
    local specialDateEntry = LuaCfgMgr.Get("SpecialDateEntry", specialDateId)
    if specialDateEntry and specialDateEntry.IsOpen == 1 then
        return true
    end
    return false
end

---获取有效的特约配置数据
function SpecialDateProxy:GetValidSpecialDateCfg(specialDateId)
    local specialDateEntry = LuaCfgMgr.Get("SpecialDateEntry", specialDateId)
    if specialDateEntry and specialDateEntry.IsOpen == 1 then
        return specialDateEntry
    end
    return nil
end

---@param stateMap table<int, SpecialDateState>
function SpecialDateProxy:UpdateAllSpecialDateState(stateMap)
    table.clear(self.stateDict)
    for id, state in pairs(stateMap) do
        if self:IsSpecialDateCfgValid(id) then
            self.stateDict[id] = state
        end
    end
end

---@param specialDateId int
---@param state SpecialDateState
function SpecialDateProxy:UpdateSpecialDateState(specialDateId, state)
    if self:IsSpecialDateCfgValid(specialDateId) then
        self.stateDict[specialDateId] = state
    end
end

---更新特约激活信息
---@param specialDateList int[]
---@param isInit bool 是否初始化，初始化会先清空activeDict
function SpecialDateProxy:UpdateActiveList(specialDateList, isInit)
    if isInit then
        table.clear(self.activeDict)
    end
    for _, id in pairs(specialDateList) do
        if self:IsSpecialDateCfgValid(id) then
            self.activeDict[id] = true
        end
    end
end

---更新特约解锁信息
---@param unlockList int[]
function SpecialDateProxy:UpdateUnlockList(unlockList)
    for _, id in pairs(unlockList) do
        if self:IsSpecialDateCfgValid(id) then
            self.unlockDict[id] = true
        end
    end
end

---更新某个特约的解锁信息
---@param id int
function SpecialDateProxy:UpdateUnlock(id)
    self.unlockDict[id] = true
end

---更新当前正在进行的约会的进度信息
---@param rate int
function SpecialDateProxy:UpdateCurrDateProcessRate(rate)
    self:UpdateProcessRate(self.currentID, rate)
end

---更新约会进度信息
---@param id int
---@param rate int
function SpecialDateProxy:UpdateProcessRate(id, rate)
    self.processRateList[id] = rate
end

---更新剧情树领奖信息
---@param treeProcessId int
function SpecialDateProxy:UpdateSpecialDateTreeReward(treeProcessId)
    self.processRewardList[treeProcessId] = true
end

---更新剧情树信息
---@param msg pbcmessage.GetSpecialDateTreeReply
function SpecialDateProxy:UpdateSpecialDateTreeInfo(msg)
    self:UpdateNodeData(msg)
    self:UpdateProcessRate(msg.DateId, msg.ProcessRate)
    if msg.ProcessRewardList then
        for i = 1, #msg.ProcessRewardList do
            self.processRewardList[msg.ProcessRewardList[i]] = true
        end
    end
end

---更新剧情树节点数据
---@param msg pbcmessage.GetSpecialDateTreeReply
function SpecialDateProxy:UpdateNodeData(msg)
    local nodes = self:GetTree(msg.DateId)
    for _, node in pairs(nodes) do
        local nodeData = self:GetNodeData(node.ID)
        if msg == nil then
            nodeData.status = SpecialDateTreeDefine.SpecialDateTreeNodeStatus.Locked
        elseif msg.LastList ~= nil and table.indexof(msg.LastList.NodeList, node.ID) ~= false then
            nodeData.status = SpecialDateTreeDefine.SpecialDateTreeNodeStatus.CurrentNode
        elseif msg.RecordList ~= nil and table.indexof(msg.RecordList.NodeList, node.ID) ~= false then
            nodeData.status = SpecialDateTreeDefine.SpecialDateTreeNodeStatus.HistoryNode
        else
            nodeData.status = SpecialDateTreeDefine.SpecialDateTreeNodeStatus.Locked
        end
        if node.Condition and node.Condition > 0 and self:CheckStoryNodeConditionMeet(node.Condition) == false then
            nodeData.isSatisfiedCondition = false
        else
            nodeData.isSatisfiedCondition = true
        end
    end
end

---获得剧情树节点数据
---@param nodeID int
---@return SpecialDateTreeNode
function SpecialDateProxy:GetNodeData(nodeID)
    if self.storyTreeNodeDict[nodeID] == nil then
        local data = {}
        data.id = nodeID
        data.status = SpecialDateTreeDefine.SpecialDateTreeNodeStatus.Locked
        self.storyTreeNodeDict[nodeID] = data
        local specialDateStoryTree = LuaCfgMgr.Get("SpecialDateStoryTree", nodeID)
        if specialDateStoryTree.Condition and specialDateStoryTree.Condition > 0 and self:CheckStoryNodeConditionMeet(specialDateStoryTree.Condition) == false then
            self.storyTreeNodeDict[nodeID].isSatisfiedCondition = false
        else
            self.storyTreeNodeDict[nodeID].isSatisfiedCondition = true
        end
    end
    return self.storyTreeNodeDict[nodeID]
end

---获得缓存的剧情树节点数据，播解锁表现用
---@param nodeID int
---@return SpecialDateTreeNode
function SpecialDateProxy:GetNodeSavingData(nodeID)
    if self.storyTreeNodeForShowDict[nodeID] == nil then
        local data = {}
        self.storyTreeNodeForShowDict[nodeID] = data
    end
    return self.storyTreeNodeForShowDict[nodeID]
end

---获得剧情的进度
---@param specialDateID int
---@return int
function SpecialDateProxy:GetProcessRate(specialDateID)
    if self.processRateList[specialDateID] ~= nil then
        return self.processRateList[specialDateID]
    end
    return 0
end

---获得剧情树奖励状态
---@param id int
---@return SpecialDateTreeRewardStatus
function SpecialDateProxy:GetStoryTreeProcessStatus(id)
    local process = LuaCfgMgr.Get("SpecialDateStoryTreeProcess", id)
    if process.Percent <= self:GetProcessRate(process.DateID) then
        if self:HasStoryTreeProcessRewarded(process.ID) then
            return SpecialDateTreeDefine.SpecialDateTreeRewardStatus.Rewarded
        else
            return SpecialDateTreeDefine.SpecialDateTreeRewardStatus.CanReward
        end
    end
    return SpecialDateTreeDefine.SpecialDateTreeRewardStatus.Locked
end

---剧情树奖励是否已领取
---@param id int
---@return boolean
function SpecialDateProxy:HasStoryTreeProcessRewarded(id)
    return self.processRewardList[id] == true
end

---记录剧情树节点的快照，用来做解锁表现用
---@param treeID int
function SpecialDateProxy:SaveNodeData(treeID)
    local nodes = self:GetTree(treeID)
    for _, node in pairs(nodes) do
        local curNodeData = self:GetNodeData(node.ID)
        local savingNodeData = self:GetNodeSavingData(node.ID)
        savingNodeData.id = curNodeData.id
        savingNodeData.status = curNodeData.status
        savingNodeData.isSatisfiedCondition = curNodeData.isSatisfiedCondition
    end
end

---是否是新约会
---@param id int
---@return boolean
function SpecialDateProxy:IsNewSpecialDate(id)
    local specialDateEntry = LuaCfgMgr.Get("SpecialDateEntry", id)
    return SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_SPECIALDATE) and self:HasChecked(id) == false
        and self.activeDict[id] == true
            and self.owner:GetRoleProxy():IsUnlocked(specialDateEntry.ManType)
end

---@param id int
---@return boolean
function SpecialDateProxy:HasChecked(id)
    local redPointValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_SPECIALDATE_SINGLE_NEW, id)
    return redPointValue == 1
end

---约会是否解锁
---@param id int
---@return boolean
function SpecialDateProxy:IsUnlocked(id)
    return self.unlockDict[id] == true
end

---约会是否已经满足条件
---@param id int
---@return boolean
function SpecialDateProxy:IsActived(id)
    return self.activeDict[id] == true
end

---获得当前约会状态
---@param id int 约会Id
---@return Define.SpecialDateState
function SpecialDateProxy:GetState(id)
    local specialDateEntry = LuaCfgMgr.Get("SpecialDateEntry", id)
    if not self.activeDict[id] then
        return Define.SpecialDateState.Deactived
    elseif not self.unlockDict[id] and string.isnilorempty(specialDateEntry.UnlockItem) == false then
        return Define.SpecialDateState.Locked
    else
        return Define.SpecialDateState.Unlocked
    end
end

---约会是否进入过
---@param id int
---@return boolean
function SpecialDateProxy:DateEntered(id)
    return self.stateDict[id] and self.stateDict[id] >= SpecialDateTreeDefine.SpecialDateState.SpecialDateStateEnter or false
end

---约会是否正常读完
---@param id int
---@return boolean
function SpecialDateProxy:DateReadToEnd(id)
    return self.stateDict[id] and self.stateDict[id] == SpecialDateTreeDefine.SpecialDateState.SpecialDateStateFinish or false
end

---是否有新的约会
---@return boolean
function SpecialDateProxy:HasNewSpecialDate()
    for id, _ in pairs(self.activeDict) do
        if self:IsNewSpecialDate(id) then
            return true
        end
    end
    return false
end

---是否有约会进度可领奖
---@return boolean
function SpecialDateProxy:HasCanReward()
    for i, _ in pairs(self.specialDateTreeProcessDict) do
        if self:SpecialDateCanReward(i) == true then
            return true
        end
    end
    return false
end

---是否有约会进度可领奖
---@param dateId int 特约Id
---@return boolean
function SpecialDateProxy:SpecialDateCanReward(dateId)
    local treeProcess = self.specialDateTreeProcessDict[dateId]
    if not treeProcess then
        return false
    end
    for _, v in pairs(treeProcess) do
        if self:GetStoryTreeProcessStatus(v.ID) == SpecialDateTreeDefine.SpecialDateTreeRewardStatus.CanReward then
            return true
        end
    end
    return false
end

---根据配置计算节点权重用于播动效
---@param startStoryTreeId int
function SpecialDateProxy:CalculatePriority(startStoryTreeId)
    local waitNodeList = {}
    self.nodePriorityDict[startStoryTreeId] = 1
    table.insert(waitNodeList, #waitNodeList + 1, startStoryTreeId)
    while #waitNodeList > 0 do
        local id = table.remove(waitNodeList, 1)
        local curPriority = self:GetNodePriority(id)
        local nextCfg = LuaCfgMgr.Get("SpecialDateStoryTree", id)
        if curPriority > 0 and nextCfg and nextCfg.NextID and #nextCfg.NextID > 0 then
            for _,v in pairs(nextCfg.NextID) do
                if self:GetNodePriority(v) <= curPriority then
                    self.nodePriorityDict[v] = curPriority + 1
                    if not table.containsvalue(waitNodeList, v) then
                        table.insert(waitNodeList, #waitNodeList + 1, v)
                    end
                end
            end
        end
    end
end

---返回动效权重
---@param storyTreeId int
---@return int
function SpecialDateProxy:GetNodePriority(storyTreeId)
    local priority = self.nodePriorityDict[storyTreeId]
    return priority and priority or 0
end

---@return cfg.SpecialDateStoryTreeJump[]
function SpecialDateProxy:GetStoryTreeJumpData(conditionKey)
    return self.treeNodeJumpDict[conditionKey]
end

---判断节点Condition是否满足
---@return bool
function SpecialDateProxy:CheckStoryNodeConditionMeet(conditionKey)
    if not conditionKey then
        return false
    end
    local storyJumps = self.treeNodeJumpDict[conditionKey]
    if not storyJumps then
        return false
    end
    local meet = true
    for _, v in ipairs(storyJumps) do
        if not ConditionCheckUtil.CheckCommonCondition(v.ConditionID) then
            meet = false
            break
        end
    end
    return meet
end

return SpecialDateProxy