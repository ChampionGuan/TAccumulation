---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by aoliao.
--- DateTime: 2022/12/26 11:03
---ChargeProxy

---@class ChargeProxy:BaseProxy
local ChargeProxy = class("ChargeProxy", BaseProxy)
local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")

function ChargeProxy:OnInit()
    self:Subscribe()
    BllMgr.GetChargeBLL()
    self.isInit = false
end

---@param data pbcmessage.ChargeData
function ChargeProxy:Init(data)
    ---@type X3Data.ChargeData
    self.chargeData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.ChargeData)
    self.chargeData:DecodeByField(data)
    self.searchItemSkus = {}
    self:InitPayInfo()
    EventMgr.Dispatch(ShopMallConst.ChargeEvent.CHARGE_DATA_INIT,self.isInit)
    if not self.isInit then
        self.isInit = true
    end
end

---@param data pbcmessage.ChargeRefreshUpdateReply
function ChargeProxy:ChargeRefreshUpdateCallBack(data)
    self.chargeData:DecodeByField(data.Charge)
end

---@return X3Data.ChargeData
function ChargeProxy:GetChargeData()
    return self.chargeData
end

---@return X3Data.ChargeRecord
function ChargeProxy:GetChargeRecord()
    local ChargeRecords = self.chargeData:GetChargeRecords()
    if ChargeRecords and ChargeRecords[ShopMallConst.PayType.CHARGE] then
        return ChargeRecords[ShopMallConst.PayType.CHARGE]
    end
    return nil
end

function ChargeProxy:Subscribe()
    X3DataMgr.Subscribe(X3DataConst.X3Data.ChargeData, ChargeProxy.OnChargeChange, ChargeProxy,
            X3DataConst.X3DataField.ChargeData.ChargeRecords)
    X3DataMgr.Subscribe(X3DataConst.X3Data.ChargeData, ChargeProxy.OnPayLimitBirthdayChange, ChargeProxy,
            X3DataConst.X3DataField.ChargeData.PayLimitBirthday)
end

function ChargeProxy:OnChargeChange()
    EventMgr.Dispatch(ShopMallConst.ChargeEvent.CHARGE_NUM_CHANGE)
end

function ChargeProxy:OnPayLimitBirthdayChange()
    EventMgr.Dispatch(ShopMallConst.ChargeEvent.PAY_LIMIT_BIRTHDAY)
end

function ChargeProxy:InitPayInfo()
    local allPayInfoCfg = LuaCfgMgr.GetAll("PayInfo")
    if allPayInfoCfg == nil then
        return
    end
    table.clear(self.searchItemSkus)
    for k, v in pairs(allPayInfoCfg) do
        ---@type X3Data.PayInfo
        local payInfo = X3DataMgr.Get(X3DataConst.X3Data.PayInfo, k)
        if payInfo == nil then
            payInfo = X3DataMgr.Add(X3DataConst.X3Data.PayInfo)
            payInfo:SetPrimaryValue(k)
        end
        local name = UITextHelper.GetUIText(v.Name)
        local productId = self:GetProductId(v.ProductID)
        payInfo:SetName(name)
        payInfo:SetDesc(name)
        if not string.isnilorempty(productId) then
            payInfo:SetProductId(productId)
        end
        local currency = UITextHelper.GetUIText(v.Currency)
        local SDKDefine = require("Runtime.System.X3Game.Modules.SDK.SDKDefine")
        if Locale.GetRegion() == Locale.Region.ChinaMainland or UNITY_EDITOR then
            payInfo:SetMoney(v.Money)
            payInfo:SetCurrency(SDKDefine.CurrencyType.CNY)
            payInfo:SetSymbol(currency)
            payInfo:SetAmount(string.concat(currency, v.Money))
        end
        if not string.isnilorempty(productId) then
            table.insert(self.searchItemSkus, productId)
        end
    end
    self:SearchProductInfo(true)
end

function ChargeProxy:GetProductId(productIdStr)
    if string.isnilorempty(productIdStr) then
        return nil
    end
    local region = Locale.GetRegion()
    local splitResult = string.split(productIdStr, "|")
    local regionByProductIdDic = {}
    for i = 1, #splitResult do
        local str = splitResult[i]
        local strTab = string.split(str, "=")
        if #strTab >= 2 then
            regionByProductIdDic[tonumber(strTab[1])] = strTab[2]
        else
            Debug.LogError("payInfo productId 配置出错 productId：", productIdStr)
        end
    end
    if regionByProductIdDic[region] ~= nil then
        return regionByProductIdDic[region]
    end
    return nil
end

function ChargeProxy:SearchProductInfo(isShowFailTips)
    if #self.searchItemSkus > 0 then
        SDKMgr.SearchProductInfo(self.searchItemSkus, nil, handler(self, self.OnSearchProductCallBack), isShowFailTips)
    end
end

function ChargeProxy:OnSearchProductCallBack(isSuccess, result)
    local productInfoList = result.data
    if isSuccess and productInfoList then
        for i, v in ipairs(productInfoList) do
            local payId = self:GetPayIdByProductId(v.id)
            if payId then
                ---@type X3Data.PayInfo
                local payInfo = X3DataMgr.Get(X3DataConst.X3Data.PayInfo, payId)
                if payInfo == nil then
                    payInfo = X3DataMgr.Add(X3DataConst.X3Data.PayInfo)
                    payInfo:SetPrimaryValue(payId)
                end
                payInfo:SetName(v.name)
                payInfo:SetDesc(v.desc)
                payInfo:SetMoney(v.price)
                payInfo:SetCurrency(v.currency)
                if v.currency_detail then
                    payInfo:SetAmount(v.currency_detail.amount)
                    payInfo:SetAlign(v.currency_detail.align)
                    payInfo:SetSymbol(v.currency_detail.symbol)
                    payInfo:SetPattern(v.currency_detail.pattern)
                end
            end
        end
    else
        if Locale.GetRegion() == Locale.Region.ChinaMainland then
            return
        end
        local retTab = PoolUtil.GetTable()
        local count = X3DataMgr.GetAll(X3DataConst.X3Data.PayInfo, retTab)
        for i = 1, count do
            ---@type X3Data.PayInfo
            local payInfo = retTab[i]
            payInfo:SetMoney(nil)
            payInfo:SetCurrency(nil)
            payInfo:SetSymbol(nil)
            payInfo:SetAmount(nil)
        end
        PoolUtil.ReleaseTable(retTab)
    end
end

function ChargeProxy:GetPayIdByProductId(productID)
    local allPayInfoCfg = LuaCfgMgr.GetAll("PayInfo")
    for k, v in pairs(allPayInfoCfg) do
        if self:GetProductId(v.ProductID) == productID then
            return k
        end
    end
    return nil
end

---@return X3Data.PayInfo
function ChargeProxy:GetPayInfo(payId)
    local payInfo = X3DataMgr.Get(X3DataConst.X3Data.PayInfo, payId)
    return payInfo
end

---@param reply pbcmessage.ReportPayLimitBirthdayReply
function ChargeProxy:OnReportPayLimitBirthdayCallBack(reply)
    self.chargeData:SetPayLimitBirthday(reply.Birthday)
end

---@param reply pbcmessage.WaitDeliverOrdersReply
function ChargeProxy:OnWaitDeliverOrdersCallBack(reply)
    if self.chargeData == nil then
        ---@type X3Data.ChargeData
        self.chargeData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.ChargeData)
    end
    self.chargeData:DecodeByField(reply)
end

---@param reply pbcmessage.DeliverPaidOrderReply
function ChargeProxy:OnDeliverPaidOrderCallBack(reply)
    self.chargeData:DecodeByField(reply.Charge)
end

---是否存在已支付未发货的订单
function ChargeProxy:IsHavePaidOrders()
    local paidOrderList = self.chargeData:GetPaidOrders()
    if paidOrderList and #paidOrderList > 0 then
        return true
    end
    return false
end

return ChargeProxy