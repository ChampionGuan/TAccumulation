---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2023/9/12 15:15
---

local InvitationDataType = X3DataConst.X3Data.DatePlanInvitationData
---@type DatePlanConst
local DatePlanConst = require("Runtime.System.X3Game.Modules.DatePlan.DatePlanConst")

---@class DatePlanProxy
local DatePlanProxy = class("DatePlanProxy", BaseProxy)

function DatePlanProxy:OnInit()

end

function DatePlanProxy:OnClear()
end

---更新约会计划基础数据
---@param data pbcmessage.DatePlanData
function DatePlanProxy:UpdateDatePlanData(data)
    if(data and data.RoleDataMap) then
        for roleId, roleData in pairs(data.RoleDataMap) do
            self:UpdateDatePlanRoleData(roleData, roleId)
        end
    end
end

---更新角色基础数据
function DatePlanProxy:UpdateDatePlanRoleData(roleData, roleId)
    if(roleData.InvitationMap) then
        for inviteId, inviteData in pairs(roleData.InvitationMap)  do
            self:UpdateDateInvitationData(inviteData, inviteId);
        end
    else
        Debug.LogError("roleData.InvitationMap is Nil " , roleId)
    end
end

function DatePlanProxy:UpdateDateInvitationData(inviteData, _inviteId)
    local inviteId = _inviteId or inviteData.LetterID
    ---@type X3Data.DatePlanInvitationData
    local invitationData = X3DataMgr.Get(X3DataConst.X3Data.DatePlanInvitationData, inviteId)
    if(not invitationData) then
        invitationData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.DatePlanInvitationData, inviteData, inviteId)
    else
        invitationData:Parse(inviteData)
    end

end

---更新接受状态
function DatePlanProxy:UpdateDatePlanAcceptInvitation(data)
    ---@type X3Data.DatePlanInvitationData
    local invitationData = X3DataMgr.Get(X3DataConst.X3Data.DatePlanInvitationData, data.LetterID)
    invitationData:SetStatus(DatePlanConst.DatePlanInvitationStatusType.DatePlanInvitationStatusTypeAccept)
    EventMgr.Dispatch(DatePlanConst.DataEventType.DatePlanInvitationDataUpdate)
end

---更新打开邀请函状态
function DatePlanProxy:UpdateDatePlanOpenInvitation(data)
    ---@type X3Data.DatePlanInvitationData
    local invitationData = X3DataMgr.Get(X3DataConst.X3Data.DatePlanInvitationData, data.LetterID)
    invitationData:SetStatus(DatePlanConst.DatePlanInvitationStatusType.DatePlanInvitationStatusTypeOpen)
    EventMgr.Dispatch(DatePlanConst.DataEventType.DatePlanInvitationDataUpdate)
end

---更新开始赴约状态
function DatePlanProxy:UpdateDatePlanKeepInvitation(data)
    ---@type X3Data.DatePlanInvitationData
    local invitationData = X3DataMgr.Get(X3DataConst.X3Data.DatePlanInvitationData, data.LetterID)
    invitationData:SetStatus(DatePlanConst.DatePlanInvitationStatusType.DatePlanInvitationStatusTypeOngoing)
    EventMgr.Dispatch(DatePlanConst.DataEventType.DatePlanInvitationDataUpdate, data.LetterID)
end

---获取可展示的邀请函，这里需要处理排序，优先级等 --todo
function DatePlanProxy:GetAvailableLetterData()
    local result = {}
    X3DataMgr.GetAll(InvitationDataType, result)
    return result
end

---获取玩法内透传数据
function DatePlanProxy:GetGamePlayData(letterID)
    ---@type X3Data.DatePlanInvitationData
    local invitationData = X3DataMgr.Get(X3DataConst.X3Data.DatePlanInvitationData, letterID)
    if(not invitationData) then
        return
    end
    local contentList = invitationData:GetContentList()
    if(contentList and #contentList > 0) then
        for i = 1, #contentList do
            ---@type X3Data.DateContent
            local content = contentList[i]
            local gamePlayData = content:GetDateGamePlayData()
            if(gamePlayData ~= nil) then
                return gamePlayData:GetDateMiaoData():GetResultList();
            end
        end
    end
end


return DatePlanProxy