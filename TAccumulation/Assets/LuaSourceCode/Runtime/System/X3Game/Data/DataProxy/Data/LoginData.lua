---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianxin.
--- DateTime: 2022/11/2 14:29
---

---@class LoginData
local LoginData = class("LoginData")


---@class LoginRoleItem
---@field Uid string
---@field Name string
---@field Level int
---@field FamilyName string
---@field ZoneId int
---@field LastRefreshTime int
---@field ServerRegion int
---@field DTime int
---@field CTime int

---@class LoginAccountInfo
---@field ZoneId int
---@field Account string
---@field Password string
---@field AccountId int
---@field Token string
---@field TouristFlag int  0不是游客，1是游客
---@field TokenEndTime int
---@field ExData string
---@field Permission string
---@field AccountId int

---@class ServerInfo
---@field Id int
---@field Name string
---@field Addr string
---@field isRecommend int
---@field Watermark int
---@field IsHot int
---@field State int
---@field LoginUrl string
---@field TimeZone int
---@field zoneID int
---@field des string
---@field openTime string
---@field queue_switch int 0关闭排队登录,1开启排队登录
---@field queue string 排队登录的ID
---@field preFace int 预捏脸

function LoginData:ctor()
    ---@type table<LoginRoleItem>
    self.roleList = {}
    ---@type LoginAccountInfo
    self.accountInfo = {
        Account = PlayerPrefs.GetString("Account", ""),
        Password = PlayerPrefs.GetString("Pwd", ""),
        AccountId = GrpcMgr.GetMetaData("AccountID") or 0,
        Token = GrpcMgr.GetMetaData("Token") or "",
        OpenId = GrpcMgr.GetMetaData("OpenID") or 0,
        ZoneId = 0,
        TouristFlag = 0, --0不是游客，1是游客
        TokenEndTime = 0, --TokenEndTime
        Permission = 0,
        ExData = "",
    }
    ---@type table<ServerInfo>
    self.serverList = {}
    ---@type int 时区
    self.timeZone = 0
    self.lastLoginZoneId = 0
    self.loginUrl = ""
    ---@type int 选中服务器ID zoneID
    self.selectServer = 0
    ---@type bool 是否登录成功登录服
    self.isLoginLServer = false
    ---@type string 登录服地址
    self.lastLServerUrl = ""
    ---@type string 隐私协议数据
    self.privacyAgreementInfo = nil
end

function LoginData:SetLastLoginZoneID(zoneID)
    self.lastLoginZoneId = zoneID
end

function LoginData:GetPrivacyAgreementVersion()
    return self.privacyAgreementInfo and self.privacyAgreementInfo.version or nil
end

function LoginData:SetPrivacyAgreementInfo(data)
    self.privacyAgreementInfo = data
end

function LoginData:GetPrivacyAgreementInfo()
    return self.privacyAgreementInfo
end

function LoginData:GetLastLoginZoneID()
    return self.lastLoginZoneId
end

---@param loginRoleItem LoginRoleItem
function LoginData:AddRoleItem(loginRoleItem)
    self.roleList[loginRoleItem.Uid] = loginRoleItem
end

function LoginData:GetRoleList()
    return self.roleList
end

function LoginData:ClearRoleList()
    self.roleList = {}
end

function LoginData:ClearServerList()
    self.serverList = {}
end

---@param serverInfo ServerInfo
function LoginData:AddServerItem(serverInfo)
    local isAdd = true
    for i, v in ipairs(self.serverList) do
        if v.Id == serverInfo.Id then
            isAdd = false
        end
    end
    if isAdd then
        local zoneID, serverName = self:_GetServerName(serverInfo.Name)
        serverInfo.Name = serverName
        serverInfo.zoneID = zoneID and tonumber(zoneID) or serverInfo.Id
        self.serverList[#self.serverList + 1] = serverInfo
    end
end

---@return  table<ServerInfo>
function LoginData:GetServerList()
    return self.serverList
end

function LoginData:SetDefaultServerID()
    local defaultServer = self.serverList[1]
    if not defaultServer then
        Debug.LogError("defaultServer is nil!!!")
    else
        self:SetSelectServer(defaultServer.Id)
    end
end

---@return ServerInfo
function LoginData:GetServerInfo(serverID)
    for i, v in ipairs(self.serverList) do
        if v.Id == serverID then
            return v
        end
    end
    return nil
end

function LoginData:GetAccountInfoZoneID()
    if self.accountInfo.ZoneId == 0 and #self.serverList ~= 0 then
        return self.serverList[1].Id
    end
    return self.accountInfo.ZoneId
end

function LoginData:GetAccountInfo()
    return self.accountInfo
end

function LoginData:GetLoginUrl()
    if string.isnilorempty(self.loginUrl) then
        self.loginUrl = self.serverList[1].LoginUrl
    end
    return self.loginUrl
end

function LoginData:SetSelectServer(selectID)
    self.selectServerID = selectID
    local selectServerInfo = self:GetServerInfo(self.selectServerID)
    if not selectServerInfo then
        Debug.LogError("selectServerInfo is nil!!!")
        self:SetDefaultServerID()
        selectServerInfo = self:GetServerInfo(self.selectServerID)
    end
    self.loginUrl = selectServerInfo.LoginUrl
    self.timeZone = selectServerInfo.TimeZone
    if GrpcMgr ~= nil then
        GrpcMgr.SetTimeZone(self.timeZone)
    end
end

function LoginData:GetSelectServer()
    return self.selectServerID
end
---@return ServerInfo
function LoginData:GetSelectServerInfo()
    return self:GetServerInfo(self.selectServerID)
end

function LoginData:SetIsLoginLServer(isLogin)
    self.isLoginLServer = isLogin
    self.lastLServerUrl = self:GetLoginUrl()
end

function LoginData:GetIsLoginLServer()
    return self.isLoginLServer and self:GetLoginUrl() == self.lastLServerUrl
end

---@param serverName string
---@return bool| int
---@return string serveName
function LoginData:_GetServerName(serverName)
    if string.find(serverName, "=") then
        return serverName:match("(.*)=(.*)")
    else
        return false, serverName
    end
end

return LoginData