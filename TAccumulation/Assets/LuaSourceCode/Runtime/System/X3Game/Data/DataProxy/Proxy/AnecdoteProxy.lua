---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2023/8/9 19:22
---逸闻
---@class AnecdoteProxy:BaseProxy
local AnecdoteProxy = class("AnecdoteProxy", BaseProxy)

function AnecdoteProxy:OnInit()
    self.tabType = {
        [Locale.Language.ZH_CN] = UITextConst.UI_TEXT_38490,
        [Locale.Language.JA_JP] = UITextConst.UI_TEXT_38491,
        [Locale.Language.EN_US] = UITextConst.UI_TEXT_38492,
        [Locale.Language.ZH_TW] = UITextConst.UI_TEXT_38493,
        [Locale.Language.KO_KR] = UITextConst.UI_TEXT_38494,
    }
    ---@type string
    self.tab_info = UITextHelper.GetUIText(self.tabType[Locale.GetLang()])
    EventMgr.AddListener("UpdateRoleLoveDataEvent", self.UpdateRoleLoveDataEvent, self)
    EventMgr.AddListener(GameConst.CommonConditionUpdate, self.RefreshUnLockState, self)
    EventMgr.AddListener("RoleUnlockEvent", self.AddRoleEvent, self)
    self.checkMap = {}
    self.tLogMap = {}
    self.roleId = 1
    self:InitData()
end

function AnecdoteProxy:InitData()
    local roleMap = BllMgr.GetRoleBLL():GetUnlockedRoleCfg()
    for i, role in pairs(roleMap) do
        self:InitRoleData(role.ID)
    end
end

---@param roleId int
function AnecdoteProxy:InitRoleData(roleId)
    local roleAnecdote = self:GetAnecdoteData(roleId)
    local anecList = LuaCfgMgr.GetListByCondition("AnecdoteInfo", { RoleID = roleId })
    for i, v in pairs(anecList) do
        local anecItem = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteItem, v.AnecdoteID)
        if not anecItem then
            anecItem = X3DataMgr.AddByPrimary(X3DataConst.X3Data.AnecdoteItem, nil, v.AnecdoteID)
        end
        self:UpdateAnecdoteItem(anecItem, roleAnecdote, v)
    end
    self:RefreshRedByRole(roleId)
    self:CheckTLog()
end

function AnecdoteProxy:AddRoleEvent(roleId)
    self:InitRoleData(roleId)
end

function AnecdoteProxy:SetSelectRole(roleId)
    self.roleId = roleId
end

function AnecdoteProxy:GetSelectRole()
    return self.roleId
end

---@param roleId
function AnecdoteProxy:RefreshRoleData(roleId)
    local roleAnecdote = self:GetAnecdoteData(roleId)
    if roleAnecdote then
        local anecdoteList = roleAnecdote:GetAnecdoteData()
        if anecdoteList then
            for i, v in pairs(anecdoteList) do
                local anecdoteItem = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteItem, v:GetPrimaryValue())
                self:UpdateAnecdoteItem(anecdoteItem, roleAnecdote)
            end
            self:CheckTLog()
        end
    end
    self:RefreshRedByRole(roleId)
end

---刷新红点
---@param roleId int
function AnecdoteProxy:RefreshRedByRole(roleId)
    if not self:IsUnlock() then
        return
    end
    if not roleId then
        roleId = self.roleId
    end
    local roleData = self:GetAnecdoteData(roleId)
    ---@type X3Data.AnecdoteItem[]
    local anecdoteData = roleData:GetAnecdoteData()
    if anecdoteData then
        local secNew = 0
        local chapterNew = 0
        local rewardNew = 0
        for _, anecdote in pairs(anecdoteData) do
            if anecdote:GetState() == X3DataConst.StoryStatus.Normal then
                if anecdote:GetStateType() == X3DataConst.StoryStateType.StoryStateTypeFinish then
                    rewardNew = rewardNew + 1
                end
                if anecdote:GetIsNew() then
                    chapterNew = chapterNew + 1
                end
                ---@type X3Data.AnecdoteSection[]
                local secDatas = anecdote:GetSectionData()
                if secDatas then
                    for _, sec in pairs(secDatas) do
                        if sec:GetIsNew() then
                            secNew = secNew + 1
                        end
                    end
                end
            end
        end
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_CHAPTER_NEW_ALL, secNew, roleId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_NEW_ALL, chapterNew, roleId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_REWARD_ALL, rewardNew, roleId)
    end
end

---@param roleID int
function AnecdoteProxy:UpdateRoleLoveDataEvent(roleID)
    self:RefreshRoleData(roleID)
end

function AnecdoteProxy:RefreshUnLockState(conditionTypeList)
    local roleList = PoolUtil.GetTable()
    for i, v in pairs(conditionTypeList) do
        if self.checkMap[v] then
            for roleId, _ in pairs(self.checkMap[v]) do
                roleList[roleId] = true
            end
        end
    end
    for roleId, _ in pairs(roleList) do
        self:RefreshRoleData(roleId)
    end
    PoolUtil.ReleaseTable(roleList)
end

function AnecdoteProxy:GetAnecdoteData(roleId)
    if not roleId or roleId == 0 then
        return
    end
    local roleAnecdote = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteList, roleId)
    if not roleAnecdote then
        roleAnecdote = X3DataMgr.AddByPrimary(X3DataConst.X3Data.AnecdoteList, nil, roleId)
    end
    return roleAnecdote
end

---@param anecdoteData pbcmessage.StoryTypeData
function AnecdoteProxy:UpdateServerData(anecdoteData)
    if not anecdoteData then
        return
    end
    self.server_story_map = anecdoteData.StoryMap
    for i, v in pairs(anecdoteData.StoryMap) do
        local cfg = LuaCfgMgr.Get("AnecdoteInfo", v.StoryID)
        if cfg then
            self:UpdateServerAnecdoteItem(cfg.RoleID, v)
        end
    end
    for role_id, v in pairs(anecdoteData.LastStoryIDs) do
        local roleAnecdote = self:GetAnecdoteData(role_id)
        roleAnecdote:SetLastStoryID(v)
    end
end

function AnecdoteProxy:IsHaveAnecdote(anecdoteID)
    if not self.server_story_map then
        return
    end
    return self.server_story_map[anecdoteID] ~= nil
end

---@param role_id int
---@param data pbcmessage.StoryItem
function AnecdoteProxy:UpdateServerAnecdoteItem(role_id, data)
    local roleAnecdote = self:GetAnecdoteData(role_id)
    local itemData = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteItem, data.StoryID)
    if itemData then
        itemData:SetState(X3DataConst.StoryStatus.Normal)
        itemData:SetLastReadSection(data.LastReadSection)
        itemData:SetLastReadSectionNum(data.LastReadSectionNum)
        itemData:SetStateType(data.State)
        self:UpdateAnecdoteItem(itemData, roleAnecdote)
        roleAnecdote:UpdateAnecdoteDataValue(data.StoryID, itemData)
    end
end

---更新单个逸闻数据
---@param anecdoteData X3Data.AnecdoteItem
---@param roleAnecdote X3Data.AnecdoteList
---@param aneCfg
function AnecdoteProxy:UpdateAnecdoteItem(anecdoteData, roleAnecdote, aneCfg)
    if not aneCfg then
        aneCfg = LuaCfgMgr.Get("AnecdoteInfo", anecdoteData:GetPrimaryValue())
    end
    local isUnlock = true
    if aneCfg.LoveLevelCondition > 0 then
        isUnlock = BllMgr.GetRoleBLL():GetRoleLoveLevel(aneCfg.RoleID) >= aneCfg.LoveLevelCondition
    end
    if aneCfg.Condition > 0 then
        local result = ConditionCheckUtil.CheckConditionByCommonConditionGroupId(aneCfg.Condition)
        isUnlock = isUnlock and result
        if not result then
            local conditionList = ConditionCheckUtil.GetCommonConditionListByGroupId(aneCfg.Condition)
            for _, con in pairs(conditionList) do
                if not self.checkMap[con.ConditionType] then
                    self.checkMap[con.ConditionType] = {}
                end
                self.checkMap[con.ConditionType][roleAnecdote:GetPrimaryValue()] = true
            end
        end
    end
    local redVal = RedPointMgr.GetValue(X3_CFG_CONST.RED_ANECDOTE_NEW, aneCfg.AnecdoteID)
    if isUnlock and redVal == 0 and self:IsUnlock() then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_ANECDOTE_NEW, aneCfg.AnecdoteID)
        redVal = RedPointMgr.GetValue(X3_CFG_CONST.RED_ANECDOTE_NEW, aneCfg.AnecdoteID)
        if not self:IsHaveAnecdote(aneCfg.AnecdoteID) then
            table.insert(self.tLogMap, BllMgr.GetScoreStoryBLL():CreateStoryRemind(X3DataConst.StoryType.Anecdote, aneCfg.AnecdoteID, 0))
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_NEW, redVal == 1 and 1 or 0, aneCfg.AnecdoteID)
    anecdoteData:SetIsNew(redVal == 1)
    anecdoteData:SetState(isUnlock and X3DataConst.StoryStatus.Normal or X3DataConst.StoryStatus.Lock)
    local sectionList = anecdoteData:GetSectionData()
    if not sectionList then
        local secList = LuaCfgMgr.GetListByCondition("AnecdoteSection", { SCoreID = anecdoteData:GetPrimaryValue() })
        table.sort(secList, function(a, b)
            return a.Num < b.Num
        end)
        for i, v in ipairs(secList) do
            local secData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.AnecdoteSection, nil, v.SectionID)
            self:UpdateSectionItem(roleAnecdote, anecdoteData, secData, v)
        end
    else
        for i, v in pairs(sectionList) do
            self:UpdateSectionItem(roleAnecdote, anecdoteData, v)
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_REWARD, anecdoteData:GetStateType() == X3DataConst.StoryStateType.StoryStateTypeFinish and 1 or 0, anecdoteData:GetPrimaryValue())
    roleAnecdote:AddOrUpdateAnecdoteDataValue(anecdoteData:GetPrimaryValue(), anecdoteData)
end

---@param roleAnecdote  X3Data.AnecdoteList
---@param itemData  X3Data.AnecdoteItem
---@param secData X3Data.AnecdoteSection
---@param secCfg
function AnecdoteProxy:UpdateSectionItem(roleAnecdote, itemData, sectionData, sectionCfg)
    if not sectionCfg then
        sectionCfg = LuaCfgMgr.Get("AnecdoteSection", sectionData:GetPrimaryValue())
    end
    local isUnlock = itemData:GetState() == X3DataConst.StoryStatus.Normal
    if isUnlock and sectionCfg.Unlock > 0 then
        isUnlock = ConditionCheckUtil.CheckConditionByCommonConditionGroupId(sectionCfg.Unlock)
        if not isUnlock then
            local conditionList = ConditionCheckUtil.GetCommonConditionListByGroupId(sectionCfg.Unlock)
            for i, v in pairs(conditionList) do
                if not self.checkMap[v.ConditionType] then
                    self.checkMap[v.ConditionType] = {}
                end
                self.checkMap[v.ConditionType][roleAnecdote:GetPrimaryValue()] = true
            end
        end
    end
    sectionData:SetState(isUnlock and X3DataConst.StoryStatus.Normal or X3DataConst.StoryStatus.Lock)
    if sectionCfg.Num > 1 then
        local secData = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteSection, sectionData:GetPrimaryValue() - 1)
        if secData then
            local redVal = RedPointMgr.GetValue(X3_CFG_CONST.RED_ANECDOTE_CHAPTER_NEW, sectionData:GetPrimaryValue() - 1)
            sectionData:SetReadState(redVal < 2 and X3DataConst.StoryReadState.NoRead or X3DataConst.StoryReadState.HaveRead)
        end
    else
        sectionData:SetReadState(X3DataConst.StoryReadState.HaveRead)
    end
    if sectionData:GetState() == X3DataConst.StoryStatus.Normal and sectionData:GetReadState() == X3DataConst.StoryReadState.HaveRead and self:IsUnlock() then
        local redVal = RedPointMgr.GetValue(X3_CFG_CONST.RED_ANECDOTE_CHAPTER_NEW, sectionData:GetPrimaryValue())
        if redVal == 0 then
            RedPointMgr.Save(1, X3_CFG_CONST.RED_ANECDOTE_CHAPTER_NEW, sectionData:GetPrimaryValue())
            table.insert(self.tLogMap, BllMgr.GetScoreStoryBLL():CreateStoryRemind(X3DataConst.StoryType.Anecdote, itemData:GetPrimaryValue(), sectionData:GetPrimaryValue()))
        end
        redVal = RedPointMgr.GetValue(X3_CFG_CONST.RED_ANECDOTE_CHAPTER_NEW, sectionData:GetPrimaryValue())
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_CHAPTER_NEW, redVal == 1 and 1 or 0, sectionData:GetPrimaryValue())
        sectionData:SetIsNew(redVal == 1)
    end
    itemData:AddOrUpdateSectionDataValue(sectionData:GetPrimaryValue(), sectionData)
    roleAnecdote:AddOrUpdateAnecdoteDataValue(itemData:GetPrimaryValue(), itemData)
end

---解析文本
---@param sectionData X3Data.AnecdoteSection
---@param text
---@param canvasSize
function AnecdoteProxy:ParseData(sectionData, text, canvasSize)
    local sectionID = sectionData:GetPrimaryValue()
    local contentList = LuaCfgMgr.GetListByCondition("AnecdoteContent", { SectionID = sectionID })
    if contentList then
        self:SortSecContent(contentList)
        local saveData = function()
            local showContent = self:GetSectionContent(sectionData)
            local textInfo = text:GetTextInfo(showContent)
            sectionData:SetPageNum(textInfo.pageCount)
            sectionData:SetCanvasSizeX(canvasSize.x)
            sectionData:SetCanvasSizeY(canvasSize.y)
        end
        local isSameCanvas = sectionData:GetCanvasSizeX() == canvasSize.x and sectionData:GetCanvasSizeY() == canvasSize.y
        if not sectionData:GetContentData() then
            for i, v in ipairs(contentList) do
                local key = sectionID * 100 + v.Num
                local content_item = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteContent, key)
                if not content_item then
                    content_item = X3DataMgr.AddByPrimary(X3DataConst.X3Data.AnecdoteContent, nil, key)
                end
                content_item:SetNum(v.Num)
                content_item:SetSectionID(v.SectionID)
                local original = UITextHelper.GetUIText(v.Content)
                local save_content = string.replace(original, "\n", string.format("\n%s", self.tab_info))
                local no_rich_content = UITextHelper.GetUIText(v.Content)
                content_item:SetContent(string.format("%s%s\n", self.tab_info, save_content))
                content_item:SetNoRichContent(string.format("%s\n", no_rich_content))
                sectionData:AddContentDataValue(content_item, v.Num)
            end
            saveData()
        elseif not isSameCanvas then
            saveData()
        end
    end
    return sectionData
end

---获取小节显示内容
---@param sectionData
---@return string X3Data.AnecdoteSection
function AnecdoteProxy:GetSectionContent(sectionData)
    ---@type X3Data.AnecdoteContent[]
    local contentData = sectionData:GetContentData()
    local showContent = ""
    if contentData then
        for i, v in ipairs(contentData) do
            showContent = showContent .. v:GetContent()
        end
    end
    return showContent
end

---获取原始小节显示内容
---@param sectionData
---@return string X3Data.AnecdoteSection
function AnecdoteProxy:GetNoRichContent(sectionData)
    ---@type X3Data.AnecdoteContent[]
    local contentData = sectionData:GetContentData()
    local content = ""
    if contentData then
        for i, v in ipairs(contentData) do
            content = content .. v:GetNoRichContent()
        end
    end
    return content
end

---@param text TMPro.TextMeshProUGUI
---@param content string
---@return int 当前内容占比宽度
function AnecdoteProxy:GetPreferredWidth(text, content)
    local vec = text:GetPreferredValues(content)
    return vec.x
end

function AnecdoteProxy:SortSecContent(content_list)
    local next_val = nil
    local next_index = 0
    for i, v in pairs(content_list) do
        if v.NextNum == 0 then
            next_val = v
            next_index = i
            break
        end
    end
    if next_index > 0 then
        table.remove(content_list, next_index)
    end
    table.sort(content_list, function(a, b)
        return a.NextNum < b.NextNum
    end)
    table.insert(content_list, #content_list + 1, next_val)
    return content_list
end

function AnecdoteProxy:GetOtherRoleRedState(role_id)
    local unlock_role = BllMgr.GetRoleBLL():GetUnlockedRole()
    local count = 0
    for i, v in pairs(unlock_role) do
        if v.Id ~= role_id then
            local roleAnecdote = self:GetAnecdoteData(v.Id)
            ---@type X3Data.AnecdoteItem[]
            local anecDatas = roleAnecdote:GetAnecdoteData()
            if anecDatas then
                for _, anecItem in pairs(anecDatas) do
                    if anecItem:GetState() == X3DataConst.StoryStatus.Normal then
                        if anecItem:GetStateType() == X3DataConst.StoryStateType.StoryStateTypeFinish or anecItem:GetIsNew() then
                            count = 1
                            break
                        else
                            ---@type X3Data.AnecdoteSection[]
                            local secList = anecItem:GetSectionData()
                            if secList then
                                for _, secItem in pairs(secList) do
                                    if secItem:GetIsNew() then
                                        count = 1
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ANECDOTE_SWITCHMAN, count, role_id)
end

function AnecdoteProxy:IsUnlock()
    return SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_ANECDOTE)
end

function AnecdoteProxy:CheckTLog()
    if next(self.tLogMap) then
        BllMgr.GetScoreStoryBLL():Send_TLogRemindTriggerRequest(self.tLogMap, function()
            table.clear(self.tLogMap)
        end)
    end
end

function AnecdoteProxy:OnClear()
    table.clear(self.checkMap)
end

return AnecdoteProxy