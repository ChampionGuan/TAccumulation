---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/4/26 16:14
---@class TaskProxy 任务数据
local TaskProxy = class("TaskProxy", BaseProxy)

TaskHideCondition = {
    Show = 0, ---不隐藏
    Hide = 1, ---隐藏
}

---更新TasksByConditionType埋点数据
---@param conditionType int ConditionType
---@param taskCfg cfg.TaskTable
---@param taskData X3Data.Task
local function UpdateTaskByConditionType(conditionType, taskCfg, taskData)
    if taskData:GetStatus() == X3DataConst.TaskStatus.TaskNotFinish then
        ---@type X3Data.TasksByConditionType
        local tasksByConditionType = X3DataMgr.Get(X3DataConst.X3Data.TasksByConditionType, conditionType)
        if tasksByConditionType == nil then
            tasksByConditionType = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TasksByConditionType, nil, conditionType)
        end
        tasksByConditionType:AddOrUpdateTasksValue(taskCfg.ID, 0)
    else
        ---@type X3Data.TasksByConditionType
        local tasksByConditionType = X3DataMgr.Get(X3DataConst.X3Data.TasksByConditionType, conditionType)
        if tasksByConditionType ~= nil then
            tasksByConditionType:RemoveTasksValue(taskCfg.ID)
        end
    end
end

---@param conditionType int ConditionType
---@param taskCfg cfg.TaskTable
---@param taskData X3Data.Task
local function AddTaskByConditionType(conditionType, taskCfg, taskData)
    if conditionType == 0 then
        return
    end
    if conditionType == X3_CFG_CONST.CONDITION_COMMONCONDITION then
        local conditionGroupId = taskCfg.Param1
        local conditionCfgList = ConditionCheckUtil.GetCommonConditionListByGroupId(conditionGroupId)
        for i = 1, #conditionCfgList do
            local conditionType = conditionCfgList[i].ConditionType
            UpdateTaskByConditionType(conditionType, taskCfg, taskData)
        end
    else
        UpdateTaskByConditionType(conditionType, taskCfg, taskData)
    end
end

---@param serverTaskData pbcmessage.Quest
---@return X3DataConst.TaskStatus
local function GetTaskStatusByServerData(serverTaskData)
    ---@type cfg.TaskTable
    local taskCfg = TaskProxy:GetTaskCfg(serverTaskData.ID)
    if taskCfg == nil or taskCfg.CycleTime == nil then
        return serverTaskData.RewardCnt > 0 and X3DataConst.TaskStatus.TaskFinish or X3DataConst.TaskStatus.TaskNotFinish
    else
        return serverTaskData.RewardCnt >= taskCfg.CycleTime.Num and X3DataConst.TaskStatus.TaskFinish or X3DataConst.TaskStatus.TaskNotFinish
    end
end

---设置状态任务Dic
local function SetTaskDic(taskId)
    ---@type cfg.TaskTable
    local taskCfg = TaskProxy:GetTaskCfg(taskId)
    if taskCfg == nil then
        return
    end
    ---@type X3Data.Task
    local taskData = X3DataMgr.Get(X3DataConst.X3Data.Task, taskId)
    if taskData == nil then
        return
    end
    if taskCfg.ConditionType == 0 and taskCfg.ForceCompleteCondition == nil then
        return
    end
    if taskCfg.ConditionType ~= 0 then
        AddTaskByConditionType(taskCfg.ConditionType, taskCfg, taskData)
    end
    if taskCfg.ForceCompleteCondition and #taskCfg.ForceCompleteCondition > 0 then
        local conditionType = taskCfg.ForceCompleteCondition[1]
        AddTaskByConditionType(conditionType, taskCfg, taskData)
    end
end

---强制完成条件是否满足 当条件满足时 任务直接变成可完成状态
---@param taskId int
local function CheckForceCompleteCondition(taskId)
    local taskCfg = TaskProxy:GetTaskCfg(taskId)
    if taskCfg == nil then
        return false
    end
    if taskCfg.ForceCompleteCondition ~= nil then
        return ConditionCheckUtil.CheckConditionByIntList(taskCfg.ForceCompleteCondition)
    end
    return false
end

local function CheckConditionTask(taskId, needNum)
    local taskCurTask = 0
    local taskCfg = TaskProxy:GetTaskCfg(taskId)
    local conditionRet = false
    local curNum = 0
    if taskCfg.ConditionType ~= 0 then
        --状态型任务
        local paramStr = PoolUtil.GetTable()
        table.insert(paramStr, taskCfg.Param1)
        table.insert(paramStr, taskCfg.Param2)
        table.insert(paramStr, taskCfg.Param3)
        table.insert(paramStr, taskCfg.Param4)
        table.insert(paramStr, taskCfg.Param5)
        if taskCfg.ScheduleParaNum ~= 0 and taskCfg.ScheduleParaNum <= #paramStr then
            needNum = paramStr[taskCfg.ScheduleParaNum] + needNum
            paramStr[taskCfg.ScheduleParaNum] = needNum
        end
        conditionRet, curNum = ConditionCheckUtil.SingleConditionCheck(taskCfg.ConditionType, paramStr)
        PoolUtil.ReleaseTable(paramStr)
    end
    if CheckForceCompleteCondition(taskCfg.ID) or conditionRet then
        taskCurTask = needNum
        return true, taskCurTask, needNum
    else
        if taskCfg.ScheduleParaNum ~= 0 then
            taskCurTask = curNum
        else
            taskCurTask = 0
        end
    end
    return false, taskCurTask, needNum
end

---判断任务是否可完成
---@param taskCfg cfg.TaskTable
local function IsCompleteByTaskId(taskCfg, serverData)
    local taskCurTask = 0
    local needNum = 0
    local taskData = serverData
    if taskCfg == nil then
        return false, taskCurTask, needNum
    end
    if taskCfg.CycleTime ~= nil then
        local addNum = taskCfg.CycleTime.ID
        if serverData.Status == X3DataConst.TaskStatus.TaskFinish then
            needNum = addNum * taskCfg.CycleTime.Num
        else
            needNum = addNum * taskData.RewardCnt
        end
    end
    if taskCfg.CounterNeed ~= 0 then
        --计数型任务
        needNum = taskCfg.CounterNeed + needNum
        if CheckForceCompleteCondition(taskCfg.ID) or taskData.Num >= needNum then
            if taskCfg.CycleTime ~= nil then
                taskCurTask = taskData.Num
            else
                taskCurTask = needNum
            end
            return true, taskCurTask, needNum
        else
            taskCurTask = taskData.Num
            return false, taskCurTask, needNum
        end
    else
        return CheckConditionTask(taskCfg.ID, needNum)
    end
    return false, taskCurTask, needNum
end

---创建任务数据
local function AddTaskData(serverTaskData, status, dataIsTaskId)
    if dataIsTaskId == nil then
        dataIsTaskId = false
    end
    local tempTaskData = nil
    if dataIsTaskId then
        tempTaskData = {}
        tempTaskData.ID = serverTaskData
    else
        tempTaskData = serverTaskData
    end
    local taskId = tempTaskData.ID
    ---@type cfg.TaskTable
    local taskCfg = TaskProxy:GetTaskCfg(taskId)
    if taskCfg == nil then
        --Debug.LogError("AddTaskData Fail TaskTable and Achievement is nil taskId:", taskId, "请联系相关策划,一般是服务器客户端配置不同步或者是老账号的问题导致")
        return
    end
    if taskCfg.TaskType then
        ---@type X3Data.TasksByTaskType
        local tasksByTaskType = X3DataMgr.Get(X3DataConst.X3Data.TasksByTaskType, taskCfg.TaskType)
        if tasksByTaskType == nil then
            tasksByTaskType = X3DataMgr.AddByPrimary(X3DataConst.X3Data.TasksByTaskType, nil, taskCfg.TaskType)
        end
        tasksByTaskType:AddOrUpdateTasksValue(taskId, 1)
    end
    ---@type X3Data.Task
    local taskData = X3DataMgr.Get(X3DataConst.X3Data.Task, taskId)
    if taskData == nil then
        taskData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.Task, nil, taskId)
    end
    if tempTaskData.RewardCnt then
        taskData:SetRewardCnt(tempTaskData.RewardCnt)
        taskData:SetCompleteTm(tempTaskData.CompleteTm)
    end
    taskData:SetStatus(status)
    if status == X3DataConst.TaskStatus.TaskFinish then
        taskData:SetNum(taskCfg.CounterNeed)
        taskData:SetIsAutoReward(false)
    else
        local isComplete, curProgressNum, needNum = IsCompleteByTaskId(taskCfg, tempTaskData)
        if isComplete then
            taskData:SetStatus(X3DataConst.TaskStatus.TaskCanFinish)
            if taskCfg.AutoReward == 1 then
                taskData:SetIsAutoReward(true)
            end
        else
            taskData:SetIsAutoReward(false)
        end
        taskData:SetIsComplete(isComplete)
        taskData:SetCurProgressNum(curProgressNum)
        taskData:SetNeedNum(needNum)
    end
    SetTaskDic(taskId)
end

---根据任务id 获取
---@param taskId int  任务id
---@return cfg.TaskTable or cfg.Achievement
function TaskProxy:GetTaskCfg(taskId)
    local taskCfg = nil
    taskCfg = LuaCfgMgr.Get("Task", taskId)
    return taskCfg
end
---初始化
function TaskProxy:OnInit()
    self:Subscribe()
    EventMgr.AddListener(GameConst.CommonConditionUpdate, self.RefTaskDic, self)
    EventMgr.AddListener("TaskDayRefEvent", self.OnTaskDayRefCallBack, self)
end

function TaskProxy:Subscribe()
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.Task, TaskProxy.OnTaskStateChange, TaskProxy,
            X3DataConst.X3DataField.Task.Status, X3DataConst.X3DataChangeFlag.AddOrModify)
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.Task, TaskProxy.OnTaskAutoRewardChange, TaskProxy,
            X3DataConst.X3DataField.Task.IsAutoReward, X3DataConst.X3DataChangeFlag.AddOrModify)
end

---@param taskData X3Data.Task
function TaskProxy:OnTaskStateChange(taskData)
    local taskId = taskData:GetPrimaryValue()
    EventMgr.Dispatch(GameConst.TaskEvent.TaskStatusChange, taskId)
end

---@param taskData X3Data.Task
function TaskProxy:OnTaskAutoRewardChange(taskData)
    if not taskData:GetIsAutoReward() then
        return
    end
    local taskId = taskData:GetPrimaryValue()
    BllMgr.GetTaskBLL():SendTaskFinish({ taskId }, true)
end

---获取当前所有任务
---@param filterFunc fun(x3Data:X3Data.X3DataBase):boolean 数据的筛选方法，为空就是返回所有的数据不筛选
---@return table<X3Data.Task>
function TaskProxy:GetAllTask(filterFunc)
    local ret = {}
    X3DataMgr.GetAll(X3DataConst.X3Data.Task, ret, filterFunc)
    return ret
end

---进入游戏 初始任务数据
function TaskProxy:OnEnterGame(taskMap, finTaskMap)
    for k, v in pairs(taskMap) do
        local taskStatus = GetTaskStatusByServerData(v)
        AddTaskData(v, taskStatus)
    end
    for k, v in pairs(finTaskMap) do
        AddTaskData(k, X3DataConst.TaskStatus.TaskFinish, true)
    end
    local allTask = self:GetAllTask(function(taskData)
        return not taskData:GetIsShow()
    end)
    for i, v in ipairs(allTask) do
        self:CheckTaskIsShow(v:GetPrimaryValue())
    end
    EventMgr.Dispatch("TaskEventCheckRp")
end

---收到状态任务数据刷新
function TaskProxy:RefTaskDic(conditionTypeList)
    local isChange = false
    for i = 1, #conditionTypeList do
        local conditionType = conditionTypeList[i]
        ---@type X3Data.TasksByConditionType
        local tasksByConditionType = X3DataMgr.Get(X3DataConst.X3Data.TasksByConditionType, conditionType)
        if tasksByConditionType ~= nil then
            local taskTab = tasksByConditionType:GetTasks()
            if taskTab then
                self:RefTaskDataTab(taskTab)
                if not isChange then
                    isChange = true
                end
            end
        end
    end
    if isChange then
        EventMgr.Dispatch("TaskEventCheckRp")
    end
end

---刷新任务
function TaskProxy:RefTaskDataTab(taskTab)
    for k, v in pairs(taskTab) do
        local taskData = self:GetTaskDataByTaskId(k)
        if taskData ~= nil then
            local needNum = 0
            local taskCfg = self:GetTaskCfg(k)
            if taskCfg then
                if taskCfg.CounterNeed ~= 0 then
                    ---计数型任务
                    if CheckForceCompleteCondition(taskCfg.ID) then
                        taskData:SetStatus(X3DataConst.TaskStatus.TaskCanFinish)
                        if taskCfg.AutoReward == 1 then
                            taskData:SetIsAutoReward(true)
                        end
                        taskData:SetIsComplete(true)
                        taskData:SetCurProgressNum(taskData:GetNeedNum())
                    end
                else
                    ---状态型任务
                    if taskCfg.CycleTime ~= nil then
                        local addNum = taskCfg.CycleTime.ID
                        if taskData:GetStatus() == X3DataConst.TaskStatus.TaskFinish then
                            needNum = addNum * taskCfg.CycleTime.Num
                        else
                            needNum = addNum * taskData:GetRewardCnt()
                        end
                    end
                    local isComplete, curProgressNum, needNum = CheckConditionTask(k, needNum)
                    if isComplete then
                        taskData:SetStatus(X3DataConst.TaskStatus.TaskCanFinish)
                        if taskCfg.AutoReward == 1 then
                            taskData:SetIsAutoReward(true)
                        end
                    else
                        taskData:SetIsAutoReward(false)
                    end
                    taskData:SetIsComplete(isComplete)
                    taskData:SetCurProgressNum(curProgressNum)
                    taskData:SetNeedNum(needNum)
                end
            end
        end
    end
end

---每日刷新任务
---@param isHaveWeek boolean --是否包含周任务
function TaskProxy:OnTaskDayRefCallBack(isHaveWeek)
    self:RemoveTask(isHaveWeek)
    self:SetDayAndWeekTask(isHaveWeek)
    EventMgr.Dispatch("TaskEventCheckRp")
    EventMgr.Dispatch("TaskDataUpdate")
end

---每日刷新时移除任务
function TaskProxy:RemoveTask(isHaveWeek)
    local allTask = self:GetAllTask()
    for i, v in ipairs(allTask) do
        local taskId = v:GetPrimaryValue()
        local taskCfg = self:GetTaskCfg(taskId)
        if taskCfg ~= nil then
            if taskCfg.RefreshType == Define.DateRefreshType.Day or (isHaveWeek and taskCfg.RefreshType == Define.DateRefreshType.Week) then
                self:RemoveTaskInfo(taskId)
            end
        end
    end
end

---每日刷新 重新计算每日和每周任务
function TaskProxy:SetDayAndWeekTask(isHaveWeek)
    local retTaskTab = LuaCfgMgr.Get("TaskTableRefreshType", Define.DateRefreshType.Day)
    if isHaveWeek then
        local weekTaskTab = LuaCfgMgr.Get("TaskTableRefreshType", Define.DateRefreshType.Week)
        for k, v in pairs(weekTaskTab) do
            table.insert(retTaskTab, v)
        end
    end
    for k, v in pairs(retTaskTab) do
        if (v.SystemUnlockID == 0 or SysUnLock.IsUnLock(v.SystemUnlockID)) and self:CheckPreTask(v) then
            local temServerData = {}
            temServerData.ID = v.ID
            temServerData.Num = 0
            if v.CounterType == X3_CFG_CONST.COUNTER_TYPE_CUMULATIVELOGIN or v.CounterType == X3_CFG_CONST.COUNTER_TYPE_CONTINUOUSLOGIN then
                temServerData.Num = temServerData.Num + 1
            end
            temServerData.RewardCnt = 0
            temServerData.CompleteTm = 0
            AddTaskData(temServerData, X3DataConst.TaskStatus.TaskNotFinish)
            self:CheckTaskIsShow(temServerData.ID)
        end
    end
end

---更新任务数据
function TaskProxy:UpdateTaskInfo(msgData)
    if msgData.Quests == nil then
        return
    end
    self:AddTaskInfo(msgData.Quests, msgData.OpType)
    if BllMgr.GetTaskBLL():GetIsRefreshView() then
        EventMgr.Dispatch("OnTaskUpdateCallBack", msgData)
    end
end

---更新完成任务的数据
---@param taskList pbcmessage.Quest[] 完成的任务IdList
function TaskProxy:UpdateFinishTask(taskList)
    for i = 1, #taskList do
        local taskStatus = GetTaskStatusByServerData(taskList[i])
        AddTaskData(taskList[i], taskStatus)
        EventMgr.Dispatch("TaskEventCheckRp", taskList[i].ID)
    end
end

---更新任务数据
function TaskProxy:AddTaskInfo(taskList, opType)
    for i = 1, #taskList do
        if opType == 1 or opType == 2 then
            local taskStatus = GetTaskStatusByServerData(taskList[i])
            AddTaskData(taskList[i], taskStatus)
        elseif opType == 3 then
            self:RemoveTaskInfo(taskList[i].ID)
        end
    end
    for i = 1, #taskList do
        local taskId = taskList[i].ID
        local taskData = self:GetTaskDataByTaskId(taskId)
        if taskData ~= nil and not taskData:GetIsShow() then
            self:CheckTaskIsShow(taskId)
        end
        EventMgr.Dispatch("TaskEventCheckRp", taskId)
    end
end

---移除任务
function TaskProxy:RemoveTaskInfo(taskId)
    X3DataMgr.Remove(X3DataConst.X3Data.Task, taskId)
    local taskCfg = self:GetTaskCfg(taskId)
    if taskCfg ~= nil then
        ---@type X3Data.TasksByTaskType
        local tasksByTaskTypeData = X3DataMgr.Get(X3DataConst.X3Data.TasksByTaskType, taskCfg.TaskType)
        if tasksByTaskTypeData then
            tasksByTaskTypeData:RemoveTasksValue(taskId)
        end
        if taskCfg.ConditionType ~= 0 then
            ---@type X3Data.TasksByConditionType
            local tasksByConditionType = X3DataMgr.Get(X3DataConst.X3Data.TasksByConditionType, taskCfg.ConditionType)
            if tasksByConditionType ~= nil then
                tasksByConditionType:RemoveTasksValue(taskId)
            end
        end
    end
end

---判断前置任务是否满足条件
function TaskProxy:CheckPreTask(taskCfg)
    local preTaskShow = true
    if taskCfg.PreID == nil then
        return preTaskShow
    end
    if taskCfg.PreTaskType == 1 then
        --and关系
        preTaskShow = true
        for i = 1, #taskCfg.PreID do
            local preTaskId = taskCfg.PreID[i]
            local preTaskData = self:GetTaskDataByTaskId(preTaskId, false)
            if preTaskData == nil then
                preTaskShow = false
                break
            else
                if preTaskData:GetStatus() == X3DataConst.TaskStatus.TaskNotFinish then
                    preTaskShow = false
                    break
                end
            end
        end
    elseif taskCfg.PreTaskType == 2 then
        --or关系
        preTaskShow = false
        for i = 1, #taskCfg.PreID do
            local preTaskId = taskCfg.PreID[i]
            local preTaskData = self:GetTaskDataByTaskId(preTaskId, false)
            if preTaskData ~= nil and (preTaskData:GetStatus() == X3DataConst.TaskStatus.TaskFinish or preTaskData:GetStatus() == X3DataConst.TaskStatus.TaskCanFinish) then
                preTaskShow = true
                break
            end
        end
    end
    return preTaskShow
end

---检查任务是否可显示 并设置数据
function TaskProxy:CheckTaskIsShow(taskId)
    local preTaskShow = true
    local displayShow = true
    ---@type X3Data.Task
    local taskData = X3DataMgr.Get(X3DataConst.X3Data.Task, taskId)
    local taskCfg = self:GetTaskCfg(taskId)
    if taskData == nil or taskCfg == nil then
        return
    end
    preTaskShow = self:CheckPreTask(taskCfg)
    if taskCfg.DisplayConditionCheck ~= nil then
        displayShow = ConditionCheckUtil.CheckConditionByIntList(taskCfg.DisplayConditionCheck)
    end
    local showCondition = true
    if taskData:GetStatus() == X3DataConst.TaskStatus.TaskFinish or taskData:GetStatus() == X3DataConst.TaskStatus.TaskCanFinish then
        if taskCfg.HideAfter == TaskHideCondition.Hide then
            showCondition = false
        end
    else
        if taskCfg.HideBefore == TaskHideCondition.Hide then
            showCondition = false
        end
    end
    local isShow = preTaskShow and displayShow and showCondition
    taskData:SetIsShow(isShow)
    return isShow
end

---根据任务id 获取任务实例
---@return X3Data.Task
function TaskProxy:GetTaskDataByTaskId(taskId, isJudgeShow)
    if isJudgeShow == nil then
        isJudgeShow = true
    end
    local taskData = X3DataMgr.Get(X3DataConst.X3Data.Task, taskId)
    if taskData == nil then
        return nil
    end
    if isJudgeShow then
        self:CheckTaskIsShow(taskId)
    end
    return taskData
end

---@return table<X3Data.Task>
function TaskProxy:GetTaskListByTaskType(taskType)
    local ret = {}
    ---@type X3Data.TasksByTaskType
    local tasksByTaskType = X3DataMgr.Get(X3DataConst.X3Data.TasksByTaskType, taskType)
    if tasksByTaskType then
        local taskIdList = tasksByTaskType:GetTasks()
        if taskIdList then
            for k, v in pairs(taskIdList) do
                local taskData = self:GetTaskDataByTaskId(k)
                if taskData and taskData:GetIsShow() then
                    table.insert(ret, taskData)
                end
            end
        end
    end
    return ret
end
--endregion

return TaskProxy