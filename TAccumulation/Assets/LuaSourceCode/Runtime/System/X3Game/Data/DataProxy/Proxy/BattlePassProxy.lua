---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiantao.
--- DateTime: 2022/12/12 16:23
---
---@class BattlePassProxy BattlePass数据
local BattlePassProxy = class("BattlePassProxy", BaseProxy)

---构造函数
function BattlePassProxy:OnInit()
    ---@type X3Data.BattlePassData
    self.battlePassData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.BattlePassData)
    ---领奖状态枚举
    self.enumAwardState = {
        none = 0,
        free = 1,
        pay = 2,
        all = 3,
    }
    self.battlePassExpID = 322
end

function BattlePassProxy:GetMaxLevel()
    local id = self.battlePassData:GetID()
    local battlePassCfg = LuaCfgMgr.Get("Battlepass", id)
    if battlePassCfg then
        return battlePassCfg.MaxLv
    end
    return -1
end
---更新BattlePass数据
function BattlePassProxy:UpdateData(serverInfo)
    if serverInfo == nil then
        return
    end
    local serverData = serverInfo
    local battlePassCfg = LuaCfgMgr.Get("Battlepass", serverData.ID)
    if battlePassCfg == nil then
        Debug.LogErrorFormat("BattlePass服务器ID%d与配置不一致", serverData.ID)
        return
    end
    self.battlePassData:SetID(serverData.ID)
    local refreshTime = TimeRefreshUtil.GetNextRefreshTime(serverData.LastRefreshTime, Define.DateRefreshType.Week)
    local nowTime = TimerMgr.GetCurTimeSeconds()
    if nowTime >= refreshTime then
        self.battlePassData:SetWeeklyRewardClaim(false)
    else
        self.battlePassData:SetWeeklyRewardClaim(serverData.WeeklyRewardClaim)
    end
    self.battlePassData:SetLastRefreshTime(serverData.LastRefreshTime)
    local levelExp = battlePassCfg.Exp
    local extraLevelExp = battlePassCfg.ExtraExp
    local maxLevel = battlePassCfg.MaxLv
    local level
    local exp
    local extraLevel
    if serverData.Exp < levelExp * maxLevel then
        level = math.floor(serverData.Exp / levelExp)
        exp = serverData.Exp - level * levelExp
        extraLevel = 0
    else
        level = maxLevel
        extraLevel = math.floor((serverData.Exp - levelExp * maxLevel) / extraLevelExp)
        exp = (serverData.Exp - level * levelExp) % extraLevelExp
    end
    self.battlePassData:SetLevel(level)
    self.battlePassData:SetExp(exp)
    self.battlePassData:SetExtraLevel(extraLevel)
    self.battlePassData:ClearRewardClaimedValue()
    for k, v in pairs(serverData.RewardClaimed) do
        self.battlePassData:AddOrUpdateRewardClaimedValue(k, v)
    end
    self.battlePassData:ClearPayIDsValue()
    for k, v in pairs(serverData.PayIDs) do
        self.battlePassData:AddOrUpdatePayIDsValue(k, v)
    end
end
---增加BattlePass经验
function BattlePassProxy:UpdateBattlePassExp(reply)
    if reply.BattlePassID ~= self.battlePassData:GetID() then
        return
    end
    local maxLevel = self:GetMaxLevel()
    local level
    local extraLevel
    local battlePassCfg = self:GetBattlePassCfg()
    local levelExp = battlePassCfg.Exp
    local extraLevelExp = battlePassCfg.ExtraExp
    local exp
    local totalExp = reply.Exp
    if totalExp < levelExp * maxLevel then
        level = math.floor(totalExp / levelExp)
        exp = totalExp - level * levelExp
        extraLevel = 0
    else
        level = maxLevel
        extraLevel = math.floor((totalExp - levelExp * maxLevel) / extraLevelExp)
        exp = (totalExp - level * levelExp) % extraLevelExp
    end
    self.battlePassData:SetLevel(level)
    self.battlePassData:SetExtraLevel(extraLevel)
    self.battlePassData:SetExp(exp)
end
---更新付费状态
function BattlePassProxy:UpdatePayInfo(reply)
    if reply.BattlePassID == self.battlePassData:GetID() then
        self.battlePassData:AddOrUpdatePayIDsValue(reply.PayID, true)
        if reply.PayID == self:GetBattlePassCfg().JuniorPayID then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_40050)
        end
    end
end
---领取每周宝箱
function BattlePassProxy:UpdateWeeklyReward(reply)
    self.battlePassData:SetWeeklyRewardClaim(true)
    self.battlePassData:SetLastRefreshTime(TimerMgr.GetCurTimeSeconds())
end

function BattlePassProxy:IsAwardHasGet(level, type)
    local awardList = self.battlePassData:GetRewardClaimed()
    if awardList == nil then
        return false
    end
    local awardState = awardList[level]
    if awardState == nil then
        return false
    end
    return awardState == type or awardState == self.enumAwardState.all
end

function BattlePassProxy:GetLevelAwardState(level)
    local awardList = self.battlePassData:GetRewardClaimed()
    if awardList == nil then
        return  self.enumAwardState.none
    end
    local awardState = awardList[level]
    if awardState == nil then
        return self.enumAwardState.none
    end
    return awardState
end

---更新奖励领取状态
function BattlePassProxy:UpdateAwardInfo(msg)
    local awardInfo = msg.SucceedLevels
    for k,v in pairs(awardInfo) do
        if v == self.enumAwardState.pay then
            if self:IsAwardHasGet(k, self.enumAwardState.free) then
                self.battlePassData:AddOrUpdateRewardClaimedValue(k, self.enumAwardState.all)
            else
                self.battlePassData:AddOrUpdateRewardClaimedValue(k, v)
            end
        elseif v == self.enumAwardState.free then
            if self:IsAwardHasGet(k, self.enumAwardState.pay) then
                self.battlePassData:AddOrUpdateRewardClaimedValue(k, self.enumAwardState.all)
            else
                self.battlePassData:AddOrUpdateRewardClaimedValue(k, v)
            end
        else
            self.battlePassData:AddOrUpdateRewardClaimedValue(k, v)
        end
    end
end
---获取当前的配置
function BattlePassProxy:GetBattlePassCfg()
    local battlePassCfg = LuaCfgMgr.Get("Battlepass", self.battlePassData:GetID())
    return battlePassCfg
end
---跨周时重置每周宝箱
function BattlePassProxy:TryResetWeeklyAward()
    local refreshTime = TimeRefreshUtil.GetNextRefreshTime(self.battlePassData:GetLastRefreshTime(), Define.DateRefreshType.Week)
    local nowTime = TimerMgr.GetCurTimeSeconds()
    if nowTime >= refreshTime then
        self.battlePassData:SetWeeklyRewardClaim(false)
    end
end

return BattlePassProxy