---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/5/5 15:18
--- 玩家个人信息相关
---@class PlayerInfoProxy:BaseProxy
local PlayerInfoProxy = class("PlayerInfoProxy", BaseProxy)

---@class personalHead
---@field Type number
---@field CardId number
---@field HeadPhoto

---@class personalTitle
---@field TitlePrefix int
---@field TitleSuffix int
---@field TitleBg int
---@field StandaloneTitle int
function PlayerInfoProxy:OnInit()
    ---@type int
    self.uid = 0
    ---@type string
    self.shortUid = nil
    ---@type string
    self.familyName = nil
    ---@type string
    self.firstName = nil
    ---@type string
    self.name = nil
    ---@type int
    self.level = 0
    ---@type int
    self.exp = 0
    ---@type int
    self.createTime = 0
    ---@type int
    self.birthday = 0
    ---@type pbcmessage.PersonalHead
    self.head = nil
    ---@type  pbcmessage.Photo[]
    self.historyHeads = nil
    ---@type string
    self.coverUrl = nil
    ---@type int
    self.frameId = nil
    ---@type personalTitle
    self.title = nil
    ---@type string
    self.desc = nil

    ---@type table<int, int>
    self.showCard = nil

    ---@type table<number,pbcmessage.Frame>
    self.frameMap = nil
    ---@type table<number,pbcmessage.Title>
    self.titleMap = nil
    ---@type int[] 有New红点的羁绊卡头像列表
    self.cardHeadRPMap = nil

    ---@type int 设置名字的次数
    self.setNameNum = nil
    ---@type int 登录次数
    self.loginNum = nil
    ---@type int 持续登录
    self.cLoginNum = nil
    ---@type int 上一次登录的时间
    self.lastLoginTime = nil
    ---@type int 今天登录的次数 如果5点在线则+1
    self.loginNumToday = nil

    ---@type int
    self.delTime = 0

    ---@type string
    self.faceUrl = nil

    ---@type bool
    self.isMainPlayer = true

    ---@type string
    self.ipLocation = ""
    ---@type boolean
    self.isShowIpLocation = true

    ---@type X3Data.LoginData
    self.loginData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.LoginData)
    --遵循在登陆前使用的数据必须设置主键的规范
    self.loginData:SetPrimaryValue(1)

    ---@type table<number, pbcmessage.HeadIcon> headItem索引表
    self.headItemMap = {}
end

---@param uid int
---@param personal pbcmessage.PersonalData
---@param base pbcmessage.ClientBase
---@param frameData pbcmessage.FrameData
---@param titleData pbcmessage.TitleData
function PlayerInfoProxy:OnEnterGame(uid, personal, base, frameData, titleData)
    self.isMainPlayer = true
    self.uid = uid
    self.shortUid = string.format("%06d", uid % 1000000)

    self.familyName = GameHelper.FilterSensitiveWord(base.FamilyName)
    self.firstName = GameHelper.FilterSensitiveWord(base.Name)
    self.level = base.Level
    self.exp = base.Exp
    self.createTime = base.CreateTime
    self.birthday = base.Birthday
    self.name = self:getConcatName()
    self.name = GameHelper.FilterSensitiveWord(self.name)

    if personal.Head then
        self.head = personal.Head
    else
        self.head = { Type = 0, CardId = 0 }
    end
    self.headItemMap = personal.HeadIconMap

    self.historyHeads = personal.Head and personal.Head.HistoryPhoto or {}
    self.coverUrl = (personal.Cover and personal.Cover.Cover) and personal.Cover.Cover.Url or ""
    self.frameId = frameData.FrameID
    self.title = { TitlePrefix = titleData.TitlePrefix, TitleSuffix = titleData.TitleSuffix, TitleBg = titleData.TitleBg, StandaloneTitle = titleData.StandaloneTitle }
    self.desc = GameHelper.FilterSensitiveWord(personal.Desc)
    self.showCard = personal.CardMap or {}
    
    --------------------------------------------------------------------------------------------------------------------------------------
    -- 照片展示相关：
    -- 如果是当前玩家 showPhoto 是最近一次设置的展示照片(设置和编辑的界面用);  lastAuditPermitPhotoMap 是被展示的照片 (个人信息界面用);
    -- 如果是查看其他玩家 以showPhoto为准(个人信息界面);
    self.showPhoto = personal.PhotoMap or {}
    self.lastAuditPermitPhotoMap = personal.LastAuditPermitPhotoMap or {}
    --------------------------------------------------------------------------------------------------------------------------------------
    
    self.frameMap = frameData.FrameMap or {}
    self.titleMap = titleData.TitleMap or {}
    self.cardHeadRPMap = personal.CardHeadRedPointMap or {}

    self.setNameNum = base.SetNameNum
    self.loginNum = base.LoginNum
    self.cLoginNum = base.CLoginNum
    self.lastLoginTime = base.LastLoginTime
    self.loginNumToday = base.LoginNumToday

    self.nickNameData = base.NicknameData

    self.delTime = base.DelTime

    self.ipLocation = personal.IPLocation

    --region 邮箱手机绑定
    self.bindPhone = base.BindPhone ~= 0 and base.BindPhone or nil--玩家绑定的手机号
    self.bindEmail = base.BindEmail;  --玩家绑定的邮箱号
    --endregion

    BllMgr.GetPlayerBLL():onSyncUserTotalData()

    local fontUtil = require("Runtime.System.X3Game.Modules.InputFieldAndFont.FontUtil")
    fontUtil.TryBakeCharacters(self.name)
end

---@param base pbcmessage.SnsBaseData
---@param extra pbcmessage.SnsExtraData
function PlayerInfoProxy:InitOtherData(uid, base, extra)
    self.delTime = base.DelTime
    self.isMainPlayer = false

    if self.delTime == 0 or self.delTime > TimerMgr.GetCurTimeSeconds() then
        self.uid = uid
        self.shortUid = string.format("%06d", uid % 1000000)

        self.familyName = GameHelper.FilterSensitiveWord(base.FamilyName)
        self.firstName = GameHelper.FilterSensitiveWord(base.Name)
        self.level = base.Level
        self.exp = 0
        self.createTime = extra.CreateTime
        self.birthday = base.Birthday
        self.name = self:getConcatName()
        self.name = GameHelper.FilterSensitiveWord(self.name)
        self.head = base.Head
        self.historyHeads = base.Head.HistoryPhoto or {}
        --self.coverUrl = (extra.Cover and extra.Cover.Cover) and extra.Cover.Cover.Url or ""
        self.coverUrl = extra.CoverUrl or ""
        self.frameId = base.FrameID
        self.title = { TitlePrefix = base.TitlePrefix, TitleSuffix = base.TitleSuffix, TitleBg = base.TitleBg, StandaloneTitle = base.StandaloneTitle }
        self.desc = GameHelper.FilterSensitiveWord(base.Desc)
        self.showCard = {}
        for k, v in pairs(extra.CardMap) do
            self.showCard[k] = v.Id
        end
        self.showPhoto = extra.PhotoMap or {}
        self.frameMap = base.FrameMap or {}
        self.titleMap = base.TitleMap or {}

        self.cardShow = extra.CardShow
        self.isPhotoShow = extra.PhotoShow  -- 是否显示大图
        
        -- 总牵绊度
        self.totalLovePoint = extra.TotalLovePoint or 0

        self.loginNumToday = 0
        self.faceUrl = base.KneadFaceUrl
        self.ipLocation = base.IPLocation
        self.isShowIpLocation = base.IPLocationShow
    else
        self.uid = uid
        self.shortUid = string.format("%06d", uid % 1000000)

        self.familyName = UITextHelper.GetUIText(UITextConst.UI_TEXT_37060)
        self.firstName = ""
        self.name = UITextHelper.GetUIText(UITextConst.UI_TEXT_37060)

        self.level = base.Level
        self.exp = 0
        self.createTime = extra.CreateTime or 0
        self.birthday = base.Birthday

        self.head = base.Head
        self.faceUrl = base.KneadFaceUrl

        self.historyHeads = nil
        self.coverUrl = ""
        self.frameId = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.INITIALFRAME)
        self.title = { TitlePrefix = 0, TitleSuffix = 0, TitleBg = 0, StandaloneTitle = 0 }
        self.desc = GameHelper.FilterSensitiveWord(base.Desc)
        self.showCard = {}
        self.showPhoto = {}
        self.frameMap = {}
        self.titleMap = {}

        self.cardShow = extra.CardShow
        self.isPhotoShow = extra.PhotoShow  -- 是否显示大图

        -- 总牵绊度
        self.totalLovePoint = extra.TotalLovePoint or 0

        self.loginNumToday = 0
        self.ipLocation = base.IPLocation
        self.isShowIpLocation = base.IPLocationShow
    end
end

--region Get
function PlayerInfoProxy:GetTotalLovePoint()
    return self.totalLovePoint
end

function PlayerInfoProxy:GetUid()
    return self.uid
end

function PlayerInfoProxy:GetShortUid()
    return self.shortUid
end

function PlayerInfoProxy:GetFamilyName()
    return self.familyName
end

function PlayerInfoProxy:GetFirstName()
    return self.firstName
end

function PlayerInfoProxy:GetCustomNickNameMap()
    if self.nickNameData and self.nickNameData.CustomizedNicknames then
        return self.nickNameData.CustomizedNicknames or {}
    end
    return {}
end

function PlayerInfoProxy:GetName()
    ---暂时先这样写，需要优化 by oreo
    if self.delTime ~= 0 or self.delTime <= TimerMgr.GetCurTimeSeconds() then
        self.name = self:getConcatName()
        self.name = GameHelper.FilterSensitiveWord(self.name)
    end
    return self.name
end

function PlayerInfoProxy:GetBirthDay()
    return self.birthday
end

function PlayerInfoProxy:GetLevel()
    return self.level
end

function PlayerInfoProxy:GetExp()
    return self.exp
end

function PlayerInfoProxy:GetCreateTime()
    return self.createTime
end

function PlayerInfoProxy:GetHead()
    return self.head
end

---@return pbcmessage.PersonalHead
function PlayerInfoProxy:GetFaceHead()
    return { Type = 0, CardId = 0, HeadPhoto = { Url = BllMgr.GetFaceBLL():GetFaceName() } }
end

function PlayerInfoProxy:GetHistoryHeads()
    return self.historyHeads
end

function PlayerInfoProxy:GetCoverUrl()
    return self.coverUrl
end

function PlayerInfoProxy:GetFrame()
    return self.frameId
end

function PlayerInfoProxy:GetTitle()
    return self.title
end

function PlayerInfoProxy:GetDesc()
    return self.desc
end

function PlayerInfoProxy:GetShowCard()
    return self.showCard
end

------------------------------------------------------------------------------------------------------------------------
-- 获取展示照片的两个接口 只有处理照片审核失败这种边界情况时这两个接口的获取内容才有区别
---@public 获取当前被展示的照片
function PlayerInfoProxy:GetShowPhoto()
    if self.isMainPlayer then
        return self.lastAuditPermitPhotoMap
    else
        return self.showPhoto
    end
end

---@public 在编辑界面获取最近被编辑的照片
function PlayerInfoProxy:GetShowPhotoInEdit()
    return self.showPhoto
end
------------------------------------------------------------------------------------------------------------------------

-- 返回是否可查看照片大图设置
function PlayerInfoProxy:GetIsPhotoShow()
    return self.isPhotoShow
end

-- 获取当日修改展示照片次数
function PlayerInfoProxy:GetShowPhotoSetCount()
    return SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypePersonalPhotoShowSetCount)
end

function PlayerInfoProxy:GetFrameMap()
    return self.frameMap
end

function PlayerInfoProxy:GetTitleMap()
    return self.titleMap
end

function PlayerInfoProxy:GetCardHeadRPMap()
    return self.cardHeadRPMap
end

function PlayerInfoProxy:GetSetNameNum()
    return self.setNameNum
end

function PlayerInfoProxy:GetLoginNum()
    return self.loginNum
end

--获取创角后度过的天数
function PlayerInfoProxy:GetCreateRolePassDayNum()
    return self:_GetCreateDays(self:GetCreateTime())
end

function PlayerInfoProxy:_GetCreateDays(createTime)
    local time = TimerMgr.GetCurTimeSeconds() - createTime
    local days = math.ceil(time / (60 * 60 * 24))
    return days
end
---@public获取创角后度过的天数,会考虑5点的跨天
---例如2号凌晨4点59分创角与1号凌晨5点创角，在2号凌晨5点都算过了一天
---@return number
function PlayerInfoProxy:GetCreateRolePassResetDayNum()
    local createTime = self:GetCreateTime()
    return TimeUtil.GetOpenDay(createTime)
end

function PlayerInfoProxy:GetCLoginNum()
    return self.cLoginNum
end

function PlayerInfoProxy:GetLastLoginTime()
    return self.lastLoginTime
end

function PlayerInfoProxy:GetLoginNumToday()
    return self.loginNumToday
end

function PlayerInfoProxy:GetDelTime()
    return self.delTime or 0
end
---@return string|nil 绑定的邮箱，没有则未绑定（海外）
function PlayerInfoProxy:GetBindEmail()
    return self.bindEmail or nil
end
---@return number|nil 绑定的手机，没有则未绑定（国内）
function PlayerInfoProxy:GetBindPhone()
    return self.bindPhone or nil
end
---@param email string 设置绑定的邮箱（海外）
function PlayerInfoProxy:SetBindEmail(email)
    self.bindEmail = email
end
---@param number string 设置绑定的邮箱（国内）
function PlayerInfoProxy:SetBindPhone(number)
    self.bindPhone = number
end

function PlayerInfoProxy:GetCardShow()
    return self.cardShow
end

function PlayerInfoProxy:HasFrame(id)
    return self.frameMap and self.frameMap[id]
end

function PlayerInfoProxy:HasTitle(id)
    return self.titleMap and self.titleMap[id]
end

function PlayerInfoProxy:GetNickNameData(roleId)
    if roleId and roleId ~= 0 then
        return self.nickNameData.CustomizedNicknames[roleId] or {}
    end

    return self.nickNameData.GenericNickname or {}
end

function PlayerInfoProxy:GetNickName(roleId, savedName)
    if not self.nickNameData then
        return ""
    end
    if roleId and roleId ~= 0 then
        if not self.nickNameData.CustomizedNicknames then
            return ""
        end
        local nickData = self.nickNameData.CustomizedNicknames[roleId]

        if nickData and not string.isnilorempty(nickData.Nickname) then
            return nickData.Nickname
        elseif savedName then
            return ""
        end
    end

    return self.nickNameData.GenericNickname and self.nickNameData.GenericNickname.Nickname or ""
end

function PlayerInfoProxy:GetFaceUrl()
    local rawUrl = nil
    if self.isMainPlayer then
        rawUrl = BllMgr.GetFaceBLL():GetFaceName()
    else
        rawUrl = self.faceUrl
    end
    local results = string.split(rawUrl, "?faceVersion=")
    return results and results[1] or rawUrl
end

function PlayerInfoProxy:GetFaceUrlVersion()
    local url = BllMgr.GetFaceBLL():GetFaceName()
    if not string.isnilorempty(url) then
        local results = string.split(url, "?faceVersion=")
        return results and results[2] and tonumber(results[2])
    end
end

---如果不显示IP就返回 ""
function PlayerInfoProxy:GetIpLocation()
    if self.isMainPlayer then
        return self.ipLocation
    else
        if self.isShowIpLocation then
            return self.ipLocation
        end
    end

    return 0
end
--endregion

--region UpdateValue
function PlayerInfoProxy:BaseLevelExpUpdate(exp, level)
    if (self.level ~= level) then
        BllMgr.GetTipsBLL():ShowLevelUpWnd(SelfProxyFactory.GetPlayerInfoProxy():GetLevel(), level)
        self.level = level
        EventMgr.Dispatch(NoviceGuideDefine.Event.CLIENT_LEVEL_CHANGE, level)
        EventMgr.Dispatch("EVENT_LEVEL_UP", self.level)
        SDKMgr.TrackLevelUpEvent(level)
    end
    self.exp = exp
end

function PlayerInfoProxy:BaseInfoUpdate(base)
    self.familyName = base.FamilyName
    self.firstName = base.Name
    if (self.level ~= base.Level) then
        self.level = base.Level
        EventMgr.Dispatch(NoviceGuideDefine.Event.CLIENT_LEVEL_CHANGE, self.level)
        EventMgr.Dispatch("EVENT_LEVEL_UP", self.level)
    end
    self.exp = base.Exp
    self.createTime = base.CreateTime
    self.birthday = base.Birthday

    self.setNameNum = base.SetNameNum
    self.loginNum = base.LoginNum
    self.cLoginNum = base.CLoginNum
    self.lastLoginTime = base.LastLoginTime
    self.loginNumToday = base.LoginNumToday
    self.name = self:getConcatName()

    EventMgr.Dispatch("PlayerBLL.UpdateBaseInfo")
end

function PlayerInfoProxy:ResetLogin()
    self.lastLoginTime = GrpcMgr.GetServerTime()
    self.loginNumToday = 1
    if self.loginNum then self.loginNum = self.loginNum + 1 else
        Debug.LogError("LoginNum is nil!")
    end
    if self.cLoginNum then self.cLoginNum = self.cLoginNum + 1 else
        Debug.LogError("cLoginNum is nil!")
    end
    EventMgr.Dispatch("PlayerBLL.UpdateBaseInfo")
end

function PlayerInfoProxy:ResetNickNameSetNum()
    if self.nickNameData.GenericNickname then
        self.nickNameData.GenericNickname.SetNicknameNum = 0
    end

    if self.nickNameData.CustomizedNicknames then
        for _, v in pairs(self.nickNameData.CustomizedNicknames) do
            v.SetNicknameNum = 0
        end
    end
end

function PlayerInfoProxy:UpdateName(data)
    self.familyName = data.FamilyName
    self.firstName = data.Name
    self.name = self:getConcatName()

    EventMgr.Dispatch("NameUpdateCallBack")
end
---@return string 返回应该拼好的名字
function PlayerInfoProxy:getConcatName(firstName,familyName)
    if not firstName then
        firstName =  self.firstName
    end
    if not familyName then
        familyName =  self.familyName
    end
    return BllMgr.GetPlayerBLL():GetConcatName(firstName,familyName)
end
---@param data pbcmessage.SetNicknameReply
function PlayerInfoProxy:UpdateNickName(data, isCreate)
    ---@type pbcmessage.NicknameUnit
    local nickNameData

    if data.RoleId and data.RoleId ~= 0 then
        if self.nickNameData.CustomizedNicknames[data.RoleId] == nil then
            self.nickNameData.CustomizedNicknames[data.RoleId] = { SetNicknameNum = 0 }
        end
        nickNameData = self.nickNameData.CustomizedNicknames[data.RoleId]
    else
        nickNameData = self.nickNameData.GenericNickname
        nickNameData.SetNicknameNum = nickNameData.SetNicknameNum and nickNameData.SetNicknameNum or 0
    end

    nickNameData.Nickname = data.Nickname
    nickNameData.SetNicknameNum = nickNameData.SetNicknameNum + (isCreate and 0 or 1)
    nickNameData.SetTime = TimerMgr.GetCurTimeSeconds()

    EventMgr.Dispatch("NickName_UpdateCallBack")
end

function PlayerInfoProxy:UpdateBirthday(birthday)
    self.birthday = birthday
    EventMgr.Dispatch("Birthday_UpdateCallBack", birthday)
end

function PlayerInfoProxy:UpdateDesc(desc)
    self.desc = desc
    EventMgr.Dispatch("Desc_UpdateCallBack")
end

function PlayerInfoProxy:UpdateShowCard(cardMap)
    for k, _ in pairs(cardMap) do
        self.showCard[k] = cardMap[k]
    end

    EventMgr.Dispatch("ShowCard_UpdateCallBack")
end

---@param photoMap  table<number,pbcmessage.PersonalShowPhoto> @ Index, 上一次设置展示的照片
---@param lastAuditPermitPhotoMap  table<number,pbcmessage.PersonalShowPhoto> @ Index, 当前被展示的照片
function PlayerInfoProxy:UpdateShowPhoto(photoMap, lastAuditPermitPhotoMap)
    --Debug.LogError("照片展示信息更新: " .. table.dump({
    --    showPhoto = photoMap or {},
    --    lastAuditPermitPhotoMap = lastAuditPermitPhotoMap or {}
    --}))
    
    self.showPhoto = photoMap or {}
    self.lastAuditPermitPhotoMap = lastAuditPermitPhotoMap or {}
    
    BllMgr.GetPlayerBLL():SyncShowPhotoMap()

    EventMgr.Dispatch("ShowPhoto_UpdateCallBack")
end

function PlayerInfoProxy:UpdateCover(cover)
    if cover and cover.Cover then
        self.coverUrl = cover.Cover.Url
    else
        self.coverUrl = ""
    end

    EventMgr.Dispatch("CoverImg_UpdateCallBack", self.coverUrl)
end

---@param requestHead pbcmessage.SetPersonalHeadRequest
function PlayerInfoProxy:ChangeHead(requestHead)
    self.head = requestHead
    EventMgr.Dispatch(PlayerEnum.EventMap.PlayerIconChange)
end

---@param data pbcmessage.UpdatePersonalHeadReply
function PlayerInfoProxy:UpdateHead(data)
    self.head = data.Head

    EventMgr.Dispatch(PlayerEnum.EventMap.PlayerIconChange)

    local preHistory = self.historyHeads
    self.historyHeads = data.Head.HistoryPhoto

    if #preHistory ~= #data.Head.HistoryPhoto then
        EventMgr.Dispatch("HeadIcon_HistoryListUpdate")
    else
        for i = 1, #preHistory do
            if preHistory[i].Status ~= data.Head.HistoryPhoto[i].Status then
                EventMgr.Dispatch("HeadIcon_HistoryListUpdate", i, data.Head.HistoryPhoto[i].Status)
                break
            end
        end
    end
end

function PlayerInfoProxy:FrameChange(frameID)
    self.frameId = frameID
    EventMgr.Dispatch(PlayerEnum.EventMap.PlayerFrameChange)
end

---@public 根据Id获取头像框数据
---@param frameId number 头像框Id
---@return pbcmessage.Frame
function PlayerInfoProxy:GetFrameDataById(frameId)
    self.frameMap = self.frameMap or {}
    return self.frameMap[frameId]
end

function PlayerInfoProxy:FrameClearRed(clearList)
    for i = 1, #clearList do
        if self.frameMap[clearList[i]] then
            RedPointMgr.Save(0, X3_CFG_CONST.RED_PLAYERINFO_FRAME_SINGLE, clearList[i])
            BllMgr.GetPlayerBLL():UpdateFrameRed(clearList[i])
        end
    end
end

---@param data pbcmessage.FrameData
function PlayerInfoProxy:FrameUpdate(data)
    if #data.FrameList ~= 0 then
        for i = 1, #data.FrameList do
            self.frameMap[data.FrameList[i].FrameID] = data.FrameList[i]
            BllMgr.GetPlayerBLL():UpdateFrameRed(data.FrameList[i].FrameID)
        end
    end

    EventMgr.Dispatch(PlayerEnum.EventMap.PlayerFrameDataUpdate)
end

function PlayerInfoProxy:TitleChange(titlePrefix, titleSuffix, titleBg, standaloneTitle)
    if self.title.TitlePrefix ~= titlePrefix then
        self.title.TitlePrefix = titlePrefix
    end

    if self.title.TitleSuffix ~= titleSuffix then
        self.title.TitleSuffix = titleSuffix
    end

    if self.title.TitleBg ~= titleBg then
        self.title.TitleBg = titleBg
    end

    if self.title.StandaloneTitle ~= standaloneTitle then
        self.title.StandaloneTitle = standaloneTitle
    end

    EventMgr.Dispatch("Title_ChangeCallBack")
end

---@param addList table<number,pbcmessage.Title> 玩家头像框数据
function PlayerInfoProxy:TitleUpdate(addList)
    if #addList ~= 0 then
        for i = 1, #addList do
            self.titleMap[addList[i].TitleID] = addList[i]
            BllMgr.GetPlayerBLL():UpdateTitleRed(addList[i].TitleID)
        end
    end
    EventMgr.Dispatch("Title_UpdateCallBack", #addList ~= 0)
end

-- 头像Item类型资产数据更新
---@param headItemDataList pbcmessage.HeadIcon[]
function PlayerInfoProxy:HeadIconItemUpdate(opCode, headItemDataList)
    if not opCode or table.isnilorempty(headItemDataList) then
        return
    end
    if opCode == 1 then
        for _, headItemData in pairs(headItemDataList) do
            local itemId = headItemData.ID
            self.headItemMap[itemId] = headItemData
        end

    elseif opCode == 2 then
        -- 头像目前没有删除

    end
    EventMgr.Dispatch(PlayerEnum.EventMap.HeadItemUpdate)
end

-- 获取头像Item数据
---@param headItemId number 头像Item类型ItemId
function PlayerInfoProxy:GetHeadIconItemData(headItemId)
    local itemCfg = LuaCfgMgr.Get("Item", headItemId)
    if not itemCfg then
        Debug.LogError("ItemCfg not found, ItemId : " .. headItemId)
        return
    end
    return self.headItemMap[headItemId]
end

-- 获取所有头像Item类型资产列表
---@param roleId number 男主Id 如果传入则筛选一下
---@return table<number, pbcmessage.HeadIcon>
function PlayerInfoProxy:GetAllHeadIconItemList(roleId)
    local itemList = {}
    for _, v in pairs(self.headItemMap) do
        local itemCfg = LuaCfgMgr.Get("Item", v.ID)
        local _roleId = itemCfg.Role
        if _roleId <= 0 or not roleId or roleId <= 0 or _roleId == roleId then
            table.insert(itemList, table.clone(v))
        end
    end
    return itemList
end

-- 检查ItemId对应头像资产是否拥有
---@param itemId number Item表配置Id
function PlayerInfoProxy:CheckIfHeadItemOwned(itemId)
    if not table.isnilorempty(self.headItemMap) then
        for _, v in pairs(self.headItemMap) do
            if v and v.ID and v.ID == itemId then return true end
        end
    end
    return false
end

---羁绊卡头像红点更新
---@param cardId int 增加红点的羁绊卡id
function PlayerInfoProxy:CardHeadRedPointUpdate(cardId)
    self.cardHeadRPMap[cardId] = false
    EventMgr.Dispatch("CardHead_RedPointUpdate", cardId, 1)
end

--endregion

--region  X3Data.LoginData
---@return X3Data.LoginData
function PlayerInfoProxy:GetLoginData()
    return self.loginData
end
--endregion
return PlayerInfoProxy
