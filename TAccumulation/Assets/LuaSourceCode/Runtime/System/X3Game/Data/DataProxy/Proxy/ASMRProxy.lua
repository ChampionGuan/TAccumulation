---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/10/22 11:14
---

---@class ASMRProxy:BaseProxy 背景音乐数据
local ASMRProxy = class("ASMRProxy", BaseProxy)
---@type ASMRConst
local ASMRConst
---@type RadioConst
local RadioConst
local EmptyTable
local SortFunc
local _RecordHandleOrder

---初始化
function ASMRProxy:OnInit()
    --- Local Init ---
    ASMRConst = require("Runtime.System.X3Game.UI.UIView.ASMRWnd.ASMRConst")
    RadioConst = require("Runtime.System.X3Game.UI.UIView.RadioListWnd.RadioConst")
    EmptyTable = PoolUtil.GetTable()
    ---@param a cfg.ASMRInfo
    ---@param b cfg.ASMRInfo
    SortFunc = function(a, b)
        return a.Order < b.Order
    end
    _RecordHandleOrder = 0
    
    --- Field Init ---
    ---@type table<int, cfg.ASMRInfo[]>   key 角色ID  value 角色相关ASMR配置列表
    self.roleRadioConfigDic = {}
    ---@type table<int, table<int>>   key 角色ID  value 对应角色的自定义列表状态
    self.roleCustomStateDic = {}
    ---@type table<int, table<cfg.ASMRInfo>>   key 角色ID  value 对应角色的自定义列表配置
    self.roleCustomListDic = {}
    ---@type table<int, table>   key 角色ID  value 对应角色的自定义卡面列表
    self.roleCustomBgDic = {}
    ---@type table<int, table>   key 角色ID  value 对应角色的播放信息
    self.rolePlayDataDic = {}
    ---@type table<int, table>   key asmrId  value 对应曲目的累计播放时间，是否获得奖励，标记列表
    self.baseDataDic = {}
    ---@type GameConst.MusicPlayMode
    self.playMode = GameConst.MusicPlayMode.PlayModeOrder
    ---@type int 播放参数
    self.curPlayArg = nil
    ---@type bool 是否为时间类型
    self.curPlayTimeType = false
    self.asmrData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.ASMRData)
    ---后台统计相关
    self._backgroundIDRecord = {}
    self._backgroundTimeRecord = {}
    self._backgroundLastRecord = {}
    self._backgroundSubTitleRecord = {}

    ---@type cfg.RoleInfo[]
    self.roleInfo = nil

    ---Init Func Invoke ---
    self:Subscribe()
    self:BuildRoleRadioDic()
end

function ASMRProxy:OnClear()
    ---- Local Clear ----
    ASMRConst = nil
    RadioConst = nil
    PoolUtil.ReleaseTable(EmptyTable)
    EmptyTable = nil
    SortFunc = nil
    _RecordHandleOrder = 0
    
    ---- Field Clear ----
    self.roleRadioConfigDic = nil
    self.roleCustomStateDic = nil
    self.roleCustomListDic = nil
    self.roleCustomBgDic = nil
    self.rolePlayDataDic = nil
    self.baseDataDic = nil
    self.playMode = GameConst.MusicPlayMode.PlayModeOrder
    self.curPlayArg = nil
    self.curPlayTimeType = false
    self.asmrData = nil
    self._backgroundIDRecord = nil
    self._backgroundTimeRecord = nil
    self._backgroundLastRecord = nil
    self._backgroundSubTitleRecord = nil
    self.roleInfo = nil

    ---Clear Func Invoke ---
    self:Unsubscribe()
end

function ASMRProxy:AddLocalTimeRecordData(asmrId, curTime, frontTime, subID, handleOrder)
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, asmrId)
    if (not data) then
        local source = {
            RadioId = asmrId,
            Time = frontTime or 0,
            LastRecordTime = curTime or 0,
            HandleOrder = handleOrder or 0,
            SubId = subID or 0,
            RecordType = X3DataConst.RadioRecordType.ASMR
        }
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.RadioTimeRecord, source, asmrId)
    end
end

---统计后台时的数据----后台时子线程调用，请勿执行主线程操作
function ASMRProxy:RecordBackgroundData(asmrId, curTime, frontTime, subID)
    --local curTime = self.PlayerMedium:GetCurTime()
    --local nameCount = #self._backgroundIDRecord
    --if(nameCount == 0) then
    --else
    --    self._backgroundTimeRecord[nameCount] = self._backgroundTimeRecord[nameCount] + (curTime - self._backgroundLastRecord[nameCount])
    --end
    --table.insert(self._backgroundIDRecord, asmrId)
    --table.insert(self._backgroundLastRecord, curTime)
    --table.insert(self._backgroundTimeRecord, frontTime or 0)
    --table.insert(self._backgroundSubTitleRecord, subID)


    if((not asmrId)or (asmrId == 0)) then
        Debug.LogError("ASMRProxy RecordBackgroundData ERROR ", asmrId)
    end
    _RecordHandleOrder = _RecordHandleOrder + 1
    ---@type X3Data.RadioTimeRecord
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, asmrId)
    if (not data) then
        data = self:AddLocalTimeRecordData(asmrId, curTime, frontTime, subID, _RecordHandleOrder)
    else

        --Debug.LogWarning("RecordBackgroundData ", asmrId, " -- ", curTime, " frontTime ", frontTime, " last ", data:GetLastRecordTime())
        if(data:GetLastRecordTime() ~= 0) then
            local offset = curTime - data:GetLastRecordTime()
            --Debug.LogWarning("offset ", offset, " GetTime ", data:GetTime(), "frontTime ", (frontTime or 0), " asmrId ", asmrId)
            if(offset) > 0 then
                data:SetTime(offset + data:GetTime() + (frontTime or 0))
                --Debug.LogWarning(" data:SetTime asmrId ", asmrId, " cur ", data:GetTime(), " total ", data:GetTotalTime())
                data:SetLastRecordTime(curTime)
                data:SetHandleOrder(_RecordHandleOrder)
                data:SetSubId(subID or 0)
            end
        else
             data:SetLastRecordTime(curTime)
        end
    end


    --Debug.LogError("RecordBackgroundData asmrId ", asmrId, " curTime ", curTime, " frontTime ", frontTime)
end


function ASMRProxy:CorrectPlayRecord()
    if(self.baseDataDic) then   
        for asmrId, asmrData in pairs(self.baseDataDic) do
            ---@type X3Data.RadioTimeRecord
            self:AddLocalTimeRecordData(asmrId)
            local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, asmrId)
            local serverTime = asmrData.Time / 1000
            if data:GetTotalTime() < serverTime then
                data:SetTotalTime(serverTime)
            end
        end
    end
end

---@param isCorrect bool 登录时纠正与服务器的差值。异常分为两种情况，1.后台时直接杀进程，2.长时间后台，返回前台后消息发不出去
function ASMRProxy:GetBackgroundData(roleID, isCorrect, login)
    --local PlayRecords = {}
    --local recordList = {}
    --recordList.List = {}
    --PlayRecords[roleID] = recordList
    --
    --for i = #self._backgroundIDRecord, 1, -1 do
    --    local id = self._backgroundIDRecord[i]
    --    local time = self._backgroundTimeRecord[i]
    --    local subId = self._backgroundSubTitleRecord[i]
    --    ---小于两秒的不统计
    --    if(time > 2 or i == 1) then
    --        time = math.floor(time * 1000)
    --        table.insert(recordList.List, {ID = id, Duration = time, SubtitleID = subId})
    --        --else
    --        --    table.remove(self._backgroundIDRecord, i)
    --        --    table.remove(self._backgroundLastRecord, i)
    --        --    table.remove(self._backgroundTimeRecord, i)
    --    end
    --end
    --if(#PlayRecords > 0) then
    --    --Debug.LogError("GetBackgroundData")
    --    --Debug.LogErrorTable(PlayRecords)
    --    return PlayRecords
    --end
    local PlayRecords = {}
    --local roleRecord = {}
    --roleRecord.List = {}
    --_record_msg.Records[roleID] = roleRecord
    local _roleID = roleID
    local count = 0

    --Debug.LogError("SendMsg_UpdatePlayRecord ", roleID)

    local timeRecordList = {}
    local num = X3DataMgr.GetAll(X3DataConst.X3Data.RadioTimeRecord, timeRecordList, function(a)
        return a:GetRecordType() == X3DataConst.RadioRecordType.ASMR
    end, function(a, b)
        return a:GetHandleOrder() < b:GetHandleOrder()
    end)
    for i = 1, num do
        ---@type X3Data.RadioTimeRecord
        local record = timeRecordList[i]
        local time = record:GetTime()

        ---登录时，需要补齐差值
        if(isCorrect) then
            local radioData = self.baseDataDic[record:GetPrimaryValue()] --self:GetRadioStateData(record:GetPrimaryValue())
            if(radioData) then
                local recordTotalTime = record:GetTotalTime();
                local serverTotalTime = radioData.Time / 1000
                --Debug.LogError("radioID", record:GetPrimaryValue(), " serverTotalTime ", serverTotalTime, " recordTotalTime ", recordTotalTime, " Time ", time)
                if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
                    Debug.LogWarning("ASMR登录时计算差值，ID： ", record:GetPrimaryValue(), " 服务器记录时间为 ", serverTotalTime,  "本地记录为 ", recordTotalTime, " 待累加时间为： ", time)
                end
                if(login) then
                    if(recordTotalTime - serverTotalTime > 0) then
                        time = time + recordTotalTime - serverTotalTime
                    end
                end

                ---进行一次时间补齐
                if time < 0 then
                    time = 0
                end
                
                local offset = self:CheckRewardTimeLost(record:GetPrimaryValue(), record)
                ---当有误差时，将本地时间补齐
                if offset > 1 then
                    record:SetTotalTime(record:GetTotalTime() + offset)
                end
                if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
                    Debug.LogWarning("ASMR登录时计算奖励已领取的纠正： ", record:GetPrimaryValue(), " 准备额外上报的时间为 ", offset)
                end
                --这里会多发time的时长
                time = time + offset
            end
        end
        if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
            Debug.LogWarning("当前ASMR的ID为： ", record:GetPrimaryValue(), " 准备上报的时间为： ", time)
        end
        ---小于两秒的不统计
        if(time > 2) then
            ---这里做下处理，防止上传过大的数值
            if(time > RadioConst.ReportLimit) then
                Debug.LogError("Radio Report To Large ", time)
                time = RadioConst.ReportLimit;
            end
            --local radioConfig = BackgroundRadioConfigDB:GetRadioConfig(name)
            local radioConfig = LuaCfgMgr.Get("ASMRInfo", record:GetPrimaryValue())
            if(radioConfig and radioConfig.ASMRID) then
                local roleRecord = PlayRecords[radioConfig.RoleID]
                if(not roleRecord) then
                    roleRecord = {}
                    roleRecord.List = {}
                    PlayRecords[radioConfig.RoleID] = roleRecord
                end
                time = math.floor(time * 1000)
                table.insert(roleRecord.List, {ID = radioConfig.ASMRID, Duration = time, SubtitleID = record:GetSubId()})
                count = count + 1
                --if(not _roleID) then
                --    _roleID = radioConfig.RoleID
                --end
            end
            if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
                Debug.LogWarning("ASMR本地时间刷新, ID: ", record:GetPrimaryValue(), " 当前本地总计 ", record:GetTotalTime(), " 准备增加： ", record:GetTime())
            end
            record:SetTotalTime(record:GetTotalTime() + record:GetTime())
            self:OvercastASMRPlayTime(record:GetPrimaryValue(), record:GetTotalTime())
        end
        ---每次操作完都需清空
    	record:SetTime(0)
        record:SetLastRecordTime(0)
        record:SetHandleOrder(0)
    end

    if(count > 0) then
        return PlayRecords
    end
end

function ASMRProxy:ClearLastRecordTime(asmrId)
    ---@type X3Data.RadioTimeRecord
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, asmrId)
    if(data) then
        data:SetLastRecordTime(0)
    end
end

---@param asmrId int ASMRID
---@param record X3Data.RadioTimeRecord x3data
---@return int
function ASMRProxy:CheckRewardTimeLost(asmrId, record)
    ---此值仅会在获取全量时同步服务器数据，其余时间本地更新
    local offset = 0
    local hasGetReward = false

    ---先看有无领过奖
    local radioData = self.baseDataDic[asmrId]
    if radioData then
        hasGetReward = radioData.GetReward
    end
    if not hasGetReward then
        return 0
    end
    ---获取领奖所需最低时长
    local rewardTime = 0
    local curCfg = LuaCfgMgr.Get("ASMRInfo", asmrId)
    if curCfg then
        rewardTime = curCfg.RewardTime
    end

    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, asmrId)
    if data and data:GetTotalTime() < rewardTime then
        offset = rewardTime - data:GetTotalTime() + 1 --防止边界情况多加1个
    end
    
    --Debug.LogError("radioId ", radioId, " hasGetReward ", hasGetReward, " record:GetTotalTime() ", record:GetTotalTime(), " rewardTime ", rewardTime, " offset ", offset)
    return offset
end

function ASMRProxy:ClearBackgroundData()
    table.clear(self._backgroundIDRecord)
    table.clear(self._backgroundLastRecord)
    table.clear(self._backgroundTimeRecord)
    table.clear(self._backgroundSubTitleRecord)
end

---更新播放计时参数
function ASMRProxy:UpdateCurPlayArg(arg, isTime)
    self.curPlayArg = arg
    self.curPlayTimeType = isTime
end

---获取播放计时参数
function ASMRProxy:GetPlayArg()
    return self.curPlayArg, self.curPlayTimeType
end

---进入ASMR的时候构建数据
---@param msg pbcmessage.AsmrData
function ASMRProxy:UpdateASMRData(msg)
    ---@type table<number,pbcmessage.Asmr>
    local asmrMap
    ---@type table<number,pbcmessage.AsmrPlay>
    local roleAsmrMap
    ---@type GameConst.MusicPlayMode
    local playMode
    if msg == nil then
        asmrMap = {}
        roleAsmrMap = {}
        playMode = self.playMode
    else
        asmrMap = msg.AsmrMap or {}
        roleAsmrMap = msg.RoleAsmrMap or {}
        playMode = msg.PlayMode or self.playMode
    end

    self:UpdateASMRBaseData(asmrMap)
    local unlockRoleList = BllMgr.GetRoleBLL():GetUnlockedRole()
    for roleId, _ in pairs(unlockRoleList) do
        self:UpdateASMRPlayData(roleId, roleAsmrMap[roleId] or EmptyTable)
    end

    self.playMode = playMode
    self:InitRedPointData()
    self:CheckAllASMRUnlock()
    EventMgr.Dispatch(ASMRConst.EventType.OnASMRBaseDataUpdate)
end

---更新曲目的基础数据 --- 阅读时间，奖励，书签
function ASMRProxy:UpdateASMRBaseData(serverData)
    if not serverData then
        return
    end

    --服务器的数据不一定是全部的曲目
    for asmrId, data in pairs(serverData) do
        if (not self.baseDataDic[asmrId]) then
            self.baseDataDic[asmrId] = {}
        end
        local baseData = self.baseDataDic[asmrId]
        self:BuildSingleBaseData(baseData, data)

        --TODO X3Data
        local isOld = RedPointMgr.GetValue(X3_CFG_CONST.RED_ASMR_NEWPLAY, asmrId) == 2
        if data and data.Time then
            if data.Time > 0 and isOld == false then
                RedPointMgr.Save(2, X3_CFG_CONST.RED_ASMR_NEWPLAY, asmrId)
                isOld = true
            end
        end

        local x3Data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrId)
        if x3Data then
            if data and data.Time then
                local config = LuaCfgMgr.Get("ASMRInfo", asmrId)
                if data.Time > (config.RewardTime * 1000) and not baseData.GetReward then
                    x3Data:SetIsReward(true)
                end
            end
            --服务器发过来的都是解锁的
            x3Data:SetIsUnLock(true)
            x3Data:SetIsNotNew(isOld)
        end
    end
end

---创建单首曲目的基础数据
function ASMRProxy:BuildSingleBaseData(baseData, data)

    baseData.Time = data and data.Time or 0
    baseData.GetReward = data and data.GetReward or false
    if (not baseData.MarkSubtitleList) then
        baseData.MarkSubtitleList = {}
    end
    table.clear(baseData.MarkSubtitleList)
    if (data and data.MarkSubtitleList) then
        for subId, v in pairs(data.MarkSubtitleList) do
            table.insert(baseData.MarkSubtitleList, subId)
        end
    end
end

---更新ASMR播放相关数据
function ASMRProxy:UpdateASMRPlayData(roleId, serverData)
    if (serverData) then
        ---自定义背景列表
        self:UpdateRadioCustomBg(roleId, serverData.BackgroundMap)
        ---自定义歌单
        self:UpdateRadioCustomList(roleId, serverData.AsmrListMap)
        if (not self.rolePlayDataDic[roleId]) then
            self.rolePlayDataDic[roleId] = {}
        end
        local infoTable = self.rolePlayDataDic[roleId]
        infoTable.LastPlayTime = serverData.LastPlayTime or 0
        infoTable.LastQuitTime = serverData.LastQuitTime or 0
        infoTable.CurPlayID = serverData.CurPlayID or 0
        infoTable.CurSubtitleID = serverData.CurSubtitleID or 0
    end
end

---角色解锁的时候构建数据
---@param roleId int
function ASMRProxy:MakeDataByRoleUnlock(roleId)
    if not self.rolePlayDataDic[roleId] then
        self.rolePlayDataDic[roleId] = {}
    end
end

---更新ASMR播放基础数据 播放信息
function ASMRProxy:UpdateASMRPlayBaseData(serverData)
    local roleId = serverData.RoleID
    local curPlayId = serverData.AsmrID or 0
    local curSubId = serverData.SubtitleID or 0
    ---播放信息
    if (not self.rolePlayDataDic[roleId]) then
        self.rolePlayDataDic[roleId] = {}
    end
    local infoTable = self.rolePlayDataDic[roleId]

    infoTable.CurPlayID = curPlayId
    infoTable.CurSubtitleID = curSubId
end

----更新书签数据
function ASMRProxy:UpdateASMRMarkData(asmrId, subId, isAdd)
    if (self.baseDataDic[asmrId]) then
        local markSubtitleList = self.baseDataDic[asmrId].MarkSubtitleList
        if (isAdd) then
            if (not table.containsvalue(markSubtitleList, subId)) then
                table.insert(markSubtitleList, subId)
                EventMgr.Dispatch(ASMRConst.EventType.OnMarkReply, asmrId, subId, true)
            end
        else
            table.removebyvalue(markSubtitleList, subId)
            EventMgr.Dispatch(ASMRConst.EventType.OnMarkReply, asmrId, subId)
        end
    else
        Debug.LogErrorWithTag(GameConst.LogTag.ASMR, "UpdateASMRMarkData No Base Data ", asmrId)
    end
end

---更新自定义背景
function ASMRProxy:UpdateRadioCustomBg(roleId, data)
    if (not self.roleCustomBgDic[roleId]) then
        self.roleCustomBgDic[roleId] = {}
    end
    local baseTable = self.roleCustomBgDic[roleId]
    table.clear(baseTable)
    if (data) then
        for id, v in pairs(data) do
            table.insert(baseTable, id)
        end
    end
    ---空数据时，代表默认背景
    if (#baseTable == 0) then
        table.insert(baseTable, 0)
    end
    EventMgr.Dispatch(ASMRConst.EventType.OnBgReply)
end

---获取自定义背景列表
function ASMRProxy:GetRadioCustomBgList(roleId)
    return self.roleCustomBgDic[roleId]
end

---获取新的ASMR时
function ASMRProxy:UpdateASMRUnlock(id)
    local index = id
    if not self.baseDataDic[index] then
        local baseData = { }
        self:BuildSingleBaseData(baseData)
        self.baseDataDic[index] = baseData
    end

    --TODO X3Data
    local x3Data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, id)
    if x3Data then
        x3Data:SetIsUnLock(true)
    end
end

---更新角色自定义歌单列表
function ASMRProxy:UpdateRadioCustomList(roleId, listMap)
    if (not self.roleCustomStateDic[roleId]) then
        self.roleCustomStateDic[roleId] = {}
    end
    if (not self.roleCustomListDic[roleId]) then
        self.roleCustomListDic[roleId] = {}
    end
    table.clear(self.roleCustomListDic[roleId])
    table.clear(self.roleCustomStateDic[roleId])

    --TODO X3Data
    --清理Custom信息
    local asmrRedPointDataArray = PoolUtil.GetTable()
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.ASMRRedPointData, asmrRedPointDataArray)
    for i = 1, count do
        ---@type X3Data.ASMRRedPointData
        local data = asmrRedPointDataArray[i]
        data:SetIsCustom(false)
    end
    PoolUtil.ReleaseTable(asmrRedPointDataArray)

    if (listMap) then
        for asmrId, v in pairs(listMap) do
            self.roleCustomStateDic[roleId][asmrId] = true
            table.insert(self.roleCustomListDic[roleId], LuaCfgMgr.Get("ASMRInfo", asmrId))
            local data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrId)
            if data then
                data:SetIsCustom(true)
            end
        end
    end
    ---没有自定义歌单时，需要填充全部已解锁的曲目
    if (#self.roleCustomListDic[roleId] == 0 and self.roleRadioConfigDic[roleId]) then
        for _, config in pairs(self.roleRadioConfigDic[roleId]) do
            local asmrId = config.ASMRID
            local data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrId)
            --在初始化BaseData的时候已经确定了是否解锁
            if data ~= nil and data:GetIsUnLock() then
                self.roleCustomStateDic[roleId][asmrId] = true
                table.insert(self.roleCustomListDic[roleId], LuaCfgMgr.Get("ASMRInfo", asmrId))
                data:SetIsCustom(true)
            end
        end
    end
    EventMgr.Dispatch(ASMRConst.EventType.OnASMRCustomDataUpdate)
end

function ASMRProxy:UpdateASMRPlayTime(asmrId, offset, force)
    local baseData = self.baseDataDic[asmrId]
    if baseData then
        --Debug.LogWarning("UpdateASMRPlayTime ", asmrId, " offset ", offset, " ---START ", baseData.Time)

        if(not baseData.GetReward) or force then
            baseData.Time = baseData.Time + offset * 1000
        end

        if (not baseData.GetReward)  then
            --Debug.LogError("UpdateASMRPlayTime ", asmrId, " offset ", offset, " ---END ", baseData.Time )
            local config = LuaCfgMgr.Get("ASMRInfo", asmrId)
            local data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrId)
            if not data:GetIsReward() then
                if baseData.Time > (config.RewardTime * 1000) then
                    data:SetIsReward(true)
                    EventMgr.Dispatch(ASMRConst.EventType.OnASMRRadioRewardStateUpdate)
                end
            end
        end
    else
        Debug.LogErrorWithTag(GameConst.LogTag.ASMR, "UpdateASMRPlayTime no data")
    end
end

---覆盖本地奖励时间
function ASMRProxy:OvercastASMRPlayTime(asmrId, localTime)
    Debug.LogError("OvercastASMRPlayTime ", asmrId, " time ", localTime)
    local baseData = self.baseDataDic[asmrId]
    if baseData then
        baseData.Time = localTime * 1000
        if (not baseData.GetReward)  then
            local config = LuaCfgMgr.Get("ASMRInfo", asmrId)
            local data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrId)
            if not data:GetIsReward() then
                if baseData.Time > (config.RewardTime * 1000) then
                    data:SetIsReward(true)
                    EventMgr.Dispatch(ASMRConst.EventType.OnASMRRadioRewardStateUpdate)
                end
            end
        end
    end
end

---更新领奖状态
function ASMRProxy:UpdateRewardState(serverData)
    if (serverData and self.baseDataDic[serverData.AsmrID]) then
        self.baseDataDic[serverData.AsmrID].GetReward = true
        --TODO X3Data
        local x3Data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, serverData.AsmrID)
        if x3Data then
            x3Data:SetIsReward(false)
        end
        EventMgr.Dispatch(ASMRConst.EventType.OnASMRRadioRewardStateUpdate)
    end
end

function ASMRProxy:UpdateCurPlayMode(mode)
    self.playMode = mode
    EventMgr.Dispatch(ASMRConst.EventType.OnPlayModeUpdate)
end

---创建角色相关联配置数据 ---进入业务再构建吧，前面没解锁纯纯占内存--目前是bll初始化时调proxy ---红点依赖服务器初始化数据应该足够
function ASMRProxy:BuildRoleRadioDic()
    if not table.isnilorempty(self.roleRadioConfigDic) then
        return
    end
    
    local _roleDic = self.roleRadioConfigDic
    local asmrInfoArray = LuaCfgMgr.GetAll("ASMRInfo")

    for _, v in pairs(asmrInfoArray) do
        ---@type cfg.ASMRInfo
        local asmrInfo = v
        local _radioList = _roleDic[asmrInfo.RoleID]
        if not _radioList then
            _radioList = {}
            _roleDic[asmrInfo.RoleID] = _radioList
        end
        table.insert(_radioList, asmrInfo)

        if not X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrInfo.ASMRID) then
            local x3Data = X3DataMgr.Add(X3DataConst.X3Data.ASMRRedPointData)
            x3Data:SetPrimaryValue(asmrInfo.ASMRID)
            x3Data:SetRoleId(asmrInfo.RoleID)
            --需要在这里初始化 not new 服务器不一定会回来所有的数据
            local isNotNew = RedPointMgr.GetValue(X3_CFG_CONST.RED_ASMR_NEWPLAY, asmrInfo.ASMRID) == 2
            x3Data:SetIsNotNew(isNotNew)
        end
    end
    
    --初始化完成后，将每个角色的歌单按照order进行排序
    for _,array in pairs(self.roleRadioConfigDic) do
        table.sort(array, SortFunc)
    end
end

---获取角色PlayData
function ASMRProxy:GetASMRPlayData(roleId)
    return self.rolePlayDataDic[roleId]
end

---获取角色相关联的RadioList
---@type int roleID 男主ID
---@return table ASMRInfo列表
function ASMRProxy:GetRoleRadioInfo(roleID)
    if (self.roleRadioConfigDic[roleID]) then
        return self.roleRadioConfigDic[roleID]
    else
        Debug.LogErrorWithTag(GameConst.LogTag.ASMR, "ASMR NO ROLE RADIO", roleID)
    end
end

---获取角色自定义歌单
function ASMRProxy:GetRoleRadioCustomDataList(roleID)
    if (self.roleCustomListDic[roleID]) then
        local list = self.roleCustomListDic[roleID]
        table.sort(list, SortFunc)
        return list
    end
end

---获取ASMR解锁状态
function ASMRProxy:GetUnlockState(asmrID)
    return self.baseDataDic[asmrID]
end

---获取是否可以领奖
---@return ASMRRewardState
function ASMRProxy:GetRewardState(asmrID)
    local data = self.baseDataDic[asmrID]
    if data then
        if data.GetReward then
            return ASMRConst.ASMRRewardState.Finished
        end

        local config = LuaCfgMgr.Get("ASMRInfo", asmrID)
        if (self.baseDataDic[asmrID].Time > (config.RewardTime * 1000)) then
            local x3Data = X3DataMgr.Get(X3DataConst.X3Data.ASMRRedPointData, asmrID)
            if x3Data then
                x3Data:SetIsReward(true) 
            end
            return ASMRConst.ASMRRewardState.Available
        end
    end
    return ASMRConst.ASMRRewardState.Unavailable
end

---获取ASMR曲目书签
function ASMRProxy:GetRadioMarkList(asmrID)
    return self.baseDataDic[asmrID] and self.baseDataDic[asmrID].MarkSubtitleList or {}
end

---获取角色相关联的自定义列表
function ASMRProxy:GetRoleRadioCustomDic(roleID)
    if (self.roleCustomStateDic[roleID]) then
        return self.roleCustomStateDic[roleID]
    else
        Debug.LogWithTag(GameConst.LogTag.ASMR, "ASMR 没有 %s 男主的自定义数据 ", roleID)
    end
end

---获取当前播放模式
function ASMRProxy:GetCurPlayMode()
    return self.playMode
end

--region Red Point
---初始化红点数据
function ASMRProxy:InitRedPointData()
    local result = PoolUtil.GetTable()
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.ASMRRedPointData, result)
    for i = 1, count do
        ---@type X3Data.ASMRRedPointData
        local data = result[i]
        local asmrId = data:GetPrimaryValue()
        if data:GetIsUnLock() and not data:GetIsNotNew() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAY, 1, asmrId)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, 1, asmrId)
            if data:GetIsCustom() then
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 1, asmrId)
            end
        else
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAY, 0, asmrId)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, 0, asmrId)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 0, asmrId)
        end

        --礼物基础数据
        if data:GetIsUnLock() and data:GetIsReward() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFT, 1, asmrId)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTHADMAN, 1, asmrId)
            if data:GetIsCustom() then
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTLIST, 1, asmrId)
            end
        else
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFT, 0, asmrId)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTHADMAN, 0, asmrId)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTLIST, 0, asmrId)
        end
    end
    PoolUtil.ReleaseTable(result)
end

---根据男主id刷新红点数据
---@param roleId number
function ASMRProxy:UpdateRedPointDataByRole(roleId)
    local result = PoolUtil.GetTable()
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.ASMRRedPointData, result)
    local newCount = 0
    local giftCount = 0
    for i = 1, count do
        ---@type X3Data.ASMRRedPointData
        local data = result[i]
        if data:GetRoleId() == roleId then
            if data:GetIsUnLock() then
                --新获得数据
                if not data:GetIsNotNew() then
                    newCount = newCount + 1
                end

                --礼物基础数据
                if data:GetIsReward() then
                    giftCount = giftCount + 1
                end
            end
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, newCount, roleId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTHADMAN, giftCount, roleId)
    PoolUtil.ReleaseTable(result)
end

---根据男主id筛选其他男主刷新数据
---@param roleId number
function ASMRProxy:UpdateRedPointDataByOtherRole(roleId)
    ---@type X3Data.ASMRRedPointData[]
    local result = PoolUtil.GetTable()
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.ASMRRedPointData, result)
    ---@type table<number, number>
    local giftCountDic = PoolUtil.GetTable()
    ---@type table<number, number>
    local newCountDic = PoolUtil.GetTable()
    for i = 1, count do
        local data = result[i]
        local otherRoleId = data:GetRoleId()
        if otherRoleId ~= roleId then
            if not giftCountDic[otherRoleId] then
                giftCountDic[otherRoleId] = 0
                newCountDic[otherRoleId] = 0
            end
            
            if data:GetIsUnLock() then
                --新获得数据
                if not data:GetIsNotNew() then
                    newCountDic[otherRoleId] = newCountDic[otherRoleId] + 1
                end

                --礼物基础数据
                if data:GetIsReward() then
                    giftCountDic[otherRoleId] = giftCountDic[otherRoleId] + 1
                end
            end
        end
    end
    
    --其他男主红点，不能直接更新复合节点
    --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_CHANGEROLE, rpCount)
    for id, _ in pairs(giftCountDic) do
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, newCountDic[id], id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTHADMAN, giftCountDic[id], id)
    end
    
    PoolUtil.ReleaseTable(result)
    PoolUtil.ReleaseTable(giftCountDic)
    PoolUtil.ReleaseTable(newCountDic)
end
--endregion Red Point Over

--region X3Data Callback
function ASMRProxy:Subscribe()
    X3DataMgr.Subscribe(X3DataConst.X3Data.ASMRRedPointData, self.OnIsNotNewModify, self,
            X3DataConst.X3DataField.ASMRRedPointData.isNotNew)

    X3DataMgr.Subscribe(X3DataConst.X3Data.ASMRRedPointData, self.OnIsCustomModify, self,
            X3DataConst.X3DataField.ASMRRedPointData.isCustom)
    
    X3DataMgr.Subscribe(X3DataConst.X3Data.ASMRRedPointData, self.OnIsRewardModify, self,
            X3DataConst.X3DataField.ASMRRedPointData.isReward)

    X3DataMgr.Subscribe(X3DataConst.X3Data.ASMRRedPointData, self.OnIsUnLockModify, self,
            X3DataConst.X3DataField.ASMRRedPointData.isUnLock)
end

function ASMRProxy:Unsubscribe()
    X3DataMgr.UnsubscribeWithTarget(self)
end

---@param data X3Data.ASMRRedPointData
function ASMRProxy:OnIsNotNewModify(data)
    local id = data:GetPrimaryValue()
    if data:GetIsUnLock() and not data:GetIsNotNew() then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAY, 1, id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, 1, id)
        if data:GetIsCustom() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 1, id)
        end
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAY, 0, id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, 0, id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 0, id)
        --2表示当前的已经被看过/播放
        if RedPointMgr.GetValue(X3_CFG_CONST.RED_ASMR_NEWPLAY, id) ~= 2 then
            RedPointMgr.Save(2, X3_CFG_CONST.RED_ASMR_NEWPLAY, id)
        end
    end

    EventMgr.Dispatch(ASMRConst.EventType.OnASMRRedPointDataUpdate, id)
end

---@param data X3Data.ASMRRedPointData
function ASMRProxy:OnIsCustomModify(data)
    local id = data:GetPrimaryValue()
    if data:GetIsUnLock() and not data:GetIsNotNew() then
        if data:GetIsCustom() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 1, id)
        end
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 0, id)
    end

    if data:GetIsUnLock() and data:GetIsReward() then
        if data:GetIsCustom() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTLIST, 1, id)
        end
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTLIST, 0, id)
    end

    EventMgr.Dispatch(ASMRConst.EventType.OnASMRRedPointDataUpdate, id)
end

---@param data X3Data.ASMRRedPointData
function ASMRProxy:OnIsRewardModify(data)
    local id = data:GetPrimaryValue()
    if data:GetIsUnLock() and data:GetIsReward() then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFT, 1, id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTHADMAN, 1, id)
        if data:GetIsCustom() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTLIST, 1, id)
        end
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFT, 0, id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTHADMAN, 0, id)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_GIFTLIST, 0, id)
    end

    EventMgr.Dispatch(ASMRConst.EventType.OnASMRRedPointDataUpdate, id)
end

---@param data X3Data.ASMRRedPointData
function ASMRProxy:OnIsUnLockModify(data)
    local asmrId = data:GetPrimaryValue()
    if not data:GetIsNotNew() then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAY, 1, asmrId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYHADMAN, 1, asmrId)
        if data:GetIsCustom() then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ASMR_NEWPLAYLIST, 1, asmrId)
        end
        EventMgr.Dispatch(ASMRConst.EventType.OnASMRRedPointDataUpdate, asmrId)
    end
end
--endregion X3Data Callback Over

--region Unlock Check
---登录时，根据检查所有ASMR是否解锁
function ASMRProxy:CheckAllASMRUnlock()
    local unlockRoleList = BllMgr.GetRoleBLL():GetUnlockedRole()
    for roleId, _ in pairs(unlockRoleList) do
        self:CheckRoleASMRUnlock(roleId)
    end
end

---检查某个角色的ASMR是否解锁
function ASMRProxy:CheckRoleASMRUnlock(manType)
    if self.roleRadioConfigDic[manType] then
        ---@param asmrConfig cfg.ASMRInfo
        for _, asmrConfig in pairs(self.roleRadioConfigDic[manType]) do
            if not self:GetUnlockState(asmrConfig.ASMRID) then
                --判定对应广播剧是否解锁
                self:CheckASMRUnlock(asmrConfig)
            end
        end
    end
end

---检查单个ASMR是否解锁
---@param asmrConfig cfg.ASMRInfo
---@return boolean
function ASMRProxy:CheckASMRUnlock(asmrConfig)
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_ASMR) then
        return false
    end
    
    if asmrConfig then
        local loveLevelComplete = self:GetLovePointState(asmrConfig)
        local isCardUnlock = true
        if asmrConfig.CardID ~= 0 then
            isCardUnlock = BllMgr.GetCardBLL():IsHaveCard(asmrConfig.CardID)
        end
        
        if loveLevelComplete and isCardUnlock then
            self:UpdateASMRUnlock(asmrConfig.ASMRID)
            return true
        end
    end
    
    return false
end

---@param asmrConfig cfg.ASMRInfo
function ASMRProxy:GetLovePointState(asmrConfig)
    local roleData = BllMgr.GetRoleBLL():GetRole(asmrConfig.RoleID)
    local loveLevel = roleData and roleData.LoveLevel or 0
    return loveLevel >= asmrConfig.LoveLevelCondition, asmrConfig.LoveLevelCondition
end

---@return cfg.RoleInfo[]
function ASMRProxy:GetRoleInfo()
    if self.roleInfo == nil then
        self.roleInfo = LuaCfgMgr.GetAll("RoleInfo")
    end
    return self.roleInfo
end

---根据ASMRId检查是否解锁
---@param id number
---@return boolean 是否解锁
function ASMRProxy:GetASMRIsUnlockById(id)
    return self:CheckASMRUnlock(LuaCfgMgr.Get("ASMRInfo", id))
end

---根据羁绊卡的id获取关联的ASMRId
---@param cardId number
---@return number
function ASMRProxy:GetRelativeASMRIdByCardId(cardId)
    local infos = LuaCfgMgr.GetAll("ASMRInfo")
    ---@type cfg.ASMRInfo
    for _, info in pairs(infos) do
        if info.CardID == cardId then
            return info.ASMRID
        end
    end
    
    return 0
end
--endregion Unlock Check Over

return ASMRProxy