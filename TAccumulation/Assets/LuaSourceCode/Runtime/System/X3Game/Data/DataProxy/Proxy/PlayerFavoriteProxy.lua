---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/3/1 17:40
---玩家喜好数据
---@class PlayerFavoriteProxy
local PlayerTagProxy = class("PlayerTagProxy", BaseProxy)

function PlayerTagProxy:OnInit()
    ---@type table<int, table<int, pbcmessage.PlayerTag>>
    self.tags = {}

    ---@type table<int, int>>
    self.refreshTimers = {}

    ---@class dailyRefreshInfo
    ---@field roleId int
    ---@field tagId int
    ---@field setTime int
    ---@field days int
    ---@type table<int, dailyRefreshInfo>
    self.dailyRefreshTags = {}

    EventMgr.AddListener("CommonDailyReset", self.OnCommonDailyReset, self)
    EventMgr.AddListener("CommonWeeklyReset", self.OnCommonWeeklyReset, self)
end

function PlayerTagProxy:OnClear()
    self.lastAccept = {}
    self.refreshTimers = {}
    self.dailyRefreshTags = {}

    EventMgr.RemoveListenerByTarget(self)
end

---@param playerTagData pbcmessage.PlayerTagData
function PlayerTagProxy:UpdateFullMap(playerTagData)
    if playerTagData == nil or playerTagData.Tags == nil then
        return
    end

    for roleId, tagNode in pairs(playerTagData.Tags) do
        for tagId, tagData in pairs(tagNode.TagMap) do
            self:AddTag(roleId, tagId, tagData)
        end

        local favoriteRecord = X3DataMgr.Get(X3DataConst.X3Data.FavoriteRecord, roleId)
        if favoriteRecord then
            favoriteRecord:DecodeByField(tagNode)
        else
            X3DataMgr.AddByPrimary(X3DataConst.X3Data.FavoriteRecord, tagNode, roleId)
        end

        local tagRecord = X3DataMgr.Get(X3DataConst.X3Data.PlayerTagRecord, roleId)
        if tagRecord then
            tagRecord:DecodeByField(tagNode)
        else
            X3DataMgr.AddByPrimary(X3DataConst.X3Data.PlayerTagRecord, tagNode, roleId)
        end

        local recommendRecord = X3DataMgr.Get(X3DataConst.X3Data.PlayerRecommend, roleId)
        if recommendRecord then
            recommendRecord:DecodeByField(tagNode)
        else
            X3DataMgr.AddByPrimary(X3DataConst.X3Data.PlayerRecommend, tagNode, roleId)
        end

        local chooseRecord = X3DataMgr.Get(X3DataConst.X3Data.PlayerChoose, roleId)
        if chooseRecord then
            chooseRecord:DecodeByField(tagNode.Choose)
        else
            X3DataMgr.AddByPrimary(X3DataConst.X3Data.PlayerChoose, tagNode.Choose, roleId)
        end
    end
end

---@param roleId int
---@param tagMap table<int, pbcmessage.PlayerTag>
function PlayerTagProxy:UpdateTag(roleId, tagMap)
    local tagRecord = X3DataMgr.Get(X3DataConst.X3Data.PlayerTagRecord, roleId)
    if tagRecord then
        tagRecord:DecodeByIncrement({ TagMap = tagMap })
    else
        X3DataMgr.AddByPrimary(X3DataConst.X3Data.PlayerTagRecord, { TagMap = tagMap }, roleId)
    end

    for tagId, tagData in pairs(tagMap) do
        self:AddTag(roleId, tagId, tagData)
        Debug.LogFormat("[PlayerFavorite] Id = %d, Score = %d, Appear = %d, Count = %d", tagData.ID, tagData.Score, tagData.AppearNum, tagData.ChooseNum)
    end
end

---@param roleId int
---@param tagId int
---@param tagData pbcmessage.PlayerTag
function PlayerTagProxy:AddTag(roleId, tagId, tagData)
    ---@type cfg.PlayerTag
    local cfg = LuaCfgMgr.Get("PlayerTag", tagId)
    if cfg == nil then
        Debug.LogErrorFormat("[[PlayerFavorite]Tag Cfg is nil.Id = %d]", tagId)
        return
    end

    if cfg.RefreshType == 1 then
        self:AddTimeLimitTag(roleId, tagId, tagData.SetTime, cfg.RefreshPara)
    elseif cfg.RefreshType == 2 then
        self:AddDailyRefreshTag(roleId, tagId, tagData.SetTime, cfg.RefreshPara)
    end
end

---@param roleId int
---@param tagId int
function PlayerTagProxy:RemoveTag(roleId, tagId)
    local tagRecord = X3DataMgr.Get(X3DataConst.X3Data.PlayerTagRecord, roleId)
    if tagRecord then
        tagRecord:RemoveTagMapValue(tagId)
    end

    self.dailyRefreshTags[roleId + tagId * 10] = nil
    if self.refreshTimers[roleId + tagId * 10] then
        TimerMgr.Discard(self.refreshTimers[roleId + tagId * 10])
        self.refreshTimers[roleId + tagId * 10] = nil
    end
end

---@param roleId int
---@param tagId int
---@param setTime int
---@param hours int
function PlayerTagProxy:AddTimeLimitTag(roleId, tagId, setTime, hours)
    local curTime = TimerMgr.GetCurTimeSeconds()
    if self.dailyRefreshTags[roleId] == nil then
        self.dailyRefreshTags[roleId] = {}
    end

    if self.refreshTimers[roleId + tagId * 10] then
        TimerMgr.Discard(self.refreshTimers[roleId + tagId * 10])
        self.refreshTimers[roleId + tagId * 10] = nil
    end

    self.refreshTimers[roleId + tagId * 10] = TimerMgr.AddTimer(hours * 3600 + setTime - curTime, function()
        self:RemoveTag(roleId, tagId)
    end )
end

---@param roleId int
---@param tagId int
---@param setTime int
---@param days int
function PlayerTagProxy:AddDailyRefreshTag(roleId, tagId, setTime, days)
    self.dailyRefreshTags[roleId + tagId * 10] = { roleId = roleId, tagId = tagId, setTime = setTime, days = days }
end

---@param reply pbcmessage.PlayerChooseUpdateReply
function PlayerTagProxy:UpdateChooseInfo(reply)
    local weeklyChoose = X3DataMgr.Get(X3DataConst.X3Data.PlayerChoose, reply.RoleID)
    if weeklyChoose == nil then
        weeklyChoose = X3DataMgr.Add(X3DataConst.X3Data.PlayerChoose)
    end

    weeklyChoose:SetPrimaryValue(reply.RoleID)
    if reply.FullUpdate then
        weeklyChoose:DecodeByField(reply.Choose)
    else
        weeklyChoose:DecodeByIncrement(reply.Choose)
    end
end

function PlayerTagProxy:UpdateAcceptInfo(roleId, tagId, num, time, reject)
    local dailyRecommend = X3DataMgr.Get(X3DataConst.X3Data.PlayerRecommend, roleId)
    if dailyRecommend == nil then
        dailyRecommend = X3DataMgr.Add(X3DataConst.X3Data.PlayerRecommend)
    end
    dailyRecommend:SetPrimaryValue(roleId)

    if reject then
        dailyRecommend:RemoveRecommendMapValue(X3_CFG_CONST.PLAYTAGTYPEFOOD)
    else
        local cfg = LuaCfgMgr.Get("PlayerTag", tagId)
        if cfg == nil then
            Debug.LogErrorFormat("Invalid Player Tag Id: %d", tagId)
        end

        local recommend = X3DataMgr.Create(X3DataConst.X3Data.PlayerRecommendRecord)
        recommend:SetPrimaryValue(tagId)
        recommend:SetRecommendNum(num)
        recommend:SetLastRecommendTime(time)
        dailyRecommend:AddRecommendMapValue(recommend, cfg.Type)
    end
end

function PlayerTagProxy:OnCommonDailyReset(hour)
    local curTime = TimerMgr.GetCurTimeSeconds()
    for _, item in pairs(self.dailyRefreshTags) do
        if curTime > item.setTime + (item.days - 1) * 24 * 60 * 60 then
            self:RemoveTag(item.roleId, item.tagId)
        end
    end
    X3DataMgr.RemoveAll(X3DataConst.X3Data.PlayerRecommend)
    EventMgr.Dispatch("PLAYER_TAG_UPDATE")
end

function PlayerTagProxy:OnCommonWeeklyReset()
    X3DataMgr.RemoveAll(X3DataConst.X3Data.PlayerChoose)
end

---@param roleId int
---@param favoriteMap table<int, pbcmessage.PlayerFavorite>
function PlayerTagProxy:UpdateFavorite(roleId, favoriteMap)
    local favoriteRecord = X3DataMgr.Get(X3DataConst.X3Data.FavoriteRecord, roleId)
    if favoriteRecord then
        favoriteRecord:DecodeByIncrement(favoriteMap)
    else
        X3DataMgr.AddByPrimary(X3DataConst.X3Data.FavoriteRecord, { FavoriteMap = favoriteMap }, roleId)
    end
end

---@return pbcmessage.PlayerTag
function PlayerTagProxy:GetTag(roleId, tagId)
    local tagRecord = X3DataMgr.Get(X3DataConst.X3Data.PlayerTagRecord, roleId)
    if tagRecord then
        ---@type table<int, X3Data.PlayerTag>
        local tagMap = tagRecord:GetTagMap()
        if tagMap and tagMap[tagId] then
            local result = {}
            tagMap[tagId]:Encode(result)
            return result
        end
    end
    return nil
end

---@return int
function PlayerTagProxy:GetTagScoreWithId(roleId, id)
    return self:GetTagScoreWithCfg(roleId, LuaCfgMgr.Get("PlayerTag", id))
end

---@param roleId int
---@param tagCfg cfg.PlayerTag
function PlayerTagProxy:GetTagScoreWithCfg(roleId, tagCfg)
    if tagCfg == nil then
        Debug.LogErrorFormat("[PlayerFavorite]Tag Cfg is nil")
        return 0
    end

    ---@type pbcmessage.PlayerTag
    local tagData = self:GetTag(roleId, tagCfg.ID)
    if tagData ~= nil then
        if tagData.InitScore then
            return tagData.Score or 0

        end
    end

    if tagCfg.AssociateTag == nil or #tagCfg.AssociateTag == 0 then
        return 0
    end

    for i = 1, #tagCfg.AssociateTag do
        return self:GetTagScoreWithId(roleId, tagCfg.AssociateTag[i])
    end
end

---@return float
function PlayerTagProxy:GetTagChoosePercent(roleId, tagId)
    local tagData = self:GetTag(roleId, tagId)
    if tagData == nil or tagData.AppearNum == 0 then
        return 0
    end

    return tagData.ChooseNum / tagData.AppearNum
end

---@return pbcmessage.PlayerFavorite
function PlayerTagProxy:GetFavorite(roleId, favoriteId)
    local favoriteRecord = X3DataMgr.Get(X3DataConst.X3Data.FavoriteRecord, roleId)
    if favoriteRecord then
        ---@type table<int, X3Data.PlayerFavorite>
        local favorMap = favoriteRecord:GetFavoriteMap()
        if favorMap and favorMap[favoriteId] then
            local result = {}
            favorMap[favoriteId]:Encode(result)
            return result
        end
    end
    return nil
end

function PlayerTagProxy:GetWeeklyChoiceNum(roleId, tagType, tagId)
    local weeklyChoose = X3DataMgr.Get(X3DataConst.X3Data.PlayerChoose, roleId)
    if weeklyChoose == nil or weeklyChoose:GetChooses() == nil then
        return 0
    end

    ---@type table<int, X3Data.ChooseRecord>
    local choose = weeklyChoose:GetChooses()

    if tagId == -1 then
        local maxNum = 0
        local latest = 0
        for k, v in pairs(choose) do
            local cfg = LuaCfgMgr.Get("PlayerTag", k)
            if cfg then
                if cfg.Type == tagType and (maxNum < v:GetNum() or (maxNum == v:GetNum() and latest < v:GetPrimaryValue())) then
                    maxNum = v:GetNum()
                    latest = v:GetPrimaryValue()
                end
            else
                Debug.LogErrorFormat("Invalid tagId in record: %d", k)
            end
        end

        return maxNum
    else
        local cfg = LuaCfgMgr.Get("PlayerTag", tagId)
        if cfg and cfg.Type == tagType then
            return choose[tagId] and choose[tagId]:GetNum() or 0
        end
        Debug.LogErrorFormat("Invalid ConditionParam, tagId = %d, tagType = %d", tagId, tagType)
        return 0
    end
end

---@return X3Data.PlayerRecommendRecord
function PlayerTagProxy:GetLastAcceptFood(roleId)
    local playerRecommend = X3DataMgr.Get(X3DataConst.X3Data.PlayerRecommend, roleId)
    if playerRecommend and playerRecommend:GetRecommendMap() then
        local map = playerRecommend:GetRecommendMap()
        if map and map[X3_CFG_CONST.PLAYTAGTYPEFOOD] then
            return map[X3_CFG_CONST.PLAYTAGTYPEFOOD]
        end
    end
end

function PlayerTagProxy:GetWeeklyFavoriteFood(roleId)
    local tagType = X3_CFG_CONST.PLAYTAGTYPEFOOD
    local weeklyChoose = X3DataMgr.Get(X3DataConst.X3Data.PlayerChoose, roleId)
    if weeklyChoose == nil or weeklyChoose:GetChooses() == nil then
        return nil
    end
    ---@type table<int, X3Data.ChooseRecord>
    local chooses = weeklyChoose:GetChooses()

    local maxNum = 0
    local latest = 0
    local tagId = nil
    for k, v in pairs(chooses) do
        local cfg = LuaCfgMgr.Get("PlayerTag", k)
        local time = v:GetPrimaryValue()
        local num = v:GetNum()
        if cfg.Type == tagType and (maxNum < num or (maxNum == num and latest < time)) then
            maxNum = num
            latest = time
            tagId = k
        end
    end

    return tagId
end

function PlayerTagProxy:GetWeeklyContinueChangeNum(roleId, tagId, isAdd)
    local weeklyChoose = X3DataMgr.Get(X3DataConst.X3Data.PlayerChoose, roleId)
    if weeklyChoose == nil then
        return 0
    end
    local continueMap = nil
    if isAdd then
        continueMap = weeklyChoose:GetContinueAddScore()
    else
        continueMap = weeklyChoose:GetContinueDecScore()
    end

    if continueMap == nil then
        return 0
    end

    return continueMap[tagId] or 0
end

return PlayerTagProxy