---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/4/21 18:24
---@class CollectionRoomData
local CollectionRoomData = class("CollectionRoomData")

function CollectionRoomData:ctor()
    self.roleCollectMap = {}
    self.decorationInfoMap = {}  --装修道具数据（玩家装修数据从这里取）
end

---设置角色男主数据
function CollectionRoomData:SetRoleDataMap(role_map)
    self.roleCollectMap = self:SetRoleData(role_map)
end

---@param normal_data table NormalCollectionData
function CollectionRoomData:SetNormalCollectionData(normal_data)
    if normal_data and normal_data.CollectionInfoMap then
        for key, item in pairs(normal_data.CollectionInfoMap) do
            local itemCfg = LuaCfgMgr.Get("CollectionInfo", key)
            if itemCfg and itemCfg.Role > 0 then
                if self.roleCollectMap[itemCfg.Role] then
                    self.roleCollectMap[itemCfg.Role].CollectionMap[key] = item
                end
            else
                for i, v in pairs(self.roleCollectMap) do
                    v.CollectionMap[key] = item
                end
            end
        end
    end
end

---@param decoration pbcmessage.DecorationData
function CollectionRoomData:SetDecorationData(decoration)
    if decoration then
        for role_id, data in pairs(decoration.RoleDecorationMap) do
            if self.roleCollectMap[role_id] then
                self.roleCollectMap[role_id].DecorationMap = data.DecorationMap
                self.roleCollectMap[role_id].CollectionDecorationList = data.CollectionDecorationList
                self.roleCollectMap[role_id].CollectionPendantList = data.CollectionPendantList
                self.roleCollectMap[role_id].DecorationPrefabMap = data.DecorationPrefabMap
                self.roleCollectMap[role_id].InUsePrefab = data.InUsePrefab
            end
        end
        self:RefreshDecorationInfo(decoration.DecorationInfoMap)
    end
end

function CollectionRoomData:SetRoleData(role_map)
    local role_list = BllMgr.GetRoleBLL():GetRoleCfgList()
    for _, v in pairs(role_list) do
        if not role_map[v.ID] or not BllMgr.GetRoleBLL():IsUnlocked(v.ID) then
            role_map[v.ID] = {
                CollectionMap = {},
                DecorationMap = {},
                CollectionDecorationList = {},
                CollectionPendantList = {},
                DecorationPrefabMap = {},
                InUsePrefab = 0,
            }
        end
    end
    return role_map
end

---@class CollectionItem
---@field ID int
---@field Num int
---@field CreateTime uint
---@field GalleryNew int

---@return CollectionItem
---@param role_id int
---@param id int 藏品id
function CollectionRoomData:GetCollectionItemData(role_id, id)
    if self.roleCollectMap[role_id] then
        return self.roleCollectMap[role_id].CollectionMap[id]
    end
end

---获得角色男主藏品数据
function CollectionRoomData:GetRoleCollectMap()
    return self.roleCollectMap
end

function CollectionRoomData:GetRoleCollectDataByRoleID(role_id)
    role_id = role_id == 0 and 1 or role_id
    return self.roleCollectMap[role_id]
end

---更新装修道具数据
---@param d_list pbcmessage.Decoration
function CollectionRoomData:RefreshDecorationInfo(d_list)
    table.merge(self.decorationInfoMap, d_list)
end

---获取装修道具数据
function CollectionRoomData:GetDecorationInfo()
    return self.decorationInfoMap
end

---@return pbcmessage.Decoration
function CollectionRoomData:GetDecorationItem(id)
    return self.decorationInfoMap[id]
end

---是否拥有指定装修道具
function CollectionRoomData:HasDecorationByID(id)
    return self.decorationInfoMap[id] ~= nil
end

---获得第一个获取的藏品
---@param roleId int
function CollectionRoomData:GetFirstCollectionItem(roleId)
    local roleData = self.roleCollectMap[roleId]
    local collectionList = {}
    if roleData then
        for i, v in pairs(roleData.CollectionMap) do
            local cfg = LuaCfgMgr.Get("CollectionInfo", v.ID)
            if cfg and cfg.Role == roleId then
                table.insert(collectionList, v)
            end
        end
    end
    if not table.isnilorempty(collectionList) then
        table.sort(collectionList, function(a, b)
            return a.CreateTime < b.CreateTime
        end)
        return collectionList[1].ID
    end
    return 0
end

return CollectionRoomData