---
--- Generated by EmmyLua(https:--github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2021/11/23 15:55
---
---UserRecord数据
---@class UserRecordProxy
local UserRecordProxy = class("UserRecordProxy", BaseProxy)
local UserRecordData = require("Runtime.System.X3Game.Data.DataProxy.Data.UserRecordData")

---@class UserRecordGroup
---@field lastRefreshTime int 上次刷新时间
---@field expirationTime int 过期时间

---构造函数
function UserRecordProxy:OnInit()
    ---@type table<int, UserRecordGroup>
    self.recordGroupDict = {}
    ---@type UserRecordData
    self.userRecordRoot = UserRecordData.new()
end

---初始化数据
---@param table<number, pbcmessage.RecordGroup>
function UserRecordProxy:InitData(recordGroups)
    if recordGroups ~= nil then
        for k, v in pairs(recordGroups) do
            self:UpdateRecordGroup(k, v)
        end
    end
end

---返回RecordGroup字典
---@return table<Define.DateRefreshType, UserRecordGroup>
function UserRecordProxy:GetRecordGroupDict()
    return self.recordGroupDict
end

---返回某一类RecordGroup
---@param refreshType Define.DateRefreshType
function UserRecordProxy:GetRecordGroup(refreshType)
    if self.recordGroupDict[refreshType] == nil then
        self.recordGroupDict[refreshType] = { lastRefreshTime = 0, expirationTime = 0 }
    end
    return self.recordGroupDict[refreshType]
end

---返回一条UserRecord
---@param saveType int
---@return UserRecordData
function UserRecordProxy:GetUserRecord(saveType, ...)
    return self.userRecordRoot:GetUserRecord(saveType, ...)
end

---返回UserRecord值，默认为0
---@param saveType int
---@return int
function UserRecordProxy:GetUserRecordValue(saveType, ...)
    local userRecord = self:GetUserRecord(saveType, ...)
    if userRecord then
        return userRecord:GetValue()
    end
    return 0
end

---根据DataSaveInfo表Id取到数据
---@param id int 对应DataSave表Id
---@return UserRecordData
function UserRecordProxy:GetUserRecordById(id)
    local dataSaveInfo = LuaCfgMgr.Get("DataSaveInfo", id)
    if dataSaveInfo then
        return self:GetUserRecord(dataSaveInfo.SaveType, table.unpack(dataSaveInfo.SubIDs))
    end
    return nil
end

---更新某一个RecordId的刷新时间
---@param saveType int
function UserRecordProxy:UpdateRecordTimestampEvent(saveType, ...)
    local record = self:GetUserRecord(saveType, ...)
    if record then
        if record.timerId ~= 0 then
            TimerMgr.Discard(record.timerId)
            record.timerId = 0
        end
        if record.expirationTime >= TimerMgr.GetCurTimeSeconds() then
            local timerId = TimerMgr.AddTimer(record.expirationTime - TimerMgr.GetCurTimeSeconds(),
                    function()
                        EventMgr.Dispatch("UserRecordUpdate", record:GetSaveType(), table.unpack(record:GetSubIDs()))
                        Debug.LogFormat("[UserRecordUpdate] %d", record:GetSaveType())
                    end)
            record.timerId = timerId
        end
    end
end

---更新Record组数据
---@param refreshType Define.DateRefreshType
---@param recordGroup pbcmessage.RecordGroup
function UserRecordProxy:UpdateRecordGroup(refreshType, recordGroup)
    self:ClearByRefreshType(refreshType)
    if recordGroup ~= nil then
        local userRecordGroup = self:GetRecordGroup(refreshType)
        userRecordGroup.lastRefreshTime = recordGroup.LastRefreshTime
        userRecordGroup.expirationTime = TimeRefreshUtil.GetNextRefreshTime(recordGroup.LastRefreshTime, refreshType)
        if recordGroup.SubGroups ~= nil then
            for saveType, subGroup in pairs(recordGroup.SubGroups) do
                for _, userRecord in pairs(subGroup.Records) do
                    self:UpdateRecord(saveType, refreshType, userRecord)
                end
            end
        end
    end
end

---清理某一条Record记录
---@param saveType int
function UserRecordProxy:ClearUserRecord(saveType, ...)
    self.userRecordRoot:ClearUserRecord(saveType, ...)
end

---根据某个RefreshType清除数据，由于数据存储以SaveType为Key，除非使用字符串，不然无法建立起SaveType+SubIDs和RefreshType的引用关系
---@param refreshType int
function UserRecordProxy:ClearByRefreshType(refreshType)
    self.userRecordRoot:ClearByRefreshType(refreshType)
end

---更新单条Record数据
---@param saveType int
---@param refreshType Define.DateRefreshType
---@param userRecord pbcmessage.Record
function UserRecordProxy:UpdateRecord(saveType, refreshType, userRecord)
    local userRecordGroup = self:GetRecordGroup(refreshType)
    local userRecordData = self.userRecordRoot:AddUserRecord(saveType, table.unpack(userRecord.SubIDs))
    userRecordData:Init(refreshType, saveType, userRecord.SubIDs)
    userRecordData:Refresh(userRecord)
    userRecordData:UpdateExpirationTime(userRecordGroup.expirationTime)
    self:UpdateRecordTimestampEvent(saveType, table.unpack(userRecord.SubIDs))
    EventMgr.Dispatch("UserRecordUpdate", userRecordData:GetSaveType(), table.unpack(userRecord.SubIDs))
end

--region 临时，从record.proto复制，未来会有自动从Proto导出枚举的功能
---@class DataSaveRecordType
DataSaveRecordType = {
    DataSaveRecordTypeNope = 0;
    DataSaveRecordTypeWeekShareNum = 3; -- 每周分享次数
    DataSaveRecordTypeReceiveStaminaNum = 5; -- 收取好友赠送体力次数
    DataSaveRecordTypeJewelPowerNum = 6; -- 钻石购买体力次数
    DataSaveRecordTypeArenaBuyFightCount = 7; -- 竞技场购买战斗次数
    DataSaveRecordTypeArenaBuyRefreshOppCount = 8; -- 竞技场购买刷新对手次数
    DataSaveRecordTypeArenaCoinAddCount = 9; -- 竞技场币当天已获得次数
    DataSaveRecordTypeTrialNum = 10; -- 试炼场每日试炼次数
    DataSaveRecordTypeSoulTrialCrystal = 11; -- 心灵试炼水晶/每日试炼次数
    DataSaveRecordTypeGachaNum = 12; -- 每日抽卡次数
    DataSaveRecordTypeChocolateLimit = 13; -- 快乐巧克力周上限
    DataSaveRecordTypePhotoInsertCount = 14; -- 每日上传照片次数
    DataSaveRecordTypeChangeHeadCount = 15; -- 每日更换头像次数
    DataSaveRecordTypeChangeCoverCount = 16; -- 每日更换封面次数
    DataSaveRecordTypeChangeMomentCount = 17; -- 每日更换朋友圈次数
    DataSaveRecordTypePhotoTakeCount = 18; -- 每日拍摄照片次数
    DataSaveRecordTypeFashionDressNum = 19; -- 皮肤今日已搭配次数
    DataSaveRecordTypeMainUIInteractiveNum = 20; -- 主界面交互次数
    DataSaveRecordTypeMainUISpInteractiveNum = 21; -- 主界面特殊交互次数
    DataSaveRecordTypeSystemSettingPhoneVerifyNum = 22; -- 系统设置每月领取手机验证奖励次数
    DataSaveRecordTypeTrialBuyNum = 23; -- 试炼场每日购买次数
    DataSaveRecordTypeMsgChatNum = 24; -- 短消息聊天次数
    DataSaveRecordTypeTodayChatNum = 25; -- 短消息按男主/消息ID 分类汇总的聊天次数
    DataSaveRecordTypeChangeHeadTimes = 26; --换头像次数
    DataSaveRecordTypeChangeBubbleTimes = 27; -- 换气泡次数
    DataSaveRecordTypeChangeMomentTimes = 28; -- 换朋友圈次数
    DataSaveRecordTypeChangeNudgeTimes = 29; -- 更换戳一戳后缀次数
    DataSaveRecordTypeNudgeNum = 30; -- 被戳一戳次数
    DataSaveRecordTypeDailyPhoneNum = 31; -- 连麦次数
    DataSaveRecordTypePlayerTagRefuseNum = 32;  --任务191 “询问他今天吃什么，单轮中全部回答绝对不行”次数，用于限制客户端每日次数
    DataSaveRecordTypeMainUISpInterTaskCount      = 33;  -- 主界面特殊交互次数 用于记录每日历史最大值， 男主和TaskCountID作为键
    DataSaveRecordTypePersonalPhotoShowSetCount   = 34;  -- 照片展示今日设置次数
}
--endregion

return UserRecordProxy