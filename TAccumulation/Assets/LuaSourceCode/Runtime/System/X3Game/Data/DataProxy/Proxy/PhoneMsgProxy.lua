---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/11/28 18:10
---@class PhoneMsgProxy:BaseProxy
local PhoneMsgProxy = class("PhoneMsgProxy", BaseProxy)
local PhoneMsgConst = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgConst")
local PhoneMsgHelper = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgHelper")

function PhoneMsgProxy:OnInit()
    ---@type X3Data.PhoneMsgData
    self.phoneMsgData = X3DataMgr.Add(X3DataConst.X3Data.PhoneMsgData)
    ---@type X3Data.NudgeInfo[]
    self.nudgeInfoList = {}
    ---@type X3Data.ContactNudge[]
    self.contactNudgeList = {}
    ---@type X3Data.PhoneContactHead[]
    self.contactHeadList = {}
    ---@type X3Data.PhoneMsgExtraInfo[]
    self.extraIfoList = {}
    ---@type
end

---@param message pbcmessage.MessageData
function PhoneMsgProxy:Init(message)
    if message == nil then
        return
    end
    --region Parse
    self.phoneMsgData:SetLastRefreshTime(message.LastRefreshTime)
    self.phoneMsgData:SetChatAllNum(message.ChatAllNum)
    self.phoneMsgData:SetGuidGen(message.GuidGen)

    if message.MessageMap then
        for k, v in pairs(message.MessageMap) do
            self:AddMessage(v)
        end
    end

    if message.ActiveMessageMap then
        for k, v in pairs(message.ActiveMessageMap) do
            self:AddActiveMessage(k, v)
        end
    end

    if message.CollectStickerMap then
        for k, v in pairs(message.CollectStickerMap) do
            self.phoneMsgData:AddCollectStickerMapValue(v, k)
        end
    end

    if message.CacheIDMap then
        for k, v in pairs(message.CacheIDMap) do
            self.phoneMsgData:AddCacheIDMapValue(v, k)
        end
    end

    if message.CurrMsgIDs then
        for k, v in pairs(message.CurrMsgIDs) do
            local msgData = self:GetMessageData(v)
            if msgData then
                local contactData = self:GetValidContactData(msgData:GetContactID())
                contactData:SetCurMsgID(v)
            end
        end
    end

    if message.LastMsgIDs then
        for k, v in pairs(message.LastMsgIDs) do
            local msgData = self:GetMessageData(v)
            if msgData then
                local contactData = self:GetValidContactData(msgData:GetContactID())
                contactData:SetLastMsgID(v)
            end
        end
    end

    if message.Histories then
        for contactId, v in pairs(message.Histories) do
            if v and v.MessageList then
                local contactData = self:GetValidContactData(contactId)
                local msgList = v.MessageList
                local lastId = 0
                for i = 1, #msgList do
                    local serverData = self:GetMessageData(msgList[i])
                    if serverData and serverData:GetIsFinished() then
                        contactData:AddHistoryValue(msgList[i])
                        lastId = serverData:GetPrimaryValue()
                    end
                end

                if contactData:GetLastMsgID() == 0 then
                    contactData:SetLastMsgID(lastId)
                end
            end
        end
    end

    if message.RedPacket then
        for k, v in pairs(message.RedPacket) do
            self.phoneMsgData:AddRedPacketValue(v, k)
        end
    end

    if message.RewardMap then
        for k, v in pairs(message.RewardMap) do
            self.phoneMsgData:AddRewardMapValue(v, k)
        end
    end

    if message.CustomData then
        for k,v in pairs(message.CustomData) do
            if v.DataList then
                self:AddUniqueChoice(k, v.DataList)
            end
        end
    end
    --endregion

    ---@type X3Data.PhoneMsgContactData[]
    local allContactData = {}
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.PhoneMsgContactData, allContactData)
    for i = 1, count do
        self:RefreshTopicRed(allContactData[i]:GetPrimaryValue())
    end
    self:CheckStickerRed()
end

---@return X3Data.PhoneMsgContactData
function PhoneMsgProxy:GetValidContactData(contactId)
    ---@type X3Data.PhoneMsgContactData
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgContactData, contactId)
    if contactData == nil then
        contactData = X3DataMgr.Add(X3DataConst.X3Data.PhoneMsgContactData)
        contactData:SetPrimaryValue(contactId)
        contactData:SetShowTopicRed(true)
    end

    return contactData
end

---@return X3Data.PhoneMsgContactData
function PhoneMsgProxy:GetContactData(contactId)
    return X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgContactData, contactId)
end

---@return int
---@param result X3Data.PhoneMsgContactData[]
function PhoneMsgProxy:GetAllContactData(result)
    return X3DataMgr.GetAll(X3DataConst.X3Data.PhoneMsgContactData, result)
end

function PhoneMsgProxy:AddActiveMessage(id, state)
    ---@type cfg.PhoneMsg
    local cfg = LuaCfgMgr.Get("PhoneMsg", id)
    if cfg == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.PhoneMsg, "Active Msg Id is Invalid, id = %d", id)
        return
    end

    if cfg.Contact ~= 0 then
        local contactData = self:GetValidContactData(cfg.Contact)
        local activeChatDict = self.phoneMsgData:GetActiveMessageMap()

        if PhoneMsgConst.NormalMsgType[cfg.Type] then
            if cfg.Principal == 0 then
                if activeChatDict == nil or activeChatDict[id] == nil then
                    contactData:SetNewTopicCount(contactData:GetNewTopicCount() + 1)
                end
                contactData:AddOrUpdateTopicMapValue(id, state)
            elseif cfg.Principal == 1 then
                contactData:AddOrUpdateAutoActiveMsgMapValue(id, state)
            end
        end

        self.phoneMsgData:AddOrUpdateActiveMessageMapValue(id, state)
        self:RefreshTopicRed(cfg.Contact)
    end
end

function PhoneMsgProxy:RemoveActiveMessage(id)
    ---@type cfg.PhoneMsg
    local cfg = LuaCfgMgr.Get("PhoneMsg", id)
    if cfg == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.PhoneMsg, "Active Msg Id is Invalid, id = %d", id)
        return
    end

    local contactData = self:GetValidContactData(cfg.Contact)
    local activeChatDict = self.phoneMsgData:GetActiveMessageMap()

    if PhoneMsgConst.NormalMsgType[cfg.Type] then
        if cfg.Principal == 0 then
            if activeChatDict == nil or activeChatDict[id] ~= nil then
                contactData:SetNewTopicCount(contactData:GetNewTopicCount() - 1)
            end
            contactData:RemoveTopicMapValue(id)
        elseif cfg.Principal == 1 then
            contactData:RemoveAutoActiveMsgMapValue(id)
        end
    end

    self.phoneMsgData:RemoveActiveMessageMapValue(id)
    self:RefreshTopicRed(cfg.Contact)
end

function PhoneMsgProxy:GetActiveMessageDic()
    return self.phoneMsgData:GetActiveMessageMap()
end

function PhoneMsgProxy:GetPrincipalActiveMsgDic(contactId)
    local contactData = self:GetValidContactData(contactId)
    return contactData:GetPrincipalActiveMessageMap()
end

function PhoneMsgProxy:IsInActiveDic(msgId)
    local activeDic = self.phoneMsgData:GetActiveMessageMap()
    return activeDic ~= nil and activeDic[msgId] ~= nil
end

---@return number
---@param result X3Data.PhoneMsgDetailData[]
function PhoneMsgProxy:GetChatDic(result)
    return X3DataMgr.GetAll(X3DataConst.X3Data.PhoneMsgDetailData, result)
end

---@param messageData pbcmessage.ShortMsg
---@return X3Data.PhoneMsgDetailData
function PhoneMsgProxy:AddMessage(messageData)
    if messageData == nil then
        return
    end

    --region pharse
    ---@type X3Data.PhoneMsgDetailData
    local detailData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData,messageData.GUID)
    if not detailData then
        detailData = X3DataMgr.Add(X3DataConst.X3Data.PhoneMsgDetailData)
        self.phoneMsgData:AddOrUpdateMsgGUIDMapValue(messageData.TableID, messageData.GUID)
        detailData:SetPrimaryValue(messageData.GUID)
    end


    detailData:Clear()
    detailData:SetID(messageData.TableID)
    detailData:SetCreateTime(messageData.CreateTime)
    detailData:SetContactID(messageData.ContactID)
    detailData:SetLastRefreshTime(messageData.LastRefreshTime)
    detailData:SetIsFinished(messageData.IsFinished)

    if messageData.ChoiceList ~= nil and #messageData.ChoiceList > 0 then
        for i = 1, #messageData.ChoiceList do
            detailData:AddChoiceListValue(messageData.ChoiceList[i])
        end
    end

    if messageData.RewardMap ~= nil then
        for k, v in pairs(messageData.RewardMap) do
            detailData:AddRewardMapValue(v, k)
        end
    end

    if messageData.RedPacket ~= nil then
        for k, v in pairs(messageData.RedPacket) do
            detailData:AddRedPacketValue(v, k)
        end
    end

    if messageData.NudgeNumMap ~= nil then
        for k, v in pairs(messageData.NudgeNumMap) do
            ---@type X3Data.NudgeInfo
            local nudgeInfo = X3DataMgr.Create(X3DataConst.X3Data.NudgeInfo)
            table.insert(self.nudgeInfoList, nudgeInfo)
            nudgeInfo:SetNum(v.Num)
            nudgeInfo:SetLastTime(v.LastTime)
            detailData:AddNudgeNumMapValue(nudgeInfo, k)
        end
    end

    if messageData.Extra ~= nil then
        local extra = X3DataMgr.Create(X3DataConst.X3Data.PhoneMsgExtraInfo)
        table.insert(self.extraIfoList, extra)

        extra:SetBubbleID(messageData.Extra.BubbleID)

        if messageData.Extra.NudgeSign ~= nil then
            local contactNudge = X3DataMgr.Create(X3DataConst.X3Data.ContactNudge)
            table.insert(self.contactNudgeList, contactNudge)
            contactNudge:DecodeByField(messageData.Extra.NudgeSign)
            extra:SetNudgeSign(contactNudge)
        end

        if messageData.Extra.Head ~= nil then
            local contactHead = X3DataMgr.Create(X3DataConst.X3Data.PhoneContactHead)
            table.insert(self.contactHeadList, contactHead)
            contactHead:DecodeByField(messageData.Extra.Head)
            extra:SetHeadIcon(contactHead)
        end

        detailData:SetExtra(extra)
    end
    --endregion

    local contactData = self:GetValidContactData(messageData.ContactID)
    if contactData:GetLastRefreshTime() < messageData.LastRefreshTime then
        contactData:SetLastRefreshTime(messageData.LastRefreshTime)
    end
    self:InitAutoFinishRed(detailData:GetPrimaryValue(), detailData:GetID(), detailData:GetContactID())

    return detailData
end

---@param msgGuid pbcmessage.ShortMsg
function PhoneMsgProxy:RemoveMessage(msgGuid, waitForActive)
    local messageData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, msgGuid)
    if messageData == nil then
        return
    end

    local cfgId = messageData:GetID()
    self.phoneMsgData:RemoveMsgGUIDMapValue(cfgId)
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgContactData, messageData:GetContactID())
    local history = contactData:GetHistory()
    if history then
        local idx = nil
        for i = 1, #history do
            if history[i] == msgGuid then
                idx = i
                break
            end
        end
        contactData:RemoveHistoryValue(idx)
    end
    X3DataMgr.Remove(X3DataConst.X3Data.PhoneMsgDetailData, msgGuid)
    if waitForActive then
        self:AddActiveMessage(cfgId, true)
    end
end

---@param messageData X3Data.PhoneMsgDetailData
function PhoneMsgProxy:AddMessageToHistory(messageData)
    local cfgId = messageData:GetID()
    local cfg = LuaCfgMgr.Get("PhoneMsg", cfgId)
    if cfg == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.PhoneMsg, "Invalid MsgCfgId = %d", cfgId)
        return
    end

    local contactData = SelfProxyFactory.GetPhoneMsgProxy():GetValidContactData(messageData:GetContactID())
    if PhoneMsgConst.SavingMsgType[cfg.Type] then
        contactData:AddHistoryValue(messageData:GetPrimaryValue())
    end

    if messageData:GetPrimaryValue() == contactData:GetCurMsgID() then
        contactData:SetLastMsgID(contactData:GetCurMsgID())
        contactData:SetCurMsgID(0)
    end
end

function PhoneMsgProxy:AddNudge(contactId, msgId, convId)
    local msgData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, msgId)
    if msgData == nil then
        return
    end

    ---@type table<int, X3Data.NudgeInfo>
    local nudgeMap = msgData:GetNudgeNumMap()
    local nudgeInfo = nudgeMap and nudgeMap[convId]
    if nudgeInfo then
        nudgeInfo:SetNum(nudgeInfo:GetNum() + 1)
        nudgeInfo:SetLastTime(GrpcMgr.GetServerTimeToUnixTimeSeconds())
    else
        local nudgeInfo = X3DataMgr.Create(X3DataConst.X3Data.NudgeInfo)
        table.insert(self.nudgeInfoList, nudgeInfo)
        nudgeInfo:SetNum(1)
        nudgeInfo:SetLastTime(GrpcMgr.GetServerTimeToUnixTimeSeconds())
        msgData:AddNudgeNumMapValue(nudgeInfo, convId)
    end
end

function PhoneMsgProxy:SetRedPacketState(convId, state)
    self.phoneMsgData:AddOrUpdateRedPacketValue(convId, state)
end

function PhoneMsgProxy:SetRewardState(convId, state)
    self.phoneMsgData:AddOrUpdateRewardMapValue(convId, state)
end

---@return X3Data.PhoneMsgDetailData
function PhoneMsgProxy:GetMessageData(guid)
    if guid == nil then
        return nil
    end
    return X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, guid)
end

---通过配置Id获取短信Id，由于同一id闲聊会存在多份，该接口不适用
---@return X3Data.PhoneMsgDetailData
function PhoneMsgProxy:GetMessageGuid(cfgId)
    local msgGuidMap = self.phoneMsgData:GetMsgGUIDMap()
    if msgGuidMap then
        return msgGuidMap[cfgId]
    end
end

---通过配置Id获取短信Id，由于同一id闲聊会存在多份，该接口不适用
---@return X3Data.PhoneMsgDetailData
function PhoneMsgProxy:GetMessageDataByCfgId(cfgId)
    return self:GetMessageData(self:GetMessageGuid(cfgId) or 0)
end

function PhoneMsgProxy:GetRedPacketMap()
    return self.phoneMsgData:GetRedPacket()
end

function PhoneMsgProxy:GetRewardMap()
    return self.phoneMsgData:GetRewardMap()
end

function PhoneMsgProxy:GetUniqueChoiceMap(conditionGroup)
    local conditionRecord = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgConditionRecord, conditionGroup)
    return conditionRecord and conditionRecord:GetRecord() or {}
end

function PhoneMsgProxy:AddUniqueChoice(conditionGroup, ids)
    local conditionRecord = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgConditionRecord, conditionGroup)
    if conditionRecord == nil then
        conditionRecord = X3DataMgr.AddByPrimary(X3DataConst.X3Data.PhoneMsgConditionRecord, nil, conditionGroup)
    end

    for _, id in pairs(ids) do
        conditionRecord:AddOrUpdateRecordValue(id, true)
    end
end

---@param conditions cfg.PhoneMsgConversationCondition[]
function PhoneMsgProxy:ClearUniqueChoice(conditionGroup)
    X3DataMgr.Remove(X3DataConst.X3Data.PhoneMsgConditionRecord, conditionGroup)
end

--region Emoji
function PhoneMsgProxy:AddCustomEmoji(id, isNew)
    self.phoneMsgData:AddOrUpdateCollectStickerMapValue(id, isNew)
    self:CheckStickerRed(id)
end

function PhoneMsgProxy:HasCustomEmoji()
    local emojiMap = self.phoneMsgData:GetCollectStickerMap()
    return emojiMap ~= nil and next(emojiMap)
end

function PhoneMsgProxy:GetCustomEmoji(id)
    local emojiMap = self.phoneMsgData:GetCollectStickerMap()
    if emojiMap ~= nil then
        return emojiMap[id]
    end
    return nil
end

function PhoneMsgProxy:GetCustomEmojiDic()
    return self.phoneMsgData:GetCollectStickerMap()
end
--endregion
--region RedPoint
function PhoneMsgProxy:SetNewTopicRedState(contactId, isShow)
    if isShow ~= nil then
        local contactData = self:GetValidContactData(contactId)
        contactData:SetShowTopicRed(isShow)
    end
    self:RefreshTopicRed(contactId)
end

function PhoneMsgProxy:RefreshTopicRed(contactId)
    local contactData = self:GetValidContactData(contactId)
    local showTopicRed = BllMgr.GetMobileContactBLL():IsUnlockContact(contactId) and contactData:GetShowTopicRed()
    local redCount = showTopicRed and (contactData:GetCurMsgID() ~= 0 or contactData:GetLastMsgID() ~= 0) and contactData:GetNewTopicCount() or 0
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_TOPIC, redCount, contactId)
    EventMgr.Dispatch("EVENT_MSG_RP_REFRESH")
end

function PhoneMsgProxy:CheckStickerRed(id)
    local stickerMap = self.phoneMsgData:GetCollectStickerMap()
    if stickerMap == nil then
        return
    end

    if id then
        local isNew = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJI, id) == 0
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJI, isNew and 1 or 0, id)

        ---@type cfg.PhoneChatSticker
        local cfg = LuaCfgMgr.Get("PhoneChatSticker", id)
        if cfg == nil then
            return
        end
        if (RedPointMgr.GetCount(X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJIITEM, id) == 1) ~= isNew then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJI,
                    RedPointMgr.GetCount(X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJI, cfg.Sort) + (isNew and 1 or -1), cfg.Sort)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJIITEM, isNew and 1 or 0, id)
        end
        EventMgr.Dispatch("EVENT_MSG_RP_REFRESH")
    else
        for k, _ in pairs(stickerMap) do
            self:CheckStickerRed(k)
        end
    end
end

function PhoneMsgProxy:InitAutoFinishRed(guid, msgId, contactId)
    ---@type cfg.PhoneMsg
    local cfg = LuaCfgMgr.Get("PhoneMsg", msgId)
    if cfg.IsReaded == 1 then
        local conversationList = PhoneMsgHelper.GetConversation(guid)
        for i = 1, #conversationList do
            local cfgId = conversationList[i]
            ---@type cfg.PhoneMsgConversation
            local cfg = LuaCfgMgr.Get("PhoneMsgConversation", cfgId)
            if PhoneMsgConst.ContentConversationType[cfg.Type] and cfg.Teller ~= PhoneMsgConst.PlayerTellerId then
                local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, cfgId)
                if not value or value == 0 then
                    local contactData = self:GetValidContactData(contactId)
                    contactData:AddOrUpdateFinishMsgRedPointValue(cfgId, true)
                    local preCount = RedPointMgr.GetCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, contactId)
                    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, preCount + 1, contactId)
                end
            end
        end
    end
end

function PhoneMsgProxy:ClearAutoFinishRed(contactId)
    local contactData = self:GetValidContactData(contactId)
    local redMap = contactData:GetFinishMsgRedPoint()
    if redMap then
        for cfgId, _ in pairs(redMap) do
            local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, cfgId)
            if not value or value == 0 then
                RedPointMgr.Save(2, X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, cfgId)
                local preCount = RedPointMgr.GetCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, contactId)
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, preCount - 1, contactId)
            end
        end
    end
end
--endregion

function PhoneMsgProxy:OnClear()
    if self.nudgeInfoList then
        for i = 1, #self.nudgeInfoList do
            X3DataMgr.Release(self.nudgeInfoList[i])
        end
        self.nudgeInfoList = {}
    end

    if self.contactNudgeList then
        for i = 1, #self.contactNudgeList do
            X3DataMgr.Release(self.contactNudgeList[i])
        end
        self.contactNudgeList = {}
    end

    if self.contactHeadList then
        for i = 1, #self.contactHeadList do
            X3DataMgr.Release(self.contactHeadList[i])
        end
        self.contactHeadList = {}
    end

    if self.extraIfoList then
        for i = 1, #self.extraIfoList do
            X3DataMgr.Release(self.extraIfoList[i])
        end
        self.extraIfoList = {}
    end
    X3DataMgr.RemoveAll(X3DataConst.X3Data.PhoneMsgDetailData)
    X3DataMgr.RemoveAll(X3DataConst.X3Data.PhoneMsgContactData)

    if self.phoneMsgData then
        X3DataMgr.RemoveAll(X3DataConst.X3Data.PhoneMsgData)
        self.phoneMsgData = nil
    end
end

return PhoneMsgProxy