---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/1/4 17:33
---
---邮件数据
---@class MailProxy
local MailProxy = class("MailProxy", BaseProxy)

function MailProxy:OnInit()
    self.timers = {}
    self.overdueSpeedupTime = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.OVERDUESPEEDUP) * 60 * 60
end

---@param mails pbcmessage.Mail[]
function MailProxy:AddMails(mails, isCover)
    if isCover then
        X3DataMgr.RemoveAll(X3DataConst.X3Data.Mail)
    end
    
    for i = 1, #mails do
        self:AddMail(mails[i])
    end
end

---@param mail pbcmessage.Mail
function MailProxy:AddMail(mail)
    local mailData = X3DataMgr.Get(X3DataConst.X3Data.Mail, mail.MailId)
    if mailData == nil then
        mailData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.Mail, mail, mail.MailId)
    else
        mailData:DecodeByField(mail)
    end

    self:FormatMailData(mailData)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAIL, self:IsHighLight(mailData) and 1 or 0, mail.MailId)

    if self.timers[mail.MailId] then
        TimerMgr.Discard(self.timers[mail.MailId])
    end

    self.timers[mail.MailId] = TimerMgr.AddTimer(math.ceil(mail.ExpTime - GrpcMgr.GetServerTimeToUnixTimeSeconds()), function()
        self:DelMail(mail.MailId)
        TimerMgr.Discard(self.timers[mail.MailId])
        self.timers[mail.MailId] = nil
    end )
end

function MailProxy:DelMail(mailId)
    X3DataMgr.Remove(X3DataConst.X3Data.Mail, mailId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAIL,  0, mailId)
end

function MailProxy:ReadMail(mailId)
    ---@type X3Data.Mail
    local mail = X3DataMgr.Get(X3DataConst.X3Data.Mail, mailId)
    if mail then
        mail:SetIsRead(1)
        self:AdjustTime(mail)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAIL,  self:IsHighLight(mail) and 1 or 0, mailId)
    end
end

function MailProxy:DrawMail(mailId)
    ---@type X3Data.Mail
    local mail = X3DataMgr.Get(X3DataConst.X3Data.Mail, mailId)
    if mail then
        mail:SetIsRead(1)
        mail:SetIsReward(X3DataConst.MailReward.MailRewardDone)
        self:AdjustTime(mail)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAIL, 0, mailId)
    end
end

---@param mail X3Data.Mail
function MailProxy:AdjustTime(mail)
    if mail:GetIsRead() == 1 and mail:GetIsReward() ~= 1 then
        local svrTime = GrpcMgr.GetServerTimeToUnixTimeSeconds()
        mail:SetExpTime(math.min(mail:GetExpTime(), svrTime + self.overdueSpeedupTime))
    end
end

---格式化运营邮件
---@param mail X3Data.Mail
function MailProxy:FormatMailData(mail)
    if mail:GetMailType() ~= X3DataConst.MailType.MailTypeSystem then
        mail:SetTitle(self:FormatString(mail:GetTitle()))
        mail:SetContent(self:FormatString(mail:GetContent()))
        mail:SetSender(self:FormatString(mail:GetSender()))
        mail:SetRecver(self:FormatString(mail:GetRecver()))
    end
end

---解析运营邮件的Json
---@param str string
---@return string
function MailProxy:FormatString(str)
    local langStr = self:GetStrByLang(str)

    langStr = string.replace(langStr,"\\\\", "\\");
    langStr = string.replace(langStr,"\\n", "\n");
    return UITextHelper.ReplaceTag(langStr)
end

function MailProxy:GetStrByLang(str)
    local langTab = JsonUtil.Decode(str)
    if langTab then
        ---优先找邮件里面有没有lang标签 没有就显示里面的所有内容
        local lang = nil
        for i = 1, #langTab do
            if langTab[i].lang then
                lang = langTab[i].lang
                break
            end
        end
        if not lang then
            return str
        end
        ---优先找当前语言的邮件
        lang = Locale.GetCMSLangName()
        for i = 1, #langTab do
            if langTab[i].lang == lang then
                return langTab[i].text
            end
        end
        ---找默认的语言邮件
        lang = Locale.GetCMSFallbackLangName()
        for i = 1, #langTab do
            if langTab[i].lang == lang then
                return langTab[i].text
            end
        end
        ---还是没有
        return ""
    end
    return str
end

---邮件是否是否需要高亮置顶
---@param mail X3Data.Mail
---@return boolean
function MailProxy:IsHighLight(mail)
    return mail:GetIsReward() == X3DataConst.MailReward.MailRewardCan
            or mail:GetIsRead() == 0
end

---@return X3Data.Mail[]
function MailProxy:GetMails()
    local result = {}
    X3DataMgr.GetAll(X3DataConst.X3Data.Mail, result, nil,     function(a, b)
        local isAHighlight = self:IsHighLight(a)
        local isBHighlight = self:IsHighLight(b)
        if isAHighlight and not isBHighlight then
            return true
        elseif not isAHighlight and isBHighlight then
            return false
        else
            return a:GetSendTime() > b:GetSendTime() --按时间降序排列
        end
    end)


    return result
end

---@return X3Data.Mail
function MailProxy:GetMail(mailId)
    return X3DataMgr.Get(X3DataConst.X3Data.Mail, mailId)
end

function MailProxy:OnClear()
    for _,v in pairs(self.timers) do
        TimerMgr.Discard(v)
    end
    table.clear(self.timers)
    X3DataMgr.RemoveAll(X3DataConst.X3Data.Mail)
end

return MailProxy