---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2023/5/26 16:38
---
---@class ScoreProxy:BaseProxy
local ScoreProxy = class("ScoreProxy", BaseProxy)
local ScoreConst = require("Runtime.System.X3Game.GameConst.ScoreConst")
---初始化当前所有Score数量
local function InitAllScoreNum()
    local ret = 0
    local allCardCfg = LuaCfgMgr.GetAll("SCoreBaseInfo")
    for k, v in pairs(allCardCfg) do
        if v.Disable == 0 and v.Visible == 1 then
            ret = ret + 1
        end
    end
    return ret
end

---添加score
---@type pbcmessage.SCore
local function AddOrUpdateScore(serverData)
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.SCore, serverData.Id)
    if scoreData == nil then
        scoreData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.SCore, serverData, serverData.Id)
    else
        scoreData:DecodeByField(serverData)
    end
end

---删除score
---@param scoreId int scoreId
local function RemoveScore(scoreId)
    local success = X3DataMgr.Remove(X3DataConst.X3Data.SCore, scoreId)
    if not success then
        Debug.LogWithTag(GameConst.LogTag.Score, "remove is fail scoreId", scoreId)
    end
end

local function InitCard2ScoreCfg()
    local allCfg = LuaCfgMgr.GetAll("SCoreBaseInfo")
    for k, v in pairs(allCfg) do
        if not table.isnilorempty(v.Card) then
            for _, cardId in pairs(v.Card) do
                local card2ScoreData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.Card2ScoreCfgData, nil, cardId)
                card2ScoreData:SetSCoreId(v.ID)
            end
        end
    end
end

function ScoreProxy:OnInit()
    ---@type int  所有Score数量 指的是配置中所有的Score
    self.allScoreNum = InitAllScoreNum()
    InitCard2ScoreCfg()
    self:Subscribe()
end

function ScoreProxy:OnClear()
    self:UnSubscribe()
    X3DataMgr.RemoveAll(X3DataConst.X3Data.SCore)
    X3DataMgr.RemoveAll(X3DataConst.X3Data.Card2ScoreCfgData)
end

function ScoreProxy:Subscribe()
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.SCore, self.OnScoreAdd, self, X3DataConst.X3DataChangeFlag.Add)
    X3DataMgr.SubscribeWithChangeFlag(X3DataConst.X3Data.SCore, self.OnScoreRemove, self, X3DataConst.X3DataChangeFlag.Remove)
    X3DataMgr.Subscribe(X3DataConst.X3Data.SCore, self.OnScoreSuitIDChanged, self, X3DataConst.X3DataField.SCore.SuitID)
    X3DataMgr.Subscribe(X3DataConst.X3Data.SCore, self.OnScoreVoicesChanged, self, X3DataConst.X3DataField.SCore.Voices)
end

function ScoreProxy:UnSubscribe()
    X3DataMgr.UnsubscribeWithTarget(self)
end

---AddOrRemove scoreData
---@param data X3Data.SCore
---@param changeFlag X3DataConst.X3DataChangeFlag
function ScoreProxy:OnScoreAdd(data, changeFlag)
    local scoreId = data:GetPrimaryValue()
    EventMgr.Dispatch(ScoreConst.Event.SCORE_ADD, scoreId)
end

function ScoreProxy:OnScoreRemove(data, changeFlag)
    local scoreId = data:GetPrimaryValue()
    EventMgr.Dispatch(ScoreConst.Event.SCORE_REMOVE, scoreId)
end

---score套装id变更
---@param data X3Data.SCore
function ScoreProxy:OnScoreSuitIDChanged(data)
    local scoreId = data:GetPrimaryValue()
    EventMgr.Dispatch(ScoreConst.Event.SCORE_SUIT_ID_CHANGE, scoreId)
end

---score激活语音变更
---@param data X3Data.SCore
function ScoreProxy:OnScoreVoicesChanged(data)
    local scoreId = data:GetPrimaryValue()
    EventMgr.Dispatch(ScoreConst.Event.SCORE_VOICES_CHANGE, scoreId)
end

--region 服务器协议
function ScoreProxy:OnEnterGameReply(data)
    self:SetScoreMap(data.SCoreMap)
end

---@param data pbcmessage.SCoreUpdateReply
function ScoreProxy:OnSCoreUpdateReply(data)
    if data.OpType == 1 then
        self:AddScoreList(data.SCoreList)
    elseif data.OpType == 2 then
        self:RemoveScoreList(data.SCoreList)
    end
end

---SCore信息
---@param data pbcmessage.GetSCoreInfoReply
function ScoreProxy:OnGetSCoreInfoReply(data)
    self:SetScoreMap(data.SCore.SCoreMap)
end

---SCore换皮肤
---@param data pbcmessage.SCoreSuitChangeReply
function ScoreProxy:OnSCoreSuitChangeReply(data)
    ---@type X3Data.SCore
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.SCore, data.SCoreId)
    if scoreData then
        scoreData:SetSuitID(data.SuitID)
    end
end

---SCore激活语音
---@param data pbcmessage.SCoreActiveVoicesReply
function ScoreProxy:OnSCoreActiveVoicesReply(data)
    ---@type X3Data.SCore
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.SCore, data.SCoreId)
    if scoreData then
        scoreData:ClearVoicesValue()
        for k, v in pairs(data.VoiceIDs) do
            scoreData:AddOrUpdateVoicesValue(k, v)
        end
    end
end
--endregion

function ScoreProxy:SetScoreMap(scoreMap)
    for k, v in pairs(scoreMap) do
        AddOrUpdateScore(v)
    end
end

---@param scoreList table<pbcmessage.SCore>
function ScoreProxy:AddScoreList(scoreList)
    for i = 1, #scoreList do
        ---@type pbcmessage.SCore
        local serverData = scoreList[i]
        AddOrUpdateScore(serverData)
    end
end

---@param scoreList table<pbcmessage.SCore>
function ScoreProxy:RemoveScoreList(scoreList)
    for i = 1, #scoreList do
        ---@type pbcmessage.SCore
        local serverData = scoreList[i]
        RemoveScore(serverData.Id)
    end
end

---获取score数据
---@param scoreId int SCoreBaseInfo.ID
---@return X3Data.SCore
function ScoreProxy:GetScoreData(scoreId)
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.SCore, scoreId)
    return scoreData
end

---获取当前配置开放的所有Score数量
---@return int
function ScoreProxy:GetAllCfgScoreNum()
    return self.allScoreNum
end

---获取score列表
---@param roleId int
---@return table<X3Data.SCore>
function ScoreProxy:GetScoreDataList(roleId)
    local ret = {}
    if roleId == nil or roleId == 0 then
        X3DataMgr.GetAll(X3DataConst.X3Data.SCore, ret)
    else
        X3DataMgr.GetAll(X3DataConst.X3Data.SCore, ret, function(scoreData)
            local scoreId = scoreData:GetPrimaryValue()
            ---@type cfg.SCoreBaseInfo
            local scoreBaseInfo = LuaCfgMgr.Get("SCoreBaseInfo", scoreId)
            if scoreBaseInfo then
                return scoreBaseInfo.ManType == roleId
            end
        end)
    end
    return ret
end

---score是否解锁
---@param scoreId int
---@return boolean
function ScoreProxy:ScoreIsUnlock(scoreId)
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.SCore, scoreId)
    if scoreData == nil then
        return false
    end
    return true
end

---score是否收藏此语音
---@param scoreId int
---@param dialogueId int
function ScoreProxy:HasVoice(scoreId, dialogueId)
    ---@type X3Data.SCore
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.SCore, scoreId)
    if scoreData then
        local voiceDic = scoreData:GetVoices()
        if voiceDic and voiceDic[dialogueId] then
            return true
        end
    end
    return false
end

---根据CardId获取专属ScoreId
---@param cardId int 思念ID
---@return int scoreId 获取不到为空
function ScoreProxy:GetScoreIdByCardId(cardId)
    local card2ScoreData = X3DataMgr.Get(X3DataConst.X3Data.Card2ScoreCfgData, cardId)
    if not card2ScoreData then
        return nil
    end
    return card2ScoreData:GetSCoreId()
end

return ScoreProxy