---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/3/23 20:57
---

---@class ActivityCenterProxy : BaseProxy
local ActivityCenterProxy = class("ActivityCenterProxy", BaseProxy)
local FieldType = X3DataConst.X3Data.Activity
local ActivityCenterConst = require("Runtime.System.X3Game.GameConst.ActivityCenterConst")

--region 服务器结构说明

---@class ActivityBase
---@field ID int 活动ID
---@field Point int 活动分数（累计获得活动代币的数量）
---@field Reward ActivityReward
---@field TotalLogin ActivityTotalLogin
---@field Score int
---@field SubmitIDs int[]


---这里也抽出去搞个定义

-----分类排序数据
---@class ActivityTypeCMSConfig
---@field ID int 活动分类ID
---@field IsOpen bool 是否生效
---@field StartTime int 实际有效开放时间
---@field EndTime int 实际有效关闭时间
---@field Type int 分类类型
---@field TypeDes string 分类文字
---@field Icon string 独立入口图标,当类型为2（主界面独立入口）时，配置入口ICON名（由研发提供）
---@field RelateID int[]  关联活动ID
---@field PageOrder int 页签排序
---@field SelectFlag bool 默认选中
---@field TimeZoneType ActivityCenterConst.TimeZoneType 时区类型

---@class ActivityCMSCondition
---@field Params int[]  类型+参数列表

------活动CMS数据
---@class ActivityCMSConfig
---@field ID int 活动ID
---@field IsOpen bool 是否生效
---@field StartTime int 实际有效开放时间
---@field EndTime int 实际有效关闭时间
---@field ShowStartTime int 活动显示时间
---@field ShowEndTime int  活动隐藏时间
---@field RedPointType int 红点类型
---@field BannerOrder string Banner排序
---@field BannerImg string Banner图
---@field JumpType int 跳转类型
---@field JumpParam string 跳转参数
---@field RelateID string 关联活动ID
---@field Name string  活动名称 --- 暂时没有用到
---@field Conditions ActivityCMSCondition 活动开放条件
---@field TimeStyle string 活动样式
---@field TimeStyleRange string 活动时间范围
---@field ActivityType ActivityCenterConst.ActivityEntryType 对应活动在ActivityCenter中的活动类型
---@field TimeZoneType ActivityCenterConst.TimeZoneType 时区类型
---@field RedPointID int 业务红点ID，用于此活动仅为跳转入口，又需要展示对应业务红点时
---@field AcRedPointID int 业务红点ID，用于此活动有独立的实现，默认获取红点数量时，使用对应的活动Id作为参数
---@field PlatIDs table<int> 所属渠道列表

---弹脸公告数据
---@class MHTipsData
---@field id int 公告id
---@field isOpen bool 是否生效
---@field sortOrder int 排序优先级
---@field imageUrl string 图片的url
---@field jumpUrl string 跳转链接
---@field jumpParam int 跳转参数 可能为游戏内JumpId，或CMS的活动ID
---@field StartTime int 实际有效开放时间
---@field EndTime int 实际有效关闭时间

--endregion

---初始化
---@param owner ActivityCenterProxy
function ActivityCenterProxy:OnInit(owner)
    self.super.OnInit(self, owner)
    -----@type int 当前设置的背景音乐单曲Id
    --self.songId = 0

    -----@type table<int,pbcmessage.Activity > 活动基础数据字典
    self.activityBaseDic = {}

    -----@type table<int, ActivityCMSConfig> 活动数据
    self.activityCMSConfigDic = {}

    --活动数据 使用conditionType作为key的字典，用于conditon变化时重新判断
    self.activityConditionDic = {}

    ---活动入口数据
    ---@type table<number, ActivityTypeCMSConfig>
    self.activitySortDic = {}

    ---@type table<int,MHTipsData> 公告数据列表
    self.paDataList = {}

    ---@type table<int, table<int>> 要附加的红点为key，值为cmsID列表
    self.attachRpDic = {}
end

function ActivityCenterProxy:GetAttachActivityList(rpId)
    return self.attachRpDic[rpId]
end

---刷新活动基础数据
---@param serverData pbcmessage.ActivityData 活动基础数据
function ActivityCenterProxy:RefreshBaseData(serverData)
    --self.activityBaseDic = serverData.Activities
    if (serverData.Activities) then
        if serverData.DrawCountRewards then
            SelfProxyFactory.GetActivityTurntableProxy():UpdateDrawCountRewards(serverData.DrawCountRewards)
        end

        if serverData.DrawCounts then
            SelfProxyFactory.GetActivityTurntableProxy():UpdateDrawCounts(serverData.DrawCounts)
        end

        for index, activity in pairs(serverData.Activities) do
            self:UpdateSingleActivity(activity)
        end
    end
end

---@param activity pbcmessage.Activity
function ActivityCenterProxy:UpdateSingleActivity(activity)
    if (not self.activityBaseDic[activity.ID]) then
        self.activityBaseDic[activity.ID] = {}
    end
    local curActivity = self.activityBaseDic[activity.ID]
    curActivity.ID = activity.ID
    curActivity.Point = activity.Point
    ---更新奖励数据
    if (not curActivity.Reward) then
        curActivity.Reward = {}
    end
    if (activity.Reward) then
        for id, rewardState in pairs(activity.Reward) do
            curActivity.Reward[id] = rewardState
        end
    end
    if activity.Jigsaw then
        curActivity.Jigsaw = activity.Jigsaw
        SelfProxyFactory.GetActivityScoreProxy():UpdatePuzzleGameRed(activity.ID)
    end
    ---登录数据
    if (not curActivity.TotalLogin) then
        curActivity.TotalLogin = {}
    end
    local curLoginData = curActivity.TotalLogin
    local serverLoginData = activity.TotalLogin
    --Debug.LogError(" Progress ", serverLoginData and serverLoginData.Progress or 0)
    ---新号解锁服务器没有进度推送，客户端处理下,签到
    curLoginData.Progress = serverLoginData and (serverLoginData.Progress ~= 0 and serverLoginData.Progress or 1) or 1
    curLoginData.LastUpdateTime = serverLoginData and serverLoginData.LastUpdateTime or 0
    if (not curLoginData.Rewarded) then
        curLoginData.Rewarded = {}
    end
    if (serverLoginData) then
        for _id, state in pairs(serverLoginData.Rewarded) do
            curLoginData.Rewarded[_id] = state
        end
    end
    ---GamePlay
    if (not curActivity.GamePlay) then
        curActivity.GamePlay = {}
    end
    local curGamePlay = curActivity.GamePlay
    local serverGamePlayData = activity.GamePlay
    if (serverGamePlayData and serverGamePlayData.Details) then
        curGamePlay.FinishSubID = serverGamePlayData.FinishSubID
        curGamePlay.Details = {}
        for roleID, detailData in pairs(serverGamePlayData.Details) do
            local gamePlayData = {}
            gamePlayData.LastUpdateTime = detailData.LastUpdateTime
            gamePlayData.TotalBuyCount = detailData.TotalBuyCount
            gamePlayData.PlayCount = detailData.PlayCount
            gamePlayData.BuyCount = detailData.BuyCount
            gamePlayData.LastSubID = detailData.LastSubID
            curGamePlay.Details[roleID] = gamePlayData
        end
    end
    ---SCoreTrial
    if nil == curActivity.SCoreTrial then
        curActivity.SCoreTrial = {}
    end
    if activity.SCoreTrial then
        curActivity.SCoreTrial.FirstRewarded = activity.SCoreTrial.FirstRewarded
    end

    ---特殊处理 活动剧情
    if activity.Dialogue then
        local activityData_cfg = LuaCfgMgr.Get("ActivityCenter", activity.ID)
        SelfProxyFactory.GetActivityDialogueProxy():AddActivityDialogueData(activity.ID, activity.Dialogue)
        if activityData_cfg ~= nil then
            if activityData_cfg.ActivityShowType == 1 then
                ---情人节活动
                BllMgr.GetActivityFieryFantasyBLL():AddActivityFieryFantasyID(activity.ID)
            elseif activityData_cfg.ActivityShowType == 2 then
                ---生日活动
                BllMgr.GetRoleBirthdayBLL():SyncActivity(activity.ID)
            end

        end
    end
    ---处理互动活动-
    if activity.Interaction then
        BllMgr.GetActivityInteractionBLL():AddActivityID(activity.ID)
    end
    ---定时活动奖励
    curActivity.ScheduledReward = {}
    curActivity.ScheduledReward.Rewarded = activity.ScheduledReward and activity.ScheduledReward.Rewarded or false

    ---多倍掉落奖励
    if activity.DropMultiple then
        SelfProxyFactory.GetDropMultipleProxy():UpdateActivityDropMultiple(activity.ID, activity.DropMultiple)
    end

    ---转盘活动
    if activity.Turntable then
        SelfProxyFactory.GetActivityTurntableProxy():InitData(activity.ID, activity.Turntable)
    end

    ---挂机活动
    if activity.HangUp then
        SelfProxyFactory.GetActivityHangUpProxy():SyncAllData(activity.HangUp)
    end

    ---DIY
    if activity.DiyModel then
        SelfProxyFactory.GetActivityDIYModelProxy():SyncAllData(activity.ID, activity.DiyModel)
    end

    ---DiyCollection
    if activity.DiyCollection then
        BllMgr.GetActivityDIYCollectBLL():Init(activity.ID, activity.DiyCollection.MarkMap)
    end

    if activity.GamePlay then
        BllMgr.GetActivityGamePlayBLL():AddActivityGamePlay(activity.ID, activity.GamePlay)
    end
end

---服务器下发的CMS入口数据
function ActivityCenterProxy:RefreshConfigData(serverData)
    if (not (serverData.TypeConfigs and serverData.Configs)) then
        Debug.LogError("ActivityCenterProxy:RefreshConfigData serverData.TypeConfigs or serverData.Configs is nil")
        return
    end

    ---@type table<number, ActivityTypeCMSConfig>
    table.clear(self.activitySortDic)
    ---@type table<number, ActivityCMSConfig>
    table.clear(self.activityCMSConfigDic)
    table.clear(self.activityConditionDic)
    table.clear(self.attachRpDic)
    local curZoneId = BllMgr.GetLoginBLL():GetServerId()
    ---GM模式下，zoneid大于阈值的，使用配置表中的zoneid
    if (GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
        local constID = tonumber(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.ACTIVITYENTRANCESEVERID) or 99999)
        curZoneId = curZoneId > constID and constID or curZoneId
    end
    --分类数据
    for index, item in pairs(serverData.TypeConfigs) do
        local jsonData = JsonUtil.Decode(item.Extra)
        if jsonData.zoneid and table.containsvalue(jsonData.zoneid, curZoneId) then
            if (not self.activitySortDic[item.ID]) then
                self.activitySortDic[item.ID] = {}
            end
            --{"type":0,"stime":"2022-04-15 14:01:45","etime":"2022-04-30 14:01:48","effective":1,"sort":1,"defaultChecked":1,"activityID":[1,2,3]}",
            local itemDic = self.activitySortDic[item.ID]
            --Debug.LogError(" item.Extra ", item.Extra)
            itemDic.ID = item.ID
            itemDic.TypeDes = item.Name
            itemDic.IsOpen = jsonData.effective == 1
            itemDic.RelateID = jsonData.activityID
            itemDic.PageOrder = tonumber(jsonData.sort)
            itemDic.SelectFlag = jsonData.defaultChecked == 1
            itemDic.Type = tonumber(jsonData.type)
            itemDic.TimeZoneType = jsonData.effective_timezone_type and tonumber(jsonData.effective_timezone_type) or ActivityCenterConst.TimeZoneType.Same

            ---拿到的日期是国服的
            itemDic.StartTime = self:TimeTrans(jsonData.stime, itemDic.TimeZoneType)
            itemDic.EndTime = self:TimeTrans(jsonData.etime, itemDic.TimeZoneType)
        end
    end


    --message ActivityCMSConfig {
    --    int32 ID          = 1;  // 活动ID
    --int32 Status      = 2;  // 是否生效
    --int64 ShowEndTime = 3;  // 活动隐藏时间
    --int64 StartTime   = 4;  // 实际有效开放时间
    --int64 EndTime     = 5;  // 实际有效关闭时间
    --string PicUrl     = 6;  // 红点类型
    --string Extra      = 7;  // 定制数据
    --}
    --"{"show_stime":"2022-04-17 10:19:55","red_point":0,"sort":2,"jump_params":"","memo":""}",

    ---入口数据
    for _, item in pairs(serverData.Configs) do
        if (not self.activityCMSConfigDic[item.ID]) then
            self.activityCMSConfigDic[item.ID] = {}
        end
        ---@type ActivityCMSConfig
        local itemDic = self.activityCMSConfigDic[item.ID]
        local jsonData = JsonUtil.Decode(item.Extra)
        local picJsonData = JsonUtil.Decode(item.PicUrl)
        local nameJsonData = JsonUtil.Decode(item.Name)
        itemDic.TimeZoneType = jsonData.effective_timezone_type and tonumber(jsonData.effective_timezone_type) or ActivityCenterConst.TimeZoneType.Same

        itemDic.ID = item.ID
        itemDic.IsOpen = item.Status == 1 ---当前规则：服务器不会下发未开放的，不过客户端还是判下
        itemDic.StartTime = item.StartTime
        itemDic.EndTime = item.EndTime
        itemDic.BannerImg = BllMgr.GetActivityCenterBLL():GetValueByLang(picJsonData, "text")---picJsonData and picJsonData[1].text
        itemDic.ShowEndTime = item.ShowEndTime
        itemDic.RelateID = item.ID
        itemDic.Name = BllMgr.GetActivityCenterBLL():GetValueByLang(nameJsonData, "text")
        itemDic.PlatIDs = item.platIDs or {}
        itemDic.ShowStartTime = jsonData and self:TimeTrans(jsonData.show_stime, itemDic.TimeZoneType) or -1

        --Debug.LogWarning("self:dataToTimeStamp ", jsonData.show_stime, " itemDic.ShowStartTime ", itemDic.ShowStartTime)
        itemDic.RedPointType = jsonData and tonumber(jsonData.red_point) or -1
        itemDic.BannerOrder = jsonData and tonumber(jsonData.sort) or -1
        itemDic.JumpParam = jsonData and jsonData.jump_params or -1
        itemDic.JumpType = jsonData and tonumber(jsonData.jump_type) or -1
        itemDic.RedPointID = {} --业务红点
        itemDic.AcRedPointID = {} --活动红点
        if (jsonData and jsonData.game_red_point and next(jsonData.game_red_point) ~= nil) then
            for i, v in pairs(jsonData.game_red_point) do
                self:FillActivityRPConfig(itemDic.RedPointID, v, itemDic.ID)
            end
        end
        local config = LuaCfgMgr.Get("ActivityCenter", item.ID)
        ---纯活动的也允许附加
        if (config) then
            itemDic.ActivityType = config.ActivityType
            local redDic = ActivityCenterConst.RedPointDic[config.ActivityType]
            if (redDic and redDic[config.ActivityShowType]) then
                for index, rpId in pairs(redDic[config.ActivityShowType]) do
                    self:FillActivityRPConfig(itemDic.AcRedPointID, rpId, itemDic.ID)
                end
            end
        end

        itemDic.Conditions = {}
        if (item.Conditions) then
            for i, v in pairs(item.Conditions) do
                itemDic.Conditions[i] = v.Params
                local conditionType = v.Params and v.Params[1] or nil
                ---按照condition记录
                if (not self.activityConditionDic[conditionType]) then
                    self.activityConditionDic[conditionType] = {}
                end
                table.insert(self.activityConditionDic[conditionType], itemDic)
            end
        end
        itemDic.TimeStyle = jsonData and tonumber(jsonData.banner_style_id) or -1
        itemDic.TimeStyleRange = jsonData and tonumber(jsonData.time_period_display_range) or -1
        ---LYDJS-53015
        ---当前渠道不在活动所属渠道列表中时，将活动视为未开放----0为全部
        if not (table.containsvalue(itemDic.PlatIDs, SDKMgr.GetPlatID()) or table.containsvalue(itemDic.PlatIDs, 0)) then
            itemDic.IsOpen = false
        end

        ---更新活动开启状态
        self:RefreshActivityX3Data(item.ID)
        --Debug.LogError(" ID ", item.ID, " itemDic.ShowEndTime ", itemDic.ShowEndTime, "--- ",itemDic.ShowStartTime)
    end
end

---监听红点所需
function ActivityCenterProxy:FillActivityRPConfig(itemRPDic, redId, activityId)
    table.insert(itemRPDic, redId)
    ---监听红点事件所需
    if (not self.attachRpDic[redId]) then
        self.attachRpDic[redId] = {}
    end
    table.insert(self.attachRpDic[redId], activityId)
end

---更新活动是否开启的状态
---@type number activityId 活动id
function ActivityCenterProxy:RefreshActivityX3Data(activityId)
    ---如果是突然有效，确认下红点的需求
    ---处理跨天
    local activeState = self:CheckActivityActive(activityId)
    ---@type X3Data.Activity
    local activityData = X3DataMgr.Get(FieldType, activityId)
    if (not activityData) then
        activityData = X3DataMgr.AddByPrimary(FieldType, nil, activityId)
    end
    --local curState = activityData:GetActive()
    --if curState ~= activeState then
    --    Debug.LogError("RefreshActivityX3Data ", activityId, activeState)
    --end
    activityData:SetActive(activeState)
end

---通过condition更新触发活动更新
function ActivityCenterProxy:RefreshActiveStateWithConditonType(conditionType)
    --Debug.LogError("RefreshActiveStateWithConditonType ", conditionType,  self.activityConditionDic[conditionType])
    if (self.activityConditionDic[conditionType]) then
        for i, v in pairs(self.activityConditionDic[conditionType]) do
            self:RefreshActivityX3Data(v.ID)
        end
    end
end

---处理弹脸公告数据
function ActivityCenterProxy:HandleAnnouncementData(serverData)
    self.paDataList = {}
    local jsonData = JsonUtil.Decode(serverData)
    --Debug.LogError("OnSuccess ", jsonData, serverData)
    --Debug.LogErrorTable("OnSuccess ", jsonData)

    --local lang = Locale.GetCMSFallbackLangName()

    for i = 1, #jsonData.alist do
        local item = jsonData.alist[i]
        --local titleJsonData = JsonUtil.Decode(item.title)
        --Debug.LogError(" titleJsonData ", titleJsonData and titleJsonData[1].lang)
        local contentJsonData = JsonUtil.Decode(item.content)
        local exJsonData = JsonUtil.Decode(item.extra)
        local clientData = {}
        clientData.id = item.id;
        clientData.isOpen = exJsonData.status and exJsonData.status == 1;
        clientData.sortOrder = item.seq;
        --clientData.imageUrl = contentJsonData and contentJsonData[1].src;
        clientData.imageUrl = BllMgr.GetActivityCenterBLL():GetValueByLang(contentJsonData, "src")
        --if(contentJsonData) then
        --    for j = 1, #contentJsonData do
        --        if(contentJsonData[j].lang == lang) then
        --            clientData.imageUrl = contentJsonData[j].src;
        --        end
        --    end
        --end

        clientData.jumpUrl = exJsonData and exJsonData.jumpurl;
        clientData.jumpId = exJsonData and exJsonData.jumpid;
        local startStamp = GameHelper.GetTimeStamp(item.stime)
        clientData.startTime = self:GetTimeTransResult(startStamp, exJsonData.effective_timezone_type);
        local endStamp = GameHelper.GetTimeStamp(item.etime)
        clientData.endTime = self:GetTimeTransResult(endStamp, exJsonData.effective_timezone_type);

        if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
            Debug.LogWarning("拍脸公告的起始时间为 ", clientData.startTime, " 结束时间为： ", clientData.endTime,  "时区类型为 ", exJsonData.effective_timezone_type)
        end

        table.insert(self.paDataList, clientData)
    end
    table.sort(self.paDataList, function(a, b)
        return a.sortOrder > b.sortOrder
    end)
end

---获取弹脸公告数据
function ActivityCenterProxy:GetAnnouncementData()
    return self.paDataList
end

---判断对应活动是否真实生效(区别于开始展示)
function ActivityCenterProxy:CheckActivityActive(id)
    if (not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_ACTIVITY)) then
        return false
    end

    local curTime = TimerMgr.GetCurTimeSeconds()
    local item = self.activityCMSConfigDic[id]
    if (item) then
        --Debug.LogError("item.ShowStartTime ", item.ShowStartTime, "item.ShowEndTim  ", item.ShowEndTim)
        --Debug.LogError("GetActivityCMSConfig ID ", item.ID, " itemDic.ShowEndTime ", item.ShowEndTime," --- " ,item.ShowStartTime)
        local conditions = item.Conditions
        local allCheck = true
        for i = 1, #conditions do
            local condition = conditions[i]
            if (not ConditionCheckUtil.CheckConditionByIntList(condition)) then
                allCheck = false
                item = nil
                break
            end
        end
    end

    if(not (item and item.IsOpen)) then
        return false
    end

    if (item and (item.StartTime > curTime or item.EndTime < curTime)) then
        return false
    end

    if (not item) then
    --Debug.LogError("请检查CMS活动入口与活动列表是否对应，找不到对应ID的活动 ", id)
    end
    return item ~= nil and true or false
end

---获取活动数据(当可以展示时就能获取到)
---@field id int 活动ID
---@return ActivityCMSConfig 活动总表配置
function ActivityCenterProxy:GetActivityCMSConfig(id)
    local curTime = TimerMgr.GetCurTimeSeconds()
    local item = self.activityCMSConfigDic[id]
    if (item) then
        --Debug.LogError("item.ShowStartTime ", item.ShowStartTime, "item.ShowEndTim  ", item.ShowEndTim)
        --Debug.LogError("GetActivityCMSConfig ID ", item.ID, " itemDic.ShowEndTime ", item.ShowEndTime," --- " ,item.ShowStartTime)
        local conditions = item.Conditions
        local allCheck = true
        for i = 1, #conditions do
            local condition = conditions[i]
            if (not ConditionCheckUtil.CheckConditionByIntList(condition)) then
                allCheck = false
                item = nil
                break
            end
        end
    end

    if(not (item and item.IsOpen)) then
        return false
    end

    if (item and (item.ShowStartTime > curTime or item.ShowEndTime < curTime)) then
        return false
    end

    if (not item) then
        --Debug.LogError("请检查CMS活动入口与活动列表是否对应，找不到对应ID的活动 ", id)
    end

    return item
end

---获取指定类型活动入口数据列表
---@field entryType ActivityCenterConst.ActivityEntryType 活动类型
---@field signType ActivityCenterConst.ActivityEntrySignType 活动显示类型
---@return table<ActivityCMSConfig> 活动总表配置列表
function ActivityCenterProxy:GetActivityCMSConfigByType(entryType, signType)
    local list = {}
    local condition = { ActivityType = entryType, ActivityShowType = signType }
    local cfgList = LuaCfgMgr.GetListByCondition("ActivityCenter", condition)
    for index, item in ipairs(cfgList) do
        local activityCMSConfig = self:GetActivityCMSConfig(item.ActivityID)
        if activityCMSConfig then
            table.insert(list, activityCMSConfig)
        end
    end
    return list
end

---获取当前会展示的图片列表
function ActivityCenterProxy:GetCurImageList()
    local list = {}
    for index, item in pairs(self.activityCMSConfigDic) do
        if ((not string.isnilorempty(item.BannerImg))) then
            local nameList = string.split(item.BannerImg, "/")
            local fileName = nameList[#nameList]
            local endLessList = string.split(fileName, ".")
            --Debug.LogError("GetCurImageList ", index, " ", endLessList[1])
            table.insert(list, endLessList[1])
        end
    end
    return list

end

---签到成功后，更新本地数据
function ActivityCenterProxy:UpdateSignData(severData)
    local id = severData.ActivityID
    if (self.activityBaseDic[id]) then
        for i, v in ipairs(severData.Ranks) do
            self.activityBaseDic[id].TotalLogin.Rewarded[v] = true
        end
        self.activityBaseDic[id].TotalLogin.LastUpdateTime = GrpcMgr.GetServerTimeToUnixTimeSeconds()
    end
end

---更新所有活动生效状态
function ActivityCenterProxy:UpdateAllActiveState()
    --遍历activityCMSConfigDic,更新活动生效状态
    for index, item in pairs(self.activityCMSConfigDic) do
        self:RefreshActivityX3Data(item.ID)
    end
end

---每日刷新更新签到数据
function ActivityCenterProxy:UpdateSignDataWithDaily()
    for index, activity in pairs(self.activityBaseDic) do
        local cfg = LuaCfgMgr.Get("ActivityCenter", activity.ID)
        if (cfg and cfg.ActivityType == ActivityCenterConst.ActivityEntryType.Sign) then
            ---GetActivityCMSConfig 判定活动是否已开启
            local cmsConfig = self:GetActivityCMSConfig(activity.ID)
            local isCross = cmsConfig and cmsConfig.StartTime and TimeUtil.GetOpenDay(cmsConfig.StartTime) > 1
            ---看下零时区是否正确
            --Debug.LogError("UpdateSignDataWithDaily ", cmsConfig.StartTime, " cur ", TimerMgr.GetUnixTimestamp(), " start ", BllMgr.GetActivityCenterBLL():GetOpenDay(cmsConfig.StartTime))
            if (activity.TotalLogin and isCross) then
                if TimeUtil.GetOpenDay(activity.TotalLogin.LastUpdateTime) ~= 1 then
                    activity.TotalLogin.Progress = activity.TotalLogin.Progress + 1
                end
            end
        end
    end
end

---按照服务下发的ID与Point更新本地数据
function ActivityCenterProxy:UpdatePointData(severData)
    local id = severData.ActivityID
    if (self.activityBaseDic[id]) then
        self.activityBaseDic[id].Point = severData.Point
    end
end

---按照服务器下发的ID与Rank更新本地数据
function ActivityCenterProxy:UpdateRewardData(severData, activityId)
    local id = activityId
    if (self.activityBaseDic[id]) then
        local rankList = severData.Rank
        if (rankList) then
            for i = 1, #rankList do
                self.activityBaseDic[id].Reward.Rewarded[rankList[i]] = true
            end
        end
    end
end

---更新定时奖励数据
function ActivityCenterProxy:UpdateScheduledRewardData(activityIdList)
    for i = 1, #activityIdList do
        local baseData = self.activityBaseDic[activityIdList[i]]
        if (baseData) then
            baseData.ScheduledReward.Rewarded = true
        else
            Debug.LogError("UpdateScheduledRewardData ERROR ", activityIdList[i])
        end
    end
end

---更新GAMPPLAY数据
function ActivityCenterProxy:UpdateGamePlayData(activityId, playCount, buyCount, roleId)
    local baseData = self.activityBaseDic[activityId]
    if (baseData and baseData.GamePlay) then
        if baseData.GamePlay.Details[roleId] == nil then
            baseData.GamePlay.Details[roleId] = {}
        end
        local gamePlayData = baseData.GamePlay.Details[roleId]
        gamePlayData.PlayCount = playCount
        if (buyCount) then
            gamePlayData.BuyCount = buyCount
        end
    else
        Debug.LogError("UpdateGamePlayData ERROR ", activityId)
    end
end

---获取定时奖励是否领取过
function ActivityCenterProxy:GetScheduleRewardAvailable(activityId)
    local baseData = self.activityBaseDic[activityId]
    if (baseData) then
        return not baseData.ScheduledReward.Rewarded
    end
end

function ActivityCenterProxy:GetNextRefreshTime(playCfg, type, baseData)
    ---magic number 有时间了改下 1 代表玩法次数 2代表购买次数
    local arg = type == 1 and playCfg.TimesRefreshType or playCfg.BuyTimesRefreshType
    local nextTime = TimeRefreshUtil.GetNextRefreshTime(baseData.LastUpdateTime, arg)
    return nextTime
end

function ActivityCenterProxy:ResetGamePlayData()

    for index, activity in pairs(self.activityBaseDic) do
        local cfg = LuaCfgMgr.Get("ActivityCenter", activity.ID)
        if (cfg and cfg.ActivityType == ActivityCenterConst.ActivityEntryType.GamePlay) then
            for roleId, DetailData in pairs(activity.GamePlay.Details) do
                local playCfg = LuaCfgMgr.Get("ActivityGamePlay", activity.ID, roleId)
                if (playCfg) then
                    local playResetTime = self:GetNextRefreshTime(playCfg, 1, DetailData)
                    local buyReset = self:GetNextRefreshTime(playCfg, 2, DetailData)
                    local curTime = TimerMgr.GetCurTimeSeconds()

                    if (curTime >= playResetTime) then
                        self:UpdateGamePlayDataWithType(activity.ID, 1)
                        BllMgr.GetActivityGamePlayBLL():CheckGamePlayResetRp(activity.ID, roleId)
                    end
                    if (curTime >= buyReset) then
                        self:UpdateGamePlayDataWithType(activity.ID, 2)
                    end
                else
                    Debug.LogFormatWithTag(GameConst.LogTag.Activity, " ResetGamePlayData ERROR ", activity.ID, " roleId ", roleId)
                end
            end
        end
    end
end

---按照刷新周期更新数据
function ActivityCenterProxy:UpdateGamePlayDataWithType(activityID, type)
    local baseData = self.activityBaseDic[activityID]
    if (baseData) and baseData.GamePlay then
        local detailDataList = baseData.GamePlay.Details
        for roleId, gamePlayData in pairs(detailDataList) do
            local gamePlayCfg = LuaCfgMgr.Get("ActivityGamePlay", activityID, roleId)
            if (not gamePlayCfg) then
                Debug.LogFormatWithTag(GameConst.LogTag.Activity, "没有对应的活动配置 ", activityID, " role ", roleId)
                return
            end
            gamePlayData.LastUpdateTime = TimerMgr.GetCurTimeSeconds()
            if (not gamePlayData.PlayCount) then
                gamePlayData.PlayCount = 0
            end
            if (not gamePlayData.BuyCount) then
                gamePlayData.BuyCount = 0
            end

            if (type == 1) then
                local max = gamePlayCfg.MaxTimesLimit
                local total = gamePlayData.PlayCount + gamePlayCfg.Times
                gamePlayData.PlayCount = total > max and max or total
            else
                gamePlayData.BuyCount = 0
            end
        end

    else
        Debug.LogError("UpdateGamePlayDataWithType ERROR ", activityID.ActivityID)
    end

end

---获取所有可用的的定时活动
---@return ActivityCMSConfig[]
function ActivityCenterProxy:GetAllScheduleActivity(notStart)
    --遍历self.activityBaseDic，找到所有定时活动
    local scheduleActivity = {}
    local curTime = TimerMgr.GetCurTimeSeconds()
    ---@type ActivityCMSConfig
    for index, activity in pairs(self.activityCMSConfigDic) do
        local timeCheck = notStart and activity.StartTime > curTime or true
        ---这里是否用ID需要再次确认
        if (activity.ActivityType == ActivityCenterConst.ActivityEntryType.ScheduleType and activity.IsOpen and timeCheck and self:GetScheduleRewardAvailable(activity.ID)) then
            --local cfg = LuaCfgMgr.Get("ActivityCenter", activity.ID)
            --if (cfg and cfg.ActivityType == ActivityCenterConst.ActivityEntryType.ScheduleType) then
            table.insert(scheduleActivity, activity)
            --end
        end
    end
    return scheduleActivity
end

---获取当前活动是否可用
function ActivityCenterProxy:GetActivityActiveState(activityId)
    ---这里需要判下活动系统是否解锁
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_ACTIVITY) then
        return false
    end
    ---@type X3Data.Activity
    local x3Data = X3DataMgr.Get(FieldType, activityId)
    if (x3Data) then
        return x3Data:GetActive()
    else
        Debug.LogError("活动数据获取当前开启状态失败 ", activityId)
    end
end

---获取所有待开启的活动
function ActivityCenterProxy:GetAllWaitActivity()
    local waitActivity = {}
    local curTime = TimerMgr.GetCurTimeSeconds()
    for index, activity in pairs(self.activityCMSConfigDic) do
        if ((not self:GetActivityActiveState(activity.ID)) and activity.IsOpen and activity.StartTime > curTime) then
            table.insert(waitActivity, activity)
        end
    end
    return waitActivity
end

---获取所有待关闭的活动
function ActivityCenterProxy:GetAllWaitCloseActivity()
    local waitActivity = {}
    local curTime = TimerMgr.GetCurTimeSeconds()
    for index, activity in pairs(self.activityCMSConfigDic) do
        if ((self:GetActivityActiveState(activity.ID)) and activity.IsOpen and activity.EndTime > curTime) then
            table.insert(waitActivity, activity)
        end
    end
    return waitActivity
end

---获取活动基础数据
---@field id int 活动ID
---@return pbcmessage.Activity  活动基础数据
function ActivityCenterProxy:GetActivityBaseData(id)
    return self.activityBaseDic[id] or nil
end

---获取活动分类数据
---@param activityId int 活动ID(可选，无则为全部)
---@return ActivityTypeCMSConfig[] || ActivityTypeCMSConfig
function ActivityCenterProxy:GetActivitySortConfig(activityId)
    if (not activityId) then
        return self:GetAllSortConfig()
    else
        return self:GetSortConfigWithAcId(activityId)
    end
end

function ActivityCenterProxy:GetAllSortConfig()

    local dataTb = {}
    for index, item in pairs(self.activitySortDic) do
        --Debug.LogError(" IIIIIII ", index)
        --可用性开关
        local canUse = true
        if (not item.IsOpen) then
            Debug.LogWarning(" activity data enable false ", item.ID)
            canUse = false
        end
        --检查时间 防止每次拉取就丢弃数据，使用时再检查
        local curTime = TimerMgr.GetCurTimeSeconds()
        if (curTime < tonumber(item.StartTime) or curTime > tonumber(item.EndTime)) then
            Debug.LogWarning(" activity data time false", item.ID)
            canUse = false
        end
        --检查页签形式，先过滤独立入口
        if (tonumber(item.Type) == ActivityCenterConst.ActivitySortType.MainEntry) then
            Debug.LogWarning(" activity data single false", item.ID)
            canUse = false
        end
        if (canUse) then
            table.insert(dataTb, item)
        end
    end
    table.sort(dataTb, function(a, b)
        return a.PageOrder < b.PageOrder
    end)

    return dataTb
end

---通过表格中的活动ID获取CMS上分类数据
---@param activityId int 活动ID
function ActivityCenterProxy:GetSortConfigWithAcId(activityId)
    local sortConfig = nil
    for index, item in pairs(self.activitySortDic) do
        if (item.RelateID and table.containsvalue(item.RelateID, activityId)) then
            --可用性开关
            local canUse = true
            if (not item.IsOpen) then
                Debug.LogWarning(" activity data enable false ", item.ID)
                canUse = false
            end
            --检查时间 防止每次拉取就丢弃数据，使用时再检查
            local curTime = TimerMgr.GetCurTimeSeconds()
            if (curTime < tonumber(item.StartTime) or curTime > tonumber(item.EndTime)) then
                Debug.LogWarning(" activity data time false", item.ID)
                canUse = false
            end
            --检查页签形式，先过滤独立入口
            if (tonumber(item.Type) == ActivityCenterConst.ActivitySortType.MainEntry) then
                Debug.LogWarning(" activity data single false", item.ID)
                canUse = false
            end
            if (canUse) then
                sortConfig = item
                break ;
            end
        end
    end
    return sortConfig
end

function ActivityCenterProxy:trim(s)
    return (s:gsub("^%s*(.-)%s*$", "%1"))
end

---包含一条隐形规则（1.比国服早开的需要延迟一天，关闭同理
function ActivityCenterProxy:TimeTrans(timeStr, timeZoneType)
    ---拿到的日期是国服的
    local _startTime = self:dataToTimeStamp(timeStr)
    return self:GetTimeTransResult(_startTime, timeZoneType)
end

---@param _startTime int 起始的时间戳(必须为国服时间--CMS上的配置，均为国服)
function ActivityCenterProxy:GetTimeTransResult(_startTime, timeZoneType)
    local utcTime = _startTime + TimerMgr.GetZoneDiff() - 8 * 3600
    local resultTime = utcTime

    if (timeZoneType ~= ActivityCenterConst.TimeZoneType.Same) then
        resultTime = _startTime + TimerMgr.GetZoneDiff() - TimerMgr.GetZoneTimestampOffset()
        if (TimerMgr.GetTimeZone() > 8) then
            resultTime = resultTime + 24 * 3600
        end
    end
    return resultTime
end

function ActivityCenterProxy:dataToTimeStamp(dataStr)
    local result = -1
    local tempTable = {}

    if dataStr == nil then
        --error("传递进来的日期时间参数不合法")
    elseif type(dataStr) == "string" then
        dataStr = self:trim(dataStr)
        for v in string.gmatch(dataStr, "%d+") do
            tempTable[#tempTable + 1] = v
        end
    elseif type(dataStr) == "table" then
        tempTable = dataStr
    else
        --error("传递进来的日期时间参数不合法")
    end

    result = os.time({
        day = tonumber(tempTable[3]),
        month = tonumber(tempTable[2]),
        year = tonumber(tempTable[1]),
        hour = tonumber(tempTable[4]),
        min = tonumber(tempTable[5]),
        sec = tonumber(tempTable[6])
    })
    return result
end

function ActivityCenterProxy:GetActivityGamePlayFinishSubIdList(activityId)
    local activityBaseData = self.activityBaseDic[activityId]
    if activityBaseData and activityBaseData.GamePlay then
        return activityBaseData.GamePlay.FinishSubID
    end
    return nil
end

---@param reply pbcmessage.ActivityGamePlayUpdateReply
function ActivityCenterProxy:OnActivityGamePlayUpdate(reply)
    if (not self.activityBaseDic[reply.ActivityID]) then
        self.activityBaseDic[reply.ActivityID] = {}
        self.activityBaseDic[reply.ActivityID].GamePlay = {}
        self.activityBaseDic[reply.ActivityID].GamePlay.Details = {}
    end
    if self.activityBaseDic[reply.ActivityID].GamePlay.Details[reply.roleID] == nil then
        self.activityBaseDic[reply.ActivityID].GamePlay.Details[reply.roleID] = {}
    end
    self.activityBaseDic[reply.ActivityID].GamePlay.Details[reply.roleID].PlayCount = reply.PlayCount
    self.activityBaseDic[reply.ActivityID].GamePlay.Details[reply.roleID].LastSubID = reply.LastSubID
    if self.activityBaseDic[reply.ActivityID].GamePlay.FinishSubID == nil then
        self.activityBaseDic[reply.ActivityID].GamePlay.FinishSubID = {}
    end
    if reply.FinishSubID ~= 0 and not table.containsvalue(self.activityBaseDic[reply.ActivityID].GamePlay.FinishSubID, reply.FinishSubID) then
        table.insert(self.activityBaseDic[reply.ActivityID].GamePlay.FinishSubID, reply.FinishSubID)
    end
end

return ActivityCenterProxy