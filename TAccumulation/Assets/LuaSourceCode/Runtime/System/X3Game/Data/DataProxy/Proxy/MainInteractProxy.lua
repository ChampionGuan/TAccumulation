---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/2/9 14:55
---@class MainInteractProxy
local MainInteractProxy = class("MainInteractProxy", BaseProxy)
local MainInteractData = require("Runtime.System.X3Game.Data.DataProxy.Data.MainInteractData")
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")

function MainInteractProxy:OnInit()
    --默认主界面场景
    self.defaultSceneId = self:GetDefaultSceneId()
    --当前主界面场景，在服务器消息同步时变化
    self.curSceneId = 0
    --当前主界面地点
    self.curPlaceId = 0
    --当前场景资源
    self.resource = ""
    --主界面场景变化数据
    self.sceneChange = {}
    --解锁场景数据
    self.SceneMap = {}
    --场景红点id
    self.redId = X3_CFG_CONST.RED_MAINHOME_BACKGROUND_NEW

    --当前的场景id，时间更新后自动变化
    self._curSceneId = 0

    --主界面loading结束后隔n秒检测实时场景更新
    self.delayTime = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.MAINUISCENEREFRESHTIME)
    self:GetInteractData()
end

function MainInteractProxy:GetDefaultSceneId()
    local sceneData = LuaCfgMgr.GetListByCondition("MainUIScene", { Place = 1 })
    if table.nums(sceneData) > 0 then
        return sceneData[1].ID
    end
    return 400101
end

function MainInteractProxy:GetInteractData()
    if not self.interact_data then
        self.interact_data = MainInteractData.new()
        self.interact_data:InitData()
    end
    ---@type MainInteractData
    return self.interact_data
end

function MainInteractProxy:RefreshScene(sceneData)
    self.curPlaceId = sceneData.CurScenePlaceID
    self:SetSceneChange(sceneData.PlaceMap and sceneData.PlaceMap or {})
    self.curSceneId = self.sceneChange[self.curPlaceId] and self.sceneChange[self.curPlaceId].SceneID or 0
    self._curSceneId = self.curSceneId
    Debug.LogFormatWithTag(GameConst.LogTag.MainInteract, "CurEnter Scene: scene_id==%s", self.curSceneId)
    self:UpdateSceneData()
    ---@type MainScenePlaceData
    self.place_data = self.interact_data:GetSceneData(self.curPlaceId)
    self:SetSceneMap(sceneData.SceneMap)
end

function MainInteractProxy:GetPlaceIdBySceneID(sceneId)
    local sceneCfg = LuaCfgMgr.Get("MainUIScene", sceneId)
    return sceneCfg and sceneCfg.Place or 1
end

---获得当前地点
function MainInteractProxy:GetPlaceId()
    return self.curPlaceId
end

---获得当前场景
function MainInteractProxy:GetSceneId()
    if self.curSceneId == 0 then
        self.curSceneId = self.defaultSceneId
    end
    return self.curSceneId
end

function MainInteractProxy:SetResource(resource)
    self.resource = resource
end

function MainInteractProxy:GetResource()
    if string.isnilorempty(self.resource) then
        local sceneCfg = LuaCfgMgr.Get("MainUIScene", self:GetSceneId())
        return sceneCfg and sceneCfg.Resource or "mainmenu_001"
    end
    return self.resource
end

function MainInteractProxy:ChangeSceneInfo(place_id, scene_id)
    self.curPlaceId = place_id
    self.curSceneId = scene_id
    self._curSceneId = scene_id
    self:ChangeSceneX3Data()
    Debug.LogFormatWithTag(GameConst.LogTag.MainInteract, "ChangeScene Success scene_id==%s", scene_id)
end

function MainInteractProxy:ChangeSceneX3Data()
    local mainData = X3DataMgr.Get(X3DataConst.X3Data.MainHomeData, 1)
    if not mainData then
        mainData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.MainHomeData, nil, 1)
    end
    mainData:SetSceneID(self.curSceneId)
end

---判断场景是否拥有
function MainInteractProxy:CheckUnLockScene(scene_id)
    return self.SceneMap[scene_id] and self.SceneMap[scene_id] > 0
end

function MainInteractProxy:SetSceneChange(scene_change)
    for i, v in pairs(scene_change) do
        self.sceneChange[i] = {
            Status = v.Status or 0,
            SceneID = v.HandedSceneID or 0,
        }
    end
end

function MainInteractProxy:SetSceneChangeTime(place_id, is_check_delay)
    if place_id then
        self.place_data = self.interact_data:GetSceneData(place_id)
    end
    if self.place_data and self.place_data:CheckAutoChange() then
        local scene_run = function()
            self:Clear()
            self:UpdateTime()
            self.scene_change_time = TimerMgr.AddTimer(1, self.UpdateTime, self, true, TimerMgr.UpdateType.UPDATE)
        end
        if is_check_delay then
            TimerMgr.AddTimer(self.delayTime, function()
                if self.place_data:CheckAutoChange() then
                    scene_run()
                end
            end)
        else
            scene_run()
        end
    else
        self:Clear()
    end
end

function MainInteractProxy:GetCurSceneName()
    local scene_info = self:GetSceneInfo(self.curSceneId)
    if scene_info then
        if self.place_data and self.place_data:CheckAutoChange() then
            local curScene = self:GetAutoScene()
            if curScene then
                if curScene:GetSceneRes() ~= scene_info:GetSceneRes() then
                    self:SetResource(curScene:GetSceneRes())
                    self.curSceneId = curScene:GetSceneId()
                    return curScene:GetSceneRes()
                end
            end
        end
        return scene_info:GetSceneRes()
    end
end

function MainInteractProxy:SetSceneMap(scene_map)
    self.SceneMap = scene_map or {}
    for sceneId, _ in pairs(self.SceneMap) do
        local value = RedPointMgr.GetValue(self.redId, sceneId)
        if value == 0 then
            if RedPointMgr.IsInit() then
                --初始化获得道具不设置红点
                RedPointMgr.Save(2, self.redId, sceneId)
            else
                --新获得
                RedPointMgr.Save(1, self.redId, sceneId)
            end
        end
        self.interact_data:RefreshScene(sceneId)
    end
    self:SetSceneChangeTime()
end

function MainInteractProxy:GetSceneInfo(scene_id)
    return self.place_data and self.place_data:GetSceneInfo(scene_id)
end

---@param scene_id int
---@return GameConst.SceneTimeType
function MainInteractProxy:GetSceneTimeType(scene_id)
    if not scene_id then
        scene_id = self:GetSceneId()
    end
    local sceneData = self:GetSceneInfo(scene_id)
    if sceneData then
        return sceneData:GetTimeType()
    end
end

function MainInteractProxy:GetPlaceData(place_id)
    return self.interact_data:GetSceneData(place_id)
end

function MainInteractProxy:UpdateSceneData()
    for i, v in pairs(self.sceneChange) do
        local sceneData = self.interact_data:GetSceneData(i)
        if sceneData then
            sceneData:RefreshData(v)
        end
    end
end

function MainInteractProxy:UpdateTime()
    local sceneItem = self:GetAutoScene()
    if sceneItem then
        if sceneItem:GetSceneId() ~= self._curSceneId then
            if BllMgr.GetMainHomeBLL():IsExit() then
                return
            end
            self._curSceneId = sceneItem:GetSceneId()
            local is_random = BllMgr.GetMainHomeBLL():IsEnterView()
            if self:GetResource() == sceneItem:GetSceneRes() then
                --当从其他状态返回时，预先拿到了当前主界面场景资源名称，不再做延迟处理
                is_random = false
            end
            if is_random then
                local lastState = self.place_data:GetLastHandState()
                if lastState ~= -1 then
                    --第一次手动切自动时不适用random
                    if lastState == MainHomeConst.ChangeStatus.Hand then
                        is_random = false
                        self.place_data:SetLastHandState(-1)
                    end
                end
            end
            if is_random then
                local random = self:GetRandomTime()
                Debug.LogFormat("{%s} random change scene!!!", random)
                TimerMgr.AddTimer(random, function()
                    BllMgr.GetMainInteractBLL():ChangeScene(self.curPlaceId, sceneItem:GetSceneId(), sceneItem:GetSceneRes())
                end)
            else
                --首次登录不需做随机延迟， 避免和灯光获取不一致
                BllMgr.GetMainInteractBLL():ChangeScene(self.curPlaceId, sceneItem:GetSceneId(), sceneItem:GetSceneRes())
            end
        end
    end
end

---获得延迟随机时间，用于分散请求切换场景的请求，减轻服务器压力
function MainInteractProxy:GetRandomTime()
    return math.random(0, 10)
end

---@return MainSceneItemData
function MainInteractProxy:GetAutoScene()
    local isIn, changeType = self.interact_data:CheckInChangeTime(self.place_data:GetSceneSwitchGroup())
    if isIn then
        local sceneItem = self.place_data:GetSceneIdBySwitchType(changeType)
        if sceneItem and sceneItem:IsUnlock() then
            return sceneItem
        end
    end
end

function MainInteractProxy:SetCDTime(heart_data)
    self.interact_data:SetCDTime(heart_data)
end

function MainInteractProxy:SetCDTimeByType(cdData)
    self.interact_data:SetCDTimeByType(cdData)
end

---@param type_id:MainUIAction配置的ID
---@param role_id:男主id
---@return int:返回交互结束时间
function MainInteractProxy:GetCDTimeByType(type_id, role_id)
    return self.interact_data:GetCDTimeByType(type_id, role_id)
end

---处理生日活动，当生日临近2天时开始倒计时
function MainInteractProxy:SetBirthdayTime()
    local isValid = BllMgr.GetPlayerBirthdayBLL():CheckIfBirthdayActivityOpen()
    if isValid then
        --在活动期间
        self:CheckBirthdayAction()
        return
    end
    local nextBirthday = BllMgr.GetPlayerBirthdayBLL():GetNextBirthdayTimestamp()
    if not nextBirthday then
        return
    end
    if self.birthTimer then
        TimerMgr.Discard(self.birthTimer)
        self.birthTimer = nil
    end
    local leftTime = nextBirthday - TimerMgr.GetCurTimeSeconds()
    local day, h, m = GameHelper.GetDateBySeconds(leftTime)
    if day <= 2 then
        self.birthTimer = TimerMgr.AddTimer(1, function()
            leftTime = leftTime - 1
            if leftTime <= 0 then
                --开启生日活动action
                self:CheckBirthdayAction()
                TimerMgr.Discard(self.birthTimer)
                self.birthTimer = nil
                return
            end
        end, self, true, TimerMgr.UpdateType.UPDATE)
    end
end

function MainInteractProxy:CheckBirthdayAction()
    BllMgr.GetMainHomeBLL():StartActionByType(MainHomeConst.ActionType.PlayerBirthday)
end

function MainInteractProxy:OnClear()
    if self.interact_data then
        self.interact_data:ClearData()
        self.interact_data = nil
    end
    self.curSceneId = 0
    self._curSceneId = 0
    self.curPlaceId = 0
    self.resource = ""
    self:Clear()
end

function MainInteractProxy:Clear()
    if self.scene_change_time then
        TimerMgr.Discard(self.scene_change_time)
        self.scene_change_time = nil
    end
    if self.birthTimer then
        TimerMgr.Discard(self.birthTimer)
        self.birthTimer = nil
    end
end

return MainInteractProxy