---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by afan002.
--- DateTime: 2023/11/7 16:10
---

---@class ActivityTurntableProxy:BaseProxy
local ActivityTurntableProxy = class("ActivityTurntableProxy", BaseProxy)

---统一初始化，只会调用一次
---@param owner ProxyFactory
function ActivityTurntableProxy:OnInit()

end

---进游戏初始化相关信息
function ActivityTurntableProxy:InitData(activityID, TurntableData)
    local data = X3DataMgr.Get(X3DataConst.X3Data.ActivityTurntableData, activityID)
    if not data then
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.ActivityTurntableData, TurntableData, activityID)
    end

    local nextFreeResetTime = 0
    local countReward = 0
    local cfg = LuaCfgMgr.Get("ActivityTurntable", activityID)
    if cfg then
        if data:GetFreeResetTime() > 0 then
            nextFreeResetTime = data:GetFreeResetTime() + cfg.FreeCD * 60
        end
        countReward = cfg.CountReward
    end
    data:SetNextFreeResetTime(nextFreeResetTime)
    data:SetCountReward(countReward)

    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_START, activityID)
    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_NEWPV, activityID)
    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_FREE, activityID)
    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_REWARD, activityID)
end

--region protocol

---抽奖回包
function ActivityTurntableProxy:OnActivityTurntableDrawReply(reply, request)
    local activityID = request.ActivityID

    --更新免费刷新时间
    local data = self:GetData(activityID)
    data:SetFreeResetTime(reply.FreeResetTime)

    local nextFreeResetTime = 0
    local cfg = LuaCfgMgr.Get("ActivityTurntable", activityID)
    if cfg and data:GetFreeResetTime() > 0 then
        nextFreeResetTime = data:GetFreeResetTime() + cfg.FreeCD * 60
    end
    data:SetNextFreeResetTime(nextFreeResetTime)

    --更新抽奖奖励组抽中次数
    local dropCountsTable = data:GetDropCount()
    for _, v in pairs(reply.Draws) do
        local dropCount = 0
        if dropCountsTable and dropCountsTable[v.InitData] then
            dropCount = dropCountsTable[v.InitData]
        end
        data:AddOrUpdateDropCountValue(v.ID, dropCount + 1)
    end

    --更新抽数奖励累计次数
    local countReward = data:GetCountReward() or 0
    local drawCount = self:GetDrawCount(countReward)
    self:SetDrawCount(countReward, drawCount + request.DrawCount)

    local drawDropIDList = {}
    local rewards = {}
    for _, v in ipairs(reply.Draws) do
        table.insert(drawDropIDList, v.ID)
        for _, itemData in ipairs(v.Rewards) do
            table.insert(rewards, itemData)
        end
    end

    local transList = {}
    if reply.Trans then
        for _, v in ipairs(reply.Trans) do
            local info = {
                TransFrom = v.TransFrom,
                TransAdded = {},
            }
            for _, TransAddedData in ipairs(v.TransAdded) do
                table.insert(info.TransAdded, TransAddedData)
            end
            table.insert(transList, info)
        end
    end

    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_FREE, activityID)
    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_REWARD, activityID)

    EventMgr.Dispatch("OnActivityTurntableDrawReply", activityID, drawDropIDList, rewards, transList)
end

---领取抽数奖励回包
function ActivityTurntableProxy:OnActivityTurntableCountRewardReply(reply, request)
    local activityID = request.ActivityID
    local data = self:GetDrawCountData()
    local rewards = {}
    for _, v in pairs(reply.Results) do
        data:AddOrUpdateDrawCountRewardMapValue(v.ID, true)
        for _, itemData in ipairs(v.Rewards) do
            table.insert(rewards, itemData)
        end
    end

    EventMgr.Dispatch("OnActivityTurntableCountRewardReply", activityID, rewards)
    BllMgr.GetActivityTurntableBLL():RedPointCheck(X3_CFG_CONST.RED_TURNTABLE_REWARD, activityID)
end

--endregion

--region ActivityTurntableData

---获取转盘Data
function ActivityTurntableProxy:GetData(activityID)
    local data = X3DataMgr.Get(X3DataConst.X3Data.ActivityTurntableData, activityID)
    if not data then
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.ActivityTurntableData, nil, activityID)
        data:SetFreeResetTime(0)
        data:SetNextFreeResetTime(0)

        local countReward = 0
        local cfg = LuaCfgMgr.Get("ActivityTurntable", activityID)
        if cfg then
            countReward = cfg.CountReward
        end
        data:SetCountReward(countReward)
    end

    return data
end

---根据活动ID和掉落ID获取对应掉落组已被抽中次数
function ActivityTurntableProxy:GetDropCount(activityID, dropID)
    local data = self:GetData(activityID)

    local dropCountsTable = data:GetDropCount()

    local dropCount = 0
    if dropCountsTable then
        dropCount = dropCountsTable[dropID] or 0
    end

    return dropCount
end

---根据活动ID判断是否有免费次数
function ActivityTurntableProxy:HasFreeTime(activityID)
    local data = self:GetData(activityID)

    local nextFreeResetTime = data:GetNextFreeResetTime()
    local curTime = TimerMgr.GetCurTimeSeconds()
    local hasFreeTime = curTime > nextFreeResetTime
    return hasFreeTime
end

---根据活动ID获取下次免费次数刷新时间
function ActivityTurntableProxy:GetNextFreeTime(activityID)
    local data = self:GetData(activityID)

    local nextFreeResetTime = data:GetNextFreeResetTime()
    return nextFreeResetTime
end

--endregion

--region DrawCountData

---更新已领取抽数奖励数据
---@param DrawCountRewards table<int, bool> key: ActivityCountReward.ID value: true 已领取 false 未领取
function ActivityTurntableProxy:UpdateDrawCountRewards(DrawCountRewards)
    local drawCountData = self:GetDrawCountData()
    for id, isGot in pairs(DrawCountRewards) do
        drawCountData:AddOrUpdateDrawCountRewardMapValue(id, isGot)
    end
end

---更新抽数奖励池累计抽数数据
---@param DrawCounts table<int, int> key: ActivityCountReward.RewardGroup value: 累计抽数
function ActivityTurntableProxy:UpdateDrawCounts(DrawCounts)
    local drawCountData = self:GetDrawCountData()
    for rewardGroup, drawCount in pairs(DrawCounts) do
        drawCountData:AddOrUpdateDrawCountMapValue(rewardGroup, drawCount)
    end
end

---获取转盘抽数奖励数据，默认用index = 1获取
function ActivityTurntableProxy:GetDrawCountData()
    local data = X3DataMgr.GetByIndex(X3DataConst.X3Data.ActivityTurntableDrawCountData, 1)
    if not data then
        data = X3DataMgr.Add(X3DataConst.X3Data.ActivityTurntableDrawCountData, nil, 1)
    end

    return data
end

---获取抽数奖励池累计次数
---@param RewardGroup int ActivityCountReward.RewardGroup or ActivityTurntable.CountReward
function ActivityTurntableProxy:GetDrawCount(RewardGroup)
    local data = self:GetDrawCountData()

    local drawCountMap = data:GetDrawCountMap()
    return drawCountMap and drawCountMap[RewardGroup] or 0
end

---设置抽数奖励池累计次数
---@param RewardGroup int ActivityCountReward.RewardGroup or ActivityTurntable.CountReward
---@param DrawCount int 累计次数
function ActivityTurntableProxy:SetDrawCount(RewardGroup, DrawCount)
    local data = self:GetDrawCountData()
    data:AddOrUpdateDrawCountMapValue(RewardGroup, DrawCount)
end

---根据活动ID判断是否已领取过对应CountRewardID的奖励
function ActivityTurntableProxy:CheckCountRewardIsGot(countRewardID)
    local data = self:GetDrawCountData()

    local countRewardMap = data:GetDrawCountRewardMap()
    local isGot = countRewardMap and countRewardMap[countRewardID] or false
    return isGot
end

--endregion

--region

---获取转盘持久化Data
function ActivityTurntableProxy:GetPersistentData(activityID)
    local data = X3DataMgr.Get(X3DataConst.X3Data.ActivityTurntablePersistentData, activityID)
    if not data then
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.ActivityTurntablePersistentData, nil, activityID)
    end

    return data
end

---检查是否提示过已转化
function ActivityTurntableProxy:CheckHasTransfer(activityID, dropID)
    local data = self:GetPersistentData(activityID)
    local transferData = data:GetTransferData()
    return transferData and transferData[dropID]
end

---设置提示过已转化
function ActivityTurntableProxy:SetTransfer(activityID, dropID)
    local data = self:GetPersistentData(activityID)
    data:AddOrUpdateTransferDataValue(dropID, true)

    return data
end

--endregion


return ActivityTurntableProxy