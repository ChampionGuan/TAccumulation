---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/5/4 16:45
---

---@class GamePlayProxy : BaseProxy
local GamePlayProxy = class("GamePlayProxy", BaseProxy)

---初始化
---@param owner ProxyFactory
function GamePlayProxy:OnInit(owner)
    self.super.OnInit(self, owner)
    ---@type table<int, table<int, boolean>> 引导Id
    self.guideMap = nil
    X3DataMgr.Create(X3DataConst.X3Data.GameplayInfo)
    ---@type X3Data.GameplayInfo
    local data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.GameplayInfo, nil, Define.GamePlayEnterType.GamePlayEnterTypeDaily)
    data:SetSystemID(X3_CFG_CONST.SYSTEM_UNLOCK_DAILYDATE)
    data:AddCanHangOnValue(false, Define.GamePlayType.GamePlayTypeUfoCatcher)
    data:AddCanHangOnValue(false, Define.GamePlayType.GamePlayTypeMiao)
    data:SetPopId(X3_CFG_CONST.POPUP_SPECIALTYPE_DAILYDATE)
    data:SetPopIdUnforced(X3_CFG_CONST.POPUP_SPECIALTYPE_DAILYDATE_UNFORCED)
    --活动
    data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.GameplayInfo, nil, Define.GamePlayEnterType.GamePlayEnterTypeActivity)
    data:SetSystemID(X3_CFG_CONST.SYSTEM_UNLOCK_ACTIVITY)
    data:AddCanHangOnValue(false,Define.GamePlayType.GamePlayTypeUfoCatcher)
    data:AddCanHangOnValue(false,Define.GamePlayType.GamePlayTypeMiao)
    data:AddCanHangOnValue(false,Define.GamePlayType.GamePlayTypeBlockTower)
    data:SetPopId(X3_CFG_CONST.POPUP_SPECIALTYPE_ACTIVITY)
    data:SetPopIdUnforced(X3_CFG_CONST.POPUP_SPECIALTYPE_ACTIVITY_UNFORCED)
    --约会计划
    data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.GameplayInfo, nil, Define.GamePlayEnterType.GamePlayEnterTypeDatePlan)
    data:SetSystemID(X3_CFG_CONST.SYSTEM_UNLOCK_DATE_PLAN)
    data:AddCanHangOnValue(true, Define.GamePlayType.GamePlayTypeUfoCatcher)
    data:AddCanHangOnValue(true, Define.GamePlayType.GamePlayTypeMiao)
    data:AddCanHangOnValue(true, Define.GamePlayType.GamePlayTypeBlockTower)
    data:SetPopId(X3_CFG_CONST.POPUP_SPECIALTYPE_DATEPLAN)
    data:SetPopIdUnforced(X3_CFG_CONST.POPUP_SPECIALTYPE_DATEPLAN_UNFORCED)

    self.guideMap = {}
    local guide_list = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.DAILYDATEGUIDESPSETTING)
    if guide_list then
        for _, v in pairs(guide_list) do
            if not self.guideMap[v.Type] then
                self.guideMap[v.Type] = {}
            end
            self.guideMap[v.Type][v.ID] = true
        end
    end
end

---登录数据解析
---@param serverData table<int, pbcmessage.GamePlayGroupToClient>
function GamePlayProxy:Parse(serverData)
    for k, v in pairs(serverData) do
        if v.Commons then
            ---@type X3Data.GameplayInfo
            local data = X3DataMgr.Get(X3DataConst.X3Data.GameplayInfo, k)
            for k2, v2 in pairs(v.Commons) do
                ---@type X3Data.GameplayContinueData
                local common = X3DataMgr.Create(X3DataConst.X3Data.GameplayContinueData)
                common:SetPrimaryValue(v2.SubID)
                common:SetEnterType(v2.EnterType)
                common:SetGameType(v2.GameType)
                common:SetIsGuideSkip(v2.IsGuideSkip)
                common:SetVersion(v2.Version)
                local canHangOn = data:GetCanHangOn()[common:GetGameType()]
                common:SetCanHangOn(canHangOn and canHangOn or false)
                data:AddContinueDatasValue(common, v2.SubID)
            end
        end
    end
end

---是否是引导关
---@param gameType Define.GamePlayType
---@param subId int
---@return boolean
function GamePlayProxy:IsGuide(gameType, subId)
    return self.guideMap[gameType] and self.guideMap[gameType][subId]
end

---修改当前轮数
---@param value int
function GamePlayProxy:ChangeCurrentRoundIndex(value)
    ---@type X3Data.GameplayCommonData
    local commonData = X3DataMgr.GetFirst(X3DataConst.X3Data.GameplayCommonData)
    commonData:SetCurrentRoundIndex(value)
    EventMgr.Dispatch("ChangeCurrentRoundIndex", value)
end

---返回当前轮数
---@return int
function GamePlayProxy:GetCurrentRoundIndex()
    local commonData = X3DataMgr.GetFirst(X3DataConst.X3Data.GameplayCommonData)
    if commonData then
        return commonData:GetCurrentRoundIndex()
    else
        return 0
    end
end

---修改最大轮数
---@param value int
---@param needNotify boolean
function GamePlayProxy:ChangeMaxRoundCount(value, needNotify)
    if needNotify == nil then needNotify = true end
    ---@type X3Data.GameplayCommonData
    local commonData = X3DataMgr.GetFirst(X3DataConst.X3Data.GameplayCommonData)
    commonData:SetMaxRoundCount(value)
    if needNotify then
        EventMgr.Dispatch("ChangeMaxRoundCount", value)
    end
end

---返回最大轮数
---@return int
function GamePlayProxy:GetMaxRoundCount()
    local commonData = X3DataMgr.GetFirst(X3DataConst.X3Data.GameplayCommonData)
    if commonData then
        return commonData:GetMaxRoundCount()
    else
        return 0
    end
end

---修改回合数
---@param value int
function GamePlayProxy:ChangeTurnCount(value)
    ---@type X3Data.GameplayCommonData
    local commonData = X3DataMgr.GetFirst(X3DataConst.X3Data.GameplayCommonData)
    commonData:SetTurnCount(value)
end

---返回当前回合数
---@return int
function GamePlayProxy:GetTurnCount()
    local commonData = X3DataMgr.GetFirst(X3DataConst.X3Data.GameplayCommonData)
    if commonData then
        return commonData:GetTurnCount()
    else
        return 0
    end
end

return GamePlayProxy