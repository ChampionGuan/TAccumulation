---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- 捏脸Data
--- Created by xingzi003.
--- DateTime: 2022/9/1 21:05
---
local FaceEditConst = require("Runtime.System.X3Game.GameConst.FaceEditConst")
local FaceEditUtil = require("Runtime.System.X3Game.Modules.FaceEdit.FaceEditUtil")

--region EditData
---@class EditItem @捏脸编辑属性项
---@field key number 键（key = 大类型*100000 + 子类型*1000 + 属性类型）
---@field value number|Color 数值
---@field is_sub bool true表示默认值被动修改
local EditItem = class("EditItem")

---@param key number @编辑项key
---@param value number|Color @编辑项值
---@param is_sub boolean @true表示被动修改
function EditItem:ctor(key, value, is_sub)
    self.key = key
    self.value = value
    self.is_sub = is_sub and true or false
end

---@param value number|Color @编辑项值
---@param is_sub bool true表示默认值被动修改
function EditItem:SetData(value, is_sub)
    self:SetValue(value)
    self.is_sub = is_sub and true or false
end

---@param value number|Color @编辑项值
function EditItem:SetValue(value)
    self.value = value
end

---@return number @主类型
function EditItem:GetMainType()
    return FaceEditUtil.GetMainTypeByKey(self.key)
end

---@return number @二级类型
function EditItem:GetSubType()
    return FaceEditUtil.GetSubTypeByKey(self.key)
end

---@return number @三级类型（属性类型）
function EditItem:GetThirdType()
    return FaceEditUtil.GetThirdType(self.key)
end

---@return string
function EditItem:ToString()
    return string.format("[%s] = %s, %s", self.key, self.value, self.is_sub)
end

---@class EditData
---@field dict table<number, EditItem> 编辑数据
local EditData = class("EditData")
function EditData:ctor()
    self.dict = {}
end

function EditData:ctor(map_data)
    self.dict = {}
    self:LoadData(map_data)
end

---@param map_data table<number, number> 原始数据（来自服务器或本地）
function EditData:LoadData(map_data)
    self:ClearData()

    if map_data then
        -- 如果不存sub 要根据其他数据补sub
        for key, value in pairs(map_data) do
            value = FaceEditUtil.GetServerDeflateValue(key, value)
            self.dict[key] = EditItem.new(key, value)
        end
    end
end

function EditData:GetItem(key)
    return key and self.dict and self.dict[key]
end

function EditData:GetValue(key, isNotSub)
    local item = key and self.dict and self.dict[key]
    if item and item.value and (not isNotSub or not item.is_sub) then
        return item.value
    end
end

function EditData:GetValueWithSubKey(key)
    local value = self:GetValue(key)
    if value then
        return value
    end

    local subKey = FaceEditUtil.GetSubKey(key)
    if subKey then
        value = self:GetValue(subKey)
        if value then
            return value
        end
    end
end

function EditData:SetValue(key, value, is_sub)
    local edit_item = self.dict[key]
    if not edit_item and value then
        edit_item = EditItem.new(key, value, is_sub)
        self.dict[key] = edit_item
    else
        if value then
            edit_item:SetData(value, is_sub)
        else
            self.dict[key] = nil
        end
    end
end

function EditData:ClearKey(key)
    if self.dict then
        self.dict[key] = nil
    end
end

---@param data table[] EditItem[]
function EditData:UpdateData(data)
    if data then
        for _, v in pairs(data) do
            if v.key then
                self:SetValue(v.key, v.value, v.is_sub)
            end
        end
    end
end

---@param mapData table<number, number>
function EditData:UpdateMapData(mapData)
    if mapData then
        for key, value in pairs(mapData) do
            value = FaceEditUtil.GetServerDeflateValue(key, value)

            local edit_item = self.dict[key]
            if not edit_item then
                self.dict[key] = EditItem.new(key, value)
            else
                edit_item:SetData(value)
            end
        end
    end
end

---@return table<number, number> 要保存的数据
function EditData:GetMapData(onlyMakeupAndHair)
    local map_data = {}
    if table.isnilorempty(self.dict) then
        return map_data
    end

    for key, item in pairs(self.dict) do
        local value = item and item.value
        if value then
            local mainType = item:GetMainType()
            if not onlyMakeupAndHair or (mainType == FaceEditConst.MainType.Makeup or mainType == FaceEditConst.MainType.Hair) then
                map_data[key] = FaceEditUtil.GetServerInflateValue(item.key, value)
            end
        end
    end
    return map_data
end

---@return table<number, number> 要保存的数据
function EditData:GetSaveData(onlyMakeupAndHair)
    local map_data = {}
    if table.isnilorempty(self.dict) then
        return map_data
    end

    for key, item in pairs(self.dict) do
        local value = item and item.value
        if value then
            local mainType = item:GetMainType()
            local subType = item:GetSubType()
            local propType = item:GetThirdType()
            if table.containsvalue(FaceEditConst.MainType, mainType) then
                if not onlyMakeupAndHair or (mainType == FaceEditConst.MainType.Makeup or mainType == FaceEditConst.MainType.Hair) then
                    local ckey = FaceEditUtil.GetCustomKey(key)
                    if not ckey or not self.dict[ckey] then
                        local savedKey = key
                        if mainType == FaceEditConst.MainType.Makeup and propType == FaceEditConst.EditPropType.SubDensity then
                            local densityKey = FaceEditUtil.GetKey(mainType, subType, FaceEditConst.EditPropType.Density)
                            if not self.dict[densityKey] then
                                savedKey = densityKey
                            end
                        end

                        map_data[savedKey] = FaceEditUtil.GetServerInflateValue(item.key, value)
                    end
                end
            else
                Debug.LogErrorFormatWithTag(GameConst.LogTag.FaceEdit, "SaveData过滤无效数据, mainType非法. [%s] = %s", key, value)
            end
        end
    end
    return map_data
end

---@return table[] EditItem[]
function EditData:GetMakeupListData()
    local result = {}
    if self.dict then
        for _, item in pairs(self.dict) do
            local mainType = item:GetMainType()
            if mainType == FaceEditConst.MainType.Makeup or mainType == FaceEditConst.MainType.Hair then
                table.insert(result, item)
            end
        end
    end
    table.sort(result, function(a, b)
        return a.key < b.key
    end)
    return result
end

---@return table[] EditItem[]
function EditData:GetListData()
    local lst = table.dictoarray(self.dict)
    -- 排序：风格脸必须先设置
    table.sort(lst, function(a, b)
        return a.key < b.key
    end)
    return lst
end

function EditData:GetKeys()
    return table.keys(self.dict)
end

function EditData:ContainsKey(key, isNotSub)
    local item = key and self.dict and self.dict[key]
    if not item or (isNotSub and item.is_sub) then
        return false
    end
    return true
end

function EditData:ContainsFaceStyle()
    for prop = FaceEditConst.EditPropType.PosA_Index, FaceEditConst.EditPropType.PosC_Weight do
        if self:ContainsKey(FaceEditUtil.GetKey(FaceEditConst.MainType.StyleFace, nil, prop)) then
            return true
        end
    end
    return false
end

function EditData:ContainsSpecialHair()
    local key = FaceEditUtil.GetKey(FaceEditConst.MainType.Hair)
    local cfgId = self.dict[key] and self.dict[key].value
    if cfgId then
        local cfg = LuaCfgMgr.Get(FaceEditUtil.GetCfgName(FaceEditConst.MainType.Hair), cfgId)
        return cfg and cfg.IsSpecial and cfg.IsSpecial == 1 or false
    end

    return false
end

function EditData:ClearData()
    if self.dict then
        for _, v in pairs(self.dict) do
            v = nil
        end
    end
    self.dict = {}
end

function EditData:ClearItems(items)
    if items and self.dict then
        for _, item in ipairs(items) do
            if item and item.key then
                self.dict[item.key] = nil
            end
        end
    end
end

function EditData:ClearMakeupAndHair()
    if self.dict then
        for key, item in pairs(self.dict) do
            if item:GetMainType() == FaceEditConst.MainType.Makeup or item:GetMainType() == FaceEditConst.MainType.Hair then
                self.dict[key] = nil
            end
        end
    end
end

function EditData:Copy()
    local result = {}

    if self.dict then
        for k, item in pairs(self.dict) do
            result[k] = item
        end
    end

    return result
end

function EditData:ToString()
    local lst = self:GetListData()
    if lst then
        local lstStr = {}
        for _, item in ipairs(lst) do
            table.insert(lstStr, item:ToString())
        end
        return table.concat(lstStr, "\n")
    end
    return ""
end
--endregion

--region HistoryData 操作的历史数据
---@class OperData @捏脸一次操作数据
---@field key number 键（key = 大类型*100000 + 子类型*1000 + 属性类型）
---@field value number|Color 数值
---@field subs table[] EditItem[] 附带默认修改的子属性列表
local OperData = class("OperData")

---@param key number @编辑项key
---@param value number|Color @编辑项值
function OperData:ctor(key, value)
    self.key = key
    self.value = value
    self.subs = nil
end

function OperData:Clear()
    self.key = nil
    self.value = nil
    self.subs = nil
end

---@param data table[] EditItem[]  @关联子项
function OperData:SetSubs(data)
    self.subs = data
end

---@return table[] number[]
function OperData:GetKeys()
    local lst = {}
    --lst = table.keys(self.subs)
    for _, v in ipairs(self.subs) do
        table.insert(lst, v.key)
    end
    table.insert(lst, 1, self.key)
    return lst
end

---@return string
function OperData:ToString()
    local lst = {}
    for _, v in ipairs(self.subs) do
        table.insert(lst, v:ToString())
    end
    return string.format("[%s] = %s, subs = %s", self.key, self.value, table.concat(lst, "\n\t"))
end

--endregion

--region UIData 界面展示数据

-- 文字页签，同时也是基础节点类型
local UINode = class("UINode")
function UINode:ctor(mainType, name)
    self.mainType = mainType or -1
    self.name = name or ""
    self.parent = nil
    self.children = {}
    self._childrenCount = 0
end

function UINode:AddChild(node)
    node.parent = self
    self._childrenCount = self._childrenCount + 1
    table.insert(self.children, node)
end

function UINode:InsertNode(key, node)
    node.parent = self
    self._childrenCount = self._childrenCount + 1
    self.children[key] = node
end

function UINode:GetChild(i)
    return self.children[i]
end

function UINode:GetNodeType()
    return self.nodeType
end

function UINode:GetChildrenNum()
    --return table.nums(self.children)
    return self._childrenCount
end

function UINode:ChildrenDicToArrary()
    local newChildren = {}
    for k, v in pairs(self.children) do
        v.styleID = k
        table.insert(newChildren, v)
    end
    self.children = newChildren
end

function UINode:SortChildren(func)
    table.sort(self.children, func)
end

--- 文字加图标页签
local UIIconNode = class("UIIconNode", UINode)
function UIIconNode:ctor(mainType, name, icon, sort)
    UINode.ctor(self, mainType, name)
    self.icon = icon
    self.sort = sort or 0
end

--- 妆发二级页签
local UIHairMakeupTabNode = class("UIHairMakeupTabNode", UINode)
function UIHairMakeupTabNode:ctor(mainType, name, icon, panelName, panelInfo)
    UINode.ctor(self, mainType, name)
    self.icon = icon -- ImageEnum Key
    self.panelName = panelName -- 二级页签对应的 Panel
    self.panelInfo = panelInfo or nil -- 额外的 Panel Info，比如 Panel 的 Slider 的相关属性

    -- 标记为默认的样式子节点
    self.defaultChildren = {}
    self._defaultChildrenCount = 0
end

function UIHairMakeupTabNode:ChildrenDicToArrary()
    local newChildren = {}
    self.defaultChildren = {}
    self._defaultChildrenCount = 0
    for k, v in pairs(self.children) do
        v.styleID = k
        table.insert(newChildren, v)
        if v.isDefault and v.isDefault == 1 then
            table.insert(self.defaultChildren, v)
            self._defaultChildrenCount = self._defaultChildrenCount + 1
        end
    end
    self.children = newChildren
end

function UIHairMakeupTabNode:GetDefaultChild(i)
    return self.defaultChildren[i]
end

function UIHairMakeupTabNode:GetDefaultChildrenNum()
    return self._defaultChildrenCount
end

--- 图片属性选项节点
local UIImageNode = class("UIImageNode", UINode)
function UIImageNode:ctor(mainType, name, nodeInfo)
    UINode.ctor(self, mainType, name)
    self.image = nodeInfo.image
    self.cfgId = nodeInfo.cfgId
    self.sort = nodeInfo.sort
    self.nodeType = nodeInfo.nodeType
    self.isLocked = nodeInfo.isLocked or false
    self.isSpecial = nodeInfo.isSpecial or false
    self.isSelect = nodeInfo.isSelect or false
    self.isColorNode = nodeInfo.isColorNode or false
    self.itemId = nodeInfo.itemId or nil
    self.subType = nodeInfo.subType or nil
    self.styleID = nodeInfo.styleID or nil
    self.itemCondition = nodeInfo.itemCondition or nil
    self.isDefault = nodeInfo.isDefault or 0
end

--- 滑动属性选项节点
local UISliderNode = class("UISliderNode", UINode)
function UISliderNode:ctor(mainType, name, nodeInfo)
    UINode.ctor(self, mainType, name)
    self.cfgId = nodeInfo.cfgId
    self.limitMax = nodeInfo.limitMax
    self.limitMin = nodeInfo.limitMin
    self.sort = nodeInfo.sort
    self.subType = nodeInfo.subType
    self.nodeType = nodeInfo.nodeType
end

--- 颜色属性选项节点
local UIColorNode = class("UIColorNode", UINode)
function UIColorNode:ctor(mainType, name, nodeInfo)
    UINode.ctor(self, mainType, name)
    self.cfgId = nodeInfo.cfgId
    self.defaultColor = nodeInfo.defaultColor
    self.nodeType = FaceEditConst.UIDataNodeType.Color
end

--- UIData，根节点
---@class UIData
local UIData = class("UIData", UINode)
function UIData:ctor()
    UINode.ctor(self, 0, "Root")

    local styleFaceNode = UINode.new(FaceEditConst.MainType.StyleFace, UITextHelper.GetUIText(UITextConst.UI_TEXT_7930))
    table.insert(self.children, styleFaceNode)

    local skinNode = UINode.new(FaceEditConst.MainType.Skin, UITextHelper.GetUIText(UITextConst.UI_TEXT_7931))
    table.insert(self.children, skinNode)

    local hairNode = UINode.new(FaceEditConst.MainType.Hair, UITextHelper.GetUIText(UITextConst.UI_TEXT_7932))
    table.insert(self.children, hairNode)

    local boneNode = UINode.new(FaceEditConst.MainType.Bone, UITextHelper.GetUIText(UITextConst.UI_TEXT_7933))
    table.insert(self.children, boneNode)

    local makeupNode = UINode.new(FaceEditConst.MainType.Makeup, UITextHelper.GetUIText(UITextConst.UI_TEXT_7934))
    table.insert(self.children, makeupNode)

    local voiceNode = UINode.new(FaceEditConst.MainType.Voice, UITextHelper.GetUIText(UITextConst.UI_TEXT_7821))
    table.insert(self.children, voiceNode)
end

--endregion

local FaceEditData = {}
FaceEditData.EditData = EditData
FaceEditData.EditItem = EditItem
FaceEditData.OperData = OperData

FaceEditData.UIData = UIData
FaceEditData.UINode = UINode
FaceEditData.UIIconNode = UIIconNode
FaceEditData.UIHairMakeupTabNode = UIHairMakeupTabNode
FaceEditData.UIImageNode = UIImageNode
FaceEditData.UISliderNode = UISliderNode
FaceEditData.UIColorNode = UIColorNode

return FaceEditData
