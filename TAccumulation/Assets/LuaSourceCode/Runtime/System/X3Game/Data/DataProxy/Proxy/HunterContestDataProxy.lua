---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiangyu.
--- DateTime: 2023/10/20 13:35
---

---@class HunterContestDataProxy:BaseProxy
local HunterContestDataProxy = class("HunterContestDataProxy", BaseProxy)
local HunterContestConst = require("Runtime.System.X3Game.GameConst.HunterContestConst")

local function getorCreateSeasonData(value)
    if value == nil then
        return nil
    end
    ---@type X3Data.HunterContestSeason
    local currentSeason = X3DataMgr.Get(X3DataConst.X3Data.HunterContestSeason, value.ID)
    if not currentSeason then
        currentSeason = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContestSeason, nil, value.ID)
    end
    currentSeason:Clear()
    currentSeason:Decode(value)
    return currentSeason
end


---设置上阵的思念卡组
---@param rankLevel int 思念卡组等级
---@param totalCards table<number,pbcmessage.HunterContestCards>
function HunterContestDataProxy:SetHunterContestCards(rankLevel, totalCards)
    local hunterContestData = self:GetStageHunterContestData(rankLevel)
    if totalCards then
        local lengthNum = table.nums(totalCards)
        if lengthNum == 0 then
            self:ClearRankCards(rankLevel)
            return
        end
        for i, v in pairs(totalCards) do
            local uid = rankLevel * 10 + i
            ---@type X3Data.HunterContestCards
            local areaCards = X3DataMgr.Get(X3DataConst.X3Data.HunterContestCards, tostring(uid))
            if not areaCards then
                areaCards = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContestCards, nil, tostring(uid))
            else
                areaCards:ClearCardIDsValue()
            end

            local prefixIndex = rankLevel * 100 + i * 10
            for j, k in pairs(v.Cards) do
                local cardUID = prefixIndex + k.Slot
                ---@type X3Data.HunterContestCard
                local cardInfo = X3DataMgr.Get(X3DataConst.X3Data.HunterContestCard, tostring(cardUID))
                if not cardInfo then
                    cardInfo = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContestCard, nil, tostring(cardUID))
                end
                cardInfo:SetCardID(k.CardID)
                cardInfo:SetSlot(k.Slot)
                cardInfo:ClearGemCoresValue()
                if k.GemCores and #k.GemCores > 0 then
                    for r, o in ipairs(k.GemCores) do
                        cardInfo:AddOrUpdateGemCoresValue(r, o)
                    end
                end
                areaCards:AddOrUpdateCardIDsValue(k.Slot, cardInfo)
            end
            if hunterContestData then
                hunterContestData:AddOrUpdateCardsValue(tostring(uid), areaCards)
            end
        end
    else
        --清理
       self:ClearRankCards(rankLevel)
    end
end

---清理段位组思念卡
---@param rankLevel int 段位组等级
function HunterContestDataProxy:ClearRankCards(rankLevel)
    for i = 1, HunterContestConst.AllAreaCount do
        local uid = rankLevel * 10 + i
        ---@type X3Data.HunterContestCards
        local areaCards = X3DataMgr.Get(X3DataConst.X3Data.HunterContestCards, tostring(uid))
        if areaCards then
            areaCards:ClearCardIDsValue()
        end
    end
end

---更新赛季数据
---@param self HunterContestDataProxy
---@param key int 段位组等级
---@param value pbcmessage.HunterContest
local function updateHunterContestData(self, key, value)
    ---@type X3Data.HunterContest
    local hunterContestData = X3DataMgr.Get(X3DataConst.X3Data.HunterContest, tostring(key))
    if not hunterContestData then
        hunterContestData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContest, nil, tostring(key))
    else
        hunterContestData:Clear()
    end
    
    hunterContestData:SetCurrentSeason(getorCreateSeasonData(value.CurrentSeason))
    hunterContestData:SetLastSeason(getorCreateSeasonData(value.LastSeason))
    hunterContestData:SetFirstEnterSeason(value.FirstEnterSeason)
    
    self:SetHunterContestCards(key, value.Cards)
end

---更新奖励数据
---@param key int 奖励GroupID
---@param value X3Data.HunterContestRewardData
local function updateRewardData(key, value)
    ---@type X3Data.HunterContestRewardData
    local rewardData = X3DataMgr.Get(X3DataConst.X3Data.HunterContestRewardData, key)
    if not rewardData then
        rewardData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContestRewardData, nil, key)
    end
    local source = {GroupID = key, Rewarded = value}
    rewardData:Decode(source)
end

---清理groupId奖励
---@param groupId int 奖励GroupID
function HunterContestDataProxy:ClearRewardGroupId(groupId)
    ---@type X3Data.HunterContestRewardData
    local rewardData = X3DataMgr.Get(X3DataConst.X3Data.HunterContestRewardData, groupId)
    if rewardData then
       rewardData:Clear()
    end
end

---初始化赛季数据(进入游戏后同步数据)
function HunterContestDataProxy:OnEnterGameReply(data)
    if data == nil then
        return
    end
    self:UpdateHunterContest(data)
end

function HunterContestDataProxy:UpdateHunterContest(data)
    if data.HunterContests then
        for i, v in pairs(data.HunterContests) do
            updateHunterContestData(self, i, v)
        end
    end

    if data.RewardData then
        for i, v in pairs(data.RewardData) do
            updateRewardData(i, v.Rewarded)
        end
    end
end

---设置完思念卡组的回调
---@param data pbcmessage.SetHunterContestCardsRequest
function HunterContestDataProxy:SetHunterContestCardsReply(data)
    local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", data.ID)
    local rankLevel = cfg_HunterContest.RankLevel
    self:SetHunterContestCards(rankLevel, data.TotalCards)
end

---领取奖励之后的回调
function HunterContestDataProxy:GainHunterContestRewardReply(groupId, stars)
    local newStars = stars
    local hasGetStars = self:GetHasGetReward(groupId)
    if hasGetStars then
        table.insertto(newStars, hasGetStars)
    end
    updateRewardData(groupId, newStars)
end

---首次进入赛季返回刷新
---@param groupId int 段位组ID
---@param lastContestSeason pbcmessage.HunterContestSeason 上个赛季的数据
function HunterContestDataProxy:FirstEnterSeasonReply(lastContestSeason, groupId)
    local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", groupId)
    if cfg_HunterContest == nil then
        return
    end
    local hunterContestData = X3DataMgr.Get(X3DataConst.X3Data.HunterContest, tostring(cfg_HunterContest.RankLevel))
    if not hunterContestData then
        hunterContestData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContest, nil, tostring(cfg_HunterContest.RankLevel))
    end
    hunterContestData:SetFirstEnterSeason(true)
    if lastContestSeason == nil then
        return
    end
    hunterContestData:SetLastSeason(getorCreateSeasonData(lastContestSeason))
end

---重置赛季的思念卡上阵数据
function HunterContestDataProxy:ResetSeaonCardsReply(data)
    if data then
        local rankLevel = LuaCfgMgr.Get("HunterContest", data.ID).RankLevel
        for i, v in pairs(data.Locations) do
            local contestCards = self:GetStageHunterContestCards(rankLevel, v)
            if contestCards then
                contestCards:ClearCardIDsValue()
            end
        end
    end
end

-----得到段位组数据
-----@param id int 段位组id
-----@return X3Data.HunterContest
--function HunterContestDataProxy:GetHunterContestSeasonData(id)
--    return X3DataMgr.Get(X3DataConst.X3Data.HunterContestSeason, id)
--end

---获取当前段位组数据
---@param rankLevel int 段位组等级
---@return X3Data.HunterContest
function HunterContestDataProxy:GetStageHunterContestData(rankLevel)
    return X3DataMgr.Get(X3DataConst.X3Data.HunterContest, tostring(rankLevel))
end


---获取已经领取的档位奖励
---@param groupID int 奖励组id
---@return int[] 已经领取的段位奖励
function HunterContestDataProxy:GetHasGetReward(groupID)
    ---@type X3Data.HunterContestRewardData
    local data = X3DataMgr.Get(X3DataConst.X3Data.HunterContestRewardData, groupID)
    if data then
        return data:GetRewarded()
    end
    
    return nil
end

---获取当前段位组某个区域的思念卡上阵数据
---@param rankLevel int 段位组等级
---@param areaId int 区域id
---@return X3Data.HunterContestCards
function HunterContestDataProxy:GetStageHunterContestCards(rankLevel, areaId)
    local uid = rankLevel *10 + areaId
    ---@type X3Data.HunterContestCards
    local data = X3DataMgr.Get(X3DataConst.X3Data.HunterContestCards, tostring(uid))
    return data
end

---段位数据更新
---@param data pbcmessage.HunterContestUpdateReply
function HunterContestDataProxy:HunterContestUpdateReply(data)
    updateHunterContestData(self, data.RankLevel, data.Data)
    if data.ResetRewardGroupID then
        self:ClearRewardGroupId(data.ResetRewardGroupID)
    end
end

return HunterContestDataProxy