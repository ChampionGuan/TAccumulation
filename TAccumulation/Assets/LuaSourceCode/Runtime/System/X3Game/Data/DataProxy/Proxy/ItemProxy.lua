---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2023/8/22 14:09
---@class ItemProxy:BaseProxy
local ItemProxy = class("ItemProxy", BaseProxy)

function ItemProxy:OnInit()
    self._itemTimers = {}
    self._spItemTimers = {}
end

function ItemProxy:OnClear()
    for _, v in pairs(self._itemTimers) do
        TimerMgr.Discard(v)
    end

    for _, v in pairs(self._spItemTimers) do
        TimerMgr.Discard(v)
    end

    self._itemTimers = {}
    self._spItemTimers = {}
end

---@param itemData pbcmessage.ItemData
function ItemProxy:InitData(itemData)
    if itemData and itemData.Item and itemData.Item.ItemMap then
        for _, v in pairs(itemData.Item.ItemMap) do
            local cfg = LuaCfgMgr.Get("Item", v.Id)
            if cfg.Type == X3_CFG_CONST.ITEM_TYPE_FORMATIONSUIT then
                BllMgr.GetFashionBLL():RefreshFormationSuitRp(v.Id)
            end
            self:AddItem(v)
        end
    end

    if itemData.SpItem and itemData.SpItem.SpItemsMap then
        for _, v1 in pairs(itemData.SpItem.SpItemsMap) do
            if v1.SpItems then
                for _, v2 in ipairs(v1.SpItems) do
                    self:AddSpItem(v2)
                end
            end
        end
    end
end

---@param item pbcmessage.Item 服务器下发单个道具数据
function ItemProxy:AddItem(item)
    if item ~= nil then
        local itemData = X3DataMgr.Get(X3DataConst.X3Data.Item, item.Id)
        if itemData then
            itemData:SetNum(item.Num)
        else
            X3DataMgr.AddByPrimary(X3DataConst.X3Data.Item, item, item.Id)
        end
        self:_RegisterCommonItemEndTime(item.Id)
        BllMgr.GetCardBLL():CheckCardComposeRp(item.Id)
        BllMgr.GetBagBLL():UpdateItemRp(item.Id, item.Num)
    end
end

---@param spItem pbcmessage.SpItem
function ItemProxy:AddSpItem(spItem)
    if spItem.Num <= 0 then
        if X3DataMgr.Get(X3DataConst.X3Data.SpItem, spItem.Id) then
            X3DataMgr.Remove(X3DataConst.X3Data.SpItem, spItem.Id)
            if self._spItemTimers[spItem.Id] ~= nil then
                TimerMgr.Discard(self._spItemTimers[spItem.Id])
                self._spItemTimers[spItem.Id] = nil
            end
        else
            Debug.Log("特殊道具未找到 id" .. spItem.Id)
        end

    else
        self:_RegisterSpItemEndTime(spItem)
        local spItemData =  X3DataMgr.Get(X3DataConst.X3Data.SpItem, spItem.Id)
        if spItemData then
            spItemData:DecodeByIncrement(spItem)
        else
            X3DataMgr.AddByPrimary(X3DataConst.X3Data.SpItem, spItem, spItem.Id)
        end
    end
end

---注册会过期的common道具
function ItemProxy:_RegisterCommonItemEndTime(cfgId)
    local _, endTime, result = BllMgr.GetItemBLL():GetItemLeftTime(cfgId);
    if (not result) then
        return
    end

    local leftTime = TimerMgr.GetUnixTimestamp(endTime) - TimerMgr.GetRealTimeSeconds()
    if (leftTime < 0) then
        BllMgr.GetItemBLL():SendRemoveCommonItemReq(cfgId)
        return
    end

    if (self._itemTimers[cfgId]) then
        TimerMgr.Discard(self._itemTimers[cfgId])
    end

    ---时间接近时，有时服务器不能返回正确删除的列表，猜测是发快了
    leftTime = math.ceil(leftTime)
    self._itemTimers[cfgId] = TimerMgr.AddTimer(leftTime, function()
        BllMgr.GetItemBLL():SendRemoveCommonItemReq(cfgId);
        TimerMgr.Discard(self._itemTimers[cfgId])
        self._itemTimers[cfgId] = nil
    end)
end

---@param spItem pbcmessage.SpItem
function ItemProxy:_RegisterSpItemEndTime(spItem)
    local endTime = spItem.ExpTime - TimerMgr.GetCurTimeSeconds() + 1
    local timeId = TimerMgr.AddTimer(endTime, function()
        Debug.Log("限时道具到期");
        BllMgr.GetItemBLL():SendRemoveCommonItemReq(spItem.Mid)
        self:_RemoveSpItem(spItem.Id);
    end)

    if self._spItemTimers[spItem.Id] ~= nil then
        TimerMgr.Discard(self._spItemTimers[spItem.Id])
    end

    self._spItemTimers[spItem.Id] = timeId
end

---@private
---移除限时道具
function ItemProxy:_RemoveSpItem(spItemId)
    if X3DataMgr.Get(X3DataConst.X3Data.SpItem, spItemId) then
        X3DataMgr.Remove(X3DataConst.X3Data.SpItem, spItemId)
    else
        Debug.Log("特殊道具未找到 id" .. spItemId)
    end
end


return ItemProxy