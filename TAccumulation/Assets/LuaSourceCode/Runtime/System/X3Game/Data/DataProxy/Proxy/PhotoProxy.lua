---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kan.
--- DateTime: 2022/6/1 14:29
---
---
---@class PhotoProxy:BaseProxy
local PhotoProxy = class("PhotoProxy", BaseProxy)
local localPhotoDB = require "Runtime.System.X3Game.Modules.Photo.LocalPhotoDB"

function PhotoProxy:OnInit()
    self.ItemList = {}
    self.Photo = {}

    self.actionList = {}

    -----部位
    --self.PartList = {}

    ---角色 -- 部位
    self.RolePartList = {}

    self.MarkDataList = {}
    ---饰品加星状态
    self.FashionMarkDataList = {}
    ---本地及远端状态处理
    self.PhotoLocalStateList = {}
    self.PhotoRemoteStateList = {}

    ---云端不包含审核失败的
    self.PhotoAvaliableCount = 0

    --photoGroup
    self.PhotoGroup = {}
    ---tempItem --临时试用的
    self.TempItemDic = {}
end

function PhotoProxy:Init(photoData)
    if photoData == nil then
        return
    end

    local redInit = RedPointMgr.IsInit()

    for k, v in pairs(photoData.PhotoComponentMap) do
        self:SetPhotoItem(k, v, redInit, true)

        --local fashionData = LuaCfgMgr.Get("FashionData", k)
        --if (fashionData) then
        --    if (not self.RolePartList[fashionData.RoleID]) then
        --        self.RolePartList[fashionData.RoleID] = {}
        --    end
        --    if (not self.RolePartList[fashionData.RoleID][fashionData.PartEnum]) then
        --        self.RolePartList[fashionData.RoleID][fashionData.PartEnum] = {}
        --    end
        --
        --    table.insert(self.RolePartList[fashionData.RoleID][fashionData.PartEnum], k)
        --end
    end

    for k, v in pairs(photoData.Photos) do
        self.Photo[v.Url] = self:CopyPhotoStruct(v)

        if(v.Status < GameConst.PhotoStatus.Audit_Reject) then
            self.PhotoAvaliableCount = self.PhotoAvaliableCount + 1
        end
    end

    for actionId, markTime in pairs(photoData.ActionMarkMap) do
        self.MarkDataList[actionId] = markTime
    end
    ---初始化饰品加星数据
    self.FashionMarkDataList[0] = {}
    local allRoles = LuaCfgMgr.GetAll("RoleInfo")
    for _, v in pairs(allRoles) do
        self.FashionMarkDataList[v.ID] = {}
    end
    for roleId, markInfo in pairs(photoData.FashionMarkMap) do
        for fashionId, markTime in pairs(markInfo.MarkMap) do
            self.FashionMarkDataList[roleId][fashionId] = markTime
        end
    end
    ---照片组counter检查
    if(photoData.PhotoGroupMap) then
        for checkId, url in pairs(photoData.PhotoGroupMap) do
            self.PhotoGroup[checkId] = url

            ---将数据写到本地
            local photoName = UrlImgMgr.GetBaseName(url)
            if(not string.isnilorempty(photoName)) then
                PlayerPrefs.SetString(string.format("%s%s", "PhotoGroup", checkId), photoName)
            end
        end
    end

    ---云端照片检查本地是否拥有
    localPhotoDB.CheckAddCloudData(self.Photo)
end

---用于复制Photo
function PhotoProxy:CopyPhotoStruct(orginData, isSecond)
    local data = {}
    data.Url = orginData.Url or ""
    data.TimeStamp = orginData.TimeStamp or 0
    data.Status = orginData.Status or 0
    data.RoleId = orginData.RoleId or 0
    data.GroupMode = orginData.GroupMode or GameConst.PhotoMode.Single
    data.Mode = orginData.Mode or 0
    data.PuzzleMode = orginData.PuzzleMode or 0
    data.ActionList = {}
    if(orginData.ActionList) then
        for i = 1, #orginData.ActionList do
            data.ActionList[i] = orginData.ActionList[i]
        end
    end
    data.DecorationList = {}
    if(orginData.DecorationList) then
        for i = 1, #orginData.DecorationList do
            data.DecorationList[i] = orginData.DecorationList[i]
        end
    end
    if(orginData.SourcePhoto and (not isSecond)) then
        data.SourcePhoto = self:CopyPhotoStruct(orginData.SourcePhoto, true)
    end
    return data
end

function PhotoProxy:UpdateMarkData(data, sendData)
    local stateTime = sendData.Mark == 1 and data.Timestamp or nil
    self.MarkDataList[sendData.ActionID] = stateTime
    EventMgr.Dispatch("ActionLibrary_MarkChange", sendData.ActionID, stateTime)
end

function PhotoProxy:GetMarkData(id)
    return self.MarkDataList[id]
end

function PhotoProxy:UpdateFashionMarkData(data, sendData)
    local stateTime = sendData.Mark == 1 and data.Timestamp or nil
    self.FashionMarkDataList[sendData.RoleID][sendData.FashionID] = stateTime
    EventMgr.Dispatch("DecoLibrary_MarkChange", sendData.FashionID, stateTime)
end

function PhotoProxy:GetFashionMarkData(id, roleID)
    return self.FashionMarkDataList[roleID][id]
end

function PhotoProxy:GetActionList()
    return self.actionList
end

function PhotoProxy:UpdateRedPoint(id, isNew, redInit, isStart)
    local curValue = 0
    ------- 看过的或者初始化，向红点系统内写入1
    if (redInit) then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_PHOTO_ITEM, id)
        --local curValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHOTO_ITEM)
    else
        local count = isNew and 0 or 1
        RedPointMgr.Save(count, X3_CFG_CONST.RED_PHOTO_ITEM, id)
        curValue = isNew and 1 or 0
    end
    self.ItemList[id] = curValue > 0 and true or false

    ---action单独开一个
    if(not self.actionList[id]) then
        local actionInfo = LuaCfgMgr.Get("PhotoAction", id)
        if(actionInfo) then
            self.actionList[id] = curValue > 0 and true or false
        end
    end

    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHOTO_ITEM, curValue, id)
end

function PhotoProxy:AddPhoto(photo)
    --此处URL为完整路径
    if((not self.Photo[photo.Url]) and photo.Status < GameConst.PhotoStatus.Audit_Reject) then
        self.PhotoAvaliableCount = self.PhotoAvaliableCount + 1
    elseif(self.Photo[photo.Url] and self.Photo[photo.Url].Status < GameConst.PhotoStatus.Audit_Reject and photo.Status == GameConst.PhotoStatus.Audit_Reject) then
        self.PhotoAvaliableCount = self.PhotoAvaliableCount - 1
    end

    self.Photo[photo.Url] = self:CopyPhotoStruct(photo)
end

function PhotoProxy:GetPhoto(photoName)
    if (self.Photo[photoName]) then
        return table.clone(self.Photo[photoName])
    end

    return self.Photo[photoName]
end

function PhotoProxy:RemovePhoto(photoName)
    if photoName == nil then
        return
    end
    if((self.Photo[photoName]) and self.Photo[photoName].Status < GameConst.PhotoStatus.Audit_Reject) then
        self.PhotoAvaliableCount = self.PhotoAvaliableCount - 1
    end
    self.Photo[photoName] = nil
end

function PhotoProxy:GetPhotoList()
    return table.dictoarray(self.Photo)
end

function PhotoProxy:GetPhotoListAvaliableNum()
    return self.PhotoAvaliableCount
end

function PhotoProxy:SetPhotoItem(itemID, state, redInit, isStart)
    local _state = state
    ---初始化时不依赖服务器状态数据
    if (isStart and (not redInit)) then
        _state = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHOTO_ITEM, itemID) == 0 and true or false
    end

    self:UpdateRedPoint(itemID, _state, redInit, isStart)
end

---获取拍照物品数据
---@param itemID int 物品ID
---@return int,bool 物品ID,状态
function PhotoProxy:GetItemInfo(itemID)
    if self.ItemList[itemID] == nil and self.TempItemDic[itemID] == nil then
        return nil, false
    end

    if(self.TempItemDic[itemID]) then
        return itemID, false
    end

    return itemID, self.ItemList[itemID]
end

function PhotoProxy:GetItemState(itemID)
    return self.ItemList[itemID]
end

function PhotoProxy:SetTempItemList(list)
    if(list) then
        for i = 1, #list do
            self.TempItemDic[list[i]] = list[i];
        end
    else
        table.clear(self.TempItemDic)
    end

end

---获取部位红点状态
function PhotoProxy:GetRolePartRedState(roleId, partId)
    --if (self.RolePartList[roleId]) then
    --    local partList = self.RolePartList[roleId][partId]
    --    if (partList) then
    --        for i = 1, #partList do
    --            if (self.ItemList[partList[i]]) then
    --                return true;
    --            end
    --        end
    --    else
    --        ---无部位则为全部
    --        for index, _partList in pairs(self.RolePartList[roleId]) do
    --            for i = 1, #_partList do
    --                if (self.ItemList[_partList[i]]) then
    --                    return true;
    --                end
    --            end
    --        end
    --    end
    --end
    --
    --return false
end

---这里可以优化下，分下男主
function PhotoProxy:UpdateActionTabRedPoint(roleId)
    local count = 0
    for id, useless in pairs(self.actionList) do
        local state = self.ItemList[id]
        local actionInfo = LuaCfgMgr.Get("PhotoAction", id)
        if (not actionInfo) then
            Debug.LogWarning("PhotoAction no this id ", id)
        end
        if state and actionInfo and actionInfo.Role == roleId then
            count = 1
            break
        end
    end

    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PURIKURA_ACTION_TAB, count)
end

function PhotoProxy:SetPhotoLocalState(fileName, state)
    self.PhotoLocalStateList[fileName] = state
end

function PhotoProxy:GetPhotoLocalState(fileName)
    return self.PhotoLocalStateList[fileName]
end

function PhotoProxy:SetPhotoRemoteState(fileName, serverFileName)
    self.PhotoRemoteStateList[fileName] = serverFileName
end

----现在的DB和相关机制，上传后没有关联，先苟 ---已解决
function PhotoProxy:ResetPhotoRemoteState(serverFileName)
    for index, name in pairs(self.PhotoRemoteStateList) do
        if (name == serverFileName) then
            self.PhotoRemoteStateList[index] = nil
            break ;
        end
    end
end

function PhotoProxy:GetPhotoRemoteState(fileName)
    return self.PhotoRemoteStateList[fileName]
end

function PhotoProxy:CheckPhotoGroup(id)
    return self.PhotoGroup[id]
end

---真正的值
function PhotoProxy:FillPhotoGroup(id, url)
    self.PhotoGroup[id] = url
end

---标记已发送过
function PhotoProxy:MarkPhotoGroup(id, state)
    if(self.PhotoGroup[id] and type(self.PhotoGroup[id]) == "string") then
        Debug.LogError("PhotoProxy:MarkPhotoGroup 重复发送")
        return
    end
    Debug.LogWarning("收到服务器回应： MarkPhotoGroup ", id)
    self.PhotoGroup[id] = state
end

function PhotoProxy:OnClear()
    self.ItemList = nil
    self.Photo = nil
    self.PhotoStateList = nil
    self.actionList = nil
end

return PhotoProxy