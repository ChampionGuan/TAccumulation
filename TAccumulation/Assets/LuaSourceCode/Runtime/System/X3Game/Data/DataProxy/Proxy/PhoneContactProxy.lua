---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/12/8 17:57
---@class PhoneContactProxy:BaseProxy
local PhoneContactProxy = class("PhoneContactProxy", BaseProxy)

---初始化
function PhoneContactProxy:OnInit()
    self.playerContactId = 999
    EventMgr.AddListener("UserRecordUpdate", self.UserRecordUpdate, self)
    BllMgr.GetMobileContactBLL()
end

---EnterGame 初始化数据
---@param contactData pbcmessage.ContactData
function PhoneContactProxy:Init(contactData)
    if contactData == nil then
        return
    end
    ---@type X3Data.PhoneContactData
    self.phoneContactData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.PhoneContactData)
    self.playerContactId = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONECONTACTPLAYER)
    self.phoneContactData:SetPrimaryValue(contactData.LastRefreshTime)
    --- 静态头像 k:静态头像id v:是否为New
    for k, v in pairs(contactData.HeadPhotos) do
        self.phoneContactData:AddHeadPhotosValue(v, k)
    end
    ---  签名 k:签名id v:是否为New
    for k, v in pairs(contactData.Signs) do
        self.phoneContactData:AddSignsValue(v, k)
    end
    --- 朋友圈封面 k:封面id v:是否为New
    for k, v in pairs(contactData.MomentCovers) do
        self.phoneContactData:AddMomentCoversValue(v, k)
    end
    ---聊天气泡
    for k, v in pairs(contactData.Bubbles) do
        self.phoneContactData:AddBubblesValue(v, k)
    end
    ---聊天背景
    for k, v in pairs(contactData.ChatBackgrounds) do
        self.phoneContactData:AddChatBackgroundsValue(v, k)
    end

    self:AddContact(contactData.Self)

    for k, v in pairs(contactData.ContactMap) do
        self:AddContact(v)
    end
    EventMgr.Dispatch("PhoneContactCheckRp")
end

---更新手机联系人数据
---@param data pbcmessage.ContactUpdateReply
function PhoneContactProxy:UpdateContactCallBack(data)
    if data.ContactList == nil then
        Debug.LogError("ContactUpdateReply ContactList is nil ")
        return
    end
    if data.OpType == 1 then
        for i = 1, #data.ContactList do
            local contact = data.ContactList[i]
            self:AddContact(contact)
        end
    elseif data.OpType == 2 then
        for i = 1, #data.ContactList do
            local contact = data.ContactList[i]
            self:RemoveContact(contact)
        end
    end
end

---添加一个新的联系人
---@param contact pbcmessage.Contact
function PhoneContactProxy:AddContact(contact)
    if contact == nil then
        return
    end
    local phoneContactCfg = LuaCfgMgr.Get("PhoneContact", contact.ID)
    if phoneContactCfg == nil then
        Debug.LogWarning("AddContact phoneContactCfg is nil contactId:", tostring(contact.ID))
        return
    end
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, contact.ID)
    if contactData == nil then
        ---@type X3Data.PhoneContact
        contactData = X3DataMgr.Add(X3DataConst.X3Data.PhoneContact)
    end
    contactData:DecodeByField(contact)
    contactData:SetRemark(GameHelper.FilterSensitiveWord(contact.Remark))
    contactData:SetCardId(contact.CardID)
    if contact.Sign then
        contactData:GetSign():SetPrimaryValue(GameHelper.FilterSensitiveWord(contact.Sign.Sign))
    end
    contactData:SetChangeHeadTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeHeadTimes, contact.ID))
    contactData:SetChangeBubbleTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeBubbleTimes, contact.ID))
    contactData:SetChangeMomentTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeMomentTimes, contact.ID))
    contactData:SetChangeNudgeTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeNudgeTimes, contact.ID))
    if contact.Nudge then
        contactData:GetNudge():SetPrimaryValue(contact.ID)
    end
    self:SetContactNameUnlock(contact.ID)
    if contact.ID ~= self.playerContactId then
        BllMgr.GetPhoneMsgBLL():GetSimulator():AddContact(contact.ID)
    end
    EventMgr.Dispatch("Mobile_Contact_Add", contact)
    EventMgr.Dispatch("OnSetContactPendantSwitchCallBack")
end

---设置联系人名称是否解锁
function PhoneContactProxy:SetContactNameUnlock(contactId)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, contactId)
    if contactData ~= nil then
        contactData:SetNameUnlock(self:GetContactNameIsUnlock(contactId))
    end
end

---判断联系人是否解锁
function PhoneContactProxy:GetContactNameIsUnlock(contactId)
    local phoneContactCfg = LuaCfgMgr.Get("PhoneContact", contactId)
    local contactData = self:GetContactData(contactId)
    local conditionCheck = true
    local msgCheck = true
    if contactData == nil or phoneContactCfg.NameCondition ~= 0 then
        conditionCheck = ConditionCheckUtil.CheckConditionByCommonConditionGroupId(phoneContactCfg.NameCondition)
    end

    if contactData == nil or phoneContactCfg.ConversationConditon ~= 0 then
        msgCheck = BllMgr.GetPhoneMsgBLL():HasConverstaionPassed(phoneContactCfg.ConversationConditon)
    end
    return conditionCheck and msgCheck
end

---删除某个联系人
---@param contact pbcmessage.Contact
function PhoneContactProxy:RemoveContact(contact)
    if contact == nil then
        return
    end
    X3DataMgr.Remove(X3DataConst.X3Data.PhoneContact, contact.ID)
end

---UserRecord 数据更新
function PhoneContactProxy:UserRecordUpdate(savedType, subId)
    if subId == nil then
        return
    end
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, subId)
    if contactData == nil then
        return
    end
    if savedType == DataSaveRecordType.DataSaveRecordTypeChangeHeadTimes then
        contactData:SetChangeHeadTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeHeadTimes, subId))
    elseif savedType == DataSaveRecordType.DataSaveRecordTypeChangeBubbleTimes then
        contactData:SetChangeBubbleTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeBubbleTimes, subId))
    elseif savedType == DataSaveRecordType.DataSaveRecordTypeChangeMomentTimes then
        contactData:SetChangeMomentTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeMomentTimes, subId))
    elseif savedType == DataSaveRecordType.DataSaveRecordTypeChangeNudgeTimes then
        contactData:SetChangeNudgeTimes(SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeChangeNudgeTimes, subId))
    end
end

---获取单个联系人
---@return X3Data.PhoneContact
function PhoneContactProxy:GetContactData(contactId)
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, contactId)
    return contactData
end

---获取所有联系人数据
function PhoneContactProxy:GetAllContactData()
    local allContactData = {}
    X3DataMgr.GetAll(X3DataConst.X3Data.PhoneContact, allContactData)
    return allContactData
end

---设置联系人的挂件开关
function PhoneContactProxy:SetContactPendantSwitchCallBack(data)
    X3DataMgr.Update(X3DataConst.X3Data.PhoneContact, data.ID, data)
    EventMgr.Dispatch("OnSetContactPendantSwitchCallBack", data)
end

---设置女主签名
---@param request pbcmessage.SetSelfContactSignRequest
function PhoneContactProxy:SetContactSignCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, self.playerContactId)
    if request.SignId ~= nil then
        contactData:GetSign():SetSignId(request.SignId)
    end
    contactData:GetSign():SetPrimaryValue(request.Sign)
    contactData:GetSign():SetTime(TimerMgr.GetCurTimeSeconds())
    EventMgr.Dispatch("OnSetContactSignReplyCallBack", request)
end

---设置备注
---@param request pbcmessage.SetContactRemarkRequest
function PhoneContactProxy:SetContactRemarkCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, request.ID)
    contactData:SetRemark(request.Remark)
end

---设置通话背景
---@param request pbcmessage.SetContactBGRequest
function PhoneContactProxy:SetContactBGCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, request.ID)
    contactData:SetCardId(request.CardID)
end

---设置玩家头像
---@param request pbcmessage.SetSelfContactHeadRequest
function PhoneContactProxy:SetSelfContactHeadCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, self.playerContactId)
    contactData:GetHead():DecodeByField(request.Head)
end

---设置联系人头像
---@param request pbcmessage.SetContactHeadRequest
function PhoneContactProxy:SetContactHeadCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, request.ContactID)
    contactData:GetHead():DecodeByField(request.Head)
end

---设置手机朋友圈封面
---@param request pbcmessage.SetSelfMomentCoverRequest
function PhoneContactProxy:SetSelfMomentCoverCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, self.playerContactId)
    contactData:GetMoment():GetCoverPhoto():DecodeByField(request.CoverPhoto)
end

---设置玩家拍一拍 签名及后缀
function PhoneContactProxy:SetContactNudgeInfoCallBack(contactId, nudgeInfo)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, contactId)
    contactData:GetNudge():DecodeByField(nudgeInfo)
    contactData:GetNudge():SetAutoPatID(0)
end

function PhoneContactProxy:ContactAutoNudgeInfoUpdate(contactId, autoPatId)
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, contactId)
    if contactData then
        contactData:GetNudge():SetAutoPatID(autoPatId)
    end
end
---设置聊天气泡
---@param request pbcmessage.SetContactBubbleRequest
function PhoneContactProxy:SetContactBubbleCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, request.ID)
    contactData:GetBubble():DecodeByField(request.Bubble)
end

---设置聊天背景
---@param request pbcmessage.SetContactChatBackgroundRequest
function PhoneContactProxy:SetContactChatBackgroundCallBack(request)
    ---@type X3Data.PhoneContact
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneContact, request.ID)
    contactData:GetChatBackground():DecodeByField(request.ChatBackground)
end

---更新联系人个性化数据
---@param data pbcmessage.UnlockContactPersonalUpdateReply
function PhoneContactProxy:UnlockContactPersonalUpdate(data)
    local isCheckRp = false
    ---更新头像
    if data.HeadList then
        for i = 1, #data.HeadList do
            local headId = data.HeadList[i]
            self.phoneContactData:AddOrUpdateHeadPhotosValue(headId, false)
            EventMgr.Dispatch("CheckHeadRp", headId)
        end
        isCheckRp = true
    end
    ---更新签名
    if data.SignList then
        for i = 1, #data.SignList do
            local signId = data.SignList[i]
            self.phoneContactData:AddOrUpdateSignsValue(signId, false)
        end
    end
    ---更新朋友圈封面
    if data.CoverList then
        for i = 1, #data.CoverList do
            local coverId = data.CoverList[i]
            self.phoneContactData:AddOrUpdateMomentCoversValue(coverId, false)
        end
    end
    ---更新解锁的聊天气泡
    if data.BubbleList then
        for i = 1, #data.BubbleList do
            local bubbleId = data.BubbleList[i]
            self.phoneContactData:AddOrUpdateBubblesValue(bubbleId, false)
            EventMgr.Dispatch("CheckBubbleRp", bubbleId)
        end
        isCheckRp = true
    end
    ---更新朋友圈封面
    if data.ChatBackgroundList then
        for i = 1, #data.ChatBackgroundList do
            local chatBgId = data.ChatBackgroundList[i]
            self.phoneContactData:AddOrUpdateChatBackgroundsValue(chatBgId, false)
            EventMgr.Dispatch("CheckChatBackgroundRp", chatBgId)
        end
        isCheckRp = true
    end
    if isCheckRp then
        EventMgr.Dispatch("PhoneContactCheckRp")
    end
end

---获取当前已解锁的聊天气泡
function PhoneContactProxy:GetBubbles()
    return self.phoneContactData:GetBubbles()
end

---获取当前已解锁的聊天背景
function PhoneContactProxy:GetChatBackGround()
    return self.phoneContactData:GetChatBackgrounds()
end

---获取当前已解锁的头像
function PhoneContactProxy:GetHeadPhotos()
    return self.phoneContactData:GetHeadPhotos()
end

---获取玩家的联系人Id
function PhoneContactProxy:GetPlayerContactId()
    return self.playerContactId
end

return PhoneContactProxy