---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by PC.
--- DateTime: 2020/11/9 15:12
---
---@class SystemSettingBLL:BaseBll
local SystemSettingBLL = class("SystemSettingBLL", BaseBll)
local SDKDefine = require("Runtime.System.X3Game.Modules.SDK.SDKDefine")
---@type SysLoginBGUtil 这里Util为功能模块层 存放本地数据接口
local Module_SysLoginBGUtil = require("Runtime.System.X3Game.Modules.Theme.SysLoginBGUtil")
---@type SysIconUtil 这里Util为功能模块层 存放本地数据接口
local Module_SysIconUtil = require("Runtime.System.X3Game.Modules.Theme.SysIconUtil")
---@type SysThemeUtil 这里Util为功能模块层 存放本地数据接口
local Module_SysThemeUtil = require("Runtime.System.X3Game.Modules.Theme.SysThemeUtil")
---@type MonthCardConst
local MonthCardConst = require("Runtime.System.X3Game.GameConst.MonthCardConst")

---@type GraphicsSettingConst
local GraphicsSettingConst = require("Runtime.System.X3Game.GameConst.GraphicsSettingConst")

local m_DeviceInfoUtil = CS.PapeGames.X3.DeviceInfoUtil
local m_GraphicTabs = {}
local m_RecommendGQ = 0
local m_FxSetting = CS.FxSetting
local m_PapeGraphicsManager = CS.PapeGames.Rendering.PapeGraphicsManager
local m_WaterSystemManager = CS.PapeGames.Rendering.WaterSystemManager

local m_TbUtil = CS.X3Battle.TbUtil

local m_SettingPref = {
    [X3_CFG_CONST.SYSTEM_SETTING_TYPE_GYROSCOPE] = "SystemSetting_Gyroscope",
    [X3_CFG_CONST.SYSTEM_SETTING_TYPE_POST_NIGHTPUSH] = "SystemSetting_Post_NightPush"
}

local MONTH_VERIFY_REWARD_VIEWED = "SystemSetting_PhoneRewardViewed"
---PlayerPrefs的key 是否强制开启多语言页签
local ForceAvailableLangKey = "ForceAvailableLangKey"
---@type SystemSettingConst
local SystemSettingConst = require("Runtime.System.X3Game.Modules.SystemSetting.Data.SystemSettingConst")
function SystemSettingBLL:OnInit()
    self.verifyTime = 0
    self.preNum = -1
    self.ratio = 0.6
    ---@type table  见 LocalizationLanguage 表
    self.localizationLanguageCfg = nil
    self.availableVoice = nil
    self.availableLanguage = nil
    ---@type bool 是否强制开启多语言页签
    self.forceAvailable = nil
    self:SetAvailableData(self:GetForceAvailable())

    -- 监听所有ConditionType变化时 根据主题依赖的Condition过滤掉符合条件的 并抛出事件 （可能导致主题资产发生变化的事件）
    EventMgr.AddListener(GameConst.CommonConditionUpdate, self.CheckRefreshThemeChange, self)

    -- 监听可能导致主题资产状态发生变化的事件 并刷新对应红点
    EventMgr.AddListener(ThemeEnum.SysThemeEventMap.ThemeConditionUpdate, self.CheckRefreshThemeRedDot, self)

    -- 月卡数据更新的红点刷新
    EventMgr.AddListener(MonthCardConst.Event.MonthCardUpdate, function()
        -- 个性化相关 刷新主题相关红点
        self:CheckRefreshThemeRedDot()
        -- 个性化相关 刷新Icon相关红点
        self:CheckRefreshIconRedDot()
    end, self)
end

---接管处理GM指令
function SystemSettingBLL:HandleGMCommand(inputList)
    if inputList[3] == "dump" then
        -- Dump所有个性化设置
        Debug.LogError(table.dump(BllMgr.GetSystemSettingBLL():GetAllThemeSetting()))
    elseif inputList[3] == "reset" then
        -- 重置所有个性化设置
        Debug.LogError("before : " .. table.dump(BllMgr.GetSystemSettingBLL():GetAllThemeSetting()))
        BllMgr.GetSystemSettingBLL():CheckResetAllThemeSetting()
        PlayerPrefs.SetInt(ThemeEnum.SysThemeLocalKey.CurBgOperationId, 0)
        PlayerPrefs.SetInt(ThemeEnum.SysThemeLocalKey.CurIconOperationId, 0)
        PlayerPrefs.Save()
        Debug.LogError("now : " .. table.dump(BllMgr.GetSystemSettingBLL():GetAllThemeSetting()))
    elseif inputList[3] == "deepreset" then
        for _, id in pairs(ThemeEnum.SysThemeLocalKey) do
            PlayerPrefs.DeleteKey(id)
        end
        PlayerPrefs.Save()
        Debug.LogError("deep reset : " .. table.dump(BllMgr.GetSystemSettingBLL():GetAllThemeSetting()))
    elseif inputList[3] == "iconforceupdatetest" then
        -- Icon强更配置检查流程测试
        BllMgr.GetSystemSettingBLL():CheckSyncForceUpdateIcon()
    elseif inputList[3] == "bgforceupdatetest" then
        -- Bg强更配置检查流程测试
        BllMgr.GetSystemSettingBLL():CheckForceUpdateLoginBg()
    elseif inputList[3] == "bgresloadtimetest" then
        -- 需求: ‘视频资源在不同设备的加载时间统计’ 的测试方法
        Debug.LogError("GM_CMD VIDEO_BG_RES LOAD START")
        local isCsBgWndOpen = UIMgr.IsOpened(UIConf.LoginBgWnd)
        local isLuaUIView = UIMgr.GetViewByTag(UIConf.LoginBgWnd)
        if isCsBgWndOpen and not isLuaUIView then
            UIMgr.Open(UIConf.LoginBgWnd)
        end
        EventMgr.Dispatch("GM_DEBUG_ALL_RESOURCES_LOADING_TIME")
    end
end

function SystemSettingBLL:InitGraphicsSetting()
    m_GraphicTabs = {}

    for _, v in pairs(GraphicsSettingConst.GraphicsGroup) do
        if UNITY_EDITOR or m_DeviceInfoUtil.IsAndroidSimulate() then
            if v.ID ~= GraphicsSettingConst.GQ_GROUP_RESOLUTION then
                table.insert(m_GraphicTabs, v)
            end
        else
            table.insert(m_GraphicTabs, v)
        end
    end

    table.sort(m_GraphicTabs, function(a, b)
        return a.Order < b.Order
    end)

    self:SetRecommendGQ()
    self:ChangeTextureStreamingBudget()
    self:InitMemorySizeLevel()
end

function SystemSettingBLL:PreCheck()
    Debug.LogFormat("[SystemSetting]GraphicsDeviceVersion %s", CS.UnityEngine.SystemInfo.graphicsDeviceVersion)
    Debug.LogFormat("[SystemSetting]GraphicsDeviceVersion %s", CS.UnityEngine.SystemInfo.operatingSystem)
    Debug.LogFormat("[SystemSetting]GraphicsDeviceVersion %s", CS.UnityEngine.SystemInfo.systemMemorySize)
    local showTips = false

    local version = CS.UnityEngine.SystemInfo.graphicsDeviceVersion
    local os = CS.UnityEngine.SystemInfo.operatingSystem
    local memSize = CS.UnityEngine.SystemInfo.systemMemorySize

    if not string.isnilorempty(version) and not string.isnilorempty(os) and not string.isnilorempty(memSize) then
        ---gles
        local strings = string.split(CS.UnityEngine.SystemInfo.graphicsDeviceVersion, " ")
        local sBegin, _ = string.find(strings[1], "OpenGL")
        if sBegin == 1 then
            for i = 2, #strings do
                local ver = tonumber(string.sub(strings[i], 1, 1))
                if ver ~= nil then
                    if ver < 3 then
                        showTips = true
                    end

                    break
                end
            end
        end

        ---android
        sBegin, _ = string.find(CS.UnityEngine.SystemInfo.operatingSystem, "Android")
        if sBegin == 1 then
            local strings = string.split(CS.UnityEngine.SystemInfo.operatingSystem, "API")
            local ver1 = #strings[2] > 1 and tonumber(string.sub(strings[2], 2, 2)) or nil
            local ver2 = #strings[2] > 2 and tonumber(string.sub(strings[2], 3, 3)) or nil
            local ver3 = #strings[2] > 3 and tonumber(string.sub(strings[2], 4, 4)) or nil
            if ver1 ~= nil and (ver2 == nil or (ver1 <= 2 and ver2 < 3)) and (ver3 == nil or ver3 == 0) then
                showTips = true
            end
        end

        ---systemMemorySize
        if CS.UnityEngine.SystemInfo.systemMemorySize < 2500 then
            showTips = true
        end
    end

    if showTips then
        require("Runtime.System.X3Game.Modules.UICommon.MessageBox.MessageBox")
        UICommonUtil.ShowMessageBox(UITextConst.UI_TEXT_12669, { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
            SDKMgr.ApplicationQuit()
        end, is_auto_close = false } }, AutoCloseMode.None)
    end

    return not showTips
end

--region 设置内存等级
function SystemSettingBLL:SetMemorySizeLevel(size)
    PlayerPrefs.SetInt("SettingMemorySizeLevel", size)
    PlayerPrefs.Save()
end

--region 获取内存等级
function SystemSettingBLL:GetMemorySizeLevel()
    return PlayerPrefs.GetInt("SettingMemorySizeLevel", 0)
end

--region 初始化内存等级
function SystemSettingBLL:InitMemorySizeLevel()
    local memSize = CS.UnityEngine.SystemInfo.systemMemorySize

    if memSize <= m_TbUtil.battleConsts.MemorySize[0] then
        PlayerPrefs.SetInt("SettingMemorySizeLevel", 0)
    elseif memSize <= m_TbUtil.battleConsts.MemorySize[1] then
        PlayerPrefs.SetInt("SettingMemorySizeLevel", 1)
    else
        PlayerPrefs.SetInt("SettingMemorySizeLevel", 2)
    end
    PlayerPrefs.Save()
end

--region 设备分级
function SystemSettingBLL:SetRecommendGQ()
    m_RecommendGQ = self:GetRecommendGQLevel()

    local gear = PlayerPrefs.GetInt("SettingGraphicsGear", -1)

    if gear == -1 then
        PlayerPrefs.SetInt("SettingGraphicsGear", m_RecommendGQ)
        gear = m_RecommendGQ
    end

    for k, _ in pairs(GraphicsSettingConst.GraphicsGroup) do
        local value = self:GetGraphicsSetting(k, gear)
        PlayerPrefs.SetInt(GraphicsSettingConst.GraphicsGroup[k].Name, value)
        self:_ApplySingleGroupSetting(k, value)
    end

    -- 根据机型黑名单，关闭某些机型的 VFX
    local deviceModel = CS.UnityEngine.SystemInfo.deviceModel
    local allBanDevices = LuaCfgMgr.GetAll("GraphicsBanVFXPhone")
    for _, v in pairs(allBanDevices) do
        if self:DeviceCompare(deviceModel, v.Device) then
            CS.UnityEngine.VFX.VisualEffect.active = false
            break
        end
    end

    EventMgr.AddListener(Const.Event.DEVICE_ORATION_CHANGED, self.RestoreResolutionGrade, self)
    PlayerPrefs.Save()
end

function SystemSettingBLL:ChangeTextureStreamingBudget()
    local memSize = CS.UnityEngine.SystemInfo.systemMemorySize
    if memSize and memSize > 0 then
        if memSize >= GameConst.StreamingMipmapsMemoryHigh then
            GameHelper.SetTextureStreamingBudget(GameConst.StreamingMipmapsMemoryBudgetHigh)
        elseif memSize >= GameConst.StreamingMipmapsMemoryMiddle and memSize < GameConst.StreamingMipmapsMemoryHigh then
            GameHelper.SetTextureStreamingBudget(GameConst.StreamingMipmapsMemoryBudgetMiddle)
        else
            GameHelper.SetTextureStreamingBudget(GameConst.StreamingMipmapsMemoryBudget)
        end
    end
end

function SystemSettingBLL:GetRecommendGQLevel()
    if UNITY_EDITOR then
        return 4
    elseif m_DeviceInfoUtil.IsAndroidSimulate() then
        return 3
    end

    -- 根据机型白名单打分
    local deviceModel = CS.UnityEngine.SystemInfo.deviceModel
    if not string.isnilorempty(deviceModel) then
        local allDeviceModel = LuaCfgMgr.GetAll("GraphicsPhone")
        for _, v in pairs(allDeviceModel) do
            if self:DeviceCompare(deviceModel, v.Device) then
                return v.Level
            end
        end
    end

    -- 根据 SoC 打分
    local socName = m_DeviceInfoUtil.GetSocName()
    if not string.isnilorempty(socName) then
        local allDeviceSoC = LuaCfgMgr.GetAll("GraphicsSOC")
        for _, v in pairs(allDeviceSoC) do
            if self:DeviceCompareSoC(socName, v.SOC) then
                return v.Level
            end
        end
    end

    --通过内存大小计算设备得分
    local graphicsScoreCfg
    if Application.IsIOSMobile() then
        graphicsScoreCfg = LuaCfgMgr.GetListByCondition("GraphicsScore", { Type = 2 }) -- IOS
    else
        graphicsScoreCfg = LuaCfgMgr.GetListByCondition("GraphicsScore", { Type = 1 }) -- Android
    end

    local mem1 = graphicsScoreCfg[1]
    local mem2 = graphicsScoreCfg[2]
    local score = -1
    local memSize = CS.UnityEngine.SystemInfo.systemMemorySize
    if memSize ~= nil then
        if memSize >= mem1.Memory then
            score = 100
        elseif memSize <= mem2.Memory then
            score = 40
        else
            local k = (mem1.Score - mem2.Score) / (mem1.Memory - mem2.Memory)
            score = k * (memSize - mem2.Memory) + mem2.Score
        end
        local score2Level = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.SYSTEMSETTINGSCORE)
        for i = 1, #score2Level do
            if score <= score2Level[i] then
                return i
            end
        end
    end

    return 2 -- 默认返回 2
end

function SystemSettingBLL:DeviceCompare(d1, d2)
    d1 = string.trim(string.lower(string.gsub(d1, "-", " ")))
    d2 = string.trim(string.lower(string.gsub(d2, "-", " ")))
    return d1 == d2
end

function SystemSettingBLL:DeviceComparePrefix(d1, d2)
    d1 = string.trim(string.lower(string.gsub(d1, "-", " ")))
    d2 = string.trim(string.lower(string.gsub(d2, "-", " ")))

    local sBegin, sEnd = string.find(d1, d2)
    return sBegin == 1
end

function SystemSettingBLL:DeviceCompareSoC(d1, d2)
    d1 = string.gsub(d1, "TM", " ")
    d2 = string.gsub(d2, "TM", " ")
    d1 = string.gsub(d1, "%(", " ")
    d2 = string.gsub(d2, "%(", " ")
    d1 = string.gsub(d1, "%)", " ")
    d2 = string.gsub(d2, "%)", " ")
    d1 = string.gsub(d1, ",", " ")
    d2 = string.gsub(d2, ",", " ")
    d1 = string.gsub(d1, "-", " ")
    d2 = string.gsub(d2, "-", " ")
    d1 = string.gsub(d1, " ", "")
    d2 = string.gsub(d2, " ", "")

    d1 = string.trim(string.lower(d1))
    d2 = string.trim(string.lower(d2))
    local sBegin, sEnd = string.find(d1, d2)

    return sBegin ~= nil
end
--endregion

function SystemSettingBLL:OnLogin()
    local playerVoiceOn = self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_VOICE_PL) == 0
    WwiseMgr.SetPlayerVoiceOpen(playerVoiceOn)

    self.monthRewardViewed = string.concat(MONTH_VERIFY_REWARD_VIEWED, SelfProxyFactory.GetPlayerInfoProxy():GetUid())

    EventMgr.AddListener("UserRecordUpdate", self.OnUserRecordChange, self)
    EventMgr.AddListener("PhoneVerifyRewardReply", self.OnVerifyRewardBack, self)
    self:RefreshRed()
    self.preNum = SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeSystemSettingPhoneVerifyNum)

    GyroUtil.SetGyroUnlock(self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_GYROSCOPE) == 0)

    -- 个性化相关 主题相关Condition事件捕捉 计算ConditionTypeMap 所有可能导致主题资产发生变化的conditionType都在这个map里
    self:SetThemeBindConditionTypeMap()
    -- 个性化相关 刷新主题相关红点
    self:CheckRefreshThemeRedDot()
    -- 个性化相关 刷新Icon相关红点
    self:CheckRefreshIconRedDot()
    -- 个性化相关 检查配置合法性
    self:CheckThemeCfg()
    self.needCheckMonthCardPermission = true
end

--region 画质分级接口

---获取当前FsrSoftness数值
function SystemSettingBLL:GetFsrSoftnessValue()
    return m_PapeGraphicsManager.GetInstance().FsrSoftness
end

---设置FsrSoftness数值
function SystemSettingBLL:SetFsrSoftnessValue(value)
    m_PapeGraphicsManager.GetInstance().FsrSoftness = value
end

---获取当前FsrSoftness数值
function SystemSettingBLL:GetFsrEnableState()
    return m_PapeGraphicsManager.GetInstance().FsrEnable
end

---设置FsrSoftness数值
function SystemSettingBLL:SetFsrEnableState(state)
    m_PapeGraphicsManager.GetInstance().FsrEnable = state
end

---获取当前 HDR32 设置
function SystemSettingBLL:GetHDR32State()
    return m_PapeGraphicsManager.GetInstance().R11G11B10Color
end

---设置 HDR32
function SystemSettingBLL:SetHDR32State(state)
    m_PapeGraphicsManager.GetInstance().R11G11B10Color = state
end

---获取当前的画质分级
function SystemSettingBLL:GetGraphice()
    local gear = PlayerPrefs.GetInt("SettingGraphicsGear", -1)
    if gear < 0 then
        gear = 5
    end
    return gear
end

---设置高、中、低、极致，四档预设分级，并记录当前分级
function SystemSettingBLL:ChangeGraphice(gear)
    PlayerPrefs.SetInt("SettingGraphicsGear", gear)
    if gear == 5 then
        return
    end

    self:_SetGraphice(gear, not (UNITY_EDITOR or m_DeviceInfoUtil.IsAndroidSimulate()))

    for _, v in pairs(GraphicsSettingConst.GraphicsGroup) do
        local defaultSetting = GraphicsSettingConst.SettingGroup[gear]
        local groupInfo = v
        PlayerPrefs.SetInt(groupInfo.Name, defaultSetting[groupInfo.Setting])

        if v.ID == GraphicsSettingConst.GQ_GROUP_EFFECTQUALITY then
            m_FxSetting.SetLodType(defaultSetting.EffectSetting)
        end
    end
    PlayerPrefs.Save()
end

---设置高、中、低、极致，四档预设分级，但不记录
function SystemSettingBLL:ApplyAll(gear)
    if gear and gear < 5 then
        self:_SetGraphice(gear, not (UNITY_EDITOR or m_DeviceInfoUtil.IsAndroidSimulate()))
        return
    end
    for k, _ in pairs(GraphicsSettingConst.GraphicsGroup) do
        self:_ApplySingleGroupSetting(k, self:GetGraphicsSetting(k, gear))
    end
end

---设置并记录画质组
---@param groupId int 画质组 ID
---@param value int 画质
function SystemSettingBLL:SetGraphicsSetting(groupId, value)
    PlayerPrefs.SetInt(GraphicsSettingConst.GraphicsGroup[groupId].Name, value)
    self:_ApplySingleGroupSetting(groupId, value)
    PlayerPrefs.Save()
end

---获取在某个分级下某个画质设置的值
---@param groupId int 画质组 ID
---@param gear int 画质分级
function SystemSettingBLL:GetGraphicsSetting(groupId, gear)
    local graphicGear = gear or PlayerPrefs.GetInt("SettingGraphicsGear", -1)
    if graphicGear >= 1 and graphicGear <= 4 then
        local defaultSetting = GraphicsSettingConst.SettingGroup[graphicGear]
        local groupInfo = GraphicsSettingConst.GraphicsGroup[groupId]
        return defaultSetting[groupInfo.Setting]
    end
    if graphicGear == -1 then
        graphicGear = m_RecommendGQ
    end
    return PlayerPrefs.GetInt(GraphicsSettingConst.GraphicsGroup[groupId].Name, 1)
end

---强行将分辨率拉置最高
function SystemSettingBLL:SetResolutionGradeToMax()
    m_PapeGraphicsManager.GetInstance().MaxResolution = math.max(CS.UnityEngine.Screen.height, 600)
    m_PapeGraphicsManager.GetInstance().FsrEnable = false
end

---将分辨率恢复到玩家手动选择的档位
function SystemSettingBLL:RestoreResolutionGrade()
    local curValue = self:GetGraphicsSetting(GraphicsSettingConst.GQ_GROUP_RESOLUTION)
    self:SetGraphicsSetting(GraphicsSettingConst.GQ_GROUP_RESOLUTION, curValue)
end

function SystemSettingBLL:SetTextureGradeToMax()
    self:_SetTexture(GraphicsSettingConst.TextureGrade.High)
end

function SystemSettingBLL:RestoreTextureGrade()
    local curValue = self:GetGraphicsSetting(GraphicsSettingConst.GQ_GROUP_TEXTURE)
    self:SetGraphicsSetting(GraphicsSettingConst.GQ_GROUP_TEXTURE, curValue)
end

---获取当前防发热设置
function SystemSettingBLL:GetCurEnergySavingSetting()
    return PlayerPrefs.GetInt(GraphicsSettingConst.GraphicsGroup[GraphicsSettingConst.GQ_GROUP_ENERGY].Name, 1)
end

---设置当前防法热设置
function SystemSettingBLL:SetEnergySavingSetting(grade)
    self:_SetEnegySavingMode(grade)
end

function SystemSettingBLL:_ApplySingleGroupSetting(groupId, value)
    if groupId == GraphicsSettingConst.GQ_GROUP_RENDER then
        --着色质量
        self:_SetShading(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_TEXTURE then
        self:_SetTexture(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_SHADOW then
        --阴影质量
        self:_SetShadow(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_ENVIRONMENT then
        --环境效果
        self:_SetEnvironment(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_AA then
        --抗锯齿
        self:_SetAAType(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_POSTPROCESS then
        --后处理
        self:_SetPostProcess(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_RESOLUTION then
        --分辨率
        self:_SetResolution(value, not (UNITY_EDITOR or m_DeviceInfoUtil.IsAndroidSimulate()))
    elseif groupId == GraphicsSettingConst.GQ_GROUP_EFFECTQUALITY then
        --特效质量
        self:_SetEffect(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_DOF then
        self:_SetDOF(value)
    elseif groupId == GraphicsSettingConst.GQ_GROUP_ENERGY then
        self:_SetEnegySavingMode(value)
    end
end

--region 画质细项设置函数

function SystemSettingBLL:_SetGraphice(grade, changeResolution)
    local settings = GraphicsSettingConst.SettingGroup[grade]
    self:_SetShading(settings.ShadingSetting)
    self:_SetTexture(settings.TextureSetting)
    self:_SetShadow(settings.ShadowSetting)
    self:_SetEnvironment(settings.EnvironmentSetting)
    self:_SetPostProcess(settings.PostProcessSetting)
    self:_SetResolution(settings.ResolutionSetting, changeResolution)
    self:_SetEffect(settings.EffectSetting)
    self:_SetDOF(settings.DOFSetting)
    self:_SetAAType(settings.AATypeSetting)
    self:_SetEnegySavingMode(settings.EnergySavingSetting)
end

---修改着色质量
function SystemSettingBLL:_SetShading(grade)
    local settings = GraphicsSettingConst.ShadingSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    if settings then
        manager.GlobalShaderLOD = settings.GlobalShaderLOD
        manager.FinalBlitLOD = settings.FinalBlitLOD
        manager.SkinSSSEnable = settings.SkinSSSEnable
        manager.SSSKernelRadius = settings.SSSKernelRadius
        if manager.GlobalShaderLOD ~= m_PapeGraphicsManager.ShaderLOD.Excellent then
            manager.SkinSSSEnable = false
        end
        manager.SingleAdditionalLight = settings.SingleAdditionalLight
    end

    CriticalLog.LogFormat("[GraphicsSetting]Shading: %d, LOD: %s, SkinSSS: %s", grade, manager.GlobalShaderLOD, manager.SkinSSSEnable)
end

function SystemSettingBLL:_SetTexture(grade)
    local setting = GraphicsSettingConst.TextureSetting[grade]
    CS.UnityEngine.QualitySettings.masterTextureLimit = setting.MasterTextureLimit

    CriticalLog.LogFormat("[GraphicsSetting]Texture: %d", grade)
end

---修改阴影质量
function SystemSettingBLL:_SetShadow(grade)
    local setting = GraphicsSettingConst.ShadowSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    manager.ShadowQuality = setting.ShadowQuality
    manager.ShadowResolution = setting.ShadowResolution
    manager.HalfSizeShadowMask = setting.HalfSizeShadowMask

    CriticalLog.LogFormat("[GraphicsSetting]Shadow: %d", grade)
end

---设置环境质量
function SystemSettingBLL:_SetEnvironment(grade)
    local setting = GraphicsSettingConst.EnvironmentSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()

    manager.ParticleLightEnable = setting.ParticleLightEnable
    manager.MirrorEnable = setting.MirrorEnable
    manager.FOGEnable = setting.FOGEnable
    manager.LightShaftEnable = setting.LightShaftEnable
    manager.VolumeLightEnable = setting.VolumeLightEnable
    manager.VolumeFogEnable = setting.VolumeFogEnable
    if manager.CausticsEnable ~= nil then
        manager.CausticsEnable = setting.CausticsEnable
    end

    local pWaterManager = m_WaterSystemManager.GetInstance();
    local systemNum = pWaterManager:GetSystemNum()
    if systemNum > 0 then
        for i = 0, systemNum - 1 do
            local pSystem = pWaterManager:GetWaterSystem(i);
            pSystem.m_qMode = setting.OceanQuality
        end
    end

    CriticalLog.LogFormat("[GraphicsSetting]Environment: %d", grade)
end

function SystemSettingBLL:_SetPostProcess(grade)
    local setting = GraphicsSettingConst.PostProcessSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()

    manager.DistortionEnable = setting.DistortionEnable
    manager.RadialBlurEnable = setting.RadialBlurEnable
    manager.CapsuleShadowEnable = setting.CapsuleShadowEnable
    manager.SSAOEnable = setting.SSAOEnable
    manager.SSAOQuality = setting.SSAOQuality

    CriticalLog.LogFormat("[GraphicsSetting]PostProcess: %d", grade)
end

function SystemSettingBLL:_SetResolution(grade, changeResolution)
    local setting = GraphicsSettingConst.ResolutionSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    if changeResolution then
        manager.FsrEnable = setting.FsrEnable
        manager.FsrSoftness = setting.FsrSoftness
        local resScale = CS.UnityEngine.Screen.height * setting.Resolution
        manager.MaxResolution = math.max(Mathf.FloorToInt(resScale), 600)
    else
        manager.FsrEnable = false
        manager.FsrSoftness = 0
        manager.MaxResolution = math.max(CS.UnityEngine.Screen.height, 600)
    end

    CriticalLog.LogFormat("[GraphicsSetting]Resolution: %d, Fsr: %s, MaxResolution: %d", grade, manager.FsrEnable, manager.MaxResolution)
end

function SystemSettingBLL:_SetEffect(grade)
    local setting = GraphicsSettingConst.EffectSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    manager.GPUParticleEnable = setting.GPUParticleEnable
    manager.GPUParticleScale = setting.GPUParticleScale
    --战斗特效模块需要在特效等级改变的时候 缓存特效等级
    m_FxSetting.SetLodType(grade)
    CriticalLog.LogFormat("[GraphicsSetting]Effect: %d", grade)
end

function SystemSettingBLL:_SetDOF(grade)
    local setting = GraphicsSettingConst.DOFSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    if setting ~= nil and manager ~= nil then
        manager.DOFEnable = setting.DOFEnable
    end
    CriticalLog.LogFormat("[GraphicsSetting]DOF: %d", grade)
end

function SystemSettingBLL:_SetAAType(grade)
    local setting = GraphicsSettingConst.AATypeSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    manager.AAType = setting.AAType
    CriticalLog.LogFormat("[GraphicsSetting]AA: %d", grade)
end

function SystemSettingBLL:_SetEnegySavingMode(grade)
    local setting = GraphicsSettingConst.EnergySavingSetting[grade]
    local manager = m_PapeGraphicsManager.GetInstance()
    if setting ~= nil and manager ~= nil then
        manager.R11G11B10Color = setting.R11G11B10Color
        --manager.DofUseR11G11B10Color = setting.DofUseR11G11B10Color
        manager.DofUseR11G11B10Color = false ---XTBUG-34173 兼容性问题，先强制关闭
        manager.SSSUseR11G11B10Color = setting.SSSUseR11G11B10Color
        manager.TAAIgnorePrevVelocity = setting.TAAIgnorePrevVelocity
    end
    CriticalLog.LogFormat("[GraphicsSetting]EnegySavingMode: %d, DofUseR11G11B10Color: %s", grade, manager.DofUseR11G11B10Color)
end

--endregion

---开始截图，游戏内所有需要截人物的地方都要使用这两个接口，成对出现
---将画质分级拉到最高，分辨率拉满，关 fsr
function SystemSettingBLL:BeginScreenCapture()
    local settings = GraphicsSettingConst.SettingGroup[GraphicsSettingConst.GraphicsGrade.Highest]
    self:_SetTexture(settings.TextureSetting)
    self:_SetShadow(settings.ShadowSetting)
    self:_SetEnvironment(settings.EnvironmentSetting)
    self:_SetPostProcess(settings.PostProcessSetting)
    self:_SetEffect(settings.EffectSetting)
    self:_SetDOF(settings.DOFSetting)
    self:_SetAAType(settings.AATypeSetting)
    self:_SetEnegySavingMode(settings.EnergySavingSetting)
    self:SetResolutionGradeToMax()

    ---如果是最低画质，拉高一档
    if self:GetGraphicsSetting(GraphicsSettingConst.GQ_GROUP_RENDER) == GraphicsSettingConst.ShadingGrade.Low then
        settings = GraphicsSettingConst.SettingGroup[GraphicsSettingConst.GraphicsGrade.Middle]
        self:_SetShading(settings.ShadingSetting)
    end
end

---结束截图，将画质设置恢复
function SystemSettingBLL:EndScreenCapture()
    BllMgr.GetSystemSettingBLL():ApplyAll()
    self:RestoreResolutionGrade()
end

---返回七个细项组的详情，等价于 GraphicsGroup 表
function SystemSettingBLL:GetGraphicTabs()
    return m_GraphicTabs
end

---获取推荐的画质分级
function SystemSettingBLL:GetRecommendGQGear()
    return m_RecommendGQ
end
--endregion

function SystemSettingBLL:GetSettingData(key)
    ---@type cfg.SystemSettingType
    local cfg = LuaCfgMgr.Get("SystemSettingType", key)
    local default = cfg and cfg.Default or 0
    if m_SettingPref[key] then
        return PlayerPrefs.GetInt(m_SettingPref[key], default)
    else
        return math.floor(BllMgr.GetPlayerServerPrefsBLL():GetInt(key, default))
    end
end

function SystemSettingBLL:Set(key, value)
    if m_SettingPref[key] then
        PlayerPrefs.SetInt(m_SettingPref[key], value)
        PlayerPrefs.Save()
    else
        BllMgr.GetPlayerServerPrefsBLL():SetInt(key, value)
    end
end

function SystemSettingBLL:GetCameraSpeed()
    local screenOrientation = self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_LANDSCAPEORPORTRAIT)
    local currentValue = screenOrientation == 0 and self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_CAMERA)
            or self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_CAMERA_LANDSCAPE)

    local cfg = screenOrientation == 0 and LuaCfgMgr.Get("SystemSettingType", X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_CAMERA)
            or LuaCfgMgr.Get("SystemSettingType", X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_CAMERA_LANDSCAPE)

    return 0.006 * (currentValue - 50) + 1
end

function SystemSettingBLL:GetAngleOfView()
    local screenOrientation = self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_LANDSCAPEORPORTRAIT)
    local currentValue = screenOrientation == 0 and self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_VISUALANGLE)
            or self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_BATTLE_VISUALANGLE_LANDSCAPE)

    return (1.0 / 150.0) * (currentValue - 50) + 1
end

function SystemSettingBLL:GetGyroscopeSetting()
    return self:GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_GYROSCOPE) == 0
end

function SystemSettingBLL:GetVerifyCodeTime()
    return self.verifyTime
end

function SystemSettingBLL:SetVerifyCodeTime(time)
    self.verifyTime = time
end

function SystemSettingBLL:OnUserRecordChange(type, id)
    if type == DataSaveRecordType.DataSaveRecordTypeSystemSettingPhoneVerifyNum then
        Debug.Log("[SYSTEM_SETTING]:UPDATE")
        self:RefreshRed()
        self.preNum = SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeSystemSettingPhoneVerifyNum)
    end
end

function SystemSettingBLL:RefreshRed()
    local getNum = SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeSystemSettingPhoneVerifyNum)
    if self.preNum > 0 and getNum == 0 then
        PlayerPrefs.SetInt(self.monthRewardViewed, 0)
        PlayerPrefs.Save()
    end
    if BllMgr.GetSystemSettingBLL():GetBindPhoneEnable() then
        ---这个01很奇怪，咨询了下UE，据说分为查看后不显示和继续显示两种 --- 12.30 by dl
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_PHONE_01, (getNum == 0 and PlayerPrefs.GetInt(self.monthRewardViewed, 0) == 0) and 1 or 0)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_PHONE, getNum == 0 and 1 or 0, 2) ---identift id 为列表中的位置
    end
end

---@param reply pbcmessage.PhoneVerifyRewardReply
function SystemSettingBLL:OnVerifyRewardBack(reply)
    if reply and reply.Rewards and #reply.Rewards > 0 then
        UICommonUtil.ShowRewardPopTips(reply.Rewards, 2)
    end
end

function SystemSettingBLL:SetPhoneNum(phone)
    SelfProxyFactory.GetPlayerInfoProxy():SetBindPhone(phone)
    EventMgr.Dispatch("OnSystemSettingPhoneChange")
end

function SystemSettingBLL:GetPhoneNum()
    return SelfProxyFactory.GetPlayerInfoProxy():GetBindPhone()
end

function SystemSettingBLL:SetBindEmail(email)
    SelfProxyFactory.GetPlayerInfoProxy():SetBindEmail(email)
    EventMgr.Dispatch("OnSystemSettingPhoneChange")
end

function SystemSettingBLL:GetBindEmail()
    return SelfProxyFactory.GetPlayerInfoProxy():GetBindEmail()
end

function SystemSettingBLL:MonthPhoneRewardViewed()
    PlayerPrefs.SetInt(self.monthRewardViewed, 1)
    self:RefreshRed()
    PlayerPrefs.Save()
end
---获取多语言语音的名字
---@param langType Locale.Language
---@param isLanguage bool 是语言还是语言
---@return string
function SystemSettingBLL:GetLanguageText(langType, isLanguage)
    if not self.localizationLanguageCfg then
        self.localizationLanguageCfg = LuaCfgMgr.GetAll("LocalizationLanguage")
    end
    local result
    if isLanguage then
        result = UITextHelper.GetUIText(self.localizationLanguageCfg[langType].LanguageListShow)
    else
        result = UITextHelper.GetUIText(self.localizationLanguageCfg[langType].VoiceListShow)
    end
    return result
end

---获取当前设备网络状态
---@return bool true:wifi环境，false:流量环境
function SystemSettingBLL:GetWifiState()
    return CS.UnityEngine.Application.internetReachability == CS.UnityEngine.NetworkReachability.ReachableViaLocalAreaNetwork
end

---打开到语音/语言设置相关界面
---@param isOpenMgrWnd bool 是否跟着打开语言下载管理界面
function SystemSettingBLL:TurnToLanguageSettingPage(isOpenMgrWnd, isVoiceChange)
    UIMgr.OpenWithAnim(UIConf.PlayerInfoWnd, false)
    UIMgr.OpenWithAnim(UIConf.SystemSettingWnd, false, SystemSettingConst.SettingNames.Language, isVoiceChange)
    if isOpenMgrWnd then
        UIMgr.Open(UIConf.SystemLanguageManageWnd)
    end
end

---下载开始
---@param languageID Locale.Language
---@param checkDownloading bool 是否检查下载中的 目前只有待更新的需要
---@param immediately bool 是否立即下载（有没有二次确认）
---@param isPauseName string 有值的话要飘字恢复下载
function SystemSettingBLL:OpenDownloadWnd(languageID, checkDownloading, immediately, isPauseName, isLanguage)

    local zipType = isLanguage and Define.SubPackageZipType.Language or Define.SubPackageZipType.Sound

    if not SubPackageDownloadMgr.IsEnable() then
        if UNITY_EDITOR then
            UICommonUtil.ShowMessage("【编辑器Log】编辑器环境未开启热更下载，请开启后再尝试")
        end
        return
    end
    local size = SubPackageUtil.GetLanguagePackLeaveSize(languageID, checkDownloading, zipType)
    if immediately then
        self:InnerDownload(languageID, checkDownloading, size, isPauseName, zipType)
        return
    end
    local tips = UITextHelper.GetUIText(UITextConst.UI_TEXT_37216, SubPackageUtil.GetFormatSize(size))
    UICommonUtil.ShowMessageBox(tips, {
        { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
           self:InnerDownload(languageID, checkDownloading, size, isPauseName, zipType)
        end },
        { btn_type = GameConst.MessageBoxBtnType.CANCEL },
    })
end
function SystemSettingBLL:InnerDownload(languageID, checkDownloading, size, isPauseName, zipType)
    DownloadMgr.CheckDownload(size, function()
        SubPackageUtil.DownloadPackagesByLanguageID(languageID, checkDownloading, zipType)
        EventMgr.Dispatch("SystemLanguageManagerWnd_UpdateList")
        if isPauseName then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_37234, isPauseName)--“xx·语音资源恢复下载”；
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_37222) --下载开始，可点击【语音包管理】查看下载进度
        end
    end)
end
---获取多语言的State
---@param langType Locale.Language
---@param isLanguage bool 是语言还是语言
---@return Define.VoiceDownloadState
function SystemSettingBLL:GetLanguageVoiceDownloadState(langType, isLanguage)
    if isLanguage then
        if langType == Locale.GetLang() then
            return Define.VoiceDownloadState.Used
        end
    else
        if langType == Locale.GetSoundLang() then
            return Define.VoiceDownloadState.Used
        end
    end

    local taskId = BllMgr.GetSystemSettingBLL():GetLanguageText(langType, isLanguage)
    ---@type SubPackage.PackageDownloadState
    local state = DownloadMgr:GetDownloadTaskState(taskId)
    local result = Define.VoiceDownloadState.None
    --if state == PackageDownloadState.Finished then
    --    result = Define.VoiceDownloadState.Normal
    if state == PackageDownloadState.Downloading then
        result = Define.VoiceDownloadState.DownLoading
    elseif state == PackageDownloadState.Failed then
        result = Define.VoiceDownloadState.Failed
    elseif state == PackageDownloadState.Wait then
        result = Define.VoiceDownloadState.Wait
    elseif state == PackageDownloadState.Pause then
        result = Define.VoiceDownloadState.Pause
    else
        local zipType = isLanguage and Define.SubPackageZipType.Language or Define.SubPackageZipType.Sound
        local packageIDs = SubPackageUtil.GetNeedDownloadPackageIDsWithLangType(langType, zipType, true)
        local isSuc, finishCount = SubPackageUtil.GetFinishWithPackageIDs(packageIDs)
        if finishCount > 0 then
            local checkPackageIDs =  SubPackageDownloadMgr.GetPackageIDsWithSubModuleID2LangType(0, langType, zipType)
            local checkSuc, checkFinishCount = SubPackageUtil.GetFinishWithPackageIDs(checkPackageIDs)
            if checkFinishCount > 0 then ---这一步是因为现在会在热更的时候就推送部分语音资源上去，但是玩家实际没有下载，所以还需要再次判断
                result = Define.VoiceDownloadState.NeedUpdate
            end
        end
        if isSuc then
            result = Define.VoiceDownloadState.Normal--都下载结束了就不用待更新了
        end
    end
    return result
end

---@param isVoice bool
---@return bool 是否异常
---@return table 语音下载状态表
function SystemSettingBLL:GetLanguageMgrData(isVoice)
    local resultData = {}
    local errorState = false
    local rawData = isVoice and self.availableVoice or self.availableLanguage
    for i, v in ipairs(rawData) do
        local state = self:GetLanguageVoiceDownloadState(v, not isVoice)
        if state ~= Define.VoiceDownloadState.None then
            if state == Define.VoiceDownloadState.Used then
                --排序，如果是使用中排倒第一位
                local head = resultData[1]
                resultData[1] = v
                resultData[#resultData + 1] = head
            else
                resultData[#resultData + 1] = v
            end
        end
        if state == Define.VoiceDownloadState.Failed then
            errorState = true
        end
    end
    return errorState, resultData
end

---@param forceAvailable bool 是否强制开启所有语言/语言切换可选项
function SystemSettingBLL:SetAvailableData(forceAvailable)
    PlayerPrefs.SetBool(ForceAvailableLangKey, forceAvailable)
    PlayerPrefs.Save()
    self.forceAvailable = forceAvailable
    if forceAvailable then
        local t = {}
        for k, v in pairs(Locale.Language) do
            t[#t + 1] = v
        end
        table.sort(t, function(a, b)
            return a < b
        end)
        self.availableLanguage = t
        self.availableVoice = t
    else
        local curRegion = Locale.GetRegion()
        local localizationRegionCfg = LuaCfgMgr.Get("LocalizationRegion", curRegion)
        self.availableLanguage = localizationRegionCfg.AvailableLanguage
        self.availableVoice = localizationRegionCfg.AvailableVoice
    end
end
---@return bool 给GM用的
function SystemSettingBLL:GetForceAvailable()
    if self.forceAvailable == nil then
        self.forceAvailable = PlayerPrefs.GetBool(ForceAvailableLangKey, false)
    end
    return self.forceAvailable
end
---@param isVoice bool 是否是语音
---@return table 返回语音/语言下拉框设置的UI数据
function SystemSettingBLL:GetLanguageDropDownData(isVoice)
    local result = {}
    result.index = 1
    result.cfg = {}
    result.dropDownText = {}
    local languageID = isVoice and Locale.GetSoundLang() or Locale.GetLang()
    local localizationLanguageCfg = LuaCfgMgr.GetAll("LocalizationLanguage")
    local rawData = isVoice and self.availableVoice or self.availableLanguage
    for i, v in ipairs(rawData) do
        if v == languageID then
            result.index = i
        end
        result.cfg[i] = v
        result.dropDownText[i] = UITextHelper.GetUIText(isVoice and localizationLanguageCfg[v].VoiceListShow or localizationLanguageCfg[v].LanguageListShow)
    end
    return result
end

---@public 获取当前设备设置的资源列表
---@param skipNilValue bool 是否跳过未设置的背景资源
---@return ThemeEnum.SysBGShowType, table<number, SysLoginBgResData> 返回  展示类型, 当前应用的背景资源列表
function SystemSettingBLL:GetLocalBgResList(skipNilValue)
    local resType, resDataList = Module_SysLoginBGUtil.GetLocalBgResList(skipNilValue)
    return resType, resDataList
end

---@public 设置当前设备背景资源列表
---@param resDataList table<number, SysLoginBgResData>   静态背景资源列表传入, 静态模式下传最多三个, 动态模式下传最多一个
function SystemSettingBLL:SetLocalBgResList(bgShowType, resDataList)
    Module_SysLoginBGUtil.SetLocalBgResList(bgShowType, resDataList)

    EventMgr.Dispatch(ThemeEnum.SysThemeEventMap.SysBgResUpdate)
end

---@public 获取当前系统IconId
---@return number 返回iconId
function SystemSettingBLL:GetLocalSysIcon()
    local iconId = Module_SysIconUtil.GetSysIcon()
    return iconId
end

---@public 设置当前系统IconId 仅本地数据层
---@param iconId number IconId
function SystemSettingBLL:SetLocalSysIcon(iconId)
    Module_SysIconUtil.SetSysIcon(iconId)

    EventMgr.Dispatch(ThemeEnum.SysThemeEventMap.SysIconResUpdate)
end

---@public 获取Icon别名
---@param iconId number IconId
function SystemSettingBLL:GetIconComparison(iconId)
    local iconCfg = LuaCfgMgr.Get("DeskIconInfo", iconId)
    if not iconCfg then
        Debug.LogError("iconCfg not found, iconId : " .. tostring(iconId))
        return
    end
    local resPath = iconCfg.IOSCheckComparison
    if not string.isnilorempty(resPath) then
        local strList = string.split(resPath, '\\')
        return strList[#strList]
    end
    return "default"
end

---@public 设置系统Icon 包括本地数据层和设备层
---@param iconId number iconId
---@param setIconCallback function 设备层setIcon返回执行的回调
---@param confirmText string 安卓平台下二次确认框的文本
---@param confirmCallback function 安卓平台下二次确认框的 onConfirm
---@param hideCancelBtn bool 安卓平台下不显示二次确认的 ‘取消’ 选项
function SystemSettingBLL:SetSysIconToDevice(iconId, setIconCallback, confirmText, confirmCallback, hideCancelBtn)
    if not iconId then
        Debug.LogError("iconId not found !! -- ")
        return
    end
    local iconCfg = LuaCfgMgr.Get("DeskIconInfo", iconId)
    local iconComparison = self:GetIconComparison(iconId)
    if not iconCfg or string.isnilorempty(iconComparison) then
        Debug.LogError("iconCfg not found !! -- " .. tostring(iconId or "nil") .. "  " .. table.dump({ iconCfg }))
        return
    end

    if not setIconCallback then
        setIconCallback = function(flag)
            if not flag then
                Debug.LogError("changeAppIconErrorFromDevice : " .. table.dump({ iconId }))
                return
            end
        end
    end

    if (Application.GetPlatform() == CS.UnityEngine.RuntimePlatform.Android) then
        local function __getCancelBtnInfo()
            if hideCancelBtn then
                return nil
            end
            return { btn_type = GameConst.MessageBoxBtnType.CANCEL }
        end

        UICommonUtil.ShowMessageBox(confirmText or UITextConst.UI_TEXT_12910, {
            { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
                if confirmCallback then
                    confirmCallback()
                end

                self:SetLocalSysIcon(iconId)
                TimerMgr.AddTimer(0.1, function()
                    CS.X3Game.Platform.PFChangeAppIconUtility.ChangeIcon(iconComparison, setIconCallback)
                end)
            end },
            __getCancelBtnInfo(),
        }, AutoCloseMode.None)
    else
        if confirmCallback then
            confirmCallback()
        end

        self:SetLocalSysIcon(iconId)
        CS.X3Game.Platform.PFChangeAppIconUtility.ChangeIcon(iconComparison, setIconCallback)
    end
end

---@public 获取当前系统ThemeId
---@return number 返回themeId
function SystemSettingBLL:GetLocalSysTheme()
    local themeId = Module_SysThemeUtil.GetSysTheme()
    return themeId
end

---@public 设置当前系统ThemeId
---@param themeId number ThemeId
function SystemSettingBLL:SetLocalSysTheme(themeId)
    Module_SysThemeUtil.SetSysTheme(themeId)

    EventMgr.Dispatch(ThemeEnum.SysThemeEventMap.SysThemeResUpdate)
end

---@public 获取默认背景
function SystemSettingBLL:GetDefaultSysBg()
    local showType, resDataList
    showType, resDataList = Module_SysLoginBGUtil.GetDefaultBgResList()
    return showType, resDataList
end

---@public 获取默认IconId
function SystemSettingBLL:GetDefaultSysIcon()
    return Module_SysIconUtil.GetDefaultIcon()
end

---@public 获取默认ThemeId
function SystemSettingBLL:GetDefaultThemeId()
    return Module_SysThemeUtil.GetDefaultTheme()
end

---@public 获取所有个性化设置
function SystemSettingBLL:GetAllThemeSetting()
    local bgShowMode, bgResDataList = self:GetLocalBgResList()
    return {
        iconId = self:GetLocalSysIcon(),
        iconOpCode = PlayerPrefs.GetInt(ThemeEnum.SysThemeLocalKey.CurIconOperationId),
        deviceIconName = CS.X3Game.Platform.PFChangeAppIconUtility.GetCurrentIconName() or "nil",
        themeId = self:GetLocalSysTheme(),
        bgShowMode = bgShowMode,
        bgResDataList = bgResDataList,
        bgOpCode = PlayerPrefs.GetInt(ThemeEnum.SysThemeLocalKey.CurBgOperationId),
        bgRawData = PlayerPrefs.GetString(ThemeEnum.SysThemeLocalKey.SysBgResDataListStr),
    }
end

---@public 重置所有个性化设置至默认
function SystemSettingBLL:CheckResetAllThemeSetting()
    self:SetLocalSysTheme(self:GetDefaultThemeId())
    self:SetLocalBgResList(self:GetDefaultSysBg())
    self:SetLocalSysIcon(self:GetDefaultSysIcon())
end

---@public 活动Icon强更流程信息同步
---@return bool 强更流程
function SystemSettingBLL:CheckSyncForceUpdateIcon()
    return Module_SysIconUtil.CheckSyncForceUpdateIcon()
end

---@public 登陆后要进行的个性化设置检查流程 （Icon相关包括活动强更前后的检查 可能影响Icon设置）
---@return bool, function 返回是否更换Icon, 和更换Icon流程
function SystemSettingBLL:CheckForceUpdateLoginIcon()
    -- 检查活动Icon强更流程
    local isIconForceUpdated = self:CheckSyncForceUpdateIcon()
    local curIconId = self:GetLocalSysIcon()
    local curIconCfg = LuaCfgMgr.Get("DeskIconInfo", curIconId)

    -- 添加检查日志
    if isIconForceUpdated and UNITY_EDITOR then
        Debug.LogError("检查结果 可能需要更换Icon -- ")
    end

    -- 比对本地和设备层Icon
    local deviceIconId = Module_SysIconUtil.GetSysIconFromDevice()
    if deviceIconId and deviceIconId ~= curIconId then
        self:SetSysIconToDevice(curIconId, nil, UITextConst.UI_TEXT_12910)
    end
end

---@public 根据背景资源数据获取其展示类型 动态还是静态
---@param resType number 背景资源类型
---@param resId number 背景资源Id
function SystemSettingBLL:GetBgResShowType(resType, resId)
    if resType == ThemeEnum.SysBGResType.Card or resType == ThemeEnum.SysBGResType.ScoreSuit or resType == ThemeEnum.SysBGResType.ColoredScoreSuit then
        return ThemeEnum.SysBGShowType.Static
    end
    if resType == ThemeEnum.SysBGResType.DynamicCard then
        return ThemeEnum.SysBGShowType.Dynamic
    end
    local bgCfg = LuaCfgMgr.Get("DynamicLoginBG", resId)
    return bgCfg.BGType
end

---@public 根据背景资源数据返回其是否是视频
---@param resType number 背景资源类型
---@param resId number 背景资源Id
function SystemSettingBLL:CheckIfBgResVideo(resType, resId)
    if resType == ThemeEnum.SysBGResType.Card or resType == ThemeEnum.SysBGResType.ScoreSuit or
            resType == ThemeEnum.SysBGResType.ColoredScoreSuit or resType == ThemeEnum.SysBGResType.DynamicCard then
        return false
    end
    local bgCfg = LuaCfgMgr.Get("DynamicLoginBG", resId)
    if bgCfg.BGType == ThemeEnum.SysBGShowType.Dynamic then
        return true
    end
end

---@pulic 检查活动背景强更流程
function SystemSettingBLL:CheckForceUpdateLoginBg()
    Module_SysLoginBGUtil.CheckForceUpdateLoginBg()
end

---@pulic 检查个性化设置月卡权限流程
function SystemSettingBLL:CheckThemeSettingMonthCardPermission()
    if not self.needCheckMonthCardPermission then
        return
    end

    local monthCardEnable = BllMgr.GetMonthCardBLLReplace():CheckCardPowerEnable(MonthCardConst.CardPowerTypeID.IconAndPushCustomization)   -- 对应特权判定接口
    if not monthCardEnable then
        -- 检查背景设置是否为默认 -- 这里一定要严格按照配置中的顺序进行比对, 一旦改变数量或顺序则需要重置 - 心铭
        local bgShowType, bgResDataList = self:GetLocalBgResList()
        local defaultResType, defaultResList = self:GetDefaultSysBg()
        for i, v in ipairs(bgResDataList) do
            bgResDataList[i].showType = nil
        end
        for i, v in ipairs(defaultResList) do
            defaultResList[i].showType = nil
        end
        if defaultResType ~= bgShowType or not table.equal(bgResDataList, defaultResList) then
            self:SetLocalBgResList(self:GetDefaultSysBg())
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12916)
        end

        -- 检查Icon设置和主题设置
        local iconId = self:GetLocalSysIcon()
        local defaultIconId = self:GetDefaultSysIcon()
        local isIconDefault = iconId == defaultIconId

        local themeId = self:GetLocalSysTheme()
        local defaultThemeId = self:GetDefaultThemeId()
        local isThemeDefault = themeId == defaultThemeId

        if not isThemeDefault then
            self:SetLocalSysTheme(defaultThemeId)
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12915)
        end

        if not isIconDefault then
            self:SetSysIconToDevice(defaultIconId, nil, nil, nil, true)
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12914)
        end
    end

    self.needCheckMonthCardPermission = false
end

-- 检查推送主题是否解锁
function SystemSettingBLL:CheckIfPushUnlock(pushId)
    local pushCfg = LuaCfgMgr.Get("SystemPushInfo", pushId)
    if not pushCfg then
        Debug.LogError("pushInfo Cfg not found, pushId : " .. tostring(pushId))
        return false, ""
    end
    local conditionList = pushCfg.ConditionCheck
    if table.isnilorempty(conditionList) then
        return true
    end
    for _, id in ipairs(conditionList) do
        if not ConditionCheckUtil.CheckConditionByCommonConditionGroupId(id) then
            local desc = ConditionCheckUtil.GetConditionDescByGroupId(id)
            return false, desc
        end
    end
    return true, ""
end

-- 获取推送主题资产的状态
---@param pushId number 推送主题Id
---@return ThemeEnum.ThemeStatus
function SystemSettingBLL:GetPushStatus(pushId)
    if pushId == self:GetDefaultThemeId() then
        return ThemeEnum.ThemeStatus.Default
    end
    if pushId == self:GetLocalSysTheme() then
        return ThemeEnum.ThemeStatus.Current
    end
    return self:CheckIfPushUnlock(pushId) and ThemeEnum.ThemeStatus.Unlock or ThemeEnum.ThemeStatus.Locked
end

-- 检查个性化相关的配置合法性 
function SystemSettingBLL:CheckThemeCfg()
    if not Debug.IsEnabled() then
        return
    end    -- 仅在Debug模式下使用

    local function __checkCfg()
        Module_SysLoginBGUtil.CheckCfg()
    end

    -- 检查背景配置
    local status, error = pcall(__checkCfg)
    if not status then
        Debug.LogError("函数执行错误: " .. error)
    end
end

---玩家登录和变更文本/语音类型时上报相关信息
---@param GameLanguage number @ 文本类型，1：简中，2：繁中，3：英，4：日，5：韩
---@param DubbingLanguage number @ 语音类型，枚举同上
function SystemSettingBLL:ReportLanguageTLog(GameLanguage, DubbingLanguage)
    GrpcMgr.SendRequestAsync(RpcDefines.ChangeLanguageRequest, {
        GameLanguage = GameLanguage,
        DubbingLanguage = DubbingLanguage,
    })
end

-- 根据所有主题对应Condition配置 统计并分类 并在监听中筛选可能导致对应Condition变化的事件 抛出用于主题红点状态刷新
function SystemSettingBLL:SetThemeBindConditionTypeMap()
    -- 这里先统计所有相关ConditionGroupId
    local allThemeCfgList = LuaCfgMgr.GetAll("SystemPushInfo")
    local conditionGroupIdMap = {}
    for _, v in pairs(allThemeCfgList) do
        local _groupIdList = v.ConditionCheck or {}
        for _, _groupId in ipairs(_groupIdList) do
            conditionGroupIdMap[_groupId] = true
        end
    end

    -- 根据所有ConditionGroupId统计所有的ConditionType
    local conditionTypeMap = {}
    for conditionGroupId, _ in pairs(conditionGroupIdMap) do
        local conditionCfgList = LuaCfgMgr.GetListByCondition("CommonCondition", { GroupID = conditionGroupId })
        for _, v in pairs(conditionCfgList) do
            conditionTypeMap[v.ConditionType] = true
        end
    end

    self.themeBindConditionTypeMap = conditionTypeMap or {}
end

-- 监听所有ConditionType变化时 根据主题依赖的Condition过滤掉符合条件的 并抛出事件 （可能导致主题资产发生变化的事件）
function SystemSettingBLL:CheckRefreshThemeChange(conditionTypeList)
    if table.isnilorempty(self.themeBindConditionTypeMap) or table.isnilorempty(conditionTypeList) then
        return
    end

    for _, conditionType in pairs(conditionTypeList) do
        if self.themeBindConditionTypeMap[conditionType] then
            EventMgr.Dispatch(ThemeEnum.SysThemeEventMap.ThemeConditionUpdate)
            return
        end
    end
end

-- 主题红点刷新逻辑
function SystemSettingBLL:CheckRefreshThemeRedDot()
    local monthCardEnable = BllMgr.GetMonthCardBLLReplace():CheckCardPowerEnable(MonthCardConst.CardPowerTypeID.IconAndPushCustomization)
            and SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_THEME)   -- 对应特权判定接口
    local allThemeCfg = LuaCfgMgr.GetAll("SystemPushInfo")
    for id, cfg in pairs(allThemeCfg) do
        local pushId = cfg.PushID
        if not monthCardEnable then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, 0, pushId)
        else
            local isOwned = self:CheckIfPushUnlock(pushId)
            if not isOwned then
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, 0, pushId)
            else
                local isRead = RedPointMgr.GetValue(X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, pushId) == 1
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, isRead and 0 or 1, pushId)
            end
        end
    end
end

-- 检查并把已获得且未读的主题红点设置为已读
function SystemSettingBLL:CheckReadThemeRedDot(pushId)
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_THEME) then
        return
    end
    if not BllMgr.GetMonthCardBLLReplace():CheckCardPowerEnable(MonthCardConst.CardPowerTypeID.IconAndPushCustomization) then
        return
    end
    local isOwned = self:CheckIfPushUnlock(pushId)
    local isRead = RedPointMgr.GetValue(X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, pushId) == 1
    if isOwned and not isRead then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, pushId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_THEME, 0, pushId)
    end
end

-- 检查并已读所有当前已获得且有红点的推送主题资产
function SystemSettingBLL:CheckReadAllThemeRedDot()
    local allThemeCfg = LuaCfgMgr.GetAll("SystemPushInfo")
    for id, cfg in pairs(allThemeCfg) do
        self:CheckReadThemeRedDot(id)
    end
end

-- Icon红点刷新逻辑
function SystemSettingBLL:CheckRefreshIconRedDot()
    local monthCardEnable = BllMgr.GetMonthCardBLLReplace():CheckCardPowerEnable(MonthCardConst.CardPowerTypeID.IconAndPushCustomization)
            and SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_THEME)   -- 对应特权判定接口
    local allIconCfg = LuaCfgMgr.GetAll("DeskIconInfo")
    for iconId, cfg in pairs(allIconCfg) do
        if not monthCardEnable then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_ICON, 0, iconId)
        else
            local isRead = RedPointMgr.GetValue(X3_CFG_CONST.RED_PLAYERINFO_SETTING_ICON, iconId) == 1
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_ICON, isRead and 0 or 1, iconId)
        end
    end
end

-- 检查把未读的Icon红点设置为已读
function SystemSettingBLL:CheckReadIconRedDot(iconId)
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_THEME) then
        return
    end
    if not BllMgr.GetMonthCardBLLReplace():CheckCardPowerEnable(MonthCardConst.CardPowerTypeID.IconAndPushCustomization) then
        return
    end
    local isRead = RedPointMgr.GetValue(X3_CFG_CONST.RED_PLAYERINFO_SETTING_ICON, iconId) == 1
    if not isRead then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_PLAYERINFO_SETTING_ICON, iconId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_ICON, 0, iconId)
    end
end

-- 检查并已读所有当前已获得且有红点的推送主题资产
function SystemSettingBLL:CheckReadAllIconRedDot()
    local allIconCfg = LuaCfgMgr.GetAll("DeskIconInfo")
    for id, cfg in pairs(allIconCfg) do
        self:CheckReadIconRedDot(id)
    end
end


---@return boolean 绑定手机只在官方渠道开放
function SystemSettingBLL:GetBindPhoneEnable()
    if not UNITY_EDITOR then
        return self:GetIsOfficialChannel()
    end
    return true
end

---@return boolean 是否是官方渠道
function SystemSettingBLL:GetIsOfficialChannel()
    local platId = SDKMgr.GetPlatID()
    return platId == SDKDefine.PlatformChanel.Android or platId == SDKDefine.PlatformChanel.iOS or platId == SDKDefine.PlatformChanel.DouYin
end

---@public 获取双清单数据
---@return table,table 系统权限数据,系统URL数据
function SystemSettingBLL:GetDoubleListData()
    if not self.systemPowerData then
        self.systemPowerData = {}

        local systemPowerCfg = LuaCfgMgr.GetAll("SystemPowerList")
        --region 系统权限数据开始
        local curRegion = Locale.GetRegion()
        local curPlatform = Application.IsIOSMobile() and 1 or 2 ---Android 2 ,iOS 1 => SystemPowerList.PlaformIsShow
        for k, v in pairs(systemPowerCfg) do
            if v[curRegion] and v[curRegion].Area == curRegion and v[curRegion].PlaformIsShow then
                ---当前区域的配置
                for i, j in ipairs(v[curRegion].PlaformIsShow) do
                    if j == curPlatform then
                        ---当前平台是否显示
                        table.insert(self.systemPowerData, v[curRegion])
                    end
                end
            end
        end
        table.sort(self.systemPowerData, function(a, b)
            return a.Order < b.Order ---倒序
        end)
        --endregion 系统权限数据结束
        --region 系统URL数据开始
        local systemURLCfg = LuaCfgMgr.GetAll("SystemURLList")
        self.systemURLData = {}
        for i, v in pairs(systemURLCfg) do
            table.insert(self.systemURLData, v)
        end
        table.sort(self.systemURLData, function(a, b)
            return a.Order < b.Order ---倒序
        end)
        --endregion 系统URL数据结束
    end
    return self.systemPowerData, self.systemURLData
end
---@param id number condition枚举 详情见【LYDJS-46547】
---@param datas table<int,string> 看表吧CommonCondition
---@return bool 检查是否通过
function SystemSettingBLL:CheckCondition(id, datas)
    if id == X3_CFG_CONST.CONDITION_OVERSEA_LANGUAGETYPE then
        local logicSign = tonumber(datas[1]) == 1  ---是或否
        local type = tonumber(datas[2]) ---type ，0：语言和语言，1：语言，2：语音
        local language = tonumber(datas[3])
        local curLanguage = Locale.GetLang()
        local curSoundLang = Locale.GetSoundLang()
        if type == 0 then
            return logicSign == (language == curLanguage == curSoundLang)
        elseif type == 1 then
            return logicSign == (language == curLanguage)
        elseif type == 2 then
            return logicSign == (language == curSoundLang)
        end
    end
    return false
end

function SystemSettingBLL:LogInformation()
    local str = string.format("[GraphicsSetting]Screen Size: (%d, %d); Ratio: %f; Max Resolution: %f; Camera Pixel Size: (%d, %d)",
            CS.UnityEngine.Screen.width,
            CS.UnityEngine.Screen.height,
            self.ratio,
            m_PapeGraphicsManager.GetInstance().MaxResolution,
            GlobalCameraMgr.GetUnityMainCamera().pixelWidth,
            GlobalCameraMgr.GetUnityMainCamera().pixelHeight)

    Debug.LogError(str)
end

function SystemSettingBLL:DebugLogGraphicsSetting()
    local manger = m_PapeGraphicsManager.GetInstance()
    Debug.LogFormat("[GraphicsSetting]SkinSSS:%s, ShaderLod:%s",
            tostring(manger.SkinSSSEnable),
            tostring(manger.GlobalShaderLOD))
end

return SystemSettingBLL
