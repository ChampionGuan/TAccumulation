---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/6/30 14:39
---

---@class GameplayBLL
local GameplayBLL = class("GameplayBLL", BaseBll)

---@type GamePlayProxy
local proxy = SelfProxyFactory.GetGamePlayProxy()

---
function GameplayBLL:OnInit()
    proxy = SelfProxyFactory.GetGamePlayProxy()
    ---@type X3Data.GameplayContinueData
    self.continueData = nil
end

--region TempData
---修改随机种子
---@param dialogueInfoId int
---@param value number
function GameplayBLL:ChangeRandomSeed(dialogueInfoId, value)
    local ctrl = DialogueManager.Get("GamePlay")
    if ctrl == nil then
        ctrl = DialogueManager.InitByName("GamePlay")
    end
    ctrl:ChangeRandomSeed(dialogueInfoId, value)
end
--endregion

--region CheckCondition
---@param id X3_CFG_CONST 条件检查Type
---@param datas table 条件检查的数据
---@return boolean
function GameplayBLL:CheckCondition(id, datas, ...)
    local result = false
    local logic = false
    local times = 0
    if id == X3_CFG_CONST.CONDITION_UFO_LEFTROUND_G or
            id == X3_CFG_CONST.CONDITION_MIAO_LEFTROUND_G or
            id == X3_CFG_CONST.CONDITION_BLOCKTOWER_LEFTROUND_G then
        times = proxy:GetMaxRoundCount() - proxy:GetCurrentRoundIndex()
        result = ConditionCheckUtil.IsInRange(times, tonumber(datas[1]), tonumber(datas[2]))
    elseif id == X3_CFG_CONST.CONDITION_UFO_ROUND_G or
            id == X3_CFG_CONST.CONDITION_MIAO_ROUND_G or
            id == X3_CFG_CONST.CONDITION_BLOCKTOWER_ROUND_G then
        times = proxy:GetCurrentRoundIndex()
        result = ConditionCheckUtil.IsInRange(times, tonumber(datas[1]), tonumber(datas[2]))
    elseif id == X3_CFG_CONST.CONDITION_BLOCKTOWER_TIMES_TURN then
        times = proxy:GetTurnCount()
        result = ConditionCheckUtil.IsInRange(times, tonumber(datas[1]), tonumber(datas[2]))
    end
    return result
end
--endregion

---开启一个游戏，返回选择的男主信息
---@param gameType Define.GamePlayType
---@class function <GameType, DifficultId, Roles>
function GameplayBLL:TryStartGame(gameType, groupId, callback)
    if not gameType or gameType <= 0 or not groupId or groupId <= 0 then
        Debug.LogErrorFormat("开始游戏出错，参数错误. GameType:%s, GroupId:%s", tostring(gameType), tostring(groupId))
        return
    end
    UIMgr.Open(UIConf.CommonManListWnd, nil, Define.CommonManListWndType.GamePlay, function(roleId)
        if not roleId or roleId <= 0 then
            return
        end
        if callback then
            callback(gameType, groupId, { roleId })
        end
    end)
end

---目前仅适用于选单个男主的游戏
---@param gameType Define.GamePlayType
---@param groupId int
---@param roleId int
function GameplayBLL:GetDifficultyId(gameType, groupId, roleId)
    local gamePlay = LuaCfgMgr.Get("GamePlay", gameType)
    if not gamePlay then
        return 0
    end
    local subItems = LuaCfgMgr.GetAll(gamePlay.ConnectDifficulty)
    if subItems ~= nil then
        for difficultyId, value in pairs(subItems) do
            if groupId == value.Group and roleId == value.ManType then
                return difficultyId
            end
        end
    end
    return 0
end

---判断一个玩法是否需要显示解锁
---@param id int[]
---@param difficulty cfg.UFOCatcherDifficulty|cfg.MiaoCardDifficulty|cfg.BlockTowerDifficulty
---@return boolean
function GameplayBLL:IsSameDifficultyType(id, difficulty)
    local isSame = false
    local gameDifficultyType = LuaCfgMgr.Get("GameDifficultyType", id)
    if gameDifficultyType.GameType == Define.GamePlayType.GamePlayTypeUfoCatcher then
        isSame = gameDifficultyType.Para1 == difficulty.PlayerNumType and gameDifficultyType.Para2 == difficulty.CatchType
    elseif gameDifficultyType.GameType == Define.GamePlayType.GamePlayTypeMiao then
        isSame = gameDifficultyType.Para1 == difficulty.MiaoCardType
    elseif gameDifficultyType.GameType == Define.GamePlayType.GamePlayTypeBlockTower then
        isSame = gameDifficultyType.Para1 == difficulty.BlockTowerType
    end
    return isSame
end

---根据difficulty匹配一个cfg.GameDifficultyType
---@param gameType Define.GamePlayType
---@param difficulty cfg.UFOCatcherDifficulty|cfg.MiaoCardDifficulty|cfg.BlockTowerDifficulty|cfg.KnockMoleDifficulty
---@return cfg.GameDifficultyType
function GameplayBLL:GetDifficultyType(gameType, difficulty)
    local condition = { GameType = gameType }
    if gameType == Define.GamePlayType.GamePlayTypeUfoCatcher then
        condition["Para1"] = difficulty.PlayerNumType
        condition["Para2"] = difficulty.CatchType
    elseif gameType == Define.GamePlayType.GamePlayTypeMiao then
        condition["Para1"] = difficulty.MiaoCardType
    elseif gameType == Define.GamePlayType.GamePlayTypeBlockTower then
        condition["Para1"] = difficulty.BlockTowerType
    elseif gameType == Define.GamePlayType.GamePlayTypeKnockMole then
        condition["Para1"] = 1
    end
    return LuaCfgMgr.GetDataByCondition("GameDifficultyType", condition)
end

---检查玩法断线重连
---@param isFromLogin bool
function GameplayBLL:CheckContinueDatas(isFromLogin)
    local result = PoolUtil.GetTable()
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.GameplayInfo, result)
    for i = 1, count do
        ---@type X3Data.GameplayInfo
        local data = result[i]
        local continueDatas = data:GetContinueDatas()
        if continueDatas then
            for _, continueData in pairs(continueDatas) do
                if isFromLogin or (continueData:GetCanHangOn() == false) then
                    local continueGameType = continueData:GetGameType()
                    local continueSubId = continueData:GetPrimaryValue()
                    local continueVersion = continueData:GetVersion()
                    local gamePlayCfg = LuaCfgMgr.Get("GamePlay", continueGameType)
                    local content = UITextHelper.GetUIText(UITextConst.UI_TEXT_6036, SysUnLock.GetShowName(data:GetSystemID()), UITextHelper.GetUIText(gamePlayCfg.GamePlayName))
                    local checkVersion = LogicEntityUtil.IsEqualGameVersion(continueVersion, continueGameType)
                    ---@type _btn_param[]
                    local btn_list
                    if checkVersion then
                        btn_list = {
                            { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_5701, is_auto_close = false, btn_call = function()
                                self:ContinueGameplay(continueData)
                                return false
                            end },
                            { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_text = continueData:GetCanHangOn() and UITextConst.UI_TEXT_6039 or UITextConst.UI_TEXT_5702, btn_call = function()
                                self:GiveupGameplay(continueData)
                            end },
                        }
                    else
                        content = UITextHelper.GetUIText(UITextConst.UI_TEXT_6305)
                        btn_list = {
                            { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_5701, btn_call = function()
                                self:GiveupGameplay(continueData)
                            end },
                        }
                    end

                    if proxy:IsGuide(continueGameType, continueSubId) then
                        local difficulty = LuaCfgMgr.Get(gamePlayCfg.ConnectDifficulty, continueSubId)
                        local role_name = UITextHelper.GetUIText(LuaCfgMgr.Get("RoleInfo", difficulty.ManType).Name)
                        content = UITextHelper.GetUIText(UITextConst.UI_TEXT_6056, role_name, UITextHelper.GetUIText(difficulty.Name), UITextHelper.GetUIText(gamePlayCfg.GamePlayName))
                    end
                    local popId = continueData:GetCanHangOn() and data:GetPopIdUnforced() or data:GetPopId()
                    continueData:SetPopId(popId)
                    if not ErrandMgr.IsAdded(popId) then
                        ErrandMgr.AddWithCallBack(popId, function()
                            UICommonUtil.ShowMessageBox(content, btn_list, AutoCloseMode.None)
                        end)
                    end
                end
            end
        end
    end
    PoolUtil.ReleaseTable(result)
end

---继续游戏
---@param continueData X3Data.GameplayContinueData
function GameplayBLL:ContinueGameplay(continueData)
    if GamePlayMgr.IsPlaying() then
        Debug.Log("有玩法正在进行中")
        return
    end
    ---@type X3Data.GameplayInfo
    local gameplayInfo = X3DataMgr.Get(X3DataConst.X3Data.GameplayInfo, continueData:GetEnterType())
    local result = gameplayInfo:RemoveContinueDatasValue(continueData:GetPrimaryValue())
    if result then
        local req = {}
        req.GameType = continueData:GetGameType()
        req.SubId = continueData:GetPrimaryValue()
        req.EnterType = continueData:GetEnterType()
        --TLOG用
        GrpcMgr.SendRequestAsync(RpcDefines.ReEnterGamePlayRequest, req)

        EventMgr.Dispatch("GamePlayCmd_EnterGame", continueData:GetEnterType(), continueData:GetGameType(), continueData:GetPrimaryValue(), function()
            UICommonUtil.ForceCloseMessageBox()
        end)
    else
        Debug.Log("断线重连玩法已不存在")
    end
end

---放弃游戏
---@param continueData X3Data.GameplayContinueData
function GameplayBLL:GiveupGameplay(continueData)
    if proxy:IsGuide(continueData:GetGameType(), continueData:GetPrimaryValue()) then
        local gamePlayCfg = LuaCfgMgr.Get("GamePlay", continueData:GetGameType())
        local difficulty = LuaCfgMgr.Get(gamePlayCfg.ConnectDifficulty, continueData:GetPrimaryValue())
        if difficulty.GuideCheck then
            if difficulty.GuideCheck[1] == X3_CFG_CONST.CONDITION_GUIDEFINISHED_CHECK then
                BllMgr.GetNoviceGuideBLL():SkipTargetGuide(difficulty.GuideCheck[2])
            end
        end
    end
    --不可挂起直接结算
    if continueData:GetCanHangOn() == false then
        ErrandMgr.SetDelay(true)
        self.continueData = continueData
        local req = {}
        req.IsGiveUp = true
        req.EnterType = continueData:GetEnterType()
        if continueData:GetGameType() == Define.GamePlayType.GamePlayTypeUfoCatcher then
            EventMgr.AddListenerOnce("GetUFOCatcherRewardReply", self.OnGetRewardReply, self)
            GrpcMgr.SendRequest(RpcDefines.GetUFOCatcherRewardRequest, req)
        elseif continueData:GetGameType() == Define.GamePlayType.GamePlayTypeBlockTower then
            EventMgr.AddListenerOnce("GetBlockTowerRewardReply", self.OnGetRewardReply, self)
            GrpcMgr.SendRequest(RpcDefines.GetBlockTowerRewardRequest, req)
        elseif continueData:GetGameType() == Define.GamePlayType.GamePlayTypeMiao then
            EventMgr.AddListenerOnce("GetMiaoRewardReply", self.OnGetRewardReply, self)
            GrpcMgr.SendRequest(RpcDefines.GetMiaoRewardRequest, req)
        end
    end
end

---@param reply
function GameplayBLL:OnGetRewardReply(reply)
    if reply then
        UICommonUtil.ShowRewardPopTips(reply.RewardList, 2)
    end
    if self.continueData:GetGameType() == Define.GamePlayType.GamePlayTypeUfoCatcher then
        local difficulty = LuaCfgMgr.Get("UFOCatcherDifficulty", self.continueData:GetPrimaryValue())
        BllMgr.GetDailyDateBLL():CheckDollCollectionTips(difficulty.ManType)
    end
    self:RemoveContinueData(self.continueData:GetEnterType(), self.continueData:GetPrimaryValue())
    ErrandMgr.End(self.continueData:GetPopId())
    ErrandMgr.SetDelay(false)
    self.continueData = nil
end

---移除继续的数据
---@param enterType int
---@param subId int
function GameplayBLL:RemoveContinueData(enterType, subId)
    ---@type X3Data.GameplayInfo
    local gameplayInfo = X3DataMgr.Get(X3DataConst.X3Data.GameplayInfo, enterType)
    if gameplayInfo then
        gameplayInfo:RemoveContinueDatasValue(subId)
    end
end

---清理函数
function GameplayBLL:Clear()
    X3DataMgr.RemoveAll(X3DataConst.X3Data.GameplayCommonData)
end

return GameplayBLL