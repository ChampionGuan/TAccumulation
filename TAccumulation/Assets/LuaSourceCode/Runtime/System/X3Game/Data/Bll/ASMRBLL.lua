---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/10/22 11:11
---

---ASMR业务类
---@class ASMRBLL:BaseBll
local ASMRBLL = class("ASMRBLL", BaseBll)
---@type ASMRConst
local ASMRConst
---@type RadioPlayerCtrlNew
local RadioPlayerCtrl
---@type RadioPlayerCtrlMediumNew
local RadioPlayerCtrlMedium
---@type table
local EmptyTable
---@type table
local EmptyMsg

function ASMRBLL:OnInit()
    ---Local Init---
    ASMRConst = require("Runtime.System.X3Game.UI.UIView.ASMRWnd.ASMRConst")
    RadioPlayerCtrl = require("Runtime.System.X3Game.Modules.RadioPlayer.RadioPlayerCtrlNew")
    RadioPlayerCtrlMedium = require("Runtime.System.X3Game.Modules.RadioPlayer.RadioPlayerCtrlMediumNew")
    EmptyTable = {}
    EmptyMsg = {}
    
    ---Field Init---
    ---@type ASMRProxy
    self.proxy = SelfProxyFactory.GetASMRProxy()
    ---@type RadioPlayerCtrlNew
    self.PlayerCtrl = nil
    ---@type RadioPlayerCtrlMediumNew
    self.PlayerMedium = nil
    ---@type table<number, string> 角色图片
    self._saveRoleImgPathDic = {}
    ---@type table<number, string> 卡牌图片
    self._saveCardImgPathDic = {}
    ---@type X3Data.ASMRData
    self.asmrData = self.proxy.asmrData
    EventMgr.AddListener("OnRoleLovePointLevelUp", self.CheckRoleASMRUnlock, self)
    EventMgr.AddListener("RoleUpdate", self.CheckListRoleASMRUnlock, self)
    EventMgr.AddListener(GameConst.CardEvent.CardAdd, self.CheckAllASMRUnlock, self)
end

function ASMRBLL:OnClear()
    ---Local Clear---
    ASMRConst = nil
    RadioPlayerCtrl = nil
    RadioPlayerCtrlMedium = nil
    EmptyTable = nil
    EmptyMsg = nil

    ---Field Clear---
    self.proxy = nil
    if self.PlayerCtrl ~= nil then
        self.PlayerCtrl:Exit()
        self.PlayerCtrl = nil
    end

    if self.PlayerMedium ~= nil then
        self.PlayerMedium:Exit()
        self.PlayerMedium = nil
    end

    self._saveRoleImgPathDic = nil
    self._saveCardImgPathDic = nil
    self.asmrData = nil
    EventMgr.RemoveListenerByTarget(self)
end

---前后台均会调用
function ASMRBLL:RecordBackgroundData(asmrId, curTime, frontTime, subID)
    self.proxy:RecordBackgroundData(asmrId, curTime, frontTime, subID)
end

---更新播放计时参数 ---!!!前后台均会调用
function ASMRBLL:UpdateCurPlayArg(arg, isTime)
    self.proxy:UpdateCurPlayArg(arg, isTime)
end

---获取播放计时参数
function ASMRBLL:GetPlayArg()
    return self.proxy:GetPlayArg()
end

---获取播放控制器
---@return RadioPlayerCtrlNew, RadioPlayerCtrlMediumNew
function ASMRBLL:GetPlayerCtrl()
    if not self.PlayerCtrl then
        self.PlayerCtrl = RadioPlayerCtrl.new()
        self.PlayerMedium = RadioPlayerCtrlMedium.new()
    end
    return self.PlayerCtrl, self.PlayerMedium
end

--region Native Img
---获取native-img路径
---@param roleId number 角色id
---@return string 返回缓存的 Role Icon
function ASMRBLL:GetRoleImgPath(roleId)
    local checkResult, tempName = self:CheckImage(true, roleId)
    --Debug.LogError("ASMRBLL:GetRoleImgPath ", tempName, " roleId ", roleId, " checkResult ", checkResult)
    if(checkResult) then
        return self._saveRoleImgPathDic and self._saveRoleImgPathDic[roleId]
    end
end

---@param cardId number 卡牌id
---@return string 返回缓存的 Card Img
function ASMRBLL:GetCardImagePath(cardId)
    local checkResult, tempName = self:CheckImage(false, cardId)
    --Debug.LogError("ASMRBLL:GetCardImagePath ", tempName, " cardId ", cardId, " checkResult ", checkResult)
    if(checkResult) then
        return self._saveCardImgPathDic and self._saveCardImgPathDic[cardId]
    end
end

function ASMRBLL:CheckImage(isRole, arg)
    local iconName
    local result = false
    local isUseBig = false
    if Application.IsIOSMobile() then
        local version = self:GetIOSVersion()
        --ios16 以上版本才能用大图
        if version and type(version) == "number" and version >= 16 then
            isUseBig = true
        end
    end
    
    if isRole then
        local roleCfg = LuaCfgMgr.Get("RoleInfo", arg)
        if roleCfg then
            iconName = isUseBig and roleCfg.ASMRBackground or roleCfg.ASMRBackgroundIcon
        end
    else
        local cardCfg = LuaCfgMgr.Get("CardBaseInfo", arg)
        if cardCfg then
            iconName = isUseBig and cardCfg.CardImage or cardCfg.CardSmallImage
        end
    end
    if not string.isnilorempty(iconName) then
        result = UrlImgMgr.CheckFile(iconName, UrlImgMgr.BizType.Radio)
    end
    return result, iconName;
end

---保存native-img
---@param roleId number radio-Card唯一ID
---@return boolean 返回是否保存成功
function ASMRBLL:SaveRoleImgPath(roleId)
    --Debug.LogError("SaveRoleImgPath ", roleId, " --- ", self.PlayerMedium:GetDryMode())
    if not roleId or roleId <= 0 then
        return false
    end

    --local cacheSavePath = self:GetRoleImgPath(roleId)
    --if not string.isnilorempty(cacheSavePath) then
    --    return false
    --end
    --local iconName = ""
    --local roleCfg = LuaCfgMgr.Get("RoleInfo", roleId)
    --if roleCfg then
    --    --iconName = roleCfg.ASMRBackgroundIcon
    --    iconName = roleCfg.ASMRBackground
    --end

    --if not string.isnilorempty(iconName) then
    local checkResult, iconName = self:CheckImage(true, roleId)
    if(iconName) then
        if not checkResult then
            if(not self.PlayerMedium:GetDryMode()) then
                local savePath = UrlImgMgr.SaveSpriteToPngFile(iconName, iconName, UrlImgMgr.BizType.Radio)
                if not string.isnilorempty(savePath) then
                    self._saveRoleImgPathDic[roleId] = savePath
                    return true
                end
            end
        else
            self._saveRoleImgPathDic[roleId] = UrlImgMgr.GetFileRealPath(iconName, UrlImgMgr.BizType.Radio)
            return true
        end
    end
    return false
end

---@param cardId
function ASMRBLL:SaveCardImgPath(cardId)
    if not cardId or cardId <= 0 then
        return false
    end

    local checkResult, iconName = self:CheckImage(false, cardId)
    if iconName then
        if not checkResult then
            if(not (self.PlayerMedium and self.PlayerMedium:GetDryMode())) then
                local savePath = UrlImgMgr.SaveSpriteToPngFile(iconName, iconName, UrlImgMgr.BizType.Radio)
                if not string.isnilorempty(savePath) then
                    self._saveCardImgPathDic[cardId] = savePath
                    return true
                end
            end
        else
            self._saveCardImgPathDic[cardId] = UrlImgMgr.GetFileRealPath(iconName, UrlImgMgr.BizType.Radio)
            return true
        end
    end
    return false
end
--endregion

---进入游戏时不会发
---@param msg pbcmessage.AsmrData 
function ASMRBLL:UpdateASMRData(msg)
    self.proxy:UpdateASMRData(msg)
    if msg and msg.RoleAsmrMap then
        for roleId, asmrPlay in pairs(msg.RoleAsmrMap) do
            self.asmrData:AddOrUpdateRoleLastPlayedASMRIdMapValue(roleId, asmrPlay.CurPlayID)
        end
    end
end

---获取角色相关联的RadioList
---@type int roleID 男主ID
---@return cfg.ASMRInfo[]  ASMRInfo列表
function ASMRBLL:GetRoleRadioInfo(roleID)
    return self.proxy:GetRoleRadioInfo(roleID)
end

---获取角色相关联的PlayData
---@type int roleID 男主ID
function ASMRBLL:GetASMRPlayData(roleID)
    return self.proxy:GetASMRPlayData(roleID)
end

---获取角色相关联的自定义歌单数据
---@type int roleID 男主ID
---@return cfg.ASMRInfo[]  ASMRInfo列表
function ASMRBLL:GetRoleRadioCustomDataList(roleID)
    return self.proxy:GetRoleRadioCustomDataList(roleID)
end

---获取角色相关联的自定义列表状态
---@type int roleID 男主ID
---@return cfg.ASMRInfo[] ASMRInfo列表
function ASMRBLL:GetRoleRadioCustomDic(roleID)
    return self.proxy:GetRoleRadioCustomDic(roleID)
end

---设置角色相关联的自定义歌单列表
---@type int roleID 男主ID
---@type table radioIdDic 需要储存的ID字典
function ASMRBLL:SendRoleRadioCustomListReq(roleID, radioIdDic)
    local listMap = {}
    for id, isSelect in pairs(radioIdDic) do
        if isSelect then
            --table.insert(listMap, id)
            listMap[id] = 0
        end
    end
    table.clear(EmptyTable)
    EmptyTable.RoleID = roleID
    EmptyTable.AsmrListMap = listMap
    GrpcMgr.SendRequest(RpcDefines.SetAsmrListRequest, EmptyTable, true)
end

---刷新自定义歌单
function ASMRBLL:UpdateRadioCustomList(serverData)
    self.proxy:UpdateRadioCustomList(serverData.RoleID, serverData.AsmrListMap)
end

---发送设置背景列表请求
function ASMRBLL:SendRadioCustomBgReq(roleID, idDic)
    local bgMap = {}
    for id, isSelect in pairs(idDic) do
        if isSelect then
            --table.insert(radioIdList, id)
            bgMap[id] = 0
        end
    end
    table.clear(EmptyTable)
    EmptyTable.RoleID = roleID
    EmptyTable.BackgroundMap = bgMap
    GrpcMgr.SendRequest(RpcDefines.SetAsmrBackgroundRequest, EmptyTable, true)
end

---刷新背景
function ASMRBLL:UpdateRadioCustomBg(serverData)
    self.proxy:UpdateRadioCustomBg(serverData.RoleID, serverData.BackgroundMap)
end

---获取自定义背景列表
function ASMRBLL:GetRadioCustomBgList(roleId)
    return self.proxy:GetRadioCustomBgList(roleId)
end

---获取书签状态
function ASMRBLL:GetRadioMarkList(asmrId)
    return self.proxy:GetRadioMarkList(asmrId)
end
---添加书签
function ASMRBLL:SendAddMarkReq(asmrId, subId)
    --Debug.LogError("SendAddMarkReq ", asmrId, " subId ", subId)
    table.clear(EmptyTable)
    EmptyTable.AsmrID = asmrId
    EmptyTable.SubtitleID = subId
    GrpcMgr.SendRequest(RpcDefines.MarkAsmrSubtitleRequest, EmptyTable, true)
end

---移除书签
function ASMRBLL:SendRemoveMarkReq(asmrId, subId)
    table.clear(EmptyTable)
    EmptyTable.AsmrID = asmrId
    EmptyTable.SubtitleID = subId
    GrpcMgr.SendRequest(RpcDefines.DelAsmrSubtitleRequest, EmptyTable, true)
end

---更新书签状态
function ASMRBLL:UpdateMarkState(asmrId, subId, isAdd)
    self.proxy:UpdateASMRMarkData(asmrId, subId, isAdd)
end

---解锁时下发
function ASMRBLL:UpdateASMRUnlock(id)
    self.proxy:UpdateASMRUnlock(id)
end

function ASMRBLL:UpdateASMRPlayTime(id, offset, force)
    self.proxy:UpdateASMRPlayTime(id, offset, force)
end

---更新领奖状态
function ASMRBLL:UpdateRewardState(serverData)
    self.proxy:UpdateRewardState(serverData)
end

----进入ASMR
function ASMRBLL:SendPlayASMRReq(roleId, asmrId)
    self.asmrData:AddOrUpdateRoleLastPlayedASMRIdMapValue(roleId, asmrId)
    self.proxy:RecordBackgroundData(asmrId, self.PlayerMedium:GetCurTime())
    EventMgr.Dispatch(ASMRConst.EventType.OnASMREnterPlay, asmrId)
end

----退出ASMR
function ASMRBLL:SendQuitASMRReq(roleId, asmrId, subId)
    self.proxy:RecordBackgroundData(asmrId, self.PlayerMedium:GetCurTime(), nil, subId)
    self:SendReportAsmrPlayRequest(roleId)
end

----领奖
function ASMRBLL:SendGetAsmrPlayRewardReq(roleId, asmrId)
    table.clear(EmptyTable)
    EmptyTable.RoleID = roleId
    EmptyTable.AsmrID = asmrId
    GrpcMgr.SendRequest(RpcDefines.GetAsmrPlayRewardRequest, EmptyTable, true)
end

----改变播放模式
function ASMRBLL:SendSetAsmrPlayModeReq()
    local curMode = self.proxy:GetCurPlayMode()
    curMode = curMode + 1
    if curMode >= 3 then
        curMode = 0
    end
    table.clear(EmptyTable)
    EmptyTable.Mode = curMode
    GrpcMgr.SendRequest(RpcDefines.SetAsmrPlayModeRequest, EmptyTable, true)
end

---@param isCorrect bool 登录时纠正与服务器的差值。异常分为两种情况，1.后台时直接杀进程，2.长时间后台，返回前台后消息发不出去
---@param login bool 登录时
function ASMRBLL:SendReportAsmrPlayRequest(roleId, isCorrect, login)
    if(login) then
        ----确保本地都有X3DATA ---登录时创建一次即可，后台时将会导致使用服务器值覆盖
        self.proxy:CorrectPlayRecord()
    end

    local PlayRecords = self.proxy:GetBackgroundData(roleId, isCorrect, login)
    if PlayRecords then
        EmptyMsg.Records = PlayRecords
        ---发送缓存数据时，需要增加奖励时间到本地
        --if(isCorrect) then
        --    for roleId, recordList in pairs(PlayRecords) do
        --        local list = recordList.List
        --        for i = 1, #list do
        --            local record = list[i]
        --            if(record.Duration > 0) then
        --                --Debug.LogError("SendReportAsmrPlayRequest ", record.ID, " record.Duration ", record.Duration)
        --                --self:UpdateASMRPlayTime(record.ID, record.Duration / 1000, true)
        --            end
        --        end
        --    end
        --end

        GrpcMgr.SendRequest(RpcDefines.ReportAsmrPlayRequest, EmptyMsg, true)
    end
end

function ASMRBLL:ClearLastRecordTime(asmrId)
    self.proxy:ClearLastRecordTime(asmrId)
end

---收到统计回复
---@param serverData pbcmessage.ReportAsmrPlayReply
function ASMRBLL:RecvMsg_AsmrPlayReply(serverData, cacheData)
    local errorData = serverData.Records
    local records = cacheData.Records
    for roleId, recordList in pairs(records) do
        local list = recordList.List
        for i = 1, #list do
            local record = list[i]
            --if(not (errorData and errorData[roleId] and errorData[roleId].Index))
            --先不处理错误情况
            --local radioData = self._serverRadioStateDict[record.ID]
            --radioData.Time = radioData.Time + record.Duration
            ---ASMR前台播的时候会自带计时
            --self:UpdateASMRPlayTime(record.ID, record.Duration / 1000)
            if(record.SubtitleID) then
                self.proxy:UpdateASMRPlayBaseData({RoleID = roleId, AsmrID = record.ID, SubtitleID = record.SubtitleID})
            end
            if(i == #list) then
                self.asmrData:AddOrUpdateRoleLastPlayedASMRIdMapValue(roleId, record.ID)
            end
        end
    end

    self.proxy:ClearBackgroundData()
end

function ASMRBLL:GetPlayMode()
    return self.proxy:GetCurPlayMode()
end
----更新播放模式
function ASMRBLL:UpdatePlayMode(serverData)
    self.proxy:UpdateCurPlayMode(serverData.Mode)
end

---获取能否领奖
---@return ASMRRewardState
function ASMRBLL:GetRewardState(asmrID)
    return self.proxy:GetRewardState(asmrID)
end

---获取对应asmr是否已解锁
function ASMRBLL:GetUnlockData(asmrID)
    return self.proxy:GetUnlockState(asmrID) 
end

---@param roleId number
function ASMRBLL:UpdateRedPointDataByRole(roleId)
    self.proxy:UpdateRedPointDataByRole(roleId)
end

---@param roleId number
---@return 
function ASMRBLL:UpdateRedPointDataByOtherRole(roleId)
    self.proxy:UpdateRedPointDataByOtherRole(roleId)
end

---牵绊度升级时(或者角色解锁)
---@param roleMap table<number, pbcmessage.Role>
function ASMRBLL:CheckListRoleASMRUnlock(roleMap)
    if roleMap then
        for _, roleData in pairs(roleMap) do
            self:CheckRoleASMRUnlock(roleData.Id)
            self.proxy:MakeDataByRoleUnlock(roleData.Id)
        end
    else
        self.proxy:CheckAllASMRUnlock()
    end
end

---@private
function ASMRBLL:CheckAllASMRUnlock()
    self.proxy:CheckAllASMRUnlock()
end

---检查某个角色的ASMR是否解锁
function ASMRBLL:CheckRoleASMRUnlock(manType)
    self.proxy:CheckRoleASMRUnlock(manType)
end

---检查ASMR是否解锁并跳转到ASMRWnd中对应的ASMR
---@param asmrID int
function ASMRBLL:JumpToASMRWndByASMRID(asmrID)
    local isUnlock = self:GetASMRIsUnlockById(asmrID)
    local asmrInfo = LuaCfgMgr.Get("ASMRInfo", asmrID)
    if isUnlock then
        UIMgr.Open(UIConf.ASMRWnd, asmrInfo.RoleID, asmrID)
    else
        --检查ASMR系统是否解锁以及男主是否解锁
        if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_ASMR) or not BllMgr.GetRoleBLL():IsUnlocked(asmrInfo.RoleID) then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_35253)
        else
            --显示羁绊度等级
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_35250, BllMgr.GetLovePointBLL():GetPeriodByLevel(asmrInfo.LoveLevelCondition))
        end
    end
end

---根据ASMRId检查是否解锁
---@param id number
---@return boolean 是否解锁
function ASMRBLL:GetASMRIsUnlockById(id)
    return self.proxy:GetASMRIsUnlockById(id)
end

---根据羁绊卡的id获取关联的ASMRId
---@param cardId number
---@return number
function ASMRBLL:GetRelativeASMRIdByCardId(cardId)
    return self.proxy:GetRelativeASMRIdByCardId(cardId)
end

function ASMRBLL:GetIOSVersion()
    ----通过Unity的SystemInfo.operatingSystem获取IOS版本号
    local version = CS.UnityEngine.SystemInfo.operatingSystem
    local addIndex = 3
    if not string.isnilorempty(version) then
        local iosIndex = string.find(version, "iOS")
        if(not iosIndex) then
            iosIndex = string.find(version, "iPadOS")
            addIndex = 6
        end
        if iosIndex then
            local versionStr = string.sub(version, iosIndex + addIndex)
            if not string.isnilorempty(versionStr) then
                local versionStrs = string.split(versionStr, ".")
                if versionStrs and #versionStrs > 0 then
                    return tonumber(versionStrs[1])
                end
            end
        end
    end
    return 0
end

return ASMRBLL