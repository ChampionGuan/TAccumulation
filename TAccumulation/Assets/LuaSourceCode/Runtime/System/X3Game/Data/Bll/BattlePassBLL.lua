---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiantao.
--- DateTime: 2022/12/12 16:22
---
---@class BattlePassBLL
local BattlePassBLL = class("BattlePassBLL", BaseBll)
---@type BattlePassProxy
local proxy = SelfProxyFactory.GetBattlePassProxy()

function BattlePassBLL:OnInit()
    proxy = SelfProxyFactory.GetBattlePassProxy()
    
    self.battlePassData = X3DataMgr.GetOrAdd(X3DataConst.X3Data.BattlePassData)
    ---奖励枚举
    self.enumAwardType = {
        free = 1,
        pay = 2,
    }
end

function BattlePassBLL:InitData(battlePassInfo)
    self:UpdateBattlePass(battlePassInfo)
    EventMgr.AddListener("UnLockSystem", self.OnUnlockSystem, self)
    EventMgr.AddListener("CommonDailyReset", self.OnCommonDailyReset, self)
    X3DataMgr.Subscribe(X3DataConst.X3Data.BattlePassData, self.SetRedPointInfo, self)
end

function BattlePassBLL:UpdateBattlePass(battlePassInfo)
    proxy:UpdateData(battlePassInfo)
    self:SetNewSeasonRedPoint()
end
---每日刷新数据
function BattlePassBLL:OnCommonDailyReset()
    TimerMgr.DiscardTimerByTarget(self)
    TimerMgr.AddTimer(1, function()
        if not self:IsInBattlePass() then
            self:SendGetBattlePassDateRequest()
            return
        end
        proxy:TryResetWeeklyAward()
    end, self)

end

---功能解锁时更新红点
function BattlePassBLL:OnUnlockSystem(sysId)
    if sysId == X3_CFG_CONST.SYSTEM_UNLOCK_BATTLEPASS then
        self:SetRedPointInfo()
        self:SetNewSeasonRedPoint()
    end
end
---设置红点信息
function BattlePassBLL:SetRedPointInfo()
    if (not self:IsInBattlePass()) or (not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_BATTLEPASS)) then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_LEVELREWARD, 0)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_WEEKREWARD, 0)
        return
    end
    local hasAnyAwardGet = self:CanGetAnyReward()
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_LEVELREWARD, hasAnyAwardGet and 1 or 0)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_WEEKREWARD, self.battlePassData:GetWeeklyRewardClaim() and 0 or 1)
    for i = 1, self:GetMaxLevel() do
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_NORMALREWARD, self:CanGetAward(i, self.enumAwardType.free) and 1 or 0, 1000 + i)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_NORMALREWARD, self:CanGetAward(i, self.enumAwardType.pay) and 1 or 0, 2000 + i)
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_NORMALREWARD, (self:GetExtraAwardNum()) > 0 and 1 or 0, 3000)

end
---新赛季设置红点
function BattlePassBLL:SetNewSeasonRedPoint()
    if (not self:IsInBattlePass()) or (not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_BATTLEPASS)) then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_NEW, 0)
        return
    end
    local uid = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    local key = string.format("%s_%s", "BattlePassID" , uid)
    local lastBattlePassID = PlayerPrefs.GetInt(key, -1)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_WELFARE_BATTLEPASS_NEW, lastBattlePassID ~= self.battlePassData:GetID() and 1 or 0)
end

---判断是否开启新赛季用
function BattlePassBLL:SaveBattlePassID()
    if self:IsInBattlePass() then
        local uid = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
        local key = string.format("%s_%s", "BattlePassID" , uid)
        local battlePassID = self.battlePassData:GetID()
        PlayerPrefs.SetInt(key, battlePassID)
    end
end

function BattlePassBLL:SendGetBattlePassDateRequest()
    local msg = {}
    GrpcMgr.SendRequest(RpcDefines.GetBattlePassDataRequest, msg)
end

function BattlePassBLL:SendGetWeeklyRewardRequest()
    local msg = {}
    GrpcMgr.SendRequest(RpcDefines.BattlePassGetWeeklyRewardRequest, msg)
end

function BattlePassBLL:SendGetLevelRewardRequest(level, type)
    local msg = {}
    local rewardLevel = {}
    rewardLevel[level] = type
    msg.RewardLevels = rewardLevel
    GrpcMgr.SendRequest(RpcDefines.BattlePassGetLevelRewardRequest, msg)
end

function BattlePassBLL:SendGetAllLevelRewardRequest()
    local msg = {}
    local rewardLevel = {}
    local level = self.battlePassData:GetLevel()
    for i = 1, level do
        local state = proxy:GetLevelAwardState(i)
        if state == proxy.enumAwardState.none then
            if self:IsPayCount() then
                rewardLevel[i] = proxy.enumAwardState.all
            else
                rewardLevel[i] = proxy.enumAwardState.free
            end
        elseif state == proxy.enumAwardState.free and self:IsPayCount() then
            rewardLevel[i] = proxy.enumAwardState.pay
        elseif state == proxy.enumAwardState.pay then
            rewardLevel[i] = proxy.enumAwardState.free
        end
    end
    local extraLevel = self.battlePassData:GetExtraLevel()
    local maxLevel = self:GetMaxLevel()
    for i = 1, extraLevel do
        local state = proxy:GetLevelAwardState(i + maxLevel)
        if state == proxy.enumAwardState.none then
            rewardLevel[i + maxLevel] = proxy.enumAwardState.free
        end
    end
    msg.RewardLevels = rewardLevel
    GrpcMgr.SendRequest(RpcDefines.BattlePassGetLevelRewardRequest, msg)
end

function BattlePassBLL:SendGetExtraLevelAward()
    local msg = {}
    local rewardLevel = {}
    local extraLevel = self.battlePassData:GetExtraLevel()
    local maxLevel = self:GetMaxLevel()
    for i = 1, extraLevel do
        local state = proxy:GetLevelAwardState(i + maxLevel)
        if state == proxy.enumAwardState.none then
            rewardLevel[i + maxLevel] = proxy.enumAwardState.free
        end
    end
    msg.RewardLevels = rewardLevel
    GrpcMgr.SendRequest(RpcDefines.BattlePassGetLevelRewardRequest, msg)
end

function BattlePassBLL:GetExtraAwardNum()
    local awardNum = 0
    local extraLevel = self.battlePassData:GetExtraLevel()
    local maxLevel = self:GetMaxLevel()
    for i = 1, extraLevel do
        local state = proxy:GetLevelAwardState(i + maxLevel)
        if state == proxy.enumAwardState.none then
            awardNum = awardNum + 1
        end
    end
    return awardNum
end

function BattlePassBLL:CanGetAnyReward()
    local level = self.battlePassData:GetLevel()
    for i = 1, level do
        local state = proxy:GetLevelAwardState(i)
        if state == proxy.enumAwardState.none then
            return true
        elseif state == proxy.enumAwardState.free and self:IsPayCount() then
            return true
        elseif state == proxy.enumAwardState.pay then
            return true
        end
    end
    return self:GetExtraAwardNum() > 0
end

function BattlePassBLL:SendBuyLevelRequest(levelNum)
    local msg = {}
    msg.buyNum = levelNum
    GrpcMgr.SendRequest(RpcDefines.BattlePassBuyLevelRequest, msg, true)
end

---获取当前的配置
function BattlePassBLL:GetBattlePassCfg()
    return proxy:GetBattlePassCfg()
end

function BattlePassBLL:GetMaxLevel()
    return proxy:GetMaxLevel()
end

function BattlePassBLL:IsMaxLevel()
    return self.battlePassData:GetLevel() >= self:GetMaxLevel()
end

function BattlePassBLL:IsAwardHasGet(level, type)
    return proxy:IsAwardHasGet(level, type)
end

function BattlePassBLL:CanGetAward(level, type)
    if self:IsAwardHasGet(level, type) then
        return false
    end
    if type == proxy.enumAwardState.pay then
        return level <= self.battlePassData:GetLevel() and self:IsPayCount()
    else
        return level <= self.battlePassData:GetLevel()
    end
end
---是否是付费奖励玩家
function BattlePassBLL:IsPayCount()
    local payInfoMap = self.battlePassData:GetPayIDs()
    if payInfoMap == nil then
        return false
    end
    local battlePassCfg = self:GetBattlePassCfg()
    return payInfoMap[battlePassCfg.JuniorPayID] or payInfoMap[battlePassCfg.SeniorPayID]
end
---是否是高级付费玩家
function BattlePassBLL:IsHighPayCount()
    local payInfoMap = self.battlePassData:GetPayIDs()
    if payInfoMap == nil then
        return false
    end
    local battlePassCfg = self:GetBattlePassCfg()
    return payInfoMap[battlePassCfg.ExtraPayID] or payInfoMap[battlePassCfg.SeniorPayID]
end
---获得剩余时间
function BattlePassBLL:GetLastTime()
    local cfg = self:GetBattlePassCfg()
    local nowTime = TimerMgr.GetCurTimeSeconds()
    local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg.EndTime))
    return endTime - nowTime
end

function BattlePassBLL:GetStartTime()
    local cfg = self:GetBattlePassCfg()
    if cfg == nil then
        return false
    end
    local startTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg.OpenTime))
    return startTime
end

function BattlePassBLL:GetEndTime()
    local cfg = self:GetBattlePassCfg()
    if cfg == nil then
        return false
    end
    local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg.EndTime))
    return endTime
end

---是否在活动期间
function BattlePassBLL:IsInBattlePass()
    local cfg = self:GetBattlePassCfg()
    if cfg == nil then
        return false
    end
    local nowTime = TimerMgr.GetCurTimeSeconds()
    local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg.EndTime))
    local startTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg.OpenTime))
    return nowTime <= endTime and nowTime >= startTime
end

function BattlePassBLL:HandleJump(bpID, viewType)
    local bpCfg = LuaCfgMgr.Get("Battlepass", bpID)
    if bpCfg == nil then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_40053)
        return
    end
    if self:IsInBattlePass() and bpID == self:GetBattlePassCfg().ID then
        if viewType == 1 then
            self:JumpBattlePassView()
        elseif viewType == 2 then
            self:JumpBattlePassPayView()
        end
        return
    end
    local nowTime = TimerMgr.GetCurTimeSeconds()
    local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(bpCfg.EndTime))
    local startTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(bpCfg.OpenTime))
    if nowTime >= endTime then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_40052)
    elseif nowTime <= startTime then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_40053)
    end
end

---跳转到BattlePass界面
function BattlePassBLL:JumpBattlePassView()
    local battlePassPanelNum = 1
    UIMgr.Open(UIConf.WelfareMainWnd, battlePassPanelNum)
end

---跳转到BattlePass付费界面
function BattlePassBLL:JumpBattlePassPayView()
    UIMgr.Open(UIConf.WelfareBpPayWnd)
end

function BattlePassBLL:CheckCondition(id, datas, iDataProvider)
    local result = false
    if id == X3_CFG_CONST.CONDITION_BATTLEPASS_ALLPAID then
        result = self:IsHighPayCount()
        ---参数配置为0时需求未解锁
        if datas[1] == 0 then
            result = not result
        end
    elseif id == X3_CFG_CONST.CONDITION_BATTLEPASS_OPENING then
        result = self:IsInBattlePass()
        if datas[1] == 0 then
            result = not result
        end
    end
    return result
end

return BattlePassBLL