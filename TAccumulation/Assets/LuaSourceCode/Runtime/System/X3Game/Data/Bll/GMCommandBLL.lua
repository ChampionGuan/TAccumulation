---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by PC.
--- DateTime: 2021/1/5 19:18
---

require("Runtime.Battle.Common.BattleUtil")
local QuickBattle = require("Runtime.System.X3Game.UI.UIView.QuickBattle.UIViewContext_QuickBattle")
local CSBattlePerformance = CS.X3Battle.Debugger.PerformanceDebugger

---@class GMCommandBLL:BaseBll
local GMCommandBLL = class("GMCommandBLL", BaseBll)
local m_isInit = false
local m_historyList = {}
local m_sendTypeDic = {}

local m_buffer = ""

local SendWhenClose = true

local ShowBattlingData = true
local ShowBattledData = true

local GM_MAX_HISTORY_NUM = 20
local PrefPrefix = "GMHistory"
local PrefLength = "GMHistoryLength"
local PrefInsertPos = "GMHistoryInsertPos"
local PrefTogglePrefix = "GM_TOGGLE_"

local INIT_BY_CONFIG = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.GMCHECKSWITCH) == 1

local DefaultTimelineContext = require("Runtime.System.X3Game.Modules.Timeline.Context.DefaultTimelineContext")
---@type DailyConfideConst
local DailyConfideConst = require("Runtime.System.X3Game.Modules.DailyConfide.Data.DailyConfideConst")

function GMCommandBLL:OnInit()
    local gmEnable = GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)
    if gmEnable and not m_isInit then
        CS.X3Game.GMCommandManager.Init()
        BllMgr.GetDebugLogBLL()
        ---@type bool
        local allGM = LuaCfgMgr.GetAll("GM_DEBUG")
        for k, v in pairs(allGM) do
            local split = string.split(v.Command, '[^%d{]+', true)
            if split ~= nil and #split > 0 then
                m_sendTypeDic[string.lower(string.trim(split[1]))] = v.SendType
            end
        end

        self:InitToggleGMPara()
        m_isInit = false
    end
end

function GMCommandBLL:InitToggleGMPara()
    local allGM = LuaCfgMgr.GetAll("GM_DEBUG")
    for k, v in pairs(allGM) do
        if v.Type == 1 then
            local setting = tonumber(v.Parameter1) == 1
            if not INIT_BY_CONFIG then
                local number = PlayerPrefs.GetInt(string.concat(PrefTogglePrefix, string.upper(v.Command)), -1)
                if number ~= -1 then
                    setting = number == 1
                end
            end

            self:SendToggleClientGM(v.Command, setting, true)
        end
    end
end

--region History
function GMCommandBLL:AddToHistory(commandStr)
    local length = PlayerPrefs.GetInt(PrefLength, 0)
    local insertPos = PlayerPrefs.GetInt(PrefInsertPos, GM_MAX_HISTORY_NUM)

    PlayerPrefs.SetString(string.concat(PrefPrefix, insertPos), commandStr)
    if length <= GM_MAX_HISTORY_NUM then
        PlayerPrefs.SetInt(PrefLength, length + 1)
    end

    insertPos = insertPos - 1
    PlayerPrefs.SetInt(PrefInsertPos, insertPos == 0 and GM_MAX_HISTORY_NUM or insertPos)
    PlayerPrefs.Save()
end

function GMCommandBLL:GetHistoryLength()
    return PlayerPrefs.GetInt(PrefLength, 0)
end

function GMCommandBLL:GetHistory(index)
    local insertPos = PlayerPrefs.GetInt(PrefInsertPos, GM_MAX_HISTORY_NUM)
    local tag = insertPos + index

    return PlayerPrefs.GetString(string.concat(PrefPrefix, tag > GM_MAX_HISTORY_NUM and tag % GM_MAX_HISTORY_NUM or tag), "")
end

function GMCommandBLL:SetBuffer(buffer)
    PlayerPrefs.SetString("GMBuffer", buffer)
    PlayerPrefs.Save()
end

function GMCommandBLL:GetBuffer()
    return PlayerPrefs.GetString("GMBuffer", "")
end
--endregion
--region SendWhenClose
function GMCommandBLL:GetSendWhenClose()
    return SendWhenClose
end

function GMCommandBLL:SetSendWhenClose(value)
    SendWhenClose = value
end
--endregion

--region SendGM
function GMCommandBLL:CheckPrefix(command, prefix)
    local sBegin, sEnd = string.find(string.lower(command), prefix)
    return sBegin == 1
end

function GMCommandBLL:CheckSendType(command)
    if command == nil or #command == 0 then
        return 0
    end

    if self:CheckPrefix(command, "unlock") then
        return 4
    end

    if self:CheckPrefix(command, "loadscene") or self:CheckPrefix(command, "uicmd") then
        return 2
    end

    if self:CheckPrefix(command, "dungeon create") or self:CheckPrefix(command, "stage mission") then
        return 3
    end

    for k, v in pairs(m_sendTypeDic) do
        if self:CheckPrefix(command, k) then
            return v
        end
    end

    return 1
end

function GMCommandBLL:SendCommand(command, ignoreCompose)
    if command == nil or #command == 0 then
        return
    end
    command = string.trim(command)

    local inputList = self:SplitBySpace(command)
    if command == "sendlog" then
        CS.SystemLogModule.SendLogToServer(CS.UnityEngine.Application.persistentDataPath .. "/log.nn");
        return
    elseif inputList[1] == "autotest" then
        local cmd = inputList[2]
        CS.FlowAutoTest.FlowAutoTestMgr.Instance:StartFlowScript(cmd)
    end

    if self:CheckPrefix(command, string.lower("PlayerFavorite SaveData")) then
        local split = string.split(command, ' ')
        if split ~= nil and #split == 4 then
            local data = SelfProxyFactory.GetPlayerFavoriteProxy():GetTag(tonumber(split[3]), tonumber(split[4]))
            if data ~= nil then
                Debug.LogFormat("[PlayerFavorite] Id = %d, Score = %d, Appear = %d, Count = %d", data.ID, data.Score, data.AppearNum, data.ChooseNum)
            else
                Debug.Log("[PlayerFavorite] no save data")
            end
        end

        return
    end

    if self:CheckPrefix(command, string.lower("PlayerFavorite Score")) then
        local split = string.split(command, ' ')
        if split ~= nil and #split == 4 then
            local score = SelfProxyFactory.GetPlayerFavoriteProxy():GetTagScoreWithId(tonumber(split[3]), tonumber(split[4]))
            Debug.LogFormat("[PlayerFavorite] Id = %d, Score = %d", tonumber(split[4]), score)
        end

        return
    end

    if self:CheckPrefix(command, string.lower("InputFieldTest")) then
        UIMgr.Open(UIConf.InputFieldTestWnd)
        return
    end

    local sendType = self:CheckSendType(command)

    if sendType == 1 then
        self:SendSeverGM(command, ignoreCompose)
        self:AddToHistory(command)
    elseif sendType == 2 then
        self:SendClientGM(command)
        self:AddToHistory(command)
    elseif sendType == 3 then
        self:SendSeverGM(command, ignoreCompose)
        self:AddToHistory(command)
        SendWhenClose = false
        UIMgr.Close(UIConf.GMEntranceTopWnd)
        return 3
    elseif sendType == 4 then
        self:SendSeverGM(command, ignoreCompose)
        self:SendClientGM(command)
        self:AddToHistory(command)
    else
        return 0
    end
end

function GMCommandBLL:CheckCompose(command)
    local allCompose = LuaCfgMgr.GetAll("GMCompose_DEBUG")

    for k, v in pairs(allCompose) do
        if v.Name == command then
            return v
        end
    end
    return nil
end

function GMCommandBLL:SplitBySpace(str)
    local result = string.split(str, ' ')
    local delIdx = PoolUtil.GetTable()

    for i = 1, #result do
        if #result[i] == 0 then
            table.insert(delIdx, i)
        end
    end

    for i = #delIdx, 1, -1 do
        table.remove(result, delIdx[i])
    end

    PoolUtil.ReleaseTable(delIdx)
    return result
end

function GMCommandBLL:SendSeverGM(command, ignoreCompose)
    local composeCfg = self:CheckCompose(command)

    if composeCfg == nil or ignoreCompose then
        local messageBody = {}
        messageBody.Params = self:SplitBySpace(command)
        GrpcMgr.SendRequestAsync(RpcDefines.GmSendRequest, messageBody)
    else
        if composeCfg.Name == "unlockopensys" then
            Debug.LogFormat("执行一键全有GM命令，防止卡顿，暂时关闭LOG，10秒后开启。")
            local logEnable = Debug.IsEnabled()
            BllMgr.GetDebugLogBLL():SetLogEnable(false)
            TimerMgr.AddTimer(10, function()
                BllMgr.GetDebugLogBLL():SetLogEnable(logEnable)
            end)
        end
        for i = 1, #composeCfg.ComposeCommand do
            local singleGM = LuaCfgMgr.Get("GMList_DEBUG", composeCfg.ComposeCommand[i])

            if singleGM == nil or singleGM.CommandName == nil then
                Debug.LogError("Send GM gmListCfg is null id: " .. tostring(composeCfg.ComposeCommand[i]))
            else
                self:SendCommand(singleGM.CommandName, true)
            end
        end
    end
end

---@ 客户端指令处理
function GMCommandBLL:SendClientGM(command)
    local v, message = pcall(handler(self, self._SendClientGM), command)
    if not v then
        Debug.LogError(message)
    end
end

---@ 客户端指令处理
function GMCommandBLL:_SendClientGM(command)
    if command == nil or #command == 0 then
        return
    end

    command = string.lower(command)
    --command = string.lower(command)
    local inputList = self:SplitBySpace(command)
    if inputList[1] == "attack" then
        if #inputList >= 3 and string.lower(inputList[2]) == "adjust" then
            local para = tonumber(inputList[3])

            if para > 0 then
                CS.X3Game.GMCommandManager.SkillDamageZoomFactorValue = para
            end
        end
    elseif inputList[1] == "kill" then
        if #inputList > 1 then
            if g_BattleClient then
                local ID = tonumber(inputList[2])
                if ID == 3 then
                    ID = g_BattleClient.battle.spawnMgr:GetLatestMonsterEntityID()
                end
                local killActor = g_BattleClient.battle:GetActor(ID)
                if killActor then
                    killActor:Dead()
                end
            end
        end
    elseif inputList[1] == "setai" then
        if #inputList > 2 then
            if g_BattleClient then
                local ID = tonumber(inputList[2])
                local disable = tonumber(inputList[3]) == 0
                local aiActor = g_BattleClient.battle:GetActor(ID)

                if aiActor and aiActor.aiOwner then
                    aiActor.aiOwner:DisableAll(disable)
                end

            end
        end
    elseif inputList[1] == "setframeloadcount" then
        if #inputList > 1 then
            local count = tonumber(inputList[2])
            CS.X3Game.PreloadBatchMgr.loadingCntPerFrame = count
            Debug.LogErrorFormat("设置每帧资源加载数量：%s", count)
        end
    elseif inputList[1] == "setskillsort" then
        if #inputList > 2 then
            local SkillSort = tonumber(inputList[2])
            local noCD = tonumber(inputList[3]) == 1

            if noCD then
                if SkillSort == 2 then
                elseif SkillSort == 3 then
                    CS.BattleCoopPower.ModPower(99999999)
                    CS.BattleCoopPower.SetNoCD()
                elseif SkillSort == 4 then
                    CS.BattleUltraPower.ModPower(99999999)
                    CS.BattleUltraPower.SetNoCD()
                end
            else
                if SkillSort == 2 then
                elseif SkillSort == 3 then
                    CS.BattleCoopPower.RevertCD()
                elseif SkillSort == 4 then
                    CS.BattleUltraPower.RevertCD()
                end
            end
        end
    elseif inputList[1] == "setinvincible" then
        if #inputList > 2 then
            local ID = tonumber(inputList[2])
            local Open = tonumber(inputList[3]) == 1

            if ID == 1 then
                local girlEntity = CS.EntityAvatarManager.GetMineInstance();
                if girlEntity then
                    if Open then
                        girlEntity:MarkEntityStartHpProtect(100);
                    else
                        girlEntity:MarkEntityStopHpProtect()
                    end
                end
            elseif ID == 2 then
                local roleEntity = CS.EntityAvatarManager.GetCurHusbandInstance();
                if roleEntity then
                    if Open then
                        roleEntity:MarkEntityStartHpProtect(100);
                    else
                        roleEntity:MarkEntityStopHpProtect()
                    end
                end
            else
                CS.EntityAvatarManager.SetMonsterProtected(Open)
            end
        end
    elseif inputList[1] == "energyfull" then
        if #inputList > 1 then
            local type = tonumber(inputList[2])
            if type == 1 then
                CS.BattleCoopPower.ModPower(99999999)
            elseif type == 2 then
                CS.BattleUltraPower.ModPower(99999999)
            end
        end
    elseif inputList[1] == "connectdebug" then
        EventMgr.Dispatch("REMOTE_DEBUG", string.concat(inputList[2], ":", inputList[2]))
    elseif inputList[1] == "closedebug" then
        EventMgr.Dispatch("REMOTE_DEBUG", inputList[1])
    elseif inputList[1] == "download" or inputList[1] == "connecthttp" or inputList[1] == "uploadlog" or inputList[1] == "clearlua" then
        EventMgr.Dispatch("LUAHTTPSERVER", table.unpack(inputList))
    elseif inputList[1] == "runchess" then
        if #inputList > 2 and inputList[2] == "movespeed" then
            local speed = tonumber(inputList[3])
            CS.UnityEngine.Time.timeScale = speed
        end
    elseif inputList[1] == "loadscene" then
        if #inputList > 1 then
            local sceneName = inputList[2]
            local loadMode = CS.UnityEngine.SceneManagement.LoadSceneMode.Single
            if inputList[3] == "additive" then
                loadMode = CS.UnityEngine.SceneManagement.LoadSceneMode.Additive
            end

            SceneMgr.LoadSceneAsync(sceneName, loadMode)
        end
    elseif inputList[1] == "settimescale" then
        if #inputList > 1 then
            CS.UnityEngine.Time.timeScale = tonumber(inputList[2])
        end
    elseif inputList[1] == "setabmarkAll" then
        if #inputList > 1 then
            local value = tonumber(inputList[2])
            CS.X3Game.GameMgr.MarkABAll(value > 0)
        end
    elseif inputList[1] == "setabmark" then
        if #inputList > 1 then
            local value = tonumber(inputList[2])
            CS.X3Game.GameMgr.MarkAB(value > 0)
        end
    elseif inputList[1] == "setregion" then
        if #inputList > 1 then
            local value = tonumber(inputList[2])
            Locale.SetRegion(value)
            Locale.SetLang(value)
            Locale.SetSoundLang(value)
            Locale.SaveUserAppInfo()
            GameStateMgr.Switch(GameState.Disconnection, GameConst.LanguageChangeType.Language)
        end
    elseif inputList[1] == "testreleaseskill" then
        if #inputList > 2 and CS.BattleLevelManager.Fighting then
            local type = tonumber(inputList[2])
            local skillID = tonumber(inputList[3])
            local target = nil

            for k, v in pairs(CS.EntityAvatarManager.StandardBattleAll) do
                if v.BattleCamp == CS.Faction.LocalAlly then
                    if type == 2 and v.BattleEntity.HeroEntityPos == CS.HeroPosEnum.BoySlave then
                        target = v
                        break
                    elseif type == 1 and v.BattleEntity.HeroEntityPos == CS.HeroPosEnum.Queen then
                        target = v
                        break
                    end
                end
            end

            if target ~= nil and target.BattleEntity.AllySkills ~= nil then
                for k, v in pairs(target.BattleEntity.AllySkills.Values) do
                    if v.DummyID == skillID then
                        target:Command_ManualFiredSkill(v.ID, CS.SkillControllerContextManager.DistributeSkillUniqueID(), CS.EntityAvatarConstValue.InvalidEntityInstanceID, Vector3(0, 0, 0), nil)
                        break
                    end
                end
            end
        end
    elseif inputList[1] == "testbattlecutscene" then
        if #inputList > 1 then
            local ID = tonumber(inputList[2])
            if CS.BattleCutSceneHelper.Instance ~= nil then
                CS.BattleCutSceneHelper.Instance:Play(ID, CS.UnityEngine.Playables.DirectorWrapMode.None)
            end
        end
    elseif inputList[1] == "testbattlefinish" then
        if (CS.BattleLevelManager.Fighting) then
            CS.BattleLevelManager.EndBattleRequest(true, true);
        end
    elseif inputList[1] == "hidebattleui" then
        if #inputList > 0 then
            local type = tonumber(inputList[2])

            if type == 0 then
                CS.BattleFloatWordsManager.Instance:ClearAllFloatWords()
                EventMgr.Dispatch("BWEvent", "HideUIByGM")
            else
                CS.BattleFloatWordsManager.Instance:RevertAllFloatWords()
                EventMgr.Dispatch("BWEvent", "ShowUIByGM")
            end
        end
    elseif inputList[1] == "rename" then
        self:SendSeverGM("item add 100 1100 1")

        local rNameList = LuaCfgMgr.GetAll("PlayerRandomName")
        local rFamilyNameList = LuaCfgMgr.GetAll("PlayerRandomFamilyName")

        math.randomseed(os.time())
        local nameIdx = math.random(1, #rNameList)
        local familyNameIdx = math.random(1, #rFamilyNameList)

        local messagebody = {}
        messagebody.Name = rNameList[nameIdx].Content
        messagebody.FamilyName = rFamilyNameList[familyNameIdx].Content

        GrpcMgr.SendRequest(RpcDefines.SetNameRequest, messagebody, true)
    elseif inputList[1] == "battleend" then

    elseif inputList[1] == "printErrandMgrlogrecord" then

    elseif inputList[1] == "level finish win" then
        local csBattle = CS.X3Battle.Battle.Instance
        if csBattle and csBattle.isBegin then
            BattleUtil.SendCleanGuideEvent()
            csBattle.input:EndBattle(true)
        end
    elseif inputList[1] == "offlinequickbattle" then
        UIMgr.Open(UIConf.QuickBattle)
        self:CloseGMWnd()
    elseif inputList[1] == "openbattledebug" then
        if CS.X3Battle.Battle.Instance and CS.X3Battle.Battle.Instance.isBegin then
            UIMgr.Close(UIConf.GMEntranceTopWnd)
            UIMgr.Close(UIConf.GMWnd)
            UIMgr.Open("Debug_BattleWnd")
        end
    elseif inputList[1] == "setbuff" then
        if #inputList > 3 then
            if g_BattleClient then
                local ID = tonumber(inputList[4])
                local buffID = tonumber(inputList[2])
                local buffLevel = tonumber(inputList[3])
                if ID == 3 then
                    ID = g_BattleClient.battle.spawnMgr:GetLatestMonsterEntityID()
                end
                local targetActor = g_BattleClient.battle:GetActor(ID)
                if targetActor and targetActor.buffOwner then
                    targetActor.buffOwner:CreateBuff(targetActor:GetRole(), buffID, buffLevel)
                end
            end
        end
    elseif inputList[1] == "jump" then
        if #inputList > 1 then
            local params = {}
            if inputList[3] then
                local paraStrings = string.split(inputList[3], '_')
                for i = 1, #paraStrings do
                    params[i] = tonumber(paraStrings[i])
                end
            end

            UICommonUtil.SetOrDoJump(tonumber(inputList[2]), { paras = params })
        end
    elseif inputList[1] == "guide" then
        if #inputList > 1 then
            BllMgr.GetNoviceGuideBLL():HandleGMCommand(inputList)
        end
    elseif inputList[1] == "message" then
        if #inputList > 1 then
            BllMgr.GetPhoneMsgBLL():HandleGMCommand(inputList)
        end
    elseif string.lower(inputList[1]) == "startreplay" then
        QuickBattle:StartReplay()
        self:CloseGMWnd()
    elseif string.lower(inputList[1]) == "battlefxtest" then

        local index = 0;
        if #inputList > 1 then
            index = tonumber(inputList[2])
        end
        CS.X3Battle.BattleFxTester.Instance:RegisterTestOnBattleBegin(index)

        require("Runtime.Battle.Common.BattleEnum")
        require("Runtime.Battle.BattleLauncher")

        local battleArg = CS.X3Battle.BattleArg()
        battleArg.startedLockMode = BattleUtil.GetLockMode()
        battleArg.startedLockBtnActive = BattleUtil.GetLockBtnActive()
        battleArg.isNumberMode = false
        battleArg.levelID = 35
        battleArg.girlID = 210311
        battleArg.boyID = 210001
        battleArg.girlWeaponID = 71010
        battleArg.startupType = BattleStartupType.OfflineQuickBattle
        battleArg.playerID = 0
        battleArg.replayPath = nil
        battleArg.sceneName = nil
        battleArg.isReplay = false
        g_battleLauncher:StartupByCustom(battleArg)

        self:CloseGMWnd()

    elseif inputList[1] == "blow" then

        local gmWnd = UIMgr.GetViewByTag(UIConf.GMWnd)
        local objLinker = gmWnd.obj_linker
        local blowBtn = GameObjectUtil.GetComponent(objLinker, "OCX_BlowTest", "GameObject")
        --吹气检测
        local volume = tonumber(inputList[2])
        local frameCount = tonumber(inputList[3])

        BlowCheckUtil.EndCheck()
        BlowCheckUtil.RemoveListener()

        BlowCheckUtil.SetParam(volume, frameCount)

        local function callback()
            UICommonUtil.ShowMessage("吹气检测成功")
            BlowCheckUtil.RemoveListener()
        end
        BlowCheckUtil.AddListener(callback)

        BlowCheckUtil.StartCheck()

    elseif inputList[1] == "screenpress" then

        local gmWnd = UIMgr.GetViewByTag(UIConf.GMWnd)
        local objLinker = gmWnd.obj_linker

        --屏幕按压检测
        local interval = tonumber(inputList[2])
        local distance = tonumber(inputList[3])
        local touchCount = tonumber(inputList[4])

        ScreenPressCheckUtil.RemoveListener(objLinker, "OCX_ScreenPressTest")

        ScreenPressCheckUtil.SetParam(objLinker, "OCX_ScreenPressTest", interval, distance, touchCount)

        ---要测试按压 需要开启多屏幕点触控
        GameHelper.SetMultiTouchEnable(true)

        local function callback()
            UICommonUtil.ShowMessage("屏幕按压检测成功")
            ScreenPressCheckUtil.RemoveListener(objLinker, "OCX_ScreenPressTest", callback)
        end
        ScreenPressCheckUtil.AddListener(objLinker, "OCX_ScreenPressTest", callback)
    elseif inputList[1] == "setdoublescale" then
        GameObjClickUtil.SetScaleThreshold(tonumber(inputList[2]))
    elseif inputList[1] == "setdoubleangle" then
        GameObjClickUtil.SetAngleThreshold(tonumber(inputList[2]))
    elseif inputList[1] == "unlock" then
        BllMgr.GetUnLockBLL():HandleGMCommand(inputList)
    elseif inputList[1] == "changeslotcolor" then
        ---变色喵动效测试
        local slotIndex = tonumber(inputList[2])
        local totalTime = tonumber(inputList[3])
        local totalLoopCount = tonumber(inputList[4])
        ---@type CatCard.ChangeSlotColorActionData
        local actionData = BllMgr.GetCatCardBLL():GetActionData(100031, 1)
        actionData:Set(slotIndex, totalTime, totalLoopCount)
        actionData:Begin()
    elseif inputList[1] == "miao" then
        local sendMiao = self:GetMiaoCommand(inputList[2])
        if sendMiao then
            self:SendMiaoCommand(sendMiao, tonumber(inputList[3]), tonumber(inputList[4]), tonumber(inputList[5]))
            return
        end
        if inputList[2] == "checkplayercard" then
            --查看男主手牌
            ---@type CatCardConst
            local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
            ---@type CatCard.DiscardShowActionData
            self.actionData = BllMgr.GetCatCardBLL():GetActionData(CatCardConst.ActionType.Discard, CatCardConst.PlayerType.ENEMY)
            self.actionData:SetFuncType(CatCardConst.FuncEffectType.CheckPlayerCard)
            self.actionData:Begin()
        end
    elseif inputList[1] == "catcard" then
        local sendMiao = self:GetMiaoCommand(inputList[2])
        if sendMiao then
            --这里传入一个table
            local args = {}
            table.merge(args, inputList)
            table.remove(args, 2)
            table.remove(args, 1)
            for i = 1, #args do
                args[i] = tonumber(args[i])
            end

            self:SendMiaoCommand(sendMiao, args)
        end
    elseif inputList[1] == "level" and inputList[2] == "finish" and inputList[3] == "win" then
        if g_battleLauncher then
            g_battleLauncher:End(true)
        end
    elseif inputList[1] == "setdisconnectionstatus" then
        if tonumber(inputList[2]) == 0 then
            GrpcMgr.ShowDisconnectMessageBox()
        else
            GameStateMgr.Switch(GameState.Disconnection)
        end
    elseif command == "open empty scene" then
        ---打开空场景
        GameStateMgr.Switch(GameState.Empty)
        Debug.LogWithTag(GameConst.LogTag.GM, "open empty scene")
    elseif command == "return to main home" then
        ---回到主界面
        GameStateMgr.Switch(GameState.MainHome)
        Debug.LogWithTag(GameConst.LogTag.GM, "return to main home")
    elseif inputList[1] == "dailyconfide" and inputList[2] == "sentence" then
        BllMgr.GetDailyConfideBll():OnResult(inputList[3])
    elseif inputList[1] == "confide" and inputList[2] == "cdclear" then
        BllMgr.GetDailyConfideBll():GMClearCD(tonumber(inputList[3]))
    elseif inputList[1] == "dailyphone" and inputList[2] == "nextroutinetime" then
        BllMgr.GetDailyConfideBll():SetBufferTime(tonumber(inputList[3]))
    elseif inputList[1] == "radio" and inputList[2] == "check" then
        ---检查所有广播剧的单句音频状态
        BllMgr.GetRadioNewBLL():CheckAllSubConfig()
    elseif inputList[1] == "read" and inputList[2] == "radioid" then
        BllMgr.GetRadioNewBLL():ReadRadio(inputList[3])
    elseif inputList[1] == "dollshow" then
        local dollStrList = string.split(inputList[3], "|")
        local dollList = {}
        if dollStrList then
            for _, v in pairs(dollStrList) do
                table.insert(dollList, tonumber(v))
            end
        end
        local roleId = tonumber(inputList[2])
        ErrandMgr.Add(X3_CFG_CONST.POPUP_SPECIALTYPE_DOLLSHOW,
                { roleId = roleId,
                  dollList = dollList })
    elseif inputList[1] == "dollcatch" then
        local dollId = tonumber(inputList[2])
        local dollPoolDict = BllMgr.GetUFOCatcherBLL().dollPoolDict
        if dollId == 0 then
            local keys = table.keys(dollPoolDict)
            dollId = keys[math.random(1, #keys)]
        end
        local dollGameObject = #dollPoolDict[dollId] > 0 and dollPoolDict[dollId][1] or nil
        if dollGameObject then
            EventMgr.Dispatch("UFOCatcherCatched", dollGameObject)
        end
    elseif inputList[1] == "worldinfo" then
        local cmd = inputList[2]
        if cmd == "openwnd" then
            BllMgr.GetWorldIntelligenceBLL():OpenWorldInfoWnd()
        end
    elseif inputList[1] == "battle" then
        local cmd = inputList[2]
        local roleID = tonumber(inputList[3])
        if cmd == "info" then
            QuickBattle:PrintActorInfo(roleID)
        end
    elseif inputList[1] == "openui" then
        local low_uiViewKey = inputList[2]
        local uiViewKey
        for k, v in pairs(UIConf) do
            if low_uiViewKey == string.lower(k) then
                uiViewKey = k
                break
            end
        end
        if not uiViewKey then
            Debug.LogError(string.format("UIViewKey not found : %s", low_uiViewKey or "nil"))
        else
            UIMgr.Open(UIConf[uiViewKey])
        end
    elseif inputList[1] == "uicmd" then
        if inputList[2] == "themedebug" then
            -- 系统设置-个性化功能测试
            BllMgr.GetSystemSettingBLL():HandleGMCommand(inputList)
        elseif inputList[2] == "birthday" then
            -- 玩家生日
            BllMgr.GetPlayerBirthdayBLL():HandleGMCommand(inputList)
        elseif inputList[2] == "easteregg" then
            -- 彩蛋系统
            BllMgr.GetEasterEggBLL():HandleGMCommand(inputList)
        elseif inputList[2] == "dailyroutine" then
            -- 男主作息
            BllMgr.GetDailyRoutineBLL():HandleGMCommand(inputList)
        elseif inputList[2] == "activityhangup" then
            -- 挂机活动
            BllMgr.GetActivityHangUpBLL():HandleGMCommand(inputList)
        elseif inputList[2] == "enteremptystate" then
            -- 缓存下当前设置
            local curStateName = GameStateMgr.GetCurStateName()
            GameStateMgr._stateTransitionDict[curStateName] = GameStateMgr._stateTransitionDict[curStateName] or {}
            local curDictSetting = table.clone(GameStateMgr._stateTransitionDict[curStateName])
            -- 设置可以从当前state跳转进Empty state
            table.insert(GameStateMgr._stateTransitionDict[curStateName], GameState.Empty)
            ---打开空场景
            GameStateMgr.Switch(GameState.Empty)
            -- 恢复设置
            GameStateMgr._stateTransitionDict[curStateName] = curDictSetting
        elseif inputList[2] == "enterhomestate" then
            -- 进入主界面场景
            GameStateMgr.Switch(GameState.MainHome)
        elseif inputList[2] == "gemcoreinstance" then
            -- 芯核副本调试命令
            if inputList[3] == "playenteranim" then
                local uiView = UIMgr.GetViewByTag(UIConf.GemCoreWnd)
                if uiView then
                    uiView:PlayMotion(nil, "fx_ui_GemCore_moveinFirst")
                end
            end
        elseif inputList[2] == "eventtrace" then
            -- 数据打点相关命令
            if inputList[3] == "dumpsdkrawdeviceinfo" then
                -- 打印一下从sdk那里过来的原始deviceInfo
                if SDKMgr then
                    Debug.LogError("RawDeviceInfo: " .. table.dump({ SDKMgr.GetRawDeviceInfo() }))
                end
            elseif inputList[3] == "logon" then
                EventTraceMgr:LogOn()
            elseif inputList[3] == "logoff" then
                EventTraceMgr:LogOff()
            elseif inputList[3] == "dumphistorybyid" then
                EventTraceMgr:DumpHistoryByEventId(tonumber(inputList[4]))
            end
        end
    elseif inputList[1] == "ip" then
        if inputList[2] == "matching" then
            ---设置重新请求大区
            BllMgr.GetLoginBLL():ReqGMServerInfo(tonumber(inputList[4]))
        end
    elseif inputList[1] == "customerservicetest" then
        ---测试客服
        local url = "https://support-x3-test.papegames.com/?"
        local tab = {
            nid = SDKMgr.GetNid(),
            uid = SelfProxyFactory.GetPlayerInfoProxy():GetUid(),
            token = SDKMgr.GetToken(),
            clientid = ServerUrl.clientId,
            nickname = string.urlencode(SelfProxyFactory.GetPlayerInfoProxy():GetName()),
        }
        local paramStr = ""
        for k, v in pairs(tab) do
            if not string.isnilorempty(paramStr) then
                paramStr = paramStr .. "&"
            end
            paramStr = paramStr .. tostring(k) .. "=" .. tostring(v)
        end
        url = string.concat(url, paramStr)
        UniWebViewUtil.OpenUrlView(url, true)
    elseif inputList[1] == "shaderwarmup" then
        if inputList[2] == "start" then
            ShaderWarmupMgr.StartWarmup()
        elseif inputList[2] == "stop" then
            ShaderWarmupMgr.StopWarmup()
        elseif inputList[2] == "clear" then
            ShaderWarmupMgr.ClearWarmupState()
        end
    elseif inputList[1] == "photo" and inputList[2] == "ar" and inputList[3] == "y" then
        local num = tonumber(inputList[4])
        PurikuraARMgr:SetGammaMode(num)
    elseif inputList[1] == "version" then
        if UNITY_EDITOR then
            Debug.Log("此功能 Editor不适用！")
            return
        end
        local FileUtility = CS.PapeGames.X3.FileUtility
        local resVersionJsonPath = string.concat(CS.UnityEngine.Application.persistentDataPath, "/BuildInfo/build_info.json")
        local appVersionJsonPath = string.concat(CS.UnityEngine.Application.streamingAssetsPath, "/BuildInfo/build_info.json")
        local resVersionTab = nil
        local appVersionTab = nil
        if not io.exists(resVersionJsonPath) then
            local fileText = FileUtility.ReadText(resVersionJsonPath)
            resVersionTab = JsonUtil.Decode(fileText)
        end
        if not io.exists(appVersionJsonPath) then
            local fileText = FileUtility.ReadText(appVersionJsonPath)
            appVersionTab = JsonUtil.Decode(fileText)
        end
        if resVersionTab == nil and appVersionTab == nil then
            UICommonUtil.ShowMessage(string.format("版本信息不存在，请检查/n, 引擎版本:%s", AppInfoMgr.GetTcVersion()))
            return
        end
        if resVersionTab == nil then
            resVersionTab = appVersionTab
        end
        local versionTab = {
            app_file_name = appVersionTab["app_file_name"],
            branch = appVersionTab["branch"],
            app_version = appVersionTab["app_version"],
            app_buildnum = appVersionTab["app_buildnum"],
            res_version = resVersionTab["res_version"],
            engine_version = appVersionTab["engine_version"],
            app_p4_version = appVersionTab["app_p4_version"],
            res_p4_version = resVersionTab["res_p4_version"],
        }
        local versionMessage = JsonUtil.Encode(versionTab)
        Debug.Log("版本信息", versionMessage)
        UICommonUtil.ShowMessageBox(versionMessage)
    elseif inputList[1] == "open_remote_debugwnd" then
        BllMgr.Get('RemoteDebugBLL'):CheckRemoteDebugView()
    elseif inputList[1] == "setphotoh5region" then
        PlayerPrefs.SetInt("setphotoh5region", tonumber(inputList[2]))
    end
end

function GMCommandBLL:InitMiaoGmCommand()
    self.gm_miao_command_list = {
        ["changecard"] = Miao.Command.GM.GM_ResetHandCardRequest,
        ["deletecard"] = Miao.Command.GM.GM_DeleteHandCardRequest,
        ["slotchange"] = Miao.Command.GM.GM_ChangeSlotCardRequest,
        ["slotcolorchange"] = Miao.Command.GM.GM_ChangeSlotColorRequest,
        ["deleteslot"] = Miao.Command.GM.GM_RemoveSlotCardRequest,
        ["deletefuncpile"] = Miao.Command.GM.GM_ClearFuncPileRequest,
        ["getcard"] = Miao.Command.GM.GM_DrawCardToPlayerRequest,
        ["changepile"] = Miao.Command.GM.GM_ChangePilePopCardIdRequest,
        ["banplaycard"] = Miao.Command.GM.GM_BanPlayCardRequest,
        ["banvetoonce"] = Miao.Command.GM.GM_BanVetoOnceRequest,
        ["forceplayvetoonce"] = Miao.Command.GM.GM_ForcePlayVetoOnceRequest,
        ["playfunccardseq"] = Miao.Command.GM.GM_PlayFuncCardSeqRequest
    }
end

---@param gm string 命令
---@return int
function GMCommandBLL:GetMiaoCommand(gm)
    if not self.gm_miao_command_list then
        self:InitMiaoGmCommand()
    end
    if self.gm_miao_command_list[gm] then
        return self.gm_miao_command_list[gm]
    end
end

---@param command int
function GMCommandBLL:SendMiaoCommand(command, ...)
    local param1, param2, param3 = select(1, ...)
    local req = { param1, param2, param3 }
    local logicEntity = LogicEntityUtil.GetOrCreate(LogicConst.LogicEntityType.Miao)
    logicEntity:SendToServer(command, req)
end

---@ 客户端勾选类指令处理
function GMCommandBLL:SendToggleClientGM(label, value, isInit)
    self:_SendToggleClientGM(label, value, isInit)
    PlayerPrefs.Save()
end

function GMCommandBLL:_SendToggleClientGM(label, value, isInit)
    if not isInit then
        PlayerPrefs.SetInt(string.concat(PrefTogglePrefix, string.upper(label)), value and 1 or 0)
    end

    --debug标签不做小写转换
    if string.startswith(label, Debug.LOGPREFIX) and Debug.IsEnabled() then
        local datas = string.split(label, "_")
        local tag = datas[2]
        local plat = datas[3]
        Debug.SetLogEnableWithTag(tag, plat, value)
        return
    end

    if string.startswith(label, "set_log_level_switch") then
        if not isInit then
            local datas = string.split(label, "-")
            BllMgr.GetDebugLogBLL():SetOpenLogLevel(Debug.IsEnabled() and tonumber(datas[2]) or Debug.DebugLevel.Fatal)
        end
        return
    end

    label = string.lower(label)
    --追踪当前节点
    if label == "dialogue not check" then
        BllMgr.GetDialogueBLL():SetNotCheckDialogue(value)
        return
    end

    if label == "dialogue quickplay" then
        BllMgr.GetDialogueBLL():SetDebugCanLongPressSkip(value)
        return
    end

    if label == "dialogue skipbranch" then
        BllMgr.GetDialogueBLL():SetLongPressSkipBranch(value)
        return
    end

    if label == "skipcardscoreshow" then
        BllMgr.GetScoreBLL():GM_SetSkipCardScoreShow(value)
        return
    end

    if label == "setlog" then
        if not isInit then
            if Debug.IsLogEngineEnable() then
                BllMgr.GetDebugLogBLL():SetLogEnable(value)
            else
                EventMgr.Dispatch("Debug_Level_Change_Event")
            end
        end
        return ;
    end

    --语言包测试
    if label == "language test" then
        UITextHelper.SetLanguageDebug(value)
        return ;
    end

    --单手控制
    if label == "control mode" then
        return ;
    end

    --序章功能开关
    if label == "stage open" then
        ChapterStageManager.SetIsOpenProStage(value)
        return ;
    end

    --连播不随通关清除开关
    if label == "stage combo" then
        BllMgr.GetChapterAndStageBLL():SetIsForceStageCombo(value)
        return ;
    end

    --序章功能开关
    if label == "battle data count" then
        ShowBattledData = value
        return ;
    end

    --序章功能开关
    if label == "battle attr view" then
        ShowBattlingData = value
        return ;
    end

    --标记开关设置
    if label == "set_log_tag_enable" and Debug.IsEnabled() then
        PlayerPrefs.SetBool(label, value)
        BllMgr.GetDebugLogBLL():SetLogTagEnable(value)
        return
    end

    --序章功能开关
    if label == "is_show_give_up_btn" then
        if isInit then
            return ;
        end
        SelfProxyFactory.GetDailyDateProxy():SetIsCanGiveUp(value)
        return ;
    end
    if label == "guide switch" then
        PlayerPrefs.SetBool("GuideOpen", value)
    elseif label == "guide systemswitch" then
        PlayerPrefs.SetBool("GuideAutoGuideOpen", value)
    elseif label == "guide fightswitch" then
        PlayerPrefs.SetBool("GuideManualGuideOpen", value)
    elseif label == "message typetimeswitch" then
        PlayerPrefs.SetBool("MsgDelayTimeSwitch", value)
    end

    if not isInit then
        -- 默认值， BattleDebug自己维护
        if self:_SetBattleGM(label, value) then
            return
        end
    end

    -- 主线timeline特效关闭
    if label == "mainline_timeline_effect_off" then
        DefaultTimelineContext.AVOID_FX_LOAD = value
        return
    end

    -- 广播剧后台开关
    if label == "radiobackplay" then
        PlayerPrefs.SetBool("RadioPlayBackPlay", value)
        return
    end

    -- 拍照进行压缩
    if label == "photo compress" then
        PlayerPrefs.SetBool("photoCompress", value)
        return
    end

    if label == "set shader warmup" then
        ShaderWarmupMgr.SetOpenWarmup(value)
        return
    end

    if label == "asynchronous shader warmup" then
        PlayerPrefs.SetBool("AsyncWarmUp", value)
        ShaderWarmupMgr.SetAsyncMode(value)
        return
    end

    if label == "show performance" then
        --todo 性能显示
        return
    end

    if label == "close gameobject pool" then
        --todo 关闭GameObjcect池子
        CS.PapeGames.X3.X3AssetInsProvider.Instance.CacheEnable = (not value)
        return
    end
    if label == "miao changelogstate" then
        PlayerPrefs.SetBool("CatDebugState", value)
        return
    end

    if label == "miao changedatelogstate" then
        PlayerPrefs.SetBool("CatDateDebugState", value)
        return
    end

    if label == "miao changebrandstate" then
        PlayerPrefs.SetBool("BrandMode", value)
        return
    end

    if label == "miao skipanimation" then
        if not isInit then
            BllMgr.GetCatCardBLL():SetSkipAniState(value)
        end
        return
    end

    if label == "download backstage" then
        ---后台下载
        if ResUpdateManager then
            ResUpdateManager:SetBackgroundDownload(value)
        end
        PlayerPrefs.SetBool("download_backstage", value)
        return
    end

    if label == "download storage" then
        ---模拟本地储存空间已满
        if SubPackageUtil then
            SubPackageUtil.ChangeNoSpaceDebugState(value)
        end
    end
    if label == "download network" then
        ---模拟流量环境
        if SubPackageUtil then
            SubPackageUtil.ChangeCarrierDataDebugState(value)
        end
    end
    if label == "givememoney" then
        local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")
        PlayerPrefs.SetBool(ShopMallConst.GM_CONST, value)
    end
    if label == "forceenablelange" then
        BllMgr.GetSystemSettingBLL():SetAvailableData(value)
    end

    if label == "disabledynmaictmpfont" then
        --BllMgr.GetSystemSettingBLL():SetAvailableData(value)
        PlayerPrefs.SetBool("disable dynmaic tmp font", value)
    end

    if label == "throttleacquiretest" then
        BllMgr.GetLoginBLL():SetIsThrottleAcquireTest(value)
    end

    if label == "highlight holdscene" then
        PlayerPrefs.SetBool("highlight holdscene", value)
    end

    if label == "wwiselogenable" then
        WwiseMgr.SetLogEnable(value)
    end

    if label == "stage hold uimgr" then
        UIMgr.SetTakeSnapShotEnable(value)
    end
    if label == "close hotupdate" then
        PlayerPrefs.SetBool('IS_CLOSE_RES_UPDATE', value)
    end
    if label == "instantiate async" then
        Res.SetInstantiateAsync(value)
    end
    if label == "synchronize full data" then
        GrpcMgr.GMAutoSendSyncUserTotalData()
    end

    if label == "showfps" then
        CS.X3Game.GameMgr.DrawFps = value
    end

    if label == "mainui dofkeeptheedge" then
        BllMgr.GetMainHomeBLL():SetDofKeepTheEdge(value)
    end

    if label == "confideskipalitoken" then
        BllMgr.GetDailyConfideBll():SetIsForceNotCheckToken(value)
    end
end

function GMCommandBLL:_SetBattleGM(label, value)
    label = string.lower(label)
    if label == "close male" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableBoy, value)
    elseif label == "close female" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableGirl, value)
    elseif label == "close monster" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableBoss, value)
    elseif label == "close scene" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableScene, value)
    elseif label == "battle_timeline_effect_off" then
        -- 战斗timeline特效关闭
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableTimelineFX, value)
    elseif label == "effect off" then
        -- 非timeline特效关闭
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableNotTimelineFX, value)
    elseif label == "recordereplayfile" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.RecordeReplayFile, value)
    elseif label == "disablebattleworld" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.DisableBattleWorld, value)
    elseif label == "overall skip level fight" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.OverallSkipLevel, value)
    elseif label == "overall skip level win" then
        CSBattlePerformance.SetDebugKey(CSBattlePerformance.OverallSkipLevelToWin, value)
    else
        return false
    end
    return true
end

function GMCommandBLL:_GetBattleGM(label)
    label = string.lower(label)
    if label == "close male" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableBoy)
    elseif label == "close female" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableGirl)
    elseif label == "close monster" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableBoss)
    elseif label == "close scene" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableScene)
    elseif label == "battle_timeline_effect_off" then
        -- 战斗timeline特效关闭
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableTimelineFX)
    elseif label == "effect off" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableNotTimelineFX)
    elseif label == "recordereplayfile" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.RecordeReplayFile)
    elseif label == "disablebattleworld" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.DisableBattleWorld)
    elseif label == "overall skip level fight" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.OverallSkipLevel)
    elseif label == "overall skip level win" then
        return CSBattlePerformance.GetDebugKey(CSBattlePerformance.OverallSkipLevelToWin)
    end
end
--endregion

---@ 客户端勾选类指令状态获取
function GMCommandBLL:GetClientSetting(label)
    --Debug不做小写转换
    if string.startswith(label, Debug.LOGPREFIX) then
        local value = PlayerPrefs.GetInt(label)
        return value == 0 and Debug.IsEnabled()
    end

    if string.startswith(label, "set_log_level_switch") then
        local datas = string.split(label, "-")
        local level = tonumber(datas[2])
        if Debug.IsEnabled() then
            local logLevel = Debug.GetLogLevel()
            return logLevel == level
        else
            return Debug.DebugLevel.Fatal == level
        end
    end

    --追踪当前节点
    label = string.lower(label)
    if label == "dialogue not check" then
        return BllMgr.GetDialogueBLL():GetNotCheckDialogue()
    end

    if label == "dialogue quickplay" then
        return BllMgr.GetDialogueBLL():GetDebugCanLongPressSkip()
    end

    if label == "dialogue skipbranch" then
        return BllMgr.GetDialogueBLL():GetLongPressSkipBranch()
    end

    if label == "skipcardscoreshow" then
        return BllMgr.GetScoreBLL():GM_GetSkipCardScoreShow()
    end

    if label == "set_log_tag_enable" then
        return PlayerPrefs.GetBool(label) and Debug.IsEnabled()
    end

    if label == "setlog" then
        local logLevel = Debug.GetLogLevel()
        return Debug.IsEnabled() and logLevel < Debug.DebugLevel.Fatal
    end

    -- 主线timeline特效关闭
    if label == "mainline_timeline_effect_off" then
        return DefaultTimelineContext.AVOID_FX_LOAD
    end

    --语言包测试
    if label == "language test" then
        return UITextHelper.IsLanguageDebug()
    end

    --单手控制
    if label == "control mode" then
        return ;
    end

    --序章功能开关
    if label == "stage open" then
        return ChapterStageManager.GetIsOpenPorStage()
    end

    --连播不随通关清除开关
    if label == "stage combo" then
        return BllMgr.GetChapterAndStageBLL():GetIsForceStageCombo()
    end

    --序章功能开关
    if label == "battle data count" then
        return ShowBattledData
    end

    --序章功能开关
    if label == "battle attr view" then
        return ShowBattlingData
    end

    --序章功能开关
    if label == "is_show_give_up_btn" then
        return SelfProxyFactory.GetDailyDateProxy():IsCanGiveUp()
    end

    if label == "set shader warmup" then
        return ShaderWarmupMgr.GetOpenWarmup()
    end

    if label == "asynchronous shader warmup" then
        return ShaderWarmupMgr.GetAsyncMode()
    end

    -- 广播剧后台开关
    if label == "radiobackplay" then
        return PlayerPrefs.GetBool("RadioPlayBackPlay", false)
    end

    -- 拍照进行压缩
    if label == "photo compress" then
        return PlayerPrefs.GetBool("photoCompress", false)
    end

    if label == "guide switch" then
        return NoviceGuideUtil.GetOpenStatus()
    elseif label == "guide systemswitch" then
        return NoviceGuideUtil.GetAutoOpenStatus()
    elseif label == "guide fightswitch" then
        return NoviceGuideUtil.GetManualOpenStatus()
    elseif label == "message typetimeswitch" then
        return PlayerPrefs.GetBool("MsgDelayTimeSwitch", false)
    end

    if label == "show performance" then
        --todo 性能显示
        return false
    end

    if label == "close gameobject pool" then
        --todo 关闭GameObjcect池子
        return not CS.PapeGames.X3.X3AssetInsProvider.Instance.CacheEnable
    end

    if label == "miao changelogstate" then
        return BllMgr.GetCatCardBLL():IsDebugMode()
    end

    if label == "miao changebrandstate" then
        return BllMgr.GetCatCardBLL():GetBrandMode()
    end

    if label == "miao skipanimation" then
        return BllMgr.GetCatCardBLL():IsSkipAniState()
    end

    if label == "download storage" then
        if SubPackageUtil then
            return SubPackageUtil.GetNoSpaceDebugState()
        else
            return false
        end
    end
    if label == "download network" then
        if SubPackageUtil then
            return SubPackageUtil.GetCarrierDataDebugState()
        else
            return false
        end
    end
    if label == "givememoney" then
        local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")
        return PlayerPrefs.GetBool(ShopMallConst.GM_CONST, false)
    end

    if label == "setauditenable" then
        return AppInfoMgr.IsAudit()
    end

    if label == "forceenablelange" then
        return BllMgr.GetSystemSettingBLL():GetForceAvailable()
    end

    if label == "disabledynmaictmpfont" then
        --BllMgr.GetSystemSettingBLL():SetAvailableData(value)
        return PlayerPrefs.GetBool("disable dynmaic tmp font", true)
    end

    if label == "throttleacquiretest" then
        return BllMgr.GetLoginBLL():GetIsThrottleAcquireTest()
    end

    if label == "highlight holdscene" then
        return PlayerPrefs.GetBool("highlight holdscene", false)
    end

    if label == "download backstage" then
        return PlayerPrefs.GetBool("download_backstage", false)
    end

    if label == "wwiselogenable" then
        return WwiseMgr.GetLogEnable()
    end

    if label == "stage hold uimgr" then
        return UIMgr.GetTakeSnapShotEnable()
    end

    if label == "close hotupdate" then
        return PlayerPrefs.GetBool('IS_CLOSE_RES_UPDATE', false)
    end

    if label == "stage open" then
        return ChapterStageManager.GetIsOpenPorStage()
    end

    if label == "instantiate async" then
        return Res.GetInstantiateAsync()
    end

    if label == "synchronize full data" then
        return GrpcMgr.GetIsAutoSendSyncUserTotalData()
    end

    if label == "showfps" then
        return CS.X3Game.GameMgr.DrawFps
    end

    if label == "mainui dofkeeptheedge" then
        return BllMgr.GetMainHomeBLL():GetDofKeepTheEdge()
    end

    if label == "confideskipalitoken" then
        return BllMgr.GetDailyConfideBll():GetIsForceNotCheckToken()
    end

    return self:_GetBattleGM(label)
end

function GMCommandBLL:ShowBattledData()
    return ShowBattledData
end

function GMCommandBLL:CloseGMWnd()
    SendWhenClose = false
    UIMgr.Close(UIConf.GMEntranceTopWnd)
    UIMgr.Close(UIConf.GMWnd)
end

return GMCommandBLL