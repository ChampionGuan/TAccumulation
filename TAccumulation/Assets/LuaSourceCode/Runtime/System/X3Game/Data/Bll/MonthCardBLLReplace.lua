---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yizhimao002.
--- DateTime: 2023/1/6 20:15
---
---@class MonthCardBLLReplace:BaseBll
local MonthCardBLLReplace = class("MonthCardBLLReplace", BaseBll)
local MonthCardConst = require("Runtime.System.X3Game.GameConst.MonthCardConst")
local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")
function MonthCardBLLReplace:Init()
    EventMgr.AddListener(MonthCardConst.Event.MonthCardDailyReset, self.OnDailyResetEventResponse, self)
    EventMgr.AddListener(MonthCardConst.Event.GetRewardSuc, self.OnGetRewardReply, self)
    EventMgr.AddListener(MonthCardConst.Event.MonthCardUpdate, self.OnDataUpdate, self)
end

---@param monthCardID number
function MonthCardBLLReplace:OnDataUpdate()
    self:SetFreeSignCount()
    self:SetFreeStaminaComplementCount()
    self:SetMaxStaminaCount()
    self:UpdateMallMonthCardRed()
    EventMgr.Dispatch(ShopMallConst.ShopEvent.SHOP_RED_POINT_CHECK)
    EventMgr.Dispatch("PowerChangedEventCallBack")
    EventMgr.Dispatch("WelfareEvent_MonthCard_UpdateMonthCardData")
end
--领奖返回
---@param monthCardID number
function MonthCardBLLReplace:OnGetRewardReply(monthCardID)
    SelfProxyFactory.GetMonthlyCardReplaceProxy():UpdateCardDailyRewardFlag(monthCardID)
end
---请求月卡数据
function MonthCardBLLReplace:GetMonthCardDataRequest()
    GrpcMgr.SendRequest(RpcDefines.GetMonthCardDataRequest, {}, true)
end

---请求更新月卡数据
function MonthCardBLLReplace:MonthCardUpdateRequest()
    GrpcMgr.SendRequest(RpcDefines.MonthCardUpdateRequest, {}, true)
end

---请求获取月卡每日奖励
---@param monthCardID number
---@param cacheRequest bool 是否缓存发送参数
function MonthCardBLLReplace:GetDailyRewardRequest(monthCardID, cacheRequest)
    GrpcMgr.SendRequest(RpcDefines.GetDailyRewardRequest, { MonthCardID = monthCardID }, cacheRequest)
end

---请求使用体验卡(协议已改，暂时弃用)
---@param experienceCardID number 月卡体验卡的Id
---@param experienceCardNum number 使用的数量
function MonthCardBLLReplace:UseMonthCardExperienceCardRequest(experienceCardId, experienceCardNum)
    local paramTab = { ExperienceCardID = experienceCardId, Num = experienceCardNum }
    GrpcMgr.SendRequest(RpcDefines.UseMonthCardExperienceCardRequest, paramTab, true)
end

---使用全部体验卡
---@param cardIdList table 体验卡Id列表
function MonthCardBLLReplace:UseAllMonthCardExperienceCard(cardIdList)
    -- 目前是使用全部体验卡才刷新红点，因为使用接口唯一（后期多卡红点则需要拆分）
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_MONTH_ACTIVATE, 0)
    local tab = {}
    local ExperienceCards = {}
    for k, v in pairs(cardIdList) do
        local experCardId = v.ID
        local experCardItemNum = v.Num
        if (experCardItemNum > 0) then
            ExperienceCards[experCardId] = experCardItemNum
        end
    end
    tab.ExperienceCards = ExperienceCards
    GrpcMgr.SendRequest(RpcDefines.UseMonthCardExperienceCardRequest, tab, true)
end

---@return bool 是否有可以领取的月卡奖励
function MonthCardBLLReplace:IsCanGetDailyReward()
    local monthlyCardCfg = self:GetAllCfgMonthlyCard()
    local result = false
    for k, v in pairs(monthlyCardCfg) do
        local haveRewards = self:GetIsCanGetDailyRewards(v.ID)
        --local popupID = MonthCardConst.RewardTipsMap[v.ID]
        --if not ErrandMgr.CheckTipsIsAdd(popupID) then
        --    if haveRewards then
        --        ErrandMgr.AddTips(popupID,v.ID)
        --    end
        --else
        --    if not haveRewards then
        --        ErrandMgr.ClearTips(popupID)
        --    end
        --end
        if haveRewards then
            return true
        end
    end
    return result
end

---获取每日奖励是否可以领取
---@param monthCardID number 月卡ID
---@return boolean
function MonthCardBLLReplace:GetIsCanGetDailyRewards(monthCardID)
    local curTime = TimerMgr.GetCurTimeSeconds()
    local cardIds = self:GetHaveCardID(curTime)
    local nowTransTime = self:GetNowTimeWithYearMonthDay(curTime)
    local haveCard = false
    for i, v in ipairs(cardIds) do
        if v == monthCardID then
            haveCard = true
            break
        end
    end
    return haveCard and (not self:GetNowDailySignInState(monthCardID, nowTransTime.day))
end
---获取月卡体验券体验天数
---@param Id number 月卡体验券（月卡体验卡道具Id）
function MonthCardBLLReplace:GetExperCardDayNum(Id)
    local data = LuaCfgMgr.Get("Item", Id)
    return data.IntExtra2
end

---判断月卡的每日奖励领取状态
---@param monthCardId number 月卡Id
---@param nowDay int 当天日期
---@return boolean  true:已签到 false:为未签到
function MonthCardBLLReplace:GetNowDailySignInState(monthCardId, nowDay)
    if not nowDay then
        local curTime = TimerMgr.GetCurTimeSeconds()
        local nowTransTime = self:GetNowTimeWithYearMonthDay(curTime)
        nowDay = nowTransTime.day
    end
    local getRewardFlagMap = SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetDailyRewardFlagMap()
    local getRewardFlag = getRewardFlagMap and getRewardFlagMap[monthCardId] or false
    return getRewardFlag and (getRewardFlag >> nowDay & 1) == 1 or false
end
---@return table 返回无序的table ,key 月卡ID ,value 到期的时间戳
function MonthCardBLLReplace:GetMonthCardTimeMap()
    return SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetMonthCardTimeMap() or {}
end
---检查月卡是否过期，如果过期，更新数据
function MonthCardBLLReplace:CheckMonthCardEnable()
    --local curDate = TimerMgr.GetCurDate()
    local time = TimerMgr.GetCurTimeSeconds()
    local monthCardTab = self:GetMonthCardTimeMap()
    --if curDate.day == 1 then
    --    for k, v in pairs(monthCardTab) do
    --        SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():UpdateDailyRewardFlagMapValue(k, 0)
    --    end
    --end
    local deleteTb = {}
    for k, v in pairs(monthCardTab) do
        if time >= v then
            table.insert(deleteTb, k)
        end
    end
    for i, v in ipairs(deleteTb) do
        SelfProxyFactory.GetMonthlyCardReplaceProxy():CleanMonthCardData(v)
    end
end

---根据月卡特权设置免费签到，免费签到补领的次数
function MonthCardBLLReplace:SetFreeSignCount()
    ---根据月卡特权设置免费签到，免费补领的次数
    local freeReSignInLimit = self:GetCardPowerParam(MonthCardConst.CardPowerTypeID.FreeSignType)
    if freeReSignInLimit == true then
        freeReSignInLimit = math.maxinteger
    end
    SelfProxyFactory.GetSignProxy():GetSignData():SetFreeReSignInLimit(freeReSignInLimit)
end

---根据月卡特权设置免费签到，免费体力补领的次数
function MonthCardBLLReplace:SetFreeStaminaComplementCount()
    ---根据月卡特权设置免费签到，免费补领的次数
    local freeStaminaComplementLimit = self:GetCardPowerParam(MonthCardConst.CardPowerTypeID.FreeStaminaComplementType)
    if freeStaminaComplementLimit == true then
        freeStaminaComplementLimit = math.maxinteger
    end
    SelfProxyFactory.GetSignProxy():GetSignData():SetFreeStaminaComplementLimit(freeStaminaComplementLimit)
end

---根据月卡特权设置月卡体力上限
function MonthCardBLLReplace:SetMaxStaminaCount()
    ---根据月卡特权设置免费签到，免费补领的次数
    local maxStaminaLimit = self:GetCardPowerParam(MonthCardConst.CardPowerTypeID.PowerLimit)
    SelfProxyFactory.GetSignProxy():GetSignData():SetMaxStaminaCount(maxStaminaLimit)
end

---获取月卡权限增加的体力上限值
function MonthCardBLLReplace:GetMaxStaminaCount()
    return SelfProxyFactory.GetSignProxy():GetSignData():GetMaxStaminaCount()
end

---更新月卡DataView数据
---全量推
---@param data pbcmessage.MonthCardData
function MonthCardBLLReplace:SetMonthCardData(data)
    SelfProxyFactory.GetMonthlyCardReplaceProxy():OnMonthCardDataReply(data)
end
---增量推
---@param data pbcmessage.MonthCardData
function MonthCardBLLReplace:UpdateMonthCardData(data)
    SelfProxyFactory.GetMonthlyCardReplaceProxy():OnMonthCardDataUpdateReply(data)
    if data.ActiveMonthCardMap then
        ---有新增的月卡
        --self:IsCanGetDailyReward()
        EventMgr.Dispatch(MonthCardConst.Event.MonthCardActive)
    end
end

---返回需要表示的时间格式
---@param endTime number
---@return number,number
function MonthCardBLLReplace:CheckTimeNeedShowType(endTime)
    local curTime = TimerMgr.GetCurTimeSeconds()
    local passTime = endTime - curTime
    local timeType = 0
    if passTime < 0 then
        timeType = MonthCardConst.LeftTimeShowType.None
    elseif 0 <= passTime and passTime < 60 then
        timeType = MonthCardConst.LeftTimeShowType.Second
    elseif 60 <= passTime and passTime < 3600 then
        timeType = MonthCardConst.LeftTimeShowType.Minute
    elseif 3600 <= passTime and passTime < 86400 then
        timeType = MonthCardConst.LeftTimeShowType.Hour
    else
        timeType = MonthCardConst.LeftTimeShowType.Day
    end
    return timeType, passTime
end



---一键返回剩余时间文本 
---@param endTime number
function MonthCardBLLReplace:GetTimeNeedShowText_OneKey(endTime)
    local leftTimeDesc = GameHelper.GetLeftTimeDes(endTime)
    return leftTimeDesc
end

---每日5点过天刷新事件
function MonthCardBLLReplace:OnDailyResetEventResponse()
    ---检查月卡状态
    self:CheckMonthCardEnable()
    ---检查领取状态
    --self:IsCanGetDailyReward()
end

---@param id int monthCardID
---@return int|nil
function MonthCardBLLReplace:GetMonthCardData(id)
    local data = self:GetMonthCardTimeMap()
    return data[id]
end

---@param powerId int powerId
---@return int|nil
function MonthCardBLLReplace:GetCardPowerData(powerId)
    local data = SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetCardPowerMap()
    return data[powerId]
end

---判断还未领取奖励的月卡剩余时间小于3天
---@param day int
---@return bool
function MonthCardBLLReplace:IsMonthCardResidueThreeDay(day)
    local nowDay = TimerMgr.GetCurTimeSeconds()
    local monthCardTab = self:GetMonthCardTimeMap()
    for k, v in pairs(monthCardTab) do
        if (v - nowDay) < (3 * 24 * 3600)
                and self:GetMonthCardGotRewardByID(k, day) == 0 then
            return true
        end
    end
    return false
end

---判定月卡特权状态
---@param powerTypeID cfg.MonthlyCardPower.PowerID 特权ID
---@return int|bool int 代表具体的值，0代表没有特权，bool代表是否触发 ,
function MonthCardBLLReplace:getCardPowerParam(powerTypeID)
    local powerParam = 0
    local cardPowerData = SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetCardPowerMap()
    if cardPowerData == nil then
        return powerParam
    end
    local selectData = self:GetCfgMonthlyCardPower(powerTypeID)
    for k, v in pairs(cardPowerData) do
        local cfgCardPowerData = self:GetCfgMonthlyCardPower(k)
        if cfgCardPowerData.PowerTypeID ~= nil and cfgCardPowerData.PowerTypeID == selectData.PowerTypeID then
            local powerDefinitionCfgData = LuaCfgMgr.Get("MonthlyCardPowerDefinition", selectData.PowerTypeID)
            local cardPowerType = powerDefinitionCfgData.CardPowerType
            if cardPowerType == MonthCardConst.CardPowerType.Count then
                powerParam = powerParam + cfgCardPowerData.PowerPara * v
            elseif cardPowerType == MonthCardConst.CardPowerType.Max then
                powerParam = math.max(powerParam, cfgCardPowerData.PowerPara * v)
            elseif cardPowerType == MonthCardConst.CardPowerType.Trigger then
                return true
            end
        end
    end
    return powerParam
end
---判定月卡特权状态
---@param powerTypeID cfg.MonthlyCardPower.PowerID 特权ID
---@return int|bool int 代表具体的值，0代表没有特权，bool代表是否触发 ,
function MonthCardBLLReplace:GetCardPowerParam(powerType)
    local monthlyCardPowerCfg = self:GetAllCfgMonthlyCardPower()
    local powerID
    for k, v in pairs(monthlyCardPowerCfg) do
        if v.PowerTypeID == powerType then
            powerID = v.PowerID
            break
        end
    end
    if not powerID then
        Debug.Log("【月卡】MonthlyCardPower表没有PowerTypeID：", powerType)
        return 0
    end
    return self:getCardPowerParam(powerID)
end
---当日领奖情况
---@param nowDay int
---@return bool 是否领取月卡奖励
---@return bool 是否有月卡
function MonthCardBLLReplace:GetMonthCardDayRewardState(nowDay)
    local monthRewardFlag = SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetDailyRewardFlagMap()
    if monthRewardFlag == nil then
        return true, false
    end
    local count = 0
    for k, v in pairs(monthRewardFlag) do
        count = count + 1
        local num = (v >> nowDay & 1)
        if num == 0 then
            return true, count ~= 0
        end
    end
    return false, count ~= 0
end

---返回拥有的月卡
---@param nowDay number|nil 时间戳,不穿就取当前时间
---@return  table<int> 拥有的月卡ID
function MonthCardBLLReplace:GetHaveCardID(nowDay)
    if not nowDay then
        nowDay = TimerMgr.GetCurTimeSeconds()
    end
    local idTab = {}
    local monthCardTab = self:GetMonthCardTimeMap()

    for k, v in pairs(monthCardTab) do
        if (v - nowDay) > 0 then
            idTab[#idTab + 1] = k
        end
    end
    return idTab
end

---判断拥有月卡
---@return boolean
function MonthCardBLLReplace:CheckIsHaveCard()
    local cardIdsTab = self:GetHaveCardID()
    if (#cardIdsTab) > 0 then
        return true
    end
    return false
end

---暂不使用，需要配合Card的RewardFlag测试验证
---@param cardID int
---@param nowDay int
---@return int
function MonthCardBLLReplace:GetMonthCardGotRewardByID(cardID, nowDay)
    local monthRewardFlag = SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetDailyRewardFlagMap()
    if monthRewardFlag == nil then
        return false
    end
    local data = monthRewardFlag[cardID]
    if data == nil then
        return false
    end
    local num = (data >> nowDay & 1)
    return num
end

---获取该月卡的激活时长
---@param cardID int 月卡Id
function MonthCardBLLReplace:GetMonthCardDurationByID(cardID)
    local data = self:GetCfgMonthlyCard(cardID)
    return data.Duration
end

-----获取该月卡的每日DailyReward
-----@param cardID int 月卡Id
--function MonthCardBLLReplace:GetMonthCardDailyRewardByID(cardID)
--    local data = self:GetCfgMonthlyCard(cardID)
--    return data.DailyReward
--end
--
-----获取该月卡的购买返利BuyReward
-----@param cardID int 月卡Id
--function MonthCardBLLReplace:GetMonthCardBuyRewardByID(cardID)
--    local data = self:GetCfgMonthlyCard(cardID)
--    return data.BuyReward
--end

---检测是否在月卡有期限内
---@param monthCardId number 月卡的Id
---@return boolean
function MonthCardBLLReplace:CheckInDueTime(monthCardId)
    local monthCardTimeMap = self:GetMonthCardTimeMap()
    local curTime = TimerMgr.GetCurTimeSeconds()
    local cardTime = monthCardTimeMap[monthCardId]
    return cardTime and curTime < cardTime or false
end

---返回月卡剩余天数
---@param monthCardId number 月卡的Id，目前只有一个月卡，Id为1
---@return number 月卡过期时间
function MonthCardBLLReplace:GetRemainCardTime(monthCardId)
    local monthCardTimeMap = self:GetMonthCardTimeMap()
    local curTime = TimerMgr.GetCurTimeSeconds()
    if not monthCardId then
        local monthIDTab = BllMgr.GetMonthCardBLLReplace():GetHaveCardID()
        for i, v in ipairs(monthIDTab) do
            monthCardId = v
            break
        end
    end
    local cardTime = monthCardTimeMap[monthCardId]
    if cardTime ~= nil then
        return cardTime
    end
    return 0
end

---返回月卡到期时间戳
---@param monthCardId number 月卡的Id
---@return number 月卡到期时间戳
function MonthCardBLLReplace:GetRemainCardTimeStamp(monthCardId)
    local monthCardTimeMap = self:GetMonthCardTimeMap()
    return monthCardTimeMap[monthCardId] or 0
end

---获取拥有的月卡体验券天数总数
---@param monthCardId number
function MonthCardBLLReplace:GetHasExperCardDayCount(monthCardId)
    local daySum = 0
    local ExperCardIds = self:GetHasExperCardIdListByMonthCardId(monthCardId)
    for i, v in ipairs(ExperCardIds) do
        local cardCount = BllMgr.GetItemBLL():GetItemNum(v)
        local cardDayNum = self:GetExperCardDayNum(v)
        daySum = daySum + cardCount * cardDayNum
    end
    return daySum
end

---获取和月卡Id关联的月卡体验卡道具
---@param monthCardId number 月卡Id
---@return table table(itemCfgData)
function MonthCardBLLReplace:GetHasExperCardDataByMonthCardId(monthCardId)
    --local experCardItemData = LuaCfgMgr.GetDataByCondition("Item", {Type = MonthCardConst.ExperCardType, IntExtra1 = monthCardId})
    local experCardItemData = LuaCfgMgr.GetListByCondition("Item", { Type = MonthCardConst.ExperCardType, IntExtra1 = monthCardId })
    return experCardItemData
end

---获取和月卡Id关联的月卡体验卡道具Id列表
---@param monthCardId number 月卡Id
---@return table table(itemCfgData)
function MonthCardBLLReplace:GetHasExperCardIdListByMonthCardId(monthCardId)
    local experCardItemData = LuaCfgMgr.GetListByCondition("Item", { Type = MonthCardConst.ExperCardType, IntExtra1 = monthCardId })
    local idsTab = {}
    for k, v in pairs(experCardItemData) do
        table.insert(idsTab, v.ID)
    end
    table.sort(idsTab, function(a, b)
        return a < b
    end)
    return idsTab
end

---通过月卡体验卡道具Id获取关联的月卡Id
---@param monthExperCardId number 月卡体验卡道具Id
---@return number
function MonthCardBLLReplace:GetCardIdByExperCardId(monthExperCardId)
    local itemData = LuaCfgMgr.Get("Item", monthExperCardId)
    local monthCardId = itemData.IntExtra1
    return monthCardId
end

---获取全部月卡体验卡Id（道具类型：102）
------@return table table(itemCfgData)
function MonthCardBLLReplace:GetAllExperCardIdList()
    local experCardItemData = LuaCfgMgr.GetListByCondition("Item", { Type = MonthCardConst.ExperCardType })
    local idsTab = {}
    for k, v in pairs(experCardItemData) do
        table.insert(idsTab, v.ID)
    end
    table.sort(idsTab, function(a, b)
        return a < b
    end)
    return idsTab
end

---获取月卡cfg配置 
---@param monthCardId number 月卡Id
---@return cfg.MonthlyCard
function MonthCardBLLReplace:GetCardCfgDataById(monthCardId)
    local cfgData = self:GetCfgMonthlyCard(monthCardId)
    return cfgData
end

---获取月卡配置信息-价格Price
---@param monthCardId number 月卡Id
---@return number
function MonthCardBLLReplace:GetCardPriceById(monthCardId)
    local payID = self:GetCardPayIdById(monthCardId)
    local price , isSuc = BllMgr.GetChargeBLL():GetMoneyByPayId(payID)
    return price , isSuc
end

---获取月卡配置信息-支付ID
---@param monthCardId number 月卡Id
---@return number
function MonthCardBLLReplace:GetCardPayIdById(monthCardId)
    local cfgData = self:GetCfgMonthlyCard(monthCardId)
    return cfgData.PayID
end

---获取红点状态
---@return bool
function MonthCardBLLReplace:GetMonthlyRedPointShow()
    local monthRedPoint = SelfProxyFactory.GetMonthlyCardReplaceProxy():GetData():GetRedPointState()
    if monthRedPoint == nil then
        return false
    end
    return monthRedPoint
end

---商城月卡红点刷新
function MonthCardBLLReplace:UpdateMallMonthCardRed()
    local cfg = self:GetAllCfgMonthlyCard()
    local cardNum = 0
    for k, v in pairs(cfg) do
        cardNum = self:GetHasExperCardDayCount(v.ID) + cardNum
    end
    --体验卡激活红点 - 拥有体验卡即激活
    local hasExperCardState = cardNum > 0
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_MONTH_ACTIVATE, hasExperCardState and 1 or 0)
    --月卡过期红点 - 判断月卡首次过期
    local haveCardState = self:CheckIsHaveCard()
    local red_count = 0
    if (haveCardState) then
        self:SaveMonthExpireRed(MonthCardConst.ExpireRed.HaveCard)  --表示购买了月卡
    else
        local beforeRedCount = self:GetMonthExpireRed()
        if (beforeRedCount == MonthCardConst.ExpireRed.None) then
            --表示未购买过月卡，无红点
        elseif (beforeRedCount == MonthCardConst.ExpireRed.HaveCard) then
            --表示购买了月卡，现在过期了，有红点
            red_count = 1
            self:SaveMonthExpireRed(MonthCardConst.ExpireRed.ExpireState)  --表示购买了月卡
        elseif (beforeRedCount == MonthCardConst.ExpireRed.HasCheck) then
            --表示已Check，过期中，无红点
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_MONTH_EXPIRE, red_count)
end
---@return string 获取所有拥有的月卡体验券天数总数
function MonthCardBLLReplace:GetAllHasExperCardDayCount()
    local result = 0
    local monthIDTab = BllMgr.GetMonthCardBLLReplace():GetHaveCardID()
    for i, v in ipairs(monthIDTab) do
        result = self:GetHasExperCardDayCount(v)
    end
    return result
end
function MonthCardBLLReplace:GetMonthExpireRed()
    local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_SHOP_MONTH_EXPIRE)
    return value
end

---@param value number
function MonthCardBLLReplace:SaveMonthExpireRed(value)
    -- value: [0:表示未购买过|1:表示购买过月卡]
    RedPointMgr.Save(value, X3_CFG_CONST.RED_SHOP_MONTH_EXPIRE)
end

---判断当前时间所属的日期
---@param time int
---@return _date
function MonthCardBLLReplace:GetNowTimeWithYearMonthDay(time)
    local nowtime = TimerMgr.GetDateByUnixTimestamp(time)
    if nowtime.hour < 5 then
        nowtime.day = nowtime.day - 1
        if nowtime.day == 0 then
            nowtime.month = nowtime.month - 1
            if nowtime.month == 0 then
                nowtime.month = 12
                nowtime.year = nowtime.year - 1
            end
            nowtime.day = tonumber(os.date("%d", os.time({ year = nowtime.year, month = nowtime.month + 1, day = 0 })))
        end
    end
    return nowtime
end
---@param id number condition枚举
---@param datas table<int,string> 看表吧CommonCondition
---@return bool 检查是否通过
function MonthCardBLLReplace:CheckCondition(id, datas)
    ---某个ID的月卡是否有效
    if id == X3_CFG_CONST.CONDITION_MONTHLYCARD_CARD_ISACTIVE then
        local monthCardID = tonumber(datas[1])
        local checkEnable = tonumber(datas[2]) == 1
        if not self.proxy then
            self.proxy = SelfProxyFactory.GetMonthlyCardReplaceProxy()
        end
        return self:CheckInDueTime(monthCardID) == checkEnable
        ---某个特权是否有效
    elseif id == X3_CFG_CONST.CONDITION_MONTHLYCARD_POWER_ISACTIVE then
        if not self.proxy then
            self.proxy = SelfProxyFactory.GetMonthlyCardReplaceProxy()
        end
        local checkEnable = tonumber(datas[2]) == 1
        return self:CheckCardPowerEnableByPowerTypeID(tonumber(datas[1])) == checkEnable ---datas[1] 类型 MonthCardConst.CardPowerTypeID
    end
    return false
end
---@param powerTypeID cfg.MonthlyCardPower.PowerID
---@return bool 返回某个和月卡相关的特权，当前是否拥有了
function MonthCardBLLReplace:CheckCardPowerEnableByPowerTypeID(powerTypeID)
    local result = self:getCardPowerParam(powerTypeID)
    if result == 0 then
        return false
    end
    return result and true or false
end
---@param powerType MonthCardConst.CardPowerTypeID 特权类型
---@return bool 返回某个和月卡相关的特权，当前是否拥有了
function MonthCardBLLReplace:CheckCardPowerEnable(powerType)
    local result = self:GetCardPowerParam(powerType)
    if result == 0 then
        return false
    end
    return result and true or false
end
---@public 通过特权类型，打开拥有这个特权的月卡购买界面（如果多个月卡都有这个特权，打开最便宜的）
---@param PowerType MonthCardConst.CardPowerTypeID 特权类型
function MonthCardBLLReplace:OpenBuyWindowByPowerID(PowerType)
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_SHOP) then
        --商城系统未解锁
        UICommonUtil.ShowMessage(SysUnLock.LockTips(X3_CFG_CONST.SYSTEM_UNLOCK_SHOP))
        return
    end
    local monthCardID = self:GetMonthCardIDByPowerType(PowerType)
    if monthCardID then
        UIMgr.Open(UIConf.ShopMonthBuyWnd, monthCardID)
    end
end

---@public 通过特权类型，打开月卡购买界面（如果不传，打开最便宜的）
---@param monthCardID number 月卡ID
function MonthCardBLLReplace:OpenBuyWindow(monthCardID)
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_SHOP) then
        --商城系统未解锁
        UICommonUtil.ShowMessage(SysUnLock.LockTips(X3_CFG_CONST.SYSTEM_UNLOCK_SHOP))
        return
    end
    if not monthCardID then
        monthCardID = self:GetCheapMonthCardID()
    end
    UIMgr.Open(UIConf.ShopMonthBuyWnd, monthCardID)
end

---@public Jump打开月卡购买界面
---@param monthCardID number 月卡ID 优先级最高
---@param PowerType MonthCardConst.CardPowerTypeID 特权类型
function MonthCardBLLReplace:JumpOpenBuyWindow(monthCardID,PowerType)
    if ( not monthCardID or monthCardID == 0) and PowerType and PowerType ~= 0 then  ---如果不传monthCardID，但是传了PowerType
        self:OpenBuyWindowByPowerID(PowerType)
        return
    end
    self:OpenBuyWindow(monthCardID)
end

---@public 通过特权类型，询问(二次确认)打开拥有这个特权的月卡购买界面（如果多个月卡都有这个特权，打开最便宜的）
---@param PowerType MonthCardConst.CardPowerTypeID 特权类型
function MonthCardBLLReplace:AskOpenBuyWindowByPowerID(PowerType)
    local monthlyCardPowerCfg = self:GetAllCfgMonthlyCardPower()
    local name = ""
    for k, v in pairs(monthlyCardPowerCfg) do
        if v.PowerTypeID == PowerType then
            name = UITextHelper.GetUIText(v.Name)
            break
        end
    end
    local monthCardName = self:GetMonthCardNameByPowerType(PowerType)
    local messageStr = UITextHelper.GetUIText(UITextConst.UI_TEXT_9333, name, monthCardName)
    UICommonUtil.ShowMessageBox(messageStr, {
        { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_5701, btn_call = function()
            --显示月卡购买
            self:OpenBuyWindowByPowerID(PowerType)
        end },
        { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_text = UITextConst.UI_TEXT_5702 }
    })
end
---@return number|nil 可以购买的最便宜的月卡ID，如果找不到，给个最小ID的月卡
function MonthCardBLLReplace:GetCheapMonthCardID()
    local monthlyCardCfg = self:GetAllCfgMonthlyCard()
    local cheapMonthCard
    local cost
    local tempCard ---如果找不到最便宜的月卡，保底给个最小ID的月卡
    for k, v in pairs(monthlyCardCfg) do
        if not tempCard then
            tempCard = v.ID
        else
            if tempCard > v.ID then
                tempCard = v.ID
            end
        end
        local payInfo = LuaCfgMgr.Get("PayInfo", v.PayID)
        if payInfo and v.PayID ~= 0 then
            if not cost then
                cost = payInfo.Money
            end
            if payInfo.Money <= cost then
                cheapMonthCard = v.ID
                cost = payInfo.Money
            end
        end
    end
    if not cheapMonthCard then
        Debug.LogError("PayInfo没有配置可购买的月卡,默认给最小ID的月卡！！！")
        cheapMonthCard = tempCard
        if not cheapMonthCard then
            Debug.LogError("未配置任何月卡！！！")
            return nil
        end
    end
    return cheapMonthCard
end

---@return bool 月卡是否可以购买
function MonthCardBLLReplace:GetMonthCardIsCanBuy(monthCardID)
    local cfg = self:GetCardCfgDataById(monthCardID)
    if cfg.PayID == 0 then
        return false
    end
    local payInfo = LuaCfgMgr.Get("PayInfo", cfg.PayID)
    return payInfo ~= nil
end

---@public 通过特权类型，返回对应的月卡ID（如果多个月卡都有这个特权，打开最便宜的）
---@param PowerTypeID MonthCardConst.CardPowerTypeID 特权类型
function MonthCardBLLReplace:GetMonthCardIDByPowerType(PowerType)
    local monthlyCardCfg = self:GetAllCfgMonthlyCard()
    local cheapMonthCard
    local cost
    local monthlyCardPowerCfg = self:GetAllCfgMonthlyCardPower()
    local powerID
    for k, v in pairs(monthlyCardPowerCfg) do
        if v.PowerTypeID == PowerType then
            powerID = v.PowerID
            break
        end
    end
    if not powerID then
        Debug.LogError("MonthlyCardPower表没有PowerTypeID：", PowerType)
        return
    end
    local tempCard ---如果找不到最便宜的月卡，保底给个最小ID的月卡
    for k, v in pairs(monthlyCardCfg) do
        if not tempCard then
            tempCard = v.ID
        else
            if tempCard > v.ID then
                tempCard = v.ID
            end
        end
        for i, j in ipairs(v.CardPowerGroup) do
            ---j是MonthlyCardPower里的PowerID
            if powerID == j then
                local payInfo = LuaCfgMgr.Get("PayInfo", v.PayID)
                if payInfo then
                    if not cost then
                        cost = payInfo.Money
                    end
                    if payInfo.Money <= cost then
                        cheapMonthCard = v.ID
                        cost = payInfo.Money
                    end
                    break
                end
            end
        end
    end
    if not cheapMonthCard then
        Debug.LogWarning("PayInfo没有配置可购买的月卡,默认给最小ID的月卡！！！")
        cheapMonthCard = tempCard
        if not cheapMonthCard then
            Debug.LogError("未配置任何月卡！！！")
            return nil
        end
    end
    return cheapMonthCard
end
---@public 通过特权类型，返回对应的月卡ID名字（如果多个月卡都有这个特权，打开最便宜的）
---@param powerType MonthCardConst.CardPowerTypeID 特权类型
function MonthCardBLLReplace:GetMonthCardNameByPowerType(powerType)
    local monthCardID = self:GetMonthCardIDByPowerType(powerType)
    if monthCardID then
        return UITextHelper.GetUIText(self:GetCardCfgDataById(monthCardID).Name) or ""
    end
    return ""
end

function MonthCardBLLReplace:GetAllCfgMonthlyCard()
    return LuaCfgMgr.GetAll("MonthlyCard") or {}
end

---@param key number
function MonthCardBLLReplace:GetCfgMonthlyCard(key)
    return LuaCfgMgr.Get("MonthlyCard", key) or {}
end

function MonthCardBLLReplace:GetAllCfgMonthlyCardPower()
    return LuaCfgMgr.GetAll("MonthlyCardPower") or {}
end

---@param key number
function MonthCardBLLReplace:GetCfgMonthlyCardPower(key)
    return LuaCfgMgr.Get("MonthlyCardPower", key) or {}
end

return MonthCardBLLReplace