---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/4/11 16:54
---

---@class CustomRecordBLL
local CustomRecordBLL = class("CustomRecordBLL", BaseBll)

---@type CustomRecordProxy
local proxy = SelfProxyFactory.GetCustomRecordProxy()
---@type table<int, table>
local interfaceList = { }

---初始化逻辑
function CustomRecordBLL:OnInit()
    proxy = SelfProxyFactory.GetCustomRecordProxy()
    interfaceList[DataSaveCustomType.DataSaveCustomTypeDailyDateEnterCount] = BllMgr.GetDailyDateBLL()
    interfaceList[DataSaveCustomType.DataSaveCustomTypeDailyDateBuyCount] = BllMgr.GetDailyDateBLL()
    interfaceList[DataSaveCustomType.DataSaveCustomTypeStageNum] = BllMgr.GetChapterAndStageBLL()
    interfaceList[DataSaveCustomType.DataSaveCustomTypeStageBuyTimes] = BllMgr.GetChapterAndStageBLL()
end

---初始化数据
---@param recordGroup table<number, pbcmessage.CustomRecordGroup>
function CustomRecordBLL:InitData(recordGroups)
    if recordGroups ~= nil then
        for k, v in pairs(recordGroups) do
            self:UpdateRecordGroup(k, v)
        end
    end
end

---更新Record组数据
---@param customType int
---@param recordGroup pbcmessage.CustomRecordGroup
function CustomRecordBLL:UpdateRecordGroup(customType, recordGroup)
    for _, customRecord in pairs(recordGroup.Records) do
        self:UpdateRecord(customType, customRecord)
    end
end

---更新Record组数据
---@param customType int
---@param customRecord pbcmessage.CustomRecord
function CustomRecordBLL:UpdateRecord(customType, customRecord)
    local customRecordData, isNew = proxy:UpdateCustomRecord(customType, customRecord)
    if isNew then
        local type, detail = self:GetRefreshSchedule(customType, table.unpack(customRecord.SubIDs))
        customRecordData.refreshType = type
        customRecordData.refreshDetail = detail
    end
    if customRecordData.timerId ~= 0 then
        TimerMgr.Discard(customRecordData.timerId)
    end
    customRecordData.lastRefreshTime = customRecord.LastRefreshTime
    customRecordData.nextRefreshTime = TimeRefreshUtil.GetNextRefreshTime(customRecordData.lastRefreshTime, customRecordData.refreshType, customRecordData.refreshDetail)
    if customRecordData.nextRefreshTime >= TimerMgr.GetCurTimeSeconds() then
        customRecordData.timerId = TimerMgr.AddTimer(customRecordData.nextRefreshTime - TimerMgr.GetCurTimeSeconds(),
                function()
                    self:RefreshValue(customRecordData.key, table.unpack(customRecordData.subIDs))
                end)
    end
    EventMgr.Dispatch("CustomRecordUpdate", customRecordData.key, table.unpack(customRecordData.subIDs))
end

---刷新Value
---@param customType int
function CustomRecordBLL:RefreshValue(customType, ...)
    local customRecordData = proxy:GetCustomRecord(customType, ...)
    if customRecordData then
        customRecordData.lastRefreshTime = customRecordData.nextRefreshTime
        customRecordData.value = self:GetRefreshValue(customRecordData.value, customType, ...)
        EventMgr.Dispatch("CustomRecordUpdate", customType, ...)
    end
end

---返回刷新规则
---@param customType int
---@return int, string
function CustomRecordBLL:GetRefreshSchedule(customType, ...)
    local interface = interfaceList[customType]
    if interface and interface.GetRefreshSchedule then
        return interface:GetRefreshSchedule(customType, ...)
    end
    return nil
end

---返回刷新值
---@param customType int
---@return int
function CustomRecordBLL:GetRefreshValue(curValue, customType, ...)
    local interface = interfaceList[customType]
    if interface and interface.GetRefreshValue then
        return interface:GetRefreshValue(curValue, customType, ...)
    end
    return 0
end

return CustomRecordBLL