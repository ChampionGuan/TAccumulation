--- 
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sms.
--- DateTime: 2023/6/12 12:46
--- 彩蛋系统

---@class EasterEggBLL
local EasterEggBLL = class("EasterEggBLL", BaseBll)

-- Dev Log： 
-- 彩蛋的检查Active逻辑只在两种情况下发生: 1. 登陆时的全量检查; 2. 对应proto更新;


-- 发送请求时的时间间隔 (s)
local REQUEST_TIME_INTERVAL = 0.5

function EasterEggBLL:OnInit()
    ---@type number timer UID -- 定时器用于合并request
    self.effectRequestTimer = nil
    ---@type table<number, bool> 彩蛋IdMap -- 用于合并request
    self.effectRequestEEIdMap = {}
    ---@type table<number, table<number, number>>   table<ConditionType, table<number, number>>> 索引表
    self.conditionTypeMap = {}
    
    -- 通过配置表建立ConditionType和EasterEggId的索引关系
    self:CreateConditionTypeMap()
    
    -- DebugMgr 初始化
    EEDebugMgr:Init()
    
    ---@type EETimerUtil 用于管理彩蛋 "再次生效" 的定时器逻辑 
    self.EETimerUtil = require("Runtime.System.X3Game.Modules.EasterEggSys.EETimerUtil")
    self.EETimerUtil:OnInit()
    
    ---@type EEConditionTimerUtil 用于管理ConditionType为5类型的彩蛋定时器
    self.EEConditionTimerUtil = require("Runtime.System.X3Game.Modules.EasterEggSys.EEConditionTimerUtil")
    self.EEConditionTimerUtil:OnInit()

    -- 监听所有ConditionType变化时 找到对应的彩蛋 检查并更新状态
    EventMgr.AddListener(GameConst.CommonConditionUpdate, function(self, conditionTypeList)
        if table.isnilorempty(conditionTypeList) then return end
        for _, conditionType in ipairs(conditionTypeList) do
            local targetEasterEggIdList = self.conditionTypeMap[conditionType] or {}
            for _, id in ipairs(targetEasterEggIdList) do
                -- 正在监听的彩蛋埋点事件触发 打个日志用于Debug
                EEDebugMgr:CheckNoticeOnConditionTypeEventChanged(id)
                
                -- 彩蛋的检查生效逻辑
                self:CheckEffectEasterEgg(id)
            end
        end
    end, self)
    
    -- 监听来自Dialogue的业务事件 (彩蛋确认触发) 后同步服务器
    EventMgr.AddListener(EasterEggEnum.EventMap.DialogueConfirmTrigger, function(self, param)
        if table.isnilorempty(param) then Debug.LogError("EE DialogueConfirmTrigger param is nil !!--------- ") return end
        local closeCallback = param.handler
        local args = param.params
        local easterEggId = tonumber(args[1])
        self:ConfirmTrigger(easterEggId)
        if closeCallback then closeCallback() end
    end, self)
end

---@public 条件判断
function EasterEggBLL:CheckCondition(id, params)
    if id == X3_CFG_CONST.CONDITION_EASTEREGG_EFFECTIVE then
        local easterEggId = tonumber(params[1])
        local flag = tonumber(params[2])
        local isInEffect = self:CheckIfInEffect(easterEggId)
        return (flag == 0 and not isInEffect) or (flag == 1 and isInEffect)
    end
end

function EasterEggBLL:OnClear()
    self.EETimerUtil:OnClear()
    self.EETimerUtil = nil
    
    self.EEConditionTimerUtil:OnClear()
    self.EEConditionTimerUtil = nil
    
    TimerMgr.DiscardTimerByTarget(self)
    self.effectRequestTimer = nil
    
    EventMgr.RemoveListenerByTarget(self)
    
    EEDebugMgr:Delete()
end

-- "uicmd easteregg help"                                 -- 指南
-- "uicmd easteregg focus add all(彩蛋id)"                -- 增加对 '所有 / (指定Id)' 彩蛋的监听
-- "uicmd easteregg focus remove all(彩蛋id)"             -- 移除对 '所有 / (指定Id)' 彩蛋的监听
-- "uicmd easteregg dump conditionpassedidlist"           -- 打印所有condition pass的客户端彩蛋 (会检查Condition)
-- "uicmd easteregg dump all(彩蛋id)"                     -- 打印 '所有 / (指定Id)' 彩蛋数据
-- "uicmd easteregg check all(彩蛋id)"                    -- 打印 '所有 / (指定Id)' 彩蛋数据 (会检查Condition)
-- "uicmd easteregg history (彩蛋id)"                     -- 打印 '(指定Id)' 的彩蛋历史数据
-- "uicmd easteregg mock effect (彩蛋id)"                 -- 模拟Effect操作 (会检查Condition)
-- "uicmd easteregg mock trigger(彩蛋id)"                 -- 模拟Trigger操作

-- 接管处理GM指令
function EasterEggBLL:HandleGMCommand(inputList)
    if inputList[3] == "help" then
        Debug.LogError("文档在这里: https://papergames.feishu.cn/docx/J0DidpXvMowpvixjl0sc4nvPnag")
    end
    
    Debug.LogError("彩蛋GM命令执行: " .. table.dump(inputList))
    
    if inputList[3] == "focus" then                                         -- 对彩蛋的监听
        if inputList[4] == "add" then
            if inputList[5] == "all" then
                EEDebugMgr:AddFocusAll()
            else
                EEDebugMgr:AddFocusEEById(tonumber(inputList[5]))
            end
        elseif inputList[4] == "remove" then
            if inputList[5] == "all" then
                EEDebugMgr:RemoveFocusAll()
            else
                EEDebugMgr:RemoveFocusEEById(tonumber(inputList[5]))
            end 
        elseif inputList[4] == "addbytype" then
            EEDebugMgr:AddFocusEEByType(tonumber(inputList[5]))
        elseif inputList[4] == "removebytype" then
            EEDebugMgr:RemoveFocusEEByType(tonumber(inputList[5]))
        end
    elseif inputList[3] == "dump" then
        if inputList[4] == "conditionpassedidlist" then                     -- 获取所有condition pass的客户端彩蛋
            EEDebugMgr:GetConditionPassedIdList()
        elseif inputList[4] == "all" then                                   -- 打印所有彩蛋数据
            EEDebugMgr:DumpAll()
        else                                                                -- 打印指定Id彩蛋数据
            EEDebugMgr:DumpById(tonumber(inputList[4]))
        end
    elseif inputList[3] == "check" then
        if inputList[4] == "all" then                                       -- 打印所有彩蛋数据
            EEDebugMgr:DumpAll(true)
        else                                                                -- 打印指定Id彩蛋数据
            EEDebugMgr:DumpById(tonumber(inputList[4]), true)
        end
    elseif inputList[3] == "history" then                                   -- 数据历史记录查看
        EEDebugMgr:GetHistoryById(tonumber(inputList[4]))
    elseif inputList[3] == "mock" then                                      -- 客户端数据模拟 
        if inputList[4] == "conditionpass" then                             -- 模拟ConditionPass检查权限更新状态
            if inputList[5] == "add" then                                   -- 增加指定及所有Id彩蛋的Condition模拟
                if inputList[6] == "all" then
                    EEDebugMgr:AddAllMockConditionPassId()
                else
                    EEDebugMgr:AddMockConditionPassId(tonumber(inputList[7]))
                end
            elseif inputList[5] == "remove" then                            -- 减少指定及所有Id彩蛋的Condition模拟
                if inputList[6] == "all" then
                    EEDebugMgr:RemoveAllMockConditionPassId()
                else
                    EEDebugMgr:RemoveMockConditionPassId(tonumber(inputList[7]))
                end
            end
            
        elseif inputList[4] == "effect" then                                -- 模拟Effect操作
            EEDebugMgr:CheckEffectById(tonumber(inputList[5]))
        elseif inputList[4] == "trigger" then                               -- 模拟Trigger操作
            EEDebugMgr:CheckTriggerById(tonumber(inputList[5]))
        end
    end
end

---@private 检查彩蛋是否为客户端生效类型
local function __checkIfClientType(self, easterEggId)
    local eeCfg = LuaCfgMgr.Get("EasterEgg", easterEggId) if not eeCfg then Debug.LogError("EECfg not found, eeId : " .. tostring(easterEggId or "nil")) return end
    return eeCfg.ConditionType > 0
end

---@private 检查彩蛋对应condition是否满足
local function __checkIfEasterEggConditionPass(self, easterEggId)
    if DEBUG_GM and EEDebugMgr:CheckIfEEMockConditionPassed(easterEggId) then return true end

    local eeCfg = LuaCfgMgr.Get("EasterEgg", easterEggId) if not eeCfg then Debug.LogError("EECfg not found, eeId : " .. tostring(easterEggId or "nil")) return end
    local paramStr = PoolUtil.GetTable()
    table.insert(paramStr, eeCfg.Param1)
    table.insert(paramStr, eeCfg.Param2)
    table.insert(paramStr, eeCfg.Param3)
    table.insert(paramStr, eeCfg.Param4)
    table.insert(paramStr, eeCfg.Param5)

    local conditionPass, num
    
    -- Debug Safe Call
    local status, error = pcall(function()
        conditionPass, num = ConditionCheckUtil.SingleConditionCheck(eeCfg.ConditionType, paramStr)
    end)
    if not status then
        Debug.LogError("!! 彩蛋Condition逻辑检查报错（对应业务排查下）: " .. error)
    end
    
    PoolUtil.ReleaseTable(paramStr)
    return conditionPass
end

---@private 检查并更新客户端彩蛋
---@param self EasterEggBLL
---@param easterEggId number 彩蛋Id
---@param realtime bool 是否即时发送request 不传或false会在TIME_INTERVAL合并数据request
---以下三种类型的彩蛋会通过筛选 (客户端彩蛋 / 满足condition条件)
---1. 无历史生效记录的新彩蛋;
---2. 有历史生效记录的旧彩蛋; 当前处于生效状态; 生效类型(TimeType)是 "重置时效类型";
---3. 有历史生效记录的旧彩蛋; 当前未生效; CD类型(EffectCDType)不是 "不能再次生效"; CD期已过;
local function __checkEffectEasterEgg(self, easterEggId, realtime)
    -- 只处理客户端彩蛋
    if not __checkIfClientType(self, easterEggId) then return end

    -- 获取配置&数据
    local eeCfg = LuaCfgMgr.Get("EasterEgg", easterEggId) if not eeCfg then Debug.LogError("EECfg not found, eeId : " .. tostring(easterEggId or "nil")) return end
    local eeData = self:GetEasterEggData(easterEggId)

    -- 检查对应condition是否满足
    local isConditionPass = __checkIfEasterEggConditionPass(self, easterEggId)

    -- 当前是否在生效
    local isInEffect = self:CheckIfInEffect(easterEggId)

    -- Condition通过且当前未生效的彩蛋 检查能否使其生效
    if isConditionPass then
        -- 标记位 用于帮助过滤条件
        local needEffectFlag = false
        -- 这个彩蛋之前是否生效过
        local effectedBefore = eeData and eeData.EffectTime > 0

        -- 1. 无历史生效记录的新彩蛋; 直接过
        if not effectedBefore and not isInEffect then needEffectFlag = true end
        -- 2. 有历史生效记录的旧彩蛋 && 当前处于生效状态 && 生效类型(TimeType)是 "重置时效类型";
        if effectedBefore and isInEffect and eeCfg.RefreshTime == EasterEggEnum.RefreshType.ResetTime then needEffectFlag = true end
        -- 3. 有历史生效记录的旧彩蛋 && 当前未生效 && CD类型(EffectCDType)不是 "不能再次生效" && CD期已过;
        if effectedBefore and not isInEffect and eeCfg.EffectCDType ~= EasterEggEnum.EffectCDType.AlwaysCD then
            if eeCfg.EffectCDType == EasterEggEnum.EffectCDType.NoCD or TimerMgr.GetCurTimeSeconds() >= eeData.ReEffectTime then
                needEffectFlag = true
            end
        end

        -- 发送请求~ 
        if needEffectFlag then self:EasterEggEffectRequest(easterEggId, true, realtime) end
        return
    end

    -- Condition未通过且当前已生效的彩蛋 使其失效
    if not isConditionPass and isInEffect then
        self:EasterEggEffectRequest(easterEggId, false, realtime)
    end
end

---@private 通过配置表建立ConditionType和EasterEggId的索引关系
local function __createConditionTypeMapByCfg(self)
    self.conditionTypeMap = {}
    local allEasterEggCfg = LuaCfgMgr.GetAll("EasterEgg")

    local function __addEasterEggId2Map(easterEggId, conditionType)
        if not conditionType or conditionType <= 0 then return end
        self.conditionTypeMap[conditionType] = self.conditionTypeMap[conditionType] or {}
        table.insert(self.conditionTypeMap[conditionType], easterEggId)
    end

    for _, cfg in pairs(allEasterEggCfg) do
        local conditionType = cfg.ConditionType
        local easterEggId = cfg.ID

        if conditionType == X3_CFG_CONST.CONDITION_COMMONCONDITION then
            -- CommonCondition类型彩蛋 多找一层
            local conditionGroupId = tonumber(cfg.Param1)
            local targetConditionList = ConditionCheckUtil.GetCommonConditionListByGroupId(conditionGroupId)
            local conditionTypeMap = {}
            if not table.isnilorempty(targetConditionList) then
                for _, conditionCfg in ipairs(targetConditionList) do
                    if conditionCfg then
                        conditionTypeMap[conditionCfg.ConditionType] = true
                    end
                end
            end
            --Debug.LogError("createConditionTypeMap in Type 8 : " .. table.dump({easterEggId, conditionTypeMap}))
            
            -- 加进去
            for _conditionType, _ in pairs(conditionTypeMap) do
                __addEasterEggId2Map(easterEggId, _conditionType)
            end
        else
            -- 普通类型彩蛋直接加进去
            __addEasterEggId2Map(easterEggId, conditionType)
        end
    end
end

---@public 返回客户端彩蛋对应condition是否满足条件
---@param easterEggId number 彩蛋Id
function EasterEggBLL:CheckIfEasterEggConditionPass(easterEggId)
    return __checkIfEasterEggConditionPass(self, easterEggId)
end

---@public 返回彩蛋是不是客户端类型
---@param easterEggId number 彩蛋Id
function EasterEggBLL:CheckIfClientType(easterEggId)
    return __checkIfClientType(self, easterEggId)
end

---@public 通过配置表建立ConditionType和EasterEggId的索引关系
function EasterEggBLL:CreateConditionTypeMap()
    __createConditionTypeMapByCfg(self)
    
    --Debug.LogError("curConditionTypeMap : " .. table.dump(self.conditionTypeMap))
end

---@public 检查并更新客户端彩蛋
---@param easterEggId number 彩蛋Id
---@param realtime bool 是否即时发送request 不传或false会在TIME_INTERVAL合并数据request
function EasterEggBLL:CheckEffectEasterEgg(easterEggId, realtime)
    __checkEffectEasterEgg(self, easterEggId, realtime)
end

---@public 登陆时检查所有彩蛋
function EasterEggBLL:CheckEffectAllEasterEgg()
    local allEasterEggCfg = LuaCfgMgr.GetAll("EasterEgg")
    local allIdList = {} for _, v in pairs(allEasterEggCfg) do table.insert(allIdList, v.ID) end
    for _, id in ipairs(allIdList) do
        self:CheckEffectEasterEgg(id, false)
    end
end

---@public 数据变更回调 用于彩蛋数据更新后的定时器刷新等
function EasterEggBLL:OnSyncEasterEgg(easterEggId)
    -- 处理定时器逻辑
    self.EETimerUtil:OnSyncEasterEgg(easterEggId)
    
    -- 处理特殊ConditionType类型的定时器逻辑
    self.EEConditionTimerUtil:OnSyncEasterEgg(easterEggId)
end

---@public 登陆时逻辑 同步服务器数据 且检查所有客户端彩蛋
function EasterEggBLL:OnLogin(easterEggMap, rewardedEasterEggMap)
    -- 数据同步
    SelfProxyFactory.GetEasterEggProxy():UpdateDataByMap(easterEggMap, EasterEggEnum.DebugEventMap.EasterEggGetAll)
    SelfProxyFactory.GetEasterEggProxy():UpdateAllRewardedEggMap(rewardedEasterEggMap)

    -- 检查客户端所有彩蛋
    self:CheckEffectAllEasterEgg()
    
    -- 特殊计时类型彩蛋 埋点 添加
    self.EEConditionTimerUtil:SyncAllEasterEgg()
    
end

---@public 获取彩蛋数据
---@param easterEggId number 彩蛋Id
---@return EasterEggData
function EasterEggBLL:GetEasterEggData(easterEggId)
    return SelfProxyFactory.GetEasterEggProxy():GetDataById(easterEggId)
end

---@public 检查彩蛋是否在生效期间可以触发
---@return bool
function EasterEggBLL:CheckIfInEffect(easterEggId)
    local eeCfg = LuaCfgMgr.Get("EasterEgg", easterEggId) if not eeCfg then Debug.LogError("EECfg not found, eeId : " .. tostring(easterEggId or "nil")) return false end
    local eeData = self:GetEasterEggData(easterEggId) if not eeData then return false end
    -- 时间上是否过期
    if eeData.EffectTime <= 0 then return false end
    local curTime = TimerMgr.GetCurTimeSeconds()
    if curTime < eeData.EffectTime then return false end    -- 为兼容后续策划的延迟生效机制
    if eeCfg.TimeType ~= 0 then     -- TimeType为0 意味着这个彩蛋是不会从时效上认为是过期的
        local effectEndTime = TimeRefreshUtil.GetNextRefreshTime(eeData.EffectTime, eeCfg.TimeType, eeCfg.TimePara)
        if curTime > effectEndTime then return false end
    end
    -- (触发次数不是无限制 && 已触发次数 >= 可触发次数) 则返回false
    if eeCfg.TriggerCount ~= EasterEggEnum.TriggerCount.NoLimit and eeData.TriggerNum >= eeCfg.TriggerCount then return false end
    return true
end

---@public 彩蛋确认触发
function EasterEggBLL:ConfirmTrigger(easterEggId)
    if not self:CheckIfInEffect(easterEggId) then return end
    
    ---- 触发后不失效的彩蛋 不用上报服务器
    --local eeCfg = LuaCfgMgr.Get("EasterEgg", easterEggId)
    --if not eeCfg or eeCfg.TriggerCount == -1 then return end
    
    self:EasterEggTriggerRequest(easterEggId)
end

---@public 检查彩蛋是否是带奖励的 (check from cfg)
function EasterEggBLL:CheckIfEasterEggWithReward(easterEggId)
    local easterEggCfg = LuaCfgMgr.Get("EasterEgg", easterEggId)
    if table.isnilorempty(easterEggCfg) then Debug.LogError("easterEgg cfg not found, id : " .. tostring(easterEggId)) return false end
    
    -- 一种名为Add奖励类型的判断
    if not table.isnilorempty(easterEggCfg.AddReward) then return true end
    
    -- 邮件奖励判断
    if easterEggCfg.RewardMail and easterEggCfg.RewardMail > 0 then return true end
    
    return false
end

-- 协议层 ---------------------------------------------------------------------------------------------------------------------------------
---@public 客户端判定彩蛋生效发给服务器
---@param easterEggId number 彩蛋Id
---@param effectFlag bool 生效(true) / 失效 (false)
---@param realtime bool 是否即时发送request 不传或false会在TIME_INTERVAL合并数据request
function EasterEggBLL:EasterEggEffectRequest(easterEggId, effectFlag, realtime)
    if not easterEggId or easterEggId < 0 then return end
    
    -- 如果是带奖励配置的彩蛋且已领过奖则直接忽略
    if SelfProxyFactory.GetEasterEggProxy():CheckIfEasterEggRewarded(easterEggId) then return end
    
    -- 即时request模式下直接发送, 否则用一个timer来收集合并数据后request 
    if realtime then
        local EffectiveEggIDs = effectFlag and {easterEggId} or {}
        local IneffectiveEggIDs = effectFlag and {} or {easterEggId}
        GrpcMgr.SendRequest(RpcDefines.EasterEggEffectRequest, {EffectiveEggIDs = EffectiveEggIDs, IneffectiveEggIDs = IneffectiveEggIDs})

        -- EEDebugMgr Trace EEData
        EEDebugMgr:TraceEEByList({easterEggId}, EasterEggEnum.DebugEventMap.EasterEggTryEffect)
    else
        if self.effectRequestTimer then
            -- merge data
            self.effectRequestEEIdMap[easterEggId] = effectFlag and 1 or 0
        else
            self.effectRequestTimer = TimerMgr.AddTimer(
                    REQUEST_TIME_INTERVAL,
                    function()
                        -- merge data
                        if not self.effectRequestEEIdMap[easterEggId] then self.effectRequestEEIdMap[easterEggId] = effectFlag and 1 or 0 end

                        local EffectiveEggIDs = {}
                        local IneffectiveEggIDs = {}
                        for id, flag in pairs(self.effectRequestEEIdMap) do
                            -- 在这里再次检查下生效状态
                            local isInEffect = BllMgr.GetEasterEggBLL():CheckIfInEffect(id)
                            if flag == 1 and not isInEffect then
                                table.insert(EffectiveEggIDs, id)
                            elseif flag == 0 and isInEffect then
                                table.insert(IneffectiveEggIDs, id)
                            end
                        end

                        GrpcMgr.SendRequest(RpcDefines.EasterEggEffectRequest, {EffectiveEggIDs = EffectiveEggIDs, IneffectiveEggIDs = IneffectiveEggIDs})

                        -- EEDebugMgr Trace EEData
                        EEDebugMgr:TraceEEByList(EffectiveEggIDs, EasterEggEnum.DebugEventMap.EasterEggTryEffect)
                        EEDebugMgr:TraceEEByList(IneffectiveEggIDs, EasterEggEnum.DebugEventMap.EasterEggTryInvalidate)

                        self.effectRequestEEIdMap = {}
                        self.effectRequestTimer = nil
                    end, self, 1
            )
        end
    end
end

---@public 客户端触发彩蛋发给服务器
function EasterEggBLL:EasterEggTriggerRequest(easterEggId)
    if not easterEggId or easterEggId < 0 then return end

    -- 如果是带奖励配置的彩蛋且已领过奖则直接忽略
    if SelfProxyFactory.GetEasterEggProxy():CheckIfEasterEggRewarded(easterEggId) then return end
    
    GrpcMgr.SendRequest(RpcDefines.EasterEggTriggerRequest, {Eggs = {
        {EggID = easterEggId, Num = 1}
    }})

    -- EEDebugMgr Trace EEData
    EEDebugMgr:TraceEEByList({easterEggId}, EasterEggEnum.DebugEventMap.EasterEggTryTrigger)
end
------------------------------------------------------------------------------------------------------------------------------------------

return EasterEggBLL