---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingzi003.
--- DateTime: 2022/10/13 11:59
---
---@class FaceBLL : BaseBll @（非捏脸编辑模式）捏脸BLL
local FaceBLL = class("FaceBLL", BaseBll)
local FaceEditConst = require("Runtime.System.X3Game.GameConst.FaceEditConst")
local FaceEditUtil = require("Runtime.System.X3Game.Modules.FaceEdit.FaceEditUtil")
local FaceCharacterHelper = require("Runtime.System.X3Game.Modules.FaceEdit.FaceCharacterHelper")

function FaceBLL:OnInit()
    ---@type number FaceEditConst.KneadState
    self._curState = nil
    ---@当前使用的数据类型
    self._dataType = FaceEditConst.DataType.Morph

    ---@type FaceEditProxy
    self._proxy = nil
    ---@type string @女主头像Url
    self._faceUrl = nil
    ---@type function
    self._checkFinishCallback = nil
    ---@type boolean
    self._needCloseLoading = nil
    ---@type boolean
    self._enterHeadIcon = nil

    ---@type table<GameObject, FaceCharacterHelper>
    self._charHelperDict = nil

    ---@type number 上一次保存捏脸的时间戳
    self._lastKneadTime = 0

    self._playerVoiceTemp = nil
    
   self._proxy = SelfProxyFactory.GetFaceEditProxy()
end

---@return FaceEditProxy
function FaceBLL:_GetProxy()
    if BllMgr.GetOthersBLL():IsMainPlayer() then
        return self._proxy
    else
        return ProxyFactoryMgr.GetOtherPlayer(BllMgr.GetOthersBLL():GetCurrentShowUid()):GetFaceEditProxy()
    end
end

function FaceBLL:OnClear()
    self._curState = nil
    self._dataType = FaceEditConst.DataType.Morph
    self._faceUrl = nil
    self._checkFinishCallback = nil
    if self._charHelperDict then
        for _, helper in pairs(self._charHelperDict) do
            helper:Release()
        end
    end
    PoolUtil.ReleaseTable(self._charHelperDict)
    self._charHelperDict = nil
end

---@return boolean @捏脸功能是否开启
function FaceBLL:IsFuncEnabled()
    local value = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACEFUNCENABLE)
    return value == 1
end

---@param kneadFaceData pbcmessage.KneadFaceData 上线初始化服务器捏脸数据
function FaceBLL:InitServerData(kneadFaceData)
    if not self:IsFuncEnabled() then
        return
    end
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, table.dump(kneadFaceData, "[SyncUserTotalDataReply.KneadFace] = "))

    local kneaded = kneadFaceData and kneadFaceData.Kneaded and kneadFaceData.Kneaded == 1 or false
    self:SetKneadState(kneaded and FaceEditConst.KneadState.Kneaded or FaceEditConst.KneadState.UnKnead)

    self._faceUrl = kneadFaceData.Current and kneadFaceData.Current.FaceUrl

   self:_GetProxy():InitServerData(kneadFaceData.Current and kneadFaceData.Current, kneadFaceData.Templates)

    if self:GetKneadState() == FaceEditConst.KneadState.Kneaded then
        local toneValues = kneadFaceData.Current and kneadFaceData.Current.ToneValues  -- 音色值
        if toneValues then
            for k,v in pairs(toneValues) do
                local voiceInfo = X3DataMgr.Get(X3DataConst.X3Data.PlayerVoice, k)
                if voiceInfo == nil then
                    voiceInfo = X3DataMgr.Add(X3DataConst.X3Data.PlayerVoice)
                    voiceInfo:SetPrimaryValue(k)
                end
                voiceInfo:ClearVoiceValue()
                for subKey, value in pairs(v.KVs) do
                    voiceInfo:AddVoiceValue(value, subKey)
                end
            end
        end
    end

    self:RefreshPlayerVoice()
end

---@return number FaceEditConst.KneadState 获取捏脸状态
function FaceBLL:GetKneadState()
    return self._curState or FaceEditConst.KneadState.UnKnead
end

---@param state number @设置捏脸状态
function FaceBLL:SetKneadState(state)
    if state and state >= FaceEditConst.KneadState.UnKnead and state <= FaceEditConst.KneadState.Kneaded then
        self._curState = state
    else
        Debug.LogErrorWithTag(GameConst.LogTag.FaceEdit, "SetKneadState(state) param is invalid. state = ", state)
    end
end

---@return string @女主头像Url
function FaceBLL:GetFaceName()
    return self._faceUrl
end

---@return int @捏脸数据版本
function FaceBLL:GetFaceVersion()
    return self._proxy:GetDefaultValue(FaceEditUtil.GetKey(FaceEditConst.MainType.Version), FaceEditConst.DataType.Morph)
end

---捏脸相关检查
---@param callback function @捏脸开始时执行的回调
---@param callback function @捏脸检查完成回调
function FaceBLL:CheckFaceEdit(begincallback, callback, needCloseLoading)
    self._checkFinishCallback = callback
    self._needCloseLoading = needCloseLoading

    -- begincallback 是登陆时执行的初始化回调，比较耗时，需要在首次捏脸前选画质的 movin 动画完成之后执行，不然会把 movin 动画卡过
    if self:GetKneadState() == FaceEditConst.KneadState.UnKnead then
        self._enterHeadIcon = true
        BllMgr.GetFaceEditBLL():FirstMorph(begincallback)
    else
        if begincallback then
            begincallback()
        end
        self._enterHeadIcon = BllMgr.GetHeadIconBLL():CheckHeadIcon()
        if not self._enterHeadIcon then
            self:FinishHeadCheck()
        end
    end
end

function FaceBLL:NeedCloseLoading()
    return self._needCloseLoading
end

---捏脸检查完成回调
function FaceBLL:FinishHeadCheck()
    self:CheckMergedMakeUp(handler(self, self.FinishCheck))

end

function FaceBLL:FinishCheck()
    if self._needCloseLoading and self._enterHeadIcon then
        UICommonUtil.SetLoadingProgress(1, true)
    end

    if self._checkFinishCallback and type(self._checkFinishCallback) == "function" then
        self._checkFinishCallback()  --进序章/Home
    end
    self._checkFinishCallback = nil
end

------------------------------------------------------------

---刷新捏脸数据应用到角色（部件改变后）
---@param go GameObject 角色对象
function FaceBLL:RefreshHost(go)
    if GameObjectUtil.IsNull(go) then
        Debug.LogErrorWithTag(GameConst.LogTag.FaceEdit, "SetHost() go Is Null")
        return
    end

    local charHelper = self:GetOrAddCharHelper(go)
    if charHelper then
        local editItems = self:GetApplyItems()
        charHelper:RefreshItems(editItems)
        self:ApplyMergedMakeup(charHelper, go)
    end
end

---将捏脸数据应用到角色（非捏脸编辑模式）
---@param go GameObject 角色对象
---@param faceChangeType number Define.FaceChangeType 头发使用类型
---@param faceHair number @发型CfgId
---@param roleBaseKey string @模型BaseKey
---@param filter int[] @过滤字典
function FaceBLL:SetHost(go, faceChangeType, faceHair, roleBaseKey, filter)
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "SetHost() faceChangeType = %s, faceHair = %s, go = %s", faceChangeType, faceHair, go)

    if GameObjectUtil.IsNull(go) then
        Debug.LogErrorWithTag(GameConst.LogTag.FaceEdit, "SetHost() go Is Null")
        return
    end

    local charHelper = self:GetOrAddCharHelper(go)
    if charHelper then
        local editItems = self:GetApplyItems()
        charHelper:ApplyItems(editItems, faceChangeType, faceHair, roleBaseKey, filter, BllMgr.GetFaceEditBLL():GetMode() == FaceEditConst.Mode.None)
        if BllMgr.GetFaceEditBLL():GetMode() == FaceEditConst.Mode.None then
            self:ApplyMergedMakeup(charHelper, go)
        end
    end
end

function FaceBLL:GetApplyItems()
    local editItems =self:_GetProxy():GetEditItems(self:GetDataType()) or {}
    if BllMgr.GetFaceEditBLL():GetMode() == FaceEditConst.Mode.None then
        for key, item in ipairs(editItems) do
            local mainType, subType, propType = FaceEditUtil.GetTypes(item.GetKey)
            if mainType == FaceEditConst.MainType.Makeup and subType ~= FaceEditConst.MakeupType.Eyelid and
                    subType ~= FaceEditConst.MakeupType.Eyelash and subType ~= FaceEditConst.MakeupType.Eyeshadow
                    and subType ~= FaceEditConst.MakeupType.Lip then
                editItems[key] = nil
            end
        end
    end
    return editItems
end

---@param go GameObject 角色对象
function FaceBLL:ClearHost(go)
    local charHelper = self:GetCharHelper(go)
    if charHelper then
        charHelper:Release()
        self._charHelperDict[go] = nil
    end

    if not next(self._charHelperDict) then
        CS.X3.Character.FaceMorph.StyleMorph.UnloadAllTemplates()
        Debug.LogWithTag(GameConst.LogTag.FaceEdit, "Release All character helper, unload style assets")
    end
end

---@param go GameObject 角色对象
---@return FaceCharacterHelper
function FaceBLL:GetOrAddCharHelper(go)
    local charHelper = self:GetCharHelper(go)
    if not charHelper then
        charHelper = FaceCharacterHelper.new(go)
        self._charHelperDict[go] = charHelper
    end
    return charHelper
end

---@param go GameObject 角色对象
---@return FaceCharacterHelper
function FaceBLL:GetCharHelper(go)
    if not self._charHelperDict then
        self._charHelperDict = PoolUtil.GetTable()
    end
    return self._charHelperDict[go]
end

---刷新肤色（非捏脸编辑模式）
---@param go GameObject 角色对象
function FaceBLL:RefreshSkin(go)
    local charHelper = self:GetCharHelper(go)
    if charHelper then
        local value =self:_GetProxy():GetDefaultValue(FaceEditUtil.GetKey(FaceEditConst.MainType.Skin), self:IsTempKnead())
        if value then
            charHelper:SetSkin(value)
        end
    end
end

---强制刷新捏脸骨骼
---@param go GameObject 角色对象
function FaceBLL:ForceUpdateMorph(go)
    local charHelper = self:GetCharHelper(go)
    if charHelper then
        charHelper:ForceUpdateMorph()
    end
end

------------------------------------------------------------

---检测本地的妆容贴图，若不存在则重新生成
function FaceBLL:CheckMergedMakeUp(onComplete)
    local tex1Name = self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo)
    local tex2Name = self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular)

    local key = string.concat(FaceEditConst.TextureVersionPrefix, PlayerUtil.GetUid())
    local value = self:GetFaceVersion()

    ---本地没有 调出模型来重新生成妆容贴图
    if PlayerPrefs.GetInt(key, -1) ~= value or not (UrlImgMgr.CheckFile(tex1Name, UrlImgMgr.BizType.FaceMorph) and
            UrlImgMgr.CheckFile(tex2Name, UrlImgMgr.BizType.FaceMorph)) then
        local suitKey = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACEDEFAULTMODEL)
        BllMgr.GetFaceEditBLL():_SetMode(FaceEditConst.Mode.GenHeadIcon)
        CharacterMgr.GetInsWithSuitKey(suitKey, function(gameObject, _)
            self:BakeFaceAndSave(gameObject)
            self:BakeNormalFaceAndSave(gameObject)
            BllMgr.GetFaceBLL():ClearHost(gameObject)
            ---妆容编辑模式下X3Makeup内有张贴图没有销毁，只把引用置空了，需要手动设置
            CS.UnityEngine.Object.Destroy(gameObject)
            TimerMgr.AddTimerByFrame(1, function()
                CS.UnityEngine.Resources.UnloadUnusedAssets()
                BllMgr.GetFaceEditBLL():_SetMode(FaceEditConst.Mode.None)
                onComplete()
            end)

        end)
    else
        onComplete()
    end
end

---二次捏脸后，应用妆容数据，为妆容数据烘培贴图
function FaceBLL:BakeNormalFaceAndSave(go)
    local charHelper = self:GetCharHelper(go)
    if charHelper then
        local editItems =self:_GetProxy():GetEditItems(FaceEditConst.DataType.Normal)
        charHelper:ApplyItems(editItems)
        local texArr = charHelper:BakeFace()
        if texArr then
            self:SaveTex(texArr, FaceEditConst.DataType.Normal)
            CS.UnityEngine.Object.Destroy(texArr[0])
            CS.UnityEngine.Object.Destroy(texArr[1])
        end
    end
end

---烘焙妆容贴图，并保存到本地
function FaceBLL:BakeFaceAndSave(go)
    local charHelper = self:GetCharHelper(go)
    if charHelper then
        local texArr = charHelper:BakeFace()
        if texArr then
            UrlImgMgr.SaveTextureToPngFile(texArr[0], self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo), UrlImgMgr.BizType.FaceMorph)
            UrlImgMgr.SaveTextureToPngFile(texArr[1], self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular), UrlImgMgr.BizType.FaceMorph)
            CS.UnityEngine.Object.Destroy(texArr[0])
            CS.UnityEngine.Object.Destroy(texArr[1])
        end
    end

    self:_UpdateCache(go)
    self:_RefreshMergedTextures()

    local key = string.concat(FaceEditConst.TextureVersionPrefix, PlayerUtil.GetUid())
    local value = self:GetFaceVersion()
    PlayerPrefs.SetInt(key, value)
    PlayerPrefs.Save()
end

function FaceBLL:SaveTex(texArr, dataType)
    if texArr then
        UrlImgMgr.SaveTextureToPngFile(texArr[0], self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo, dataType), UrlImgMgr.BizType.FaceMorph)
        UrlImgMgr.SaveTextureToPngFile(texArr[1], self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular, dataType), UrlImgMgr.BizType.FaceMorph)
    end
end

function FaceBLL:_InitTempMergedTexture()
    UrlImgMgr.CopyFileTemp(self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo, FaceEditConst.DataType.Morph), UrlImgMgr.BizType.FaceMorph, self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo, FaceEditConst.DataType.Temp))
    UrlImgMgr.CopyFileTemp(self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular, FaceEditConst.DataType.Morph), UrlImgMgr.BizType.FaceMorph, self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular, FaceEditConst.DataType.Temp))
end

function FaceBLL:_RefreshMergedTextures()
    for go, helper in pairs(self._charHelperDict) do
        self:ApplyMergedMakeup(helper, go)
    end
end

---应用烘焙的妆容贴图
function FaceBLL:ApplyMergedMakeup(charHelper, go)
    if UrlImgMgr then
        local tex1, tex2 = self:_LoadMergedMakeUp(go)
        charHelper:ApplyMergedMakeUp(tex1, tex2)
    end
end

function FaceBLL:_UpdateCache(go)
    local tex1Name = self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo)
    local tex2Name = self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular)

    UrlImgMgr.UpdateTexCache(tex1Name, go, UrlImgMgr.BizType.FaceMorph, false)
    UrlImgMgr.UpdateTexCache(tex2Name, go, UrlImgMgr.BizType.FaceMorph, false)
end

---加载本地保存的妆容贴图
---@param isTemp boolean 是否临时妆发
function FaceBLL:_LoadMergedMakeUp(go)
    local tex1Name = self:_GetMakeupTexName(FaceEditConst.MergedTexType.Albedo)
    local tex2Name = self:_GetMakeupTexName(FaceEditConst.MergedTexType.Specular)

    if UrlImgMgr then
        ---@type Texture2D
        local tex1 = UrlImgMgr.LoadTextureFromFile(tex1Name, false, false, UrlImgMgr.BizType.FaceMorph, go, false) ---非线性
        ---@type Texture2D
        local tex2 = UrlImgMgr.LoadTextureFromFile(tex2Name, false, false, UrlImgMgr.BizType.FaceMorph, go, false)  ---线性
        -- todo 这边自己关一下readable
        if tex1 and tex1.isReadable then
            tex1:Apply(false, true)
        end
        if tex2 and tex2.isReadable then
            tex2:Apply(false, true)
        end
        return tex1, tex2
    end
end

---获取妆容贴图的文件名
function FaceBLL:_GetMakeupTexName(index, dataType)
    local dataType = dataType or self._dataType
    local uid = PlayerUtil and PlayerUtil.GetUid() or ""
    local idx = index
    if idx and FaceEditConst.MergedMakeupTexName[idx] and FaceEditConst.MergedMakeupTexName[idx][dataType] then
        return uid .. FaceEditConst.MergedMakeupTexName[idx][dataType]
    end
end

------------------------------------------------------------

---进入新版化妆（非捏脸编辑模式）
function FaceBLL:OnEnterNewMakeupHair()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "OnEnterNewMakeupHair()")
    self._dataType = FaceEditConst.DataType.Normal
end

function FaceBLL:OnExitNewMakeupHair()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "OnExitNewMakeupHair()")
    self._dataType = FaceEditConst.DataType.Morph
end

---进入临时化妆（非捏脸编辑模式）
function FaceBLL:OnEnterTempKnead()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "OnEnterTempKnead()")
    self._dataType = FaceEditConst.DataType.Temp
    self:_InitTempMergedTexture()
end

---退出临时化妆
function FaceBLL:OnExitTempKnead()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "OnExitTempKnead()")
    self._dataType = FaceEditConst.DataType.Morph

   self:_GetProxy():ClearTempData()
    self:_RefreshMergedTextures()
end

function FaceBLL:IsTempKnead()
    return self._dataType == FaceEditConst.DataType.Temp
end

---进入头像生成
function FaceBLL:OnEnterGenHeadIcon()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "OnEnterGenHeadIcon()")
end

---退出头像生成
function FaceBLL:OnExitGenHeadIcon()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "OnExitGenHeadIcon()")
end

function FaceBLL:GetDataType()
    return self._dataType
end


---设置数据类型
---@param dataType int
function FaceBLL:SetDataType(dataType)
    self._dataType = dataType
end
------------------------------------------------------------
---设置捏脸URL地址
---@param url string @
function FaceBLL:SendSetKneadFaceUrlReq(url)
    local msg = PoolUtil.GetTable()
    msg.FaceUrl = string.format("%s?faceVersion=%d", url, BllMgr.GetFaceBLL():GetFaceVersion())
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[SetKneadFaceUrlRequest] FaceUrl = %s", url)
    GrpcMgr.SendRequest(RpcDefines.SetKneadFaceUrlRequest, msg, true)
    PoolUtil.ReleaseTable(msg)
end

---@param reply pbcmessage.SetKneadFaceUrlReply
function FaceBLL:RecvSetKneadFaceUrlReply(url)
    self._faceUrl = url
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "[SetKneadFaceUrlReply]")
    EventMgr.Dispatch(FaceEditConst.Event.UpdateHeadIconUrl)
end

function FaceBLL:SetLastKneadTime(time)
    self._lastKneadTime = time
end

function FaceBLL:GetLastKneadTime()
    return self._lastKneadTime
end

function FaceBLL:GetHair(suitId)
    local suitCfg = LuaCfgMgr.Get("FormationSuit", suitId)
    local hairId = (suitCfg and suitCfg.Type ~= Define.FaceChangeType.None and suitCfg.FaceHair ~= 0) and suitCfg.FaceHair
            or self:_GetProxy():GetDefaultValue(FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.StyleAndColor), FaceEditConst.DataType.Morph)
    local hairCfg = LuaCfgMgr.Get("FaceHair", hairId)
    if hairCfg then
        return hairCfg.StyleSourceID
    else
        Debug.LogErrorFormat("Invalid HairId:%d", hairId)
    end
end

--region 女主声音设置相关
function FaceBLL:CanEditPlayerVoice()
    local lang = Locale.GetSoundLang()
    local cfg = LuaCfgMgr.Get("LocalizationLanguage", lang)
    return cfg.CanSetPLVoice == 1
end

function FaceBLL:RefreshPlayerVoice()
    local recordVoice = self:GetRecordVoice()
    local lang = Locale.GetSoundLang()
    local count = (self:CanEditPlayerVoice() and recordVoice == nil and RedPointMgr.GetValue(X3_CFG_CONST.RED_PLAYERINFO_SETTING_PLAYERVOICE, lang) == 0
            and BllMgr.GetSystemSettingBLL():GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_VOICE_PL) == 0) and 1 or 0
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PLAYERINFO_SETTING_PLAYERVOICE, count)
    if recordVoice then
        local voiceMap = recordVoice:GetVoice()
        for k, v in pairs(voiceMap) do
            self:SetPlayerVoice(k,v)
        end
    else
        for _, v in pairs(FaceEditConst.VoiceType) do
            self:SetPlayerVoice(v, self:GetDefaultPlayerVoice(v))
        end
    end
end

function FaceBLL:CheckPlayerVoiceEditable()
    local lang = Locale.GetSoundLang()
    local cfg = LuaCfgMgr.Get("LocalizationLanguage", lang)
    if cfg.CanSetPLVoice == 0 then
        local tips = UITextHelper.GetUIText(UITextConst.UI_TEXT_7980, UITextHelper.GetUIText(cfg.VoiceListShow))
        UICommonUtil.ShowMessageBox(tips, { { btn_type = GameConst.MessageBoxBtnType.CONFIRM } }, AutoCloseMode.None)
    else
        local hasRecord = self:GetRecordVoice() ~= nil
        if not hasRecord and BllMgr.GetSystemSettingBLL():GetSettingData(X3_CFG_CONST.SYSTEM_SETTING_TYPE_VOICE_PL) == 0 then
            UICommonUtil.ShowMessageBox(UITextConst.UI_TEXT_7979,
                    { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_7984,
                        btn_call = function()
                            UIMgr.OpenWithAnim(UIConf.PlayerVoiceEntranceWnd, false)
                        end }, { btn_type = GameConst.MessageBoxBtnType.CANCEL } }, AutoCloseMode.None)
        end
    end
end

---@return int, boolean 音色值，是否有设置过
function FaceBLL:GetDefaultPlayerVoice(subType)
    local lang = Locale.GetSoundLang()
    local cfg = LuaCfgMgr.Get("LocalizationLanguage", lang)
    if cfg and FaceEditConst.VoiceSubCfg[subType] then
        local voiceInfo = cfg[FaceEditConst.VoiceSubCfg[subType]]
        return voiceInfo and voiceInfo.ID or 0
    end
end

---@return X3Data.PlayerVoice
function FaceBLL:GetRecordVoice()
    local lang = Locale.GetSoundLang()
    return X3DataMgr.Get(X3DataConst.X3Data.PlayerVoice, lang)
end

function FaceBLL:SetPlayerVoice(subType, value, saveTemp)
    if subType == FaceEditConst.VoiceType.Age then
        WwiseMgr.SetAgeNumber(value/100)
    elseif subType == FaceEditConst.VoiceType.Impact then
        WwiseMgr.SetImpact(value)
    elseif subType == FaceEditConst.VoiceType.Nasal then
        WwiseMgr.SetNasal(value)
    elseif subType == FaceEditConst.VoiceType.Sexy then
        WwiseMgr.SetSexy(value)
    elseif subType == FaceEditConst.VoiceType.Warm then
        WwiseMgr.SetWarm(value)
    end

    if saveTemp then
        if self._playerVoiceTemp == nil then
            self:InitVoiceTemp()
        end
        self._playerVoiceTemp[subType] = value
    end
end

function FaceBLL:ClearVoiceTemp()
    self._playerVoiceTemp = nil
end

function FaceBLL:InitVoiceTemp()
    self._playerVoiceTemp = {}
    local recordVoice = self:GetRecordVoice()
    if recordVoice then
        local voiceMap = recordVoice:GetVoice()
        for k, v in pairs(voiceMap) do
            self._playerVoiceTemp[k] = v
        end
    else
        for _, v in pairs(FaceEditConst.VoiceType) do
            self._playerVoiceTemp[v] = self:GetDefaultPlayerVoice(v)
        end
    end
end

function FaceBLL:UploadPlayerVoiceInfo(force)
    if self:CanEditPlayerVoice() and (force or self._playerVoiceTemp) then
        if self._playerVoiceTemp == nil then
            self:InitVoiceTemp()
        end
        ---@type pbcmessage.SetToneValueRequest
        local messageBody = PoolUtil.GetTable()
        messageBody.LanguageID = Locale.GetSoundLang()
        messageBody.Tone = { KVs = self._playerVoiceTemp }
        GrpcMgr.SendRequest(RpcDefines.SetToneValueRequest, messageBody, true)
        PoolUtil.ReleaseTable(messageBody)
    end
end
--endregion

function FaceBLL:IsPhotoFaceEnable()
    local region = Locale.GetRegion()
    return region ~=  Locale.Region.EuropeAmericaAsia
end
return FaceBLL