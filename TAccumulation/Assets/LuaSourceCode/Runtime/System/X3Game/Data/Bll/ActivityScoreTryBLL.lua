---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dengzi.
--- DateTime: 2023/3/21 12:01
---

---@class ActivityScoreTryBLL
local ActivityScoreTryBLL = class("ActivityScoreTryBLL", BaseBll)
local ActivityCenterConst = require("Runtime.System.X3Game.GameConst.ActivityCenterConst")

---统一初始化，只会调用一次
function ActivityScoreTryBLL:OnInit()
    EventMgr.AddListener(Const.Event.RECOVER_VIEW_SNAPSHOT_FINISH, self.OnRecoverViewSnapshotFinish, self)
    X3DataMgr.Subscribe(X3DataConst.X3Data.Activity, self.OnUpdateActivityActive, self)
end

---统一清理相关数据状态，只会调用一次
function ActivityScoreTryBLL:OnClear()
    EventMgr.RemoveListenerByTarget(self)
    X3DataMgr.UnsubscribeWithTarget(self)
end

function ActivityScoreTryBLL:Init()
    
end

---活动信息变更监听
---@param x3Data X3Data.Activity
function ActivityScoreTryBLL:OnUpdateActivityActive(x3Data)
    if not x3Data then
        return
    end
    self:UpdateRed(x3Data:GetPrimaryValue(), x3Data:GetActive())
end

function ActivityScoreTryBLL:UpdateRed(activityId, active)
    local activityCenterCfg = LuaCfgMgr.Get("ActivityCenter", activityId)
    if nil == activityCenterCfg or activityCenterCfg.ActivityType ~= ActivityCenterConst.ActivityEntryType.SCoreTry then
        return
    end
    --活动有效且未通关（奖励未领取），显示红点
    if active then
        if self:IsRewardGot(activityId) then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_SCORETRY_REWARD, 0, activityId)
        else
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_SCORETRY_REWARD, 1, activityId)
        end
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_SCORETRY_REWARD, 0, activityId)
    end
end

function ActivityScoreTryBLL:OnRecoverViewSnapshotFinish()
    local stageId = ChapterStageManager.GetCurStageID()
    local curStageCfg = LuaCfgMgr.Get("CommonStageEntry", stageId)
    if curStageCfg and curStageCfg.Type == Define.EStageType.SCoreTry then
        --战斗结束时会禁止弹窗的弹出，正常流程在结算界面动效播放完毕会解除禁止，但是搭档试用的关卡没有结算界面，所以弹窗无法解除禁止，需要此处手动解除一下
        EventMgr.Dispatch(ErrandConst.ERRAND_DELAY_CLOSE)
        local activityId = self:GetActivityIdByStageId(stageId)
        BllMgr.GetActivityCenterBLL():JumpToActivityView(activityId)
    end
end

---根据试用关卡ID获取活动ID
function ActivityScoreTryBLL:GetActivityIdByStageId(stageId)
    local allCfg = LuaCfgMgr.GetAll("ActivitySCoreTry")
    if not allCfg or table.nums(allCfg) == 0 then
        return 0
    end
    for _, scoreTryCfg in pairs(allCfg) do
        if scoreTryCfg.LevelID == stageId then
            return scoreTryCfg.ActivityID
        end
    end
    return 0
end

---活动奖励是否领取
function ActivityScoreTryBLL:IsRewardGot(activityId)
    local activityServerData = SelfProxyFactory.GetActivityCenterProxy():GetActivityBaseData(activityId)
    if not activityServerData then
        return false
    end
    return activityServerData.SCoreTrial and activityServerData.SCoreTrial.FirstRewarded or false
end

return ActivityScoreTryBLL