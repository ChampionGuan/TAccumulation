---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingzi003.
--- DateTime: 2022/9/1 20:18
---
--[[ 捏脸编辑BLL
    # 特殊处理
        风格脸：Makeup数据存服务器，Bone is_sub不存服务器；进详细捏脸（非妆发模式）调用 SyncStyleFaceBone 同步Bone数据

    # 保留自定义数据规则：
       【发型】
          玩家修改了自定义颜色，切换样式以后，仍然使用玩家的自定义颜色
          玩家先修改了自定义颜色，之后又切换了推荐色，自定义颜色不保留，显示推荐色对应的参数
          特殊发型使用默认颜色，在临时妆发模式下可自定义颜色、保留自定义属性
       【妆容】
          换样式时，玩家有自定义推荐色 则默认选择同色系
          玩家自定义的 润泽度 浓淡不被覆盖
          样式无 使用默认浓淡

    # 服务器检查 （根据key判断 枚举修改需同步！）
        1. 数据量检查 <300 条数据 （6 + 1 + 20 + 122 + 9 * 11 + 1 + 1 = 250）
        2. 消耗塑性卡检查 （FaceStyle Bone Voice Skin）
        3. 未拥有道具检查 ItemCondition （Hair Eyebrow Lip EyeL EyeR Eyeshadow EyeLiner Eyelash Blush Decorate）
        4. 检查报错会失败 无Reply 走Error协议

    # Debug
        SelfProxyFactory.GetFaceEditProxy():PrintDebug()
]]
---@class FaceEditBLL : BaseBll @（捏脸编辑模式）捏脸BLL
local FaceEditBLL = class("FaceEditBLL", BaseBll)
local FaceEditConst = require("Runtime.System.X3Game.GameConst.FaceEditConst")
local FaceEditUtil = require("Runtime.System.X3Game.Modules.FaceEdit.FaceEditUtil")
local FaceLocalDataConst = require("Runtime.System.X3Game.GameConst.FaceLocalDataConst")

function FaceEditBLL:OnInit()
    ---@type bool 是否是预捏脸
    self._isPreMorph = false
    ---@type number FaceEditConst.Mode 捏脸编辑模式类型
    self._curMode = FaceEditConst.Mode.None
    ---@type FaceEditProxy
    self._proxy = nil
    ---@type number 上一次保存捏脸的时间戳
    self._lastKneadTime = 0
    ---@type GameObject 捏脸编辑角色对象
    self._editCharGo = nil
    ---@type FaceCharacterHelper
    self._editCharHelper = nil
    ---@type boolean 是否已打开白屏
    self._isWhiteScreenOpen = nil

    ---@type boolean @是否隐藏配饰
    self._isHideDeco = false
    ---@type boolean @是否束发
    self._isTieHair = false
    ---@type string @束发发型名
    self._tiedHair = nil  --束发发型
    ---@type number @试穿发型CfgId
    self._tryHairCfgId = nil

    ---@type string 模板名限制长度
    self._tempMaxNameLen = nil
    ---@type boolean @是否仅重命名模板
    self._onlyRenameFlag = false

    ---@type table<number, number> 当前试穿数据
    self._curDressUpPartDict = nil
    ---@type table<number, table> 试穿分类列表
    self._dressUpClothsTypeDict = nil
    ---@type table<number, number> 试穿分类默认值
    self._defaultDressUpDict = nil

    ---@type int[] 妆容黑名单
    self._whiteIds = nil
    ---@type int[] 妆容黑名单
    self._whiteTypes = nil
    ---@type table<number, bool> 风格脸白名单
    self._styleWhite = nil

    self._faceBll = BllMgr.GetFaceBLL()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "FaceEditBLL:OnInit()")
    self._proxy = SelfProxyFactory.GetFaceEditProxy()
    self._proxy:InitData()
end

function FaceEditBLL:OnClear()
    self._curMode = nil
    self._proxy = nil
    self._lastKneadTime = nil
    self:ClearHostForEdit()
    self._isWhiteScreenOpen = nil
    self._isHideDeco = nil
    self._isTieHair = nil
    self._tiedHair = nil
    self._tryHairCfgId = nil
    self._tempMaxNameLen = nil
    self._onlyRenameFlag = nil
    PoolUtil.ReleaseTable(self._curDressUpPartDict)
    PoolUtil.ReleaseTable(self._dressUpClothsTypeDict)
    PoolUtil.ReleaseTable(self._defaultDressUpDict)
    self._curDressUpPartDict = nil
    self._dressUpClothsTypeDict = nil
    self._defaultDressUpDict = nil
    self._faceBll = nil
end

function FaceEditBLL:FirstMorph(callback, isPreMorph)
    local loginBll = BllMgr.GetLoginBLL()
    local id = loginBll:GetAccountInfo().Account
    self._isPreMorph = isPreMorph or false
    if SDKMgr.IsHaveSDK() then
        id = SDKMgr.GetNid()
    end
    local playerLevelKey = string.format("PlayerGraphicsLevel%s%s", id, loginBll:GetServerId())
    if PlayerPrefs.GetInt(playerLevelKey, -1) > 0then
        if callback then
            callback()
        end
        UICommonUtil.WhiteScreenIn(function()
            GameStateMgr.Switch(GameState.FaceEdit)
            UICommonUtil.SetLoadingEnable(GameConst.LoadingType.Common, false)
        end)
        self._isWhiteScreenOpen = true
    else
        UIMgr.Open(UIConf.FaceEditGraphicSetPopup, function()
            if callback then
                callback()
            end
            UICommonUtil.WhiteScreenIn(function()
                UIMgr.Close(UIConf.FaceEditGraphicSetPopup)
                GameStateMgr.Switch(GameState.FaceEdit)
                UICommonUtil.SetLoadingEnable(GameConst.LoadingType.Common, false)
            end)
            self._isWhiteScreenOpen = true
        end)
    end
end

---进入捏脸编辑模式，设置模式类型
---@param mode number FaceEditConst.Mode 捏脸编辑模式
---@param partKeys table[] string[] 绑定部件列表
---@param isPreMorph bool 是否是预捏脸
function FaceEditBLL:EnterMode(mode, partKeys)
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[FaceEditBLL:EnterMode] %s, %s", mode, table.dump(partKeys, "partKeys"))

    self:_SetMode(mode)
    self:LoadData()

    if self:GetMode() ~= FaceEditConst.Mode.NewMakeupAndHair then
        UIMgr.Open(UIConf.ScenePlayerWnd, nil, partKeys)
        if self:GetMode() ~= FaceEditConst.Mode.First then
            UIMgr.Open(UIConf.FaceEditWnd)
        end
    end
end

---退出捏脸编辑模式
function FaceEditBLL:ExitMode()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "[FaceEditBLL:ExitMode] ", self._curMode)

    self._whiteIds = nil
    self._whiteTypes = nil

    if self:GetMode() ~= FaceEditConst.Mode.NewMakeupAndHair then
        if self:GetMode() ~= FaceEditConst.Mode.First then
            UIMgr.Close(UIConf.FaceEditWnd)
        end
        UIMgr.Close(UIConf.ScenePlayerWnd)
    end

    self:_SetMode(FaceEditConst.Mode.None)

    if self._proxy then
        self._proxy:ClearDataForEdit()
    end

    BllMgr.GetFaceBLL():RefreshPlayerVoice()
    BllMgr.UnLoad('FaceEditBLL')
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "卸载 FaceEditBLL")
end

---@return number FaceEditConst.Mode @获取当前捏脸编辑模式类型
function FaceEditBLL:GetMode()
    return self._curMode or FaceEditConst.Mode.None
end

function FaceEditBLL:IsPreMorph()
    return self._isPreMorph
end

---@param mode number 设置捏脸编辑模式类型
function FaceEditBLL:_SetMode(mode)
    if mode and mode >= FaceEditConst.Mode.None and mode < FaceEditConst.Mode.MaxInvalid then
        Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "mode %s -> %s ", self._curMode, mode)
        self._curMode = mode
    else
        Debug.LogErrorWithTag(GameConst.LogTag.FaceEdit, "SetMode(mode) param is invalid. mode = ", mode)
    end
end

---捏脸编辑角色加载完成，处理白屏
function FaceEditBLL:OnScenePlayerReady()
    if self._isWhiteScreenOpen then
        local mode = self:GetMode()
        if mode == FaceEditConst.Mode.First then
            local localData = self._proxy:GetLocalData()
            local prevMorphData = self._proxy:GetPreMorphData()
            if not string.isnilorempty(localData) then
                UICommonUtil.ShowMessageBox(UITextConst.UI_TEXT_7858,
                        { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
                            UICommonUtil.CloseScreen()
                            UIMgr.Open(UIConf.FaceEditWnd)
                            self:ImportFaceEditData(localData)
                            EventMgr.Dispatch("LoadFaceEditData", true)
                        end }, { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_call = function()
                            if not string.isnilorempty(prevMorphData) then
                                UICommonUtil.ShowMessageBox(UITextConst.UI_TEXT_7811,
                                        {{btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
                                            UICommonUtil.CloseScreen()
                                            UIMgr.Open(UIConf.FaceEditWnd)
                                            self:ImportFaceEditData(prevMorphData, true)
                                            EventMgr.Dispatch("LoadFaceEditData", true)
                                        end}, {btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_call = function()
                                            UICommonUtil.CloseScreen()
                                            EventMgr.Dispatch("LoadFaceEditData", false)
                                        end}}, AutoCloseMode.None)
                            else
                                UICommonUtil.CloseScreen()
                                EventMgr.Dispatch("LoadFaceEditData", false)
                            end
                        end} }, AutoCloseMode.None)
            elseif not string.isnilorempty(prevMorphData) then
                UICommonUtil.ShowMessageBox(UITextConst.UI_TEXT_7811,
                        {{btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
                            UICommonUtil.CloseScreen()
                            UIMgr.Open(UIConf.FaceEditWnd)
                            self:ImportFaceEditData(prevMorphData, true)
                            EventMgr.Dispatch("LoadFaceEditData", true)
                        end}, {btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_call = function()
                            UICommonUtil.CloseScreen()
                            EventMgr.Dispatch("LoadFaceEditData", false)
                        end}}, AutoCloseMode.None)
            else
                UICommonUtil.CloseScreen()
                EventMgr.Dispatch("LoadFaceEditData", false)
            end
        else
            UICommonUtil.CloseScreen()
            UIMgr.Open(UIConf.FaceEditWnd)
        end
        self._isWhiteScreenOpen = nil
    end
end


---捏脸检查结束，处理回调
---@param isFaceChange boolean 是否强制生成证件照，捏脸变化
function FaceEditBLL:OnFinishCheck(isFaceChange, isFirst)
    BllMgr.GetFaceBLL():FinishHeadCheck()

    if isFaceChange and not isFirst then
        TimerMgr.AddTimer(1, function()
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7913)  --相貌变更成功
        end)
    end

    local key = string.concat(FaceEditConst.HeadIconVersionPrefix, PlayerUtil.GetUid())
    local value = self._proxy:GetDefaultValue(FaceEditUtil.GetKey(FaceEditConst.MainType.Version), FaceEditConst.DataType.Morph)
    PlayerPrefs.SetInt(key, value)
    PlayerPrefs.Save()
end

---加载捏脸编辑数据
function FaceEditBLL:LoadData()
    if self._proxy then
        local _ApplyEditData = function()
            local editItems = self._proxy:GetEditItemsForEdit()
            self:_ApplyToChar(editItems)
            self:_SyncStyleFaceBone()
            self._proxy:UpdateSourceData()
        end

        if self:GetMode() == FaceEditConst.Mode.NewMakeupAndHair then
            self._proxy:LoadMakeupData()
            _ApplyEditData()
        else
            self._proxy:LoadData()
            _ApplyEditData()
        end
    end
end

---将捏脸数据应用到角色（捏脸编辑模式）
---@param go GameObject 角色对象
function FaceEditBLL:SetHostForEdit(go)
    if GameObjectUtil.IsNull(go) then
        Debug.LogErrorWithTag(GameConst.LogTag.FaceEdit, "SetHostForEdit() go IsNull")
        return
    end

    local editItems = self._proxy:GetEditItemsForEdit(BllMgr.GetFaceBLL():IsTempKnead())

    self:ClearHostForEdit()
    self._editCharGo = go
    self._editCharHelper = BllMgr.GetFaceBLL():GetOrAddCharHelper(self._editCharGo)
    self._editCharHelper:ApplyItems(editItems)
    self._editCharHelper:SetTieHair(self._isTieHair)

    self:_InitPartSelect()

    self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
end

function FaceEditBLL:ClearHostForEdit()
    self._faceBll:ClearHost(self._editCharGo)
    self._editCharHelper = nil
    self._editCharGo = nil
end

-------------------------------------------------------------------

---部位高亮闪烁参数设置
function FaceEditBLL:_InitPartSelect()
    local spreadParam = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACECHOOSEEFFECT)
    if spreadParam and spreadParam[3] then
        self._editCharHelper:SetPartSelectParam(spreadParam[1], spreadParam[2], spreadParam[3])
    end
end

---设置部位高亮闪烁
---@param partId number 高亮部位Id
---@param x number UVx
---@param y number UVy
function FaceEditBLL:SelectFacePart(partId, x, y)
    if self._editCharHelper then
        self._editCharHelper:SelectMakeupPart(partId, x, y)
    end
end

-------------------------------------------------------------------

---@return boolean 是否处于保存捏脸数据CD中
function FaceEditBLL:IsSaveCDing()
    local curTime = TimerMgr.GetCurTimeSeconds()
    local cdTime = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACEIMGUPLOADCDTIME)
    if cdTime and curTime < BllMgr.GetFaceBLL():GetLastKneadTime() + cdTime then
        return true
    end
    return false
end

---保存至本地
function FaceEditBLL:SaveToLocal()
    if self:GetMode() == FaceEditConst.Mode.First or self:GetMode() == FaceEditConst.Mode.ReKnead then
        self._proxy:SaveLocalData()
    end
end

---请求保存至服务器
function FaceEditBLL:ReqSaveToServer()
    self._proxy:UpdateVersion(BllMgr.GetFaceBLL():GetDataType() == FaceEditConst.DataType.Temp and FaceEditConst.DataType.Temp or FaceEditConst.DataType.Morph)
    local isMakeup = self:GetMode() == FaceEditConst.Mode.NewMakeupAndHair
    local map_data, delete_data, is_cover = self._proxy:GetSaveDataServer(isMakeup)
    self:SendKneadFaceReq(map_data, delete_data, is_cover)
    if self:GetMode() == FaceEditConst.Mode.First then
        BllMgr.GetFaceBLL():UploadPlayerVoiceInfo(true)
    end

    EventMgr.Dispatch(FaceEditConst.Event.FaceEditChangeFinishClient, self:GetMode() == FaceEditConst.Mode.First)
end

---保存至服务器
function FaceEditBLL:SaveToServer()
    SelfProxyFactory.GetFaceEditProxy():DeletePreMorphData()

    if self._proxy then
        self._proxy:SaveServerData(self:GetMode())
    end

    BllMgr.GetFaceBLL():SetKneadState(FaceEditConst.KneadState.Kneaded)

    local isFirst = self:GetMode() == FaceEditConst.Mode.First or false
    EventMgr.Dispatch(FaceEditConst.Event.FaceEditChangeFinish, isFirst)

    if isFirst then
        UIMgr.Close(UIConf.FaceEditWnd)
    elseif self:GetMode() ~= FaceEditConst.Mode.NewMakeupAndHair then
        BllMgr.GetFaceBLL():BakeNormalFaceAndSave(self._editCharGo) -- 每次捏脸之后，为妆发数据烘培贴图
        self:ExitMode()
        BllMgr.GetHeadIconBLL():CheckHeadIcon(true, false)-- 新版妆发不需要重新生成头像
    else
        BllMgr.GetFaceBLL():BakeFaceAndSave(self._editCharGo)
    end
end

---保存临时妆发
function FaceEditBLL:SaveToTemp()
    BllMgr.GetFaceBLL():BakeFaceAndSave(self._editCharGo)

    if self._proxy then
        self._proxy:SaveTempData()
    end

    EventMgr.Dispatch(FaceEditConst.Event.FaceEditChangeFinish)

    self:ExitMode()
end

-------------------------------------------------------------------

-------------------------------------------------------------------
---@param hairCfgId number @试穿发型
function FaceEditBLL:SetTryOnHair(hairCfgId)
    self._tryHairCfgId = hairCfgId
    self._proxy:SetTryOnHair(hairCfgId)
    self._editCharHelper:SetTryOnHair(hairCfgId)
    self:RefreshHair()
end

---@return boolean @是否束发
function FaceEditBLL:IsTieHair()
    return self._isTieHair
end

---@param isOn boolean 束发开关
function FaceEditBLL:TieHair(isOn)
    if self._isTieHair == isOn then
        return
    end
    self._isTieHair = isOn

    if self._editCharHelper then
        self._editCharHelper:SetTieHair(self._isTieHair)
    end

    self:RefreshHair()
end

---@param isOn boolean 隐藏配饰开关
function FaceEditBLL:HideDeco(isOn)
    if self._isHideDeco == isOn then
        return
    end
    self._isHideDeco = isOn
    EventMgr.Dispatch(FaceEditConst.Event.TieHairAndDeco, self._isHideDeco)
end

---后退操作
function FaceEditBLL:Undo()
    if self._proxy then
        local editItems = self._proxy:UndoData(self:GetMode() == FaceEditConst.Mode.TempMakeupAndHair)
        if editItems then
            self:_ApplyToChar(editItems)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7923)
        end
    end
end

function FaceEditBLL:CanUndo()
    return self._proxy:CanUndo()
end

---前进操作
function FaceEditBLL:Redo()
    if self._proxy then
        local editItems = self._proxy:RedoData(self:GetMode() == FaceEditConst.Mode.TempMakeupAndHair)
        if editItems then
            self:_ApplyToChar(editItems)
            self._proxy:GetCurrHistoryIndex()
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7924)
        end
    end
end

function FaceEditBLL:CanRedo()
    return self._proxy:CanRedo()
end

---重置操作
---@param uiMode number FaceEditConst.UIMode
function FaceEditBLL:Reset(uiMode)
    local editItems = nil
    if self:GetMode() == FaceEditConst.Mode.NewMakeupAndHair or self:GetMode() == FaceEditConst.Mode.MakeupAndHair or self:GetMode() == FaceEditConst.Mode.TempMakeupAndHair then
        -- MakeupAndHair：回到风格脸对应的妆容和头发
        editItems = self._proxy:ResetDataMakeup()
        if not table.isnilorempty(editItems) then
            self:_ApplyToChar(editItems)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
        end
    else
        if uiMode == FaceEditConst.UIMode.FaceStyle then
            self:ResetToStyleBase()
        elseif uiMode == FaceEditConst.UIMode.Voice then
            self:ResetToStyleVoice()
        else
            self:ResetToStyleFace()
        end
    end
end

function FaceEditBLL:CanReset(uiMode)
    if uiMode == FaceEditConst.UIMode.FaceStyle then
        return self:IsDiffFromBaseStyle()
    elseif uiMode == FaceEditConst.UIMode.Voice then
        return self:IsDiffFromStyleVoice()
    else
        return self:IsDiffFromStyle()
    end
end

function FaceEditBLL:ResetToStyleFace()
    if self:IsDiffFromStyle() then
        local editItems, keys = self._proxy:ResetData1()
        if not table.isnilorempty(editItems) then
            self:_ApplyToChar(editItems)
            self:_SyncStyleFaceBone()

            editItems = self._proxy:ResetData2(keys)
            self:_ApplyToChar(editItems)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
        end
    else
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
    end
end

function FaceEditBLL:ResetToStyleBase()
    if self:IsDiffFromBaseStyle() then
        local editItems = self._proxy:ResetDataBase()
        if not table.isnilorempty(editItems) then
            self:_ApplyToChar(editItems)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
        end
    else
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
    end
end

function FaceEditBLL:ResetToStyleVoice()
    if self:IsDiffFromStyleVoice()then
        local editItems = self._proxy:ResetVoiceData()
        if not table.isnilorempty(editItems) then
            self:_ApplyToChar(editItems)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
        end
    else
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7922)
    end
end

-------------------------------------------------------------------

---刷新肤色（捏脸编辑模式）
function FaceEditBLL:RefreshSkin()
    local key = FaceEditUtil.GetKey(FaceEditConst.MainType.Skin)
    self:ReapplyProp(key)
end

---刷新发型
function FaceEditBLL:RefreshHair()
    if self._isTieHair then
        --束发发型
        if not self._tiedHair then
            self._tiedHair = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACETIEDHAIR)
        end
        if self._tiedHair and self._editCharGo then
            CharacterMgr.ReplacePart(self._editCharGo, self._tiedHair, true)
            --束发保留自定义颜色
            for _, prop in pairs(FaceEditConst.HairCustomPropTypes) do
                local _key = FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, prop)
                self:ReapplyProp(_key)
            end
        end
    else
        local key = FaceEditUtil.GetKey(FaceEditConst.MainType.Hair)
        --试穿发型
        if self._tryHairCfgId then
            self:ApplyPropStyle(key, self._tryHairCfgId)
        else
            local value = self._proxy:GetValueForEdit(key)
            self:ApplyPropStyle(key, value)
        end
    end
end

---重新应用属性，不改动数据
---@param key number @编辑项key
function FaceEditBLL:ReapplyProp(key)
    local value = self._proxy:GetValueForEdit(key)
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "ReapplyProp [%s] = %s", key, value)
    self:ApplyPropSingle(key, value)
end

---仅应用样式，不记录数据（同样应用subs，用于束发，试穿发型等）
---@param key number @编辑项key
---@param value number|Color @编辑项值
function FaceEditBLL:ApplyPropStyle(key, value)
    if self._proxy and key and value then
        local editItems = self._proxy:GetChangeItems(key, value, FaceEditConst.UIPropClass.Style)
        local applyItems = self._proxy:GetApplyData(key, FaceEditConst.UIPropClass.Style, editItems, self:GetMode() == FaceEditConst.Mode.TempMakeupAndHair)
        if applyItems then
            self:_ApplyToChar(applyItems)
        end
    end
end

---仅应用单个属性，不记录数据
---@param key number @编辑项key
---@param value number|Color @编辑项值
function FaceEditBLL:ApplyPropSingle(key, value)
    if self._editCharHelper and key and value then
        self._editCharHelper:Apply(key, value)
    end
end

-------------------------------------------------------------------

---UI设置样式或颜色，同时更新 UIData 的选中态
---@param mainTab number @主页签
---@param L1Tab number @一级页签
---@param L2Tab number @二级页签
---@param index number @选中的 UIData 的索引
---@param value number|Color @编辑项值
function FaceEditBLL:SetPropColorOrStyle(mainTab, L1Tab, L2Tab, index)
    local rootData = self._proxy:GetOrGenUIDataByType(mainTab, L1Tab, L2Tab)
    local isHairOrMakeup = mainTab == FaceEditConst.MainType.Makeup or mainTab == FaceEditConst.MainType.Hair
    if isHairOrMakeup and L2Tab == 2 then
        -- 颜色节点特殊处理
        local styleNodes = rootData:GetChild(L1Tab):GetChild(1).children
        for _, styleNode in pairs(styleNodes) do
            if styleNode.isSelect then
                local colorNode = styleNode:GetChild(index)
                local key = FaceEditUtil.GetKey(colorNode.mainType, colorNode.subType, colorNode.nodeType)
                self:SetPropColor(key, colorNode.cfgId)
            end
        end
    else
        local nodeData
        if mainTab == FaceEditConst.MainType.Hair and (self._curMode ==  FaceEditConst.Mode.First or self._curMode == FaceEditConst.Mode.ReKnead) then
            nodeData = rootData:GetChild(L1Tab):GetChild(L2Tab):GetDefaultChild(index)
        else
            nodeData = rootData:GetChild(L1Tab):GetChild(L2Tab):GetChild(index)
        end

        local key = FaceEditUtil.GetKey(nodeData.mainType, nodeData.subType, nodeData.nodeType)
        if isHairOrMakeup then
            local locked = nodeData and nodeData.isLocked or false
            self:SetPropStyle(key, nodeData.cfgId, locked)
        else
            self:SetPropSingle(key, nodeData.cfgId)
        end
    end
    --self._proxy:ExclusiveSelectImageNode(mainTab, L1Tab, L2Tab, index)
end

---设置样式
---@param key number @编辑项key
---@param value number|Color @编辑项值
---@param locked boolean 未解锁
function FaceEditBLL:SetPropStyle(key, value, locked)
    local editItems = self._proxy:SetPropData(key, value, false, FaceEditConst.UIPropClass.Style, locked, self:GetMode() == FaceEditConst.Mode.TempMakeupAndHair, isKeepColor)
    self:_ApplyToChar(editItems)
    self:SaveToLocal()
    if key == FaceEditUtil.GetKey(FaceEditConst.MainType.Hair) then
        EventMgr.Dispatch(FaceEditConst.Event.ChangeSpecialItem)
    end
end

---设置推荐色
---@param key number @编辑项key
---@param value number|Color @编辑项值
function FaceEditBLL:SetPropColor(key, value)
    local editItems = self._proxy:SetPropData(key, value, false, FaceEditConst.UIPropClass.Color)
    self:_ApplyToChar(editItems)
    self:SaveToLocal()
end

---设置其他属性
---@param key number @编辑项key
---@param value number|Color @编辑项值
---@param silent boolean @静默，不抛数据刷新事件
function FaceEditBLL:SetPropSingle(key, value, silent)
    if self._proxy then
        local editItems = self._proxy:SetPropData(key, value, silent)
        self:_ApplyToChar(editItems)
        self:SaveToLocal()
    end
end

---数据应用到角色，调用前需要在角色加载时调用 FaceEditBLL:SetHostForEdit(go)
---@param editItems table[] EditItem[]
function FaceEditBLL:_ApplyToChar(editItems)
    --Debug.LogWithTag(GameConst.LogTag.FaceEdit, table.dump(editItems, "Apply"))
    if self._editCharHelper and editItems then
        self._editCharHelper:ApplyItems(editItems)
    end
end

--region 数据导入（保存/AI）
function FaceEditBLL:ImportFaceEditData(encodeStr, includeVoiceData)
    self._proxy:TakeEditItemsSnapshot()
    local localData = self._proxy:DecodeLocalData(encodeStr, includeVoiceData)
    if not localData then
        return false
    end
    self._proxy:LoadDataFromSource(localData, true)
    local editItems = self._proxy:GetEditItemsForEdit()
    self:_ApplyToChar(editItems)
    self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
    EventMgr.Dispatch(FaceEditConst.Event.ImportFaceData)
    return true
end

function FaceEditBLL:RevertImportFaceEditData()
    local editItems = self._proxy:GetEditItemsSnapshot()
    self:_ApplyToChar(editItems)
    self._proxy:ApplyEditItemsSnapshot(true)
    self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
end

function FaceEditBLL:ImportAIFaceData(makeup, density, bones)
    if self._editCharHelper and (self:GetMode() == FaceEditConst.Mode.First or self:GetMode() == FaceEditConst.Mode.ReKnead) then
        self._proxy:TakeEditItemsSnapshot()
        local localData = self._proxy:LoadAIFaceMakeupData(makeup, density)
        if not localData then
            return false
        end

        local tempId = makeup[#makeup]
        local allTempFace = LuaCfgMgr.GetAll("FaceStyle")
        localData[FaceEditUtil.GetKey(FaceEditConst.MainType.StyleFace, nil, FaceEditConst.EditPropType.PosA_Weight)] = 0
        localData[FaceEditUtil.GetKey(FaceEditConst.MainType.StyleFace, nil, FaceEditConst.EditPropType.PosB_Weight)] = 0
        localData[FaceEditUtil.GetKey(FaceEditConst.MainType.StyleFace, nil, FaceEditConst.EditPropType.PosC_Weight)] = 0
        for _,v in pairs(allTempFace) do
            if v.BaseID == tempId then
                localData[FaceEditUtil.GetKey(FaceEditConst.MainType.StyleFace, nil, FaceEditConst.EditPropType.PosA_Index)] = v.ID * FaceEditConst.ServerInflateFactor
                localData[FaceEditUtil.GetKey(FaceEditConst.MainType.StyleFace, nil, FaceEditConst.EditPropType.PosA_Weight)] = 1 * FaceEditConst.ServerInflateFactor
                localData[FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyelid, FaceEditConst.EditPropType.StyleAndColor)] = v.DefaultEyelid * FaceEditConst.ServerInflateFactor
                break
            end
        end

        self._proxy:LoadDataFromSource(localData, true)
        local editItems = self._proxy:GetEditItemsForEdit()
        self:_ApplyToChar(editItems)

        if self._editCharHelper then
            self._editCharHelper:SetBoneDetailValues(bones)
        end
        self:_SyncStyleFaceBone(true)

        self._proxy:UpdateSourceData()
        EventMgr.Dispatch(FaceEditConst.Event.FaceEditSwitchToAIFaceSure)
        return true
    end
end

function FaceEditBLL:GetAIFaceWhiteIds()
    if self._whiteIds == nil or self._whiteTypes then
        self._whiteIds = {}
        self._whiteTypes = {}

        for i, v in ipairs(FaceLocalDataConst.AIFaceMakeupBlackCheck) do
            if v == "FaceStyle" then
                if self._styleWhite == nil then
                    self._styleWhite = {}

                    local allCfgs = LuaCfgMgr.GetAll("FaceStyle")
                    for _, vv in pairs(allCfgs) do
                        self._styleWhite[vv.BaseID] = true
                    end
                end

                for baseId = 0, 6 do
                    if self._styleWhite[baseId] then
                        table.insert(self._whiteIds, baseId)
                        table.insert(self._whiteTypes, i - 1)
                    end
                end
            else
                local allCfgs = LuaCfgMgr.GetAll(v)
                for kk, vv in pairs(allCfgs) do
                    if not (vv.IsDefault == 0 or (vv.ItemCondition ~= nil and vv.ItemCondition ~= 0 and BllMgr.GetItemBLL():GetItemNum(vv.ItemCondition) == 0)) then
                        table.insert(self._whiteIds, kk)
                        table.insert(self._whiteTypes, i - 1)
                    end
                end
            end
        end
    end

    return self._whiteIds, self._whiteTypes
end
--endregion


--region FaceStyle 风格脸

---风格脸进入捏脸详细，应用风格脸数据
function FaceEditBLL:StyleFaceToDetail()
    --self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
    local editItems, keys = self._proxy:ResetData1()
    if editItems then
        self:_ApplyToChar(editItems)
        self:_SyncStyleFaceBone()

        editItems = self._proxy:ResetData3(keys)
        self:_ApplyToChar(editItems)
    end
end

---仅用于二次捏脸风格脸进入捏脸详细，不应用风格脸数据
function FaceEditBLL:StyleFaceToDetail1()
    local editItems = self._proxy:GetEditItemsSnapshot()
    self:_ApplyToChar(editItems)
    self._proxy:ApplyEditItemsSnapshot(true)
    self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
end

---首次捏脸详细返回风格脸
function FaceEditBLL:DetailToStyleFace()
    local editItems = self._proxy:ReloadStyleFace()
    self:_ApplyToChar(editItems)

    self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
    EventMgr.Dispatch(FaceEditConst.Event.RefreshEditItems)
end

---仅用于二次捏脸详情返回风格脸，保存之前的捏脸数据
function FaceEditBLL:DetailToStyleFace1()
    self._proxy:TakeEditItemsSnapshot()
    self:DetailToStyleFace()
end

---设置风格圆盘极坐标
---@param polar table 极坐标
---@param isDragging boolean 是否操作拖拽中
function FaceEditBLL:SetFaceStylePolarPos(polar, isDragging)
    local editItems = self._proxy:SetFaceStylePolarPos(polar, isDragging)
    self:_ApplyToChar(editItems)
end

---设置风格脸槽位对应脸配置
---@param posIdx number 风格圆盘脸槽位下标
---@param cfgId number 风格脸配置Id
function FaceEditBLL:SetFaceStyleIndex(posIdx, cfgId)
    local editItems = self._proxy:SetFaceStyleIndex(posIdx, cfgId)
    self:_ApplyToChar(editItems)
    if self._editCharHelper then
        self._editCharHelper:ForceUpdateMorph()
    end
    self:_SyncStyleFaceBone(true)
    self:SaveToLocal()
end

---同步风格脸Bone数据
function FaceEditBLL:_SyncStyleFaceBone(force)
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "_SyncStyleFaceBone() curMode = ", self:GetMode())
    if self._editCharHelper and (self:GetMode() == FaceEditConst.Mode.First or self:GetMode() == FaceEditConst.Mode.ReKnead) then
        local dict = self._editCharHelper:GetBoneDetailValue()
        return self._proxy:SyncPropStyleFaceBone(dict, force)
    end
end

function FaceEditBLL:IsDiffFromBaseStyle()
    local styleId = self._proxy:GetFaceStyleMaxWeightStyleId()
    return styleId ~= 1
end

function FaceEditBLL:IsDiffFromStyleVoice()
    for _, v in pairs(FaceEditConst.VoiceType) do
        local key = FaceEditUtil.GetKey(FaceEditConst.MainType.Voice, v, FaceEditConst.EditPropType.StyleAndColor)
        local value = self._proxy:GetValueForEdit(key)
        if value and value ~= BllMgr.GetFaceBLL():GetDefaultPlayerVoice(v) then
            return true
        end
    end
    return false
end

---得到当前的捏脸数据
---@return table<int,int>
function FaceEditBLL:GetCurrentEditItems(srcItems)
    local srcEditItems = srcItems == nil and self._proxy:GetEditItemsForEdit(false) or srcItems
    local editItems = {}
    for _, v in pairs(srcEditItems) do
        local mainType = FaceEditUtil.GetMainTypeByKey(v.key)
        if mainType == FaceEditConst.MainType.Skin or mainType == FaceEditConst.MainType.Hair or
                mainType == FaceEditConst.MainType.Bone or mainType == FaceEditConst.MainType.Makeup then
            editItems[v.key] = v.value
        end
    end
    return editItems
end

---是否与风格脸数据相同
function FaceEditBLL:IsDiffFromStyle()
    local curEditItems = self:GetCurrentEditItems()
    local styleFaceEditItems = self._proxy:GetStyleFaceInfo()
    ---获取风格脸的骨骼数据
    if self._editCharHelper and (self:GetMode() == FaceEditConst.Mode.First or self:GetMode() == FaceEditConst.Mode.ReKnead) then
        local cfgName = FaceEditUtil.GetCfgName(FaceEditConst.MainType.Bone)
        local allBonesCfg = LuaCfgMgr.GetAll(cfgName)
        for _, v in pairs(allBonesCfg) do
            local weight = self._editCharHelper:GetStyleBoneWeight(v.ParaName)
            if math.abs(weight) > 0.01 then
                local key = FaceEditUtil.GetKey(FaceEditConst.MainType.Bone, nil, v.ID)
                table.insertto(styleFaceEditItems, self._proxy:GetInnerChangeItems(key, weight, true))
            end
        end
    end
    styleFaceEditItems = self:GetCurrentEditItems(styleFaceEditItems)
    return self:DiffTwoEditItems(curEditItems, styleFaceEditItems)
end


---比较两个捏脸数据是否一致
function FaceEditBLL:DiffTwoEditItems(curEditItems, beforeEditItems)
    local epsilon = 0.01
    for k, v in pairs(curEditItems) do
        local value_type = FaceEditUtil.GetDataTypeByKey(k)
        local mainType = FaceEditUtil.GetMainTypeByKey(k)
        local isHairOrMakeup = mainType == FaceEditConst.MainType.Hair or mainType == FaceEditConst.MainType.Makeup
        local key = k
        if not beforeEditItems[key]  and isHairOrMakeup  then
            local subKey =  FaceEditUtil.GetSubKey(k)
            if subKey then
                key = subKey
            end
        end

        if beforeEditItems[key] then
            if value_type == FaceEditConst.ValueDataTypes.Color then
                if mainType ~= FaceEditConst.MainType.Hair then -- 头发高级颜色属性不开放设置不判断
                    local sqr = function(a) return a * a  end
                    local dis = sqr(beforeEditItems[key].a - v.a)
                    dis = dis + sqr(beforeEditItems[key].r - v.r)
                    dis = dis + sqr(beforeEditItems[key].g - v.g)
                    dis = dis + sqr(beforeEditItems[key].b - v.b)
                    if math.sqrt(dis) > epsilon then
                        return true
                    end
                end
            else
                if math.abs(beforeEditItems[key] - v) > epsilon then
                    return true
                end
            end
        else
            if mainType == FaceEditConst.MainType.Bone then
                if math.abs(v) > epsilon then
                    return true
                end
            else
                return true
            end

        end
    end
    
    return false
end

---是否与风格脸数据相同，只比较妆容与骨骼
function FaceEditBLL:IsDiffFromStyleBoneMakeup()
    local epsilon = 0.01
    local GetEditItemsTable = function(editItems)
        local makeupEditItems = {}
        local boneEditItems = {}
        for _, v in pairs(editItems) do
            local mainType = FaceEditUtil.GetMainTypeByKey(v.key)
            if mainType == FaceEditConst.MainType.Bone then
                boneEditItems[v.key] = v.value
            elseif mainType == FaceEditConst.MainType.Makeup then
                makeupEditItems[v.key] = v.value
            end
        end
        return makeupEditItems, boneEditItems
    end

    local curEditItems = self._proxy:GetEditItemsForEdit(false)
    local curMakeupEditItems, curBoneEditItems = GetEditItemsTable(curEditItems)
    local styleFaceEditItems = self._proxy:GetStyleFaceInfo()
    ---获取风格脸的骨骼数据
    if self._editCharHelper and (self:GetMode() == FaceEditConst.Mode.First or self:GetMode() == FaceEditConst.Mode.ReKnead) then
        local cfgName = FaceEditUtil.GetCfgName(FaceEditConst.MainType.Bone)
        local allBonesCfg = LuaCfgMgr.GetAll(cfgName)
        for _, v in pairs(allBonesCfg) do
            local weight = self._editCharHelper:GetStyleBoneWeight(v.ParaName)
            if math.abs(weight) > 0.01 then
                local key = FaceEditUtil.GetKey(FaceEditConst.MainType.Bone, nil, v.ID)
                table.insertto(styleFaceEditItems, self._proxy:GetInnerChangeItems(key, weight, true))
            end
        end
    end

    local styleMakeupEditItems, styleBoneEditItems = GetEditItemsTable(styleFaceEditItems)
    for k, v in pairs(curMakeupEditItems) do
        if styleMakeupEditItems[k] then
            local value_type = FaceEditUtil.GetDataTypeByKey(k)
            local mainType = FaceEditUtil.GetMainTypeByKey(k)
            if value_type == FaceEditConst.ValueDataTypes.Color then
                if mainType ~= FaceEditConst.MainType.Hair then -- 头发高级颜色属性不开放设置不判断
                    local sqr = function(a) return a * a  end
                    local dis = sqr(styleMakeupEditItems[k].a - v.a)
                    dis = dis + sqr(styleMakeupEditItems[k].r - v.r)
                    dis = dis + sqr(styleMakeupEditItems[k].g - v.g)
                    dis = dis + sqr(styleMakeupEditItems[k].b - v.b)
                    if math.sqrt(dis) > epsilon then
                        return true
                    end
                end
            else
                if math.abs(styleMakeupEditItems[k] - v) > epsilon then
                    return true
                end
            end
        else
            return true
        end
    end

    for k, v in pairs(curBoneEditItems) do
        if styleBoneEditItems[k] then
            if math.abs(styleBoneEditItems[k]  - v) > epsilon then
                return true
            end
        elseif math.abs(v) > epsilon then
            return true
        end
    end

    return false
end

--endregion

function FaceEditBLL:DetailToVoicePanel()
    self._proxy:ClearHistoryData()
end

function FaceEditBLL:VoiceToDetailPanel()
    local editItems = self._proxy:ResetVoiceData2()
    self:_ApplyToChar(editItems)
    self._proxy:UpdateSourceData()
    EventMgr.Dispatch(FaceEditConst.Event.RefreshEditItems)
end

--region MakeupTemplates 妆发模板

---@return number 获取妆发模板名限制长度
function FaceEditBLL:GetTemplateMaxNameLength()
    if not self._tempMaxNameLen then
        self._tempMaxNameLen = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACEMAKEUPTEMPLATENAMEMAX) or 99
    end
    return self._tempMaxNameLen * 2
end

---加载妆发模板
---@param templateId number @模板Id
function FaceEditBLL:ApplyTemplate(templateId)
    self._proxy:LoadApplyTemplate(templateId)
    local editItems = self._proxy:GetEditItemsForEdit()
    self:_ApplyToChar(editItems)
    self:_SyncStyleFaceBone()
    self._proxy:UpdateSourceData()
    EventMgr.Dispatch(FaceEditConst.Event.ImportFaceData)
end

---请求保存妆发模板
---@param templateId number @模板Id
---@param templateName string @模板名
---@param onlyRename bool @只是重命名
---@return bool @是否成功
function FaceEditBLL:ReqSaveTemplate(templateId, templateName, onlyRename)
    local data = nil
    if not onlyRename then
        data = self._proxy:GetSaveDataTemplate()
    end
    if templateId and templateName then
        self:SendSetKneadFaceTemplateReq(templateId, templateName, data, onlyRename)
    end
end

---保存妆发模板
---@param templateId number @模板Id
---@param templateName string @模板名
---@param data table @模板数据
function FaceEditBLL:SaveTemplate(templateId, templateName, data)
    self._proxy:AddOrSetTemplate(templateId, templateName, data)
end

---请求删除妆发模板
---@param templateId number @模板Id
---@return bool @是否成功
function FaceEditBLL:ReqDeleteTemplate(templateId)
    if templateId then
        self:SendDeleteKneadFaceTemplateReq(templateId)
    end
end

---删除妆发模板
---@param templateId number @模板Id
function FaceEditBLL:DeleteTemplate(templateId)
    self._proxy:DeleteTemplate(templateId)
end

--endregion

--region DressUp 试穿


---初始化试穿配置
function FaceEditBLL:InitFaceDressUpConfig()
    self._curDressUpPartDict = PoolUtil.GetTable()
    self._dressUpClothsTypeDict = PoolUtil.GetTable()
    self._defaultDressUpDict = PoolUtil.GetTable()

    --local cfgLst = LuaCfgMgr.GetAll("FaceClothTryOnList")
    --for clothID, cfg in pairs(cfgLst) do
    --    if cfg.Default == 1 then
    --        self._defaultDressUpDict[cfg.Type] = clothID
    --    end
    --
    --    ---按Type字段进行分类
    --    local lst = self:GetDressUpCloths(cfg.Type)
    --    table.insert(lst, cfg)
    --end
    --
    --for _, clothList in pairs(self._dressUpClothsTypeDict) do
    --    if next(clothList) then
    --        table.sort(clothList, function(a, b)
    --            return a.ID < b.ID
    --        end)
    --    end
    --end
end

---获取默认试穿配置
function FaceEditBLL:GetDefaultDressUpID(type)
    return type and self._defaultDressUpDict and self._defaultDressUpDict[type]
end

---获取试穿配置
---@param dressUpType int 装扮类型
function FaceEditBLL:GetDressUpCloths(dressUpType)
    self._dressUpClothsTypeDict = self._dressUpClothsTypeDict or {}
    self._dressUpClothsTypeDict[dressUpType] = self._dressUpClothsTypeDict[dressUpType] or {}
    return dressUpType and self._dressUpClothsTypeDict and self._dressUpClothsTypeDict[dressUpType] or {}
end

function FaceEditBLL:GetDressUpPartId(dressUpType)
    return dressUpType and self._curDressUpPartDict and self._curDressUpPartDict[dressUpType]
end

function FaceEditBLL:SetDressUpPartId(dressUpType, Id)
    self._curDressUpPartDict = self._curDressUpPartDict or PoolUtil.GetTable()
    self._curDressUpPartDict[dressUpType] = Id
end

function FaceEditBLL:ResetDressUpPart()
    --local cfgDic = PoolUtil.GetTable()
    --if self._curDressUpPartDict then
    --    for partType, partID in pairs(self._curDressUpPartDict) do
    --        local cfg = LuaCfgMgr.Get("FaceClothTryOnList", partID)
    --        cfgDic[partType] = cfg
    --    end
    --end
    --EventMgr.Dispatch(FaceEditConst.Event.ClearScenePlayerDress, cfgDic)
    --PoolUtil.ReleaseTable(cfgDic)
    --
    --table.clear(self._curDressUpPartDict)
end

--endregion

--region Proto

---请求获取捏脸数据
function FaceEditBLL:SendGetKneadFaceDataReq()
    local msg = PoolUtil.GetTable()
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "[GetKneadFaceDataRequest]")
    GrpcMgr.SendRequest(RpcDefines.GetKneadFaceDataRequest, msg)
    PoolUtil.ReleaseTable(msg)
end

---@param reply pbcmessage.GetKneadFaceDataReply
function FaceEditBLL:RecvGetKneadFaceDataReply(reply)
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "[GetKneadFaceDataReply] ", table.dump(reply.KneadFace, "KneadFace"))
end

---设置捏脸数据
---@param map_data table<number, number> @捏脸更新数据
---@param delete_data table[] number[] @捏脸删除数据
---@param is_cover bool @是否全量覆盖
function FaceEditBLL:SendKneadFaceReq(map_data, delete_data, is_cover)
    local msg = PoolUtil.GetTable()
    msg.EditData = map_data or {}
    msg.DelKeys = delete_data or {}
    msg.IsCover = is_cover and true or false
    msg.IsKneadFace = (self:GetMode() == FaceEditConst.Mode.ReKnead or self:GetMode() == FaceEditConst.Mode.First)
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[KneadFaceRequest] %s", table.dump(msg, "msg"))
    GrpcMgr.SendRequest(RpcDefines.KneadFaceRequest, msg)
    PoolUtil.ReleaseTable(msg)
end

---@param reply pbcmessage.KneadFaceReply
function FaceEditBLL:RecvKneadFaceReply(reply)
    Debug.LogWithTag(GameConst.LogTag.FaceEdit, "[KneadFaceReply]")
    --self._lastKneadTime = TimerMgr.GetCurTimeSeconds()
    BllMgr.GetFaceBLL():SetLastKneadTime(TimerMgr.GetCurTimeSeconds())
    self:SaveToServer()
end

---设置妆发模板
---@param templateId number @模板Id
---@param templateName string @模板名
---@param data table<number, number> @模板数据
---@param onlyRename boolean @仅重命名
function FaceEditBLL:SendSetKneadFaceTemplateReq(templateId, templateName, data, onlyRename)
    self._onlyRenameFlag = onlyRename
    local msg = PoolUtil.GetTable()
    msg.TemplateID = templateId
    msg.IsCover = not onlyRename  ---只是改名的话就不全量了
    msg.Template = {}
    msg.Template.TemplateName = templateName
    msg.Template.EditData = data or {}

    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[SetKneadFaceTemplateRequest] %s", table.dump(msg, "msg"))
    GrpcMgr.SendRequest(RpcDefines.SetKneadFaceTemplateRequest, msg)
    PoolUtil.ReleaseTable(msg)
end

---@param reply pbcmessage.SetKneadFaceTemplateReply
function FaceEditBLL:RecvSetKneadFaceTemplateReply(reply)
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[SetKneadFaceTemplateReply] TemplateID = %s, %s", reply.TemplateID, table.dump(reply.Template, "Template"))

    local id = reply and reply.TemplateID
    local template = reply and reply.Template
    local data = not self._onlyRenameFlag and template and template.EditData
    self:SaveTemplate(id, template and template.TemplateName, data)

    if self._onlyRenameFlag then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7802)
    else
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7807)
    end
end

---删除妆发模板
---@param templateId number @模板Id
function FaceEditBLL:SendDeleteKneadFaceTemplateReq(templateId)
    local msg = PoolUtil.GetTable()
    msg.TemplateID = templateId
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[DeleteKneadFaceTemplateRequest] TemplateID = %s", templateId)
    GrpcMgr.SendRequest(RpcDefines.DeleteKneadFaceTemplateRequest, msg)
    PoolUtil.ReleaseTable(msg)
end

---@param reply pbcmessage.DeleteKneadFaceTemplateReply
function FaceEditBLL:RecvDeleteKneadFaceTemplateReply(reply)
    Debug.LogFormatWithTag(GameConst.LogTag.FaceEdit, "[DeleteKneadFaceTemplateReply] TemplateID = %s", reply and reply.TemplateID)
    local templateId = reply and reply.TemplateID
    self:DeleteTemplate(templateId)
end

--endregion

--region 测试用代码，不能在业务中调用

---加载默认角色模型
function FaceEditBLL:LoadDefaultModel()
    local _defaultResourceId = 1001001
    local fashionCfg = LuaCfgMgr.Get("FashionData", _defaultResourceId)
    local partName
    if fashionCfg and fashionCfg.PartList then
        partName = fashionCfg.PartList[1]
    end
    local partList = { partName }
    local decoPartKeys = {}
    for _, v in ipairs(partList) do
        ---@type cfg.PartConfig
        local partCfg = LuaCfgMgr.Get("PartConfig", v)
        if partCfg and partCfg.Type == 3 then
            decoPartKeys[v] = true
        end
    end
    local suitKey = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACEDEFAULTMODEL)
    CharacterMgr.GetInsWithSuitKey(suitKey, function(gameObject, uuid)
        ---使用读取到的换装信息替换默认服装
        CharacterMgr.ChangeParts(gameObject, partList)

        local x3Animator = CharacterMgr.AddX3AnimatorData(gameObject, "X3Animator_PL_SCore_Common")
        --X3AnimatorUtil.SetAssetId(gameObject, 1)

        x3Animator:AddState("FaceMorphDefault", LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERFACEIDLECTS), true)
        x3Animator:Play("FaceMorphDefault", 0, CS.UnityEngine.Playables.DirectorWrapMode.Loop)
    end)
end
--endregion


return FaceEditBLL
