---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/2/14 14:54
---
---@class BGMBLL
local BGMBLL = class("BGMBLL", BaseBll)
---@type BGMDataProxy
local proxy = SelfProxyFactory.GetBGMDataProxy()

function BGMBLL:OnInit()
    proxy = SelfProxyFactory.GetBGMDataProxy()
    
    self.isMusicCompleteSet = false
    self.curRandomSongList = {}
    self.defAllSongListId = 1
    EventMgr.AddListener("SetBGMCallBack", self.OnBGMChangeCallBack, self)
    EventMgr.AddListener(GameSoundMgr.EVENT_MUSIC_COMPLETE, self.OnBGMComplete, self)
    EventMgr.AddListener("BGMSetModeCallBack", self.OnPlayModeChange, self)
    EventMgr.AddListener("BGMListIdChangeCallBack", self.OnPlayModeChange, self)
    EventMgr.AddListener("BGMUnlockSongUpdate", self.BGMUnlockSongUpdateCallBack, self)
    EventMgr.AddListener("BGMModifyListCallBack", self.OnBGMModifyListCallBack, self)
end

function BGMBLL:EnterGameReply(msg)
    if msg == nil then
        return
    end
    proxy:OnEnterGameReply(msg)
    self:SetCurRandList()
    self:SetCurPlaySongListData()
    self:CheckRedPoint()
    self:SetBGMPlayMode()
end

function BGMBLL:GetUnlockBGMCfgList()
    local retTab = {}
    local unlockBgmData = self:GetBGMDataList()
    for k, v in pairs(unlockBgmData) do
        local tempBgmCfg = LuaCfgMgr.Get("MainUIBGM", k)
        if tempBgmCfg then
            table.insert(retTab, tempBgmCfg)
        end
    end
    return retTab
end

function BGMBLL:GetBGMDataList()
    return proxy:GetBGMDataList()
end

function BGMBLL:GetDefSongListId()
    return self.defAllSongListId
end

---获取当前所有BGM
---@return table<cfg.MainUIBGM> 所有配置的bgm
function BGMBLL:GetAllBGMCfgList()
    local retTab = {}
    local allBgmCfg = LuaCfgMgr.GetAll("MainUIBGM")
    for k, v in pairs(allBgmCfg) do
        table.insert(retTab, v)
    end
    table.sort(retTab, function(a, b)
        return self:SortBgmCfg(a, b)
    end)
    return retTab
end

---排序 应用中>已解锁>未解锁
function BGMBLL:SortBgmCfg(a, b)
    ---是否被应用
    local aCurSort = 0
    local bCurSort = 0
    if self:GetCurSongListId() == 0 and self:GetCurSongId() == a.ID then
        aCurSort = 1
    end
    if self:GetCurSongListId() == 0 and self:GetCurSongId() == b.ID then
        bCurSort = 1
    end
    if aCurSort ~= bCurSort then
        return aCurSort > bCurSort
    end
    ---是否解锁
    local aUnlock = 0
    local bUnlock = 0
    if self:IsUnlockBGM(a.ID) then
        aUnlock = 1
    end
    if self:IsUnlockBGM(b.ID) then
        bUnlock = 1
    end
    if aUnlock ~= bUnlock then
        return aUnlock > bUnlock
    end
    return a.Sort < b.Sort
end

---判断bgm 是否解锁
---@param id int bgmCfgId
function BGMBLL:IsUnlockBGM(id)
    return proxy:IsUnlockBGM(id)
end

---获取当前应用的歌曲
---@return int songId
function BGMBLL:GetCurSongId()
    return proxy:GetCurSongId()
end

---获取播放模式
---@return BGMPlayMode bgm播放模式
function BGMBLL:GetCurPlayMode()
    return proxy:GetPlayMode()
end

---获取活动音乐开关
---@return boolean 活动开关
function BGMBLL:GetActiveSwitch()
    return proxy:GetSwitchOff()
end

---获取列表最大上限
---@return int 播放列表最大上限
function BGMBLL:GetMaxSongListNum()
    return proxy:GetMaxSongListNum()
end

---当前应用的歌曲列表id
---@return int 当前播放的播放列表id 0表示不是列表模式
function BGMBLL:GetCurSongListId()
    return proxy:GetCurSongListId()
end

---获取我的列表
---@return table<BGMListDataModel>
function BGMBLL:GetSongList()
    local songListData = table.dictoarray(proxy:GetSongListData())
    return songListData
end

---获取我的列表数量
---@return int  列表数量 减一是因为有个默认列表计数时需去除
function BGMBLL:GetCurSongListNum()
    local num = table.nums(proxy:GetSongListData())
    if num - 1 < 0 then
        return 0
    end
    return num - 1
end

---判断当前songId是否在播放中
---@param songId
---@return boolean true正在使用中 false 未在使用
function BGMBLL:ListSongIsPlay(songListId,songId)
    if self:GetCurSongListId()==songListId and self:GetCurSongId() == songId then
        return true
    end
    return false
end

---bgm 列表数据
function BGMBLL:GetBGMListData(listId)
    return proxy:GetSongListDataById(listId)
end

function BGMBLL:GetCurSongListData()
    return proxy:GetCurSongListData()
end

---获取应用的列表中歌曲的名字
function BGMBLL:GetCurPlayListName(listId)
    local songListData = self:GetBGMListData(listId)
    if songListData ~= nil then
        return songListData.name
    end
end

---设置随机播放列表
function BGMBLL:SetCurRandList()
    if self:GetCurPlayMode() ~= BGMPlayMode.Rand then
        return
    end
    local curSongListId = self:GetCurSongListId()
    local curSongId = self:GetCurSongId()
    local curSongListData = self:GetBGMListData(curSongListId)
    self.curRandomSongList = {}
    table.insert(self.curRandomSongList, curSongId)
    local randomTab = {}
    for i = 1, #curSongListData.songIds do
        local tempId = curSongListData.songIds[i]
        if curSongId ~= tempId then
            table.insert(randomTab, tempId)
        end
    end
    table.random_table(randomTab, self.curRandomSongList)
end

---设置播放歌曲的回调事件
function BGMBLL:OnBGMChangeCallBack()
    local curSongId = self:GetCurSongId()
    if curSongId ~= 0 and not self.isMusicCompleteSet then
        self:ChangeBGM(curSongId)
    end
    self.isMusicCompleteSet = false
end

---bgm自动播放完成的回调
function BGMBLL:OnBGMComplete(stateName)
    local curSongId = self:GetCurSongId()
    local mainUiBGMCfg = LuaCfgMgr.Get("MainUIBGM", curSongId)
    if mainUiBGMCfg and mainUiBGMCfg.Resource == stateName then
        self:PlayNextBGM()
    end
end

---播放模式change回调
function BGMBLL:OnPlayModeChange()
    self:SetBGMPlayMode()
    self:SetCurRandList()
    self:SetCurPlaySongListData()
end

---解锁bgm的回调
function BGMBLL:BGMUnlockSongUpdateCallBack()
    self:CheckRedPoint()
end

---更新列表
function BGMBLL:OnBGMModifyListCallBack()
    self:SetCurRandList()
    self:SetCurPlaySongListData()
end

---获取当前正在播放音乐的StateName
---@return string stateName
function BGMBLL:GetCurBGMStateName()
    local curSongId = self:GetCurSongId()
    local mainUIBGMCfgId = 0
    if curSongId ~= 0 then
        mainUIBGMCfgId = curSongId
    end
    local mainUiBGMCfg = LuaCfgMgr.Get("MainUIBGM", mainUIBGMCfgId)
    if mainUiBGMCfg ~= nil then
        return mainUiBGMCfg.Resource
    end
    return nil
end

---播放下一首歌曲
function BGMBLL:PlayNextBGM()
    local curPlayMode = self:GetCurPlayMode()
    if curPlayMode == BGMPlayMode.Sequence then
        local curSongListData = self:GetCurSongListData()
        self:PlaySongListNext(curSongListData.songIds)
    elseif curPlayMode == BGMPlayMode.Rand then
        if #self.curRandomSongList > 0 then
            self:PlaySongListNext(self.curRandomSongList)
        end
    end
end

---播放列表中的下一首歌曲
function BGMBLL:PlaySongListNext(songList)
    local curSongId = self:GetCurSongId()
    local nextIdx = 1
    for i = 1, #songList do
        if curSongId == songList[i] then
            nextIdx = i
            break
        end
    end
    if nextIdx + 1 <= #songList then
        nextIdx = nextIdx + 1
    else
        nextIdx = 1
    end
    local nextSongId = songList[nextIdx]
    if nextSongId ~= curSongId then
        self.isMusicCompleteSet = true
        self:SendSetBGM(songList[nextIdx], self:GetCurSongListId())
    end
end

--region发送服务器消息
---创建列表
function BGMBLL:SendBGMCreateList(name, songIds)
    local messageBody = PoolUtil.GetTable()
    messageBody.Name = name
    messageBody.SongIDs = songIds
    GrpcMgr.SendRequest(RpcDefines.BGMCreateListRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

function BGMBLL:SendBGMDeleteList(listId)
    local messageBody = PoolUtil.GetTable()
    messageBody.ListID = listId
    GrpcMgr.SendRequest(RpcDefines.BGMDeleteListRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---设置列表的歌曲 歌曲全量覆盖
function BGMBLL:SendBGMSetList(listId, name, songIds)
    local messageBody = PoolUtil.GetTable()
    messageBody.ListID = listId
    messageBody.SongIDs = songIds
    messageBody.Name = name
    GrpcMgr.SendRequest(RpcDefines.BGMModifyListRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---设置播放模式
function BGMBLL:SendBGMSetMode(mode)
    local messageBody = PoolUtil.GetTable()
    messageBody.Mode = mode
    GrpcMgr.SendRequest(RpcDefines.BGMSetModeRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---设置背景音乐
function BGMBLL:SendSetBGM(songId, listId)
    if songId == nil then
        songId = 0
    end
    if listId == nil then
        listId = 0
    end
    local messageBody = PoolUtil.GetTable()
    messageBody.SongID = songId
    messageBody.ListID = listId
    GrpcMgr.SendRequest(RpcDefines.SetBGMRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---设置活动开关
function BGMBLL:SendBGMActiveSwitch(switchOff)
    local messageBody = PoolUtil.GetTable()
    messageBody.SwitchOff = switchOff
    GrpcMgr.SendRequest(RpcDefines.BGMActiveSwitchRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end
--endregion

--region 和GameSoundMgr 相关接口
function BGMBLL:ChangeBGM(mainUiBGMId)
    local mainUiBGMCfg = LuaCfgMgr.Get("MainUIBGM", mainUiBGMId)
    if mainUiBGMCfg then
        GameSoundMgr.PlayMusic(mainUiBGMCfg.Resource, false)
    end
end
--endregion

---check红点逻辑
---@param  songId int songId
function BGMBLL:CheckRedPoint(songId)
    if RedPointMgr.IsInit() then
        local unlockBgmData = BGMBLL:GetBGMDataList()
        for k, v in pairs(unlockBgmData) do
            RedPointMgr.Save(1, X3_CFG_CONST.RED_MAINHOME_BGM_NEW, k)
        end
    else
        if songId then
            self:CheckSongRpBySongId(songId)
        else
            local unlockBgmData = BGMBLL:GetBGMDataList()
            for k, v in pairs(unlockBgmData) do
                self:CheckSongRpBySongId(k)
            end
        end
    end
end

function BGMBLL:CheckSongRpBySongId(songId)
    local redValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_MAINHOME_BGM_NEW, songId)
    if redValue == 0 then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAINHOME_BGM_NEW, 1, songId)
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAINHOME_BGM_NEW, 0, songId)
    end
end

---清除红点列表的形式
---@param songIdList table<int> songIdList
function BGMBLL:ClearSongRpByList(songIdList)
    for i = 1, #songIdList do
        local songId = songIdList[i]
        self:ClearSongRp(songId)
    end
end

---清除单个红点
---@param songId int songId
function BGMBLL:ClearSongRp(songId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAINHOME_BGM_NEW, 0, songId)
    RedPointMgr.Save(1, X3_CFG_CONST.RED_MAINHOME_BGM_NEW, songId)
end

---设置播放列表
function BGMBLL:SetCurPlaySongListData()
    local curPlayMode = self:GetCurPlayMode()
    if curPlayMode == BGMPlayMode.Single then
        return
    end
    local songIdListData = nil
    if curPlayMode == BGMPlayMode.Sequence then
        local curSongListData = self:GetCurSongListData()
        songIdListData = curSongListData.songIds
    elseif curPlayMode == BGMPlayMode.Rand then
        songIdListData = self.curRandomSongList
    end
    local setMusicListStateNameTab = {}
    for i = 1, #songIdListData do
        local tempSongId = songIdListData[i]
        local mainUIBgmCfg = LuaCfgMgr.Get("MainUIBGM", tempSongId)
        table.insert(setMusicListStateNameTab, mainUIBgmCfg.Resource)
    end
    GameSoundMgr.AddMusicListData(setMusicListStateNameTab)
end

---设置同步当前播放模式
function BGMBLL:SetBGMPlayMode()
    local curPlayMode = proxy:GetPlayMode()
    GameSoundMgr.SetPlayMode(curPlayMode)
end

function BGMBLL:CheckCondition(id, datas, ...)
    if id == X3_CFG_CONST.CONDITION_MUI_BGM_NUM then
        local retNum = self:GetBgmNumByRoleId(tonumber(datas[1]))
        return ConditionCheckUtil.IsInRange(retNum, tonumber(datas[2]), tonumber(datas[3])), retNum
    elseif id == X3_CFG_CONST.CONDITION_MUI_BGM_NUM_ALL then
        local retNum = table.nums(self:GetBGMDataList())
        return ConditionCheckUtil.IsInRange(retNum, tonumber(datas[1]), tonumber(datas[2])), retNum
    end
end

---根据roleId获取满足该条件
function BGMBLL:GetBgmNumByRoleId(roleId)
    local retNum = 0
    local unlockBgmData = self:GetBGMDataList()
    for k, v in pairs(unlockBgmData) do
        ---@type cfg.MainUIBGM
        local mainUIBgmCfg = LuaCfgMgr.Get("MainUIBGM", k)
        if mainUIBgmCfg and mainUIBgmCfg.Male == roleId then
            retNum = retNum + 1
        end
    end
    return retNum
end

return BGMBLL