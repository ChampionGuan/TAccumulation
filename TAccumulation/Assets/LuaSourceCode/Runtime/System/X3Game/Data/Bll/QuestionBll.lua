---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiantao.
--- DateTime: 2023/11/2 20:31
---
---@class QuestionBll:BaseBll
local QuestionBll = class("QuestionBll", BaseBll)
--region 问卷相关
---@param questionnaireData pbcmessage.QuestionnaireData
function QuestionBll:Init(questionnaireData)
    self:RefreshQuestionData(questionnaireData)
    ---登入时拉一次问卷列表
    self:SendGetQuestionnaireListRequest()
end

function QuestionBll:OnInit()
    EventMgr.AddListener(SDKDefine.Event.SDK_WEB_VIEW_NOTIFICATION, self.OnGetWebCall, self)
    EventMgr.AddListener(SDKDefine.Event.SDK_WEB_VIEW_CLOSE_NOTIFICATION, self.OnWebClose, self)
    ---活动中心数据类
    self.proxy = SelfProxyFactory.GetQuestionProxy()
    ---最近打开的问卷ID
    self.lastOpenQuestionID = -1
    self.isPauseMainHome = false
end

---刷新问卷奖励数据
function QuestionBll:RefreshQuestionData(data)
    self.proxy:RefreshQuestionData(data)
    EventMgr.Dispatch("Questionnaire_Info_Update")
end

function QuestionBll:OnQuestionnaireUpdate(data)
    self.proxy:OnQuestionnaireUpdate(data)
    EventMgr.Dispatch("Questionnaire_Info_Update")
end

---服务器领奖后定完成状态
function QuestionBll:OnQuestionReward(questID)
    self.proxy:SetQuestionFinished(questID)
    EventMgr.Dispatch("Questionnaire_Info_Update")
end

---获取可用问卷配置
function QuestionBll:GetAvailableQuestionConfig()
    return self.proxy:GetAvailableQuestionConfig()
end

---记录打开的问卷ID
function QuestionBll:RecordQuestion(id)
    self.lastOpenQuestionID = id
end

---打开当前问卷
function QuestionBll:OpenQuestionaire()
    local curConfig = BllMgr.GetQuestionBll():GetAvailableQuestionConfig()
    if (not curConfig) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_37100)
        EventMgr.Dispatch("Questionnaire_Info_Update")
        return
    end
    if curConfig.Type == self.proxy.QuestionTypeEnum.platForm then
        self:RecordQuestion(curConfig.QuestionnaireID)
        local fullString = curConfig.Url
        UniWebViewUtil.OpenUrlView(fullString, true, nil, curConfig.QuestionnaireID)
    elseif curConfig.Type == self.proxy.QuestionTypeEnum.wjxForm then
        self:SendQuestionnaireGetWJXTokenRequest(curConfig.QuestionnaireID)
    elseif curConfig.Type == self.proxy.QuestionTypeEnum.googleForm then
        UniWebViewUtil.OpenUrlView(curConfig.Url, true)
        self:OnOpenGoogleQuestionnaire(curConfig)
    end
    if(not UNITY_EDITOR) and curConfig ~= self.proxy.QuestionTypeEnum.wjxForm  then
        BllMgr.GetMainHomeBLL():Pause()
        self.isPauseMainHome = true
    end
end

function QuestionBll:OnWJXTokenGot(questionnaireID, token)
    local headLess = "%s?sojumpparm=%s"
    local curConfig = self.proxy:GetQuestionCfgByID(questionnaireID)
    local jumpToQuest = curConfig.Url
    local encodeToken = string.urlencode(token)
    local fullString = string.format(headLess, jumpToQuest, encodeToken)
    UniWebViewUtil.OpenUrlView(fullString, true)
    if(SDKMgr.IsHaveSDK()) then
        BllMgr.GetMainHomeBLL():Pause()
        self.isPauseMainHome = true
    end
end

function QuestionBll:OnOpenGoogleQuestionnaire(questionnaireConfig)
    ---google问卷
    if questionnaireConfig.Type == self.proxy.QuestionTypeEnum.googleForm then
        if not self.proxy:IsQuestionStart(questionnaireConfig.QuestionnaireID) then
            self:SendGetQuestionnaireRewardRequestWithGoogleForm(questionnaireConfig.QuestionnaireID)
        end
    end
end
---问卷完成后回调
function QuestionBll:OnGetWebCall(data)
    local jsonObject = data.args
    if (jsonObject.survey_id ~= nil) then
        self:SendGetQuestionnaireRewardRequest(jsonObject)
    end
end
---网页打开回调
function QuestionBll:OnWebClose()
    if self.isPauseMainHome then
        BllMgr.GetMainHomeBLL():Resume()
        self.isPauseMainHome = false
    end
end
function QuestionBll:OnGetQuestionListReply(reply)
    self.proxy:SetQuestionList(reply)
    EventMgr.Dispatch("Questionnaire_Info_Update")
end
--endregion

---问卷相关
function QuestionBll:SendGetQuestionnaireInfoRequest()
    GrpcMgr.SendRequest(RpcDefines.GetQuestionnaireInfoRequest, {})
end

function QuestionBll:SendGetQuestionnaireRewardRequest(data)
    --local extra = JsonUtil.Decode(data.extra)
    local request = {
        QID = self.lastOpenQuestionID,
        SurveyRecordID = tonumber(data.survey_record_id),
        SurveyID = data.survey_id or "",
        Sign = data.sign or ""
    }
    GrpcMgr.SendRequest(RpcDefines.QuestionnaireRewardRequest, request, true)
end
---谷歌问卷领取，只有QID
function QuestionBll:SendGetQuestionnaireRewardRequestWithGoogleForm(QID)
    local request = {
        QID = QID,
        SurveyRecordID = 0,
        SurveyID = "",
        Sign = ""
    }
    GrpcMgr.SendRequest(RpcDefines.QuestionnaireRewardRequest, request, true)
end

function QuestionBll:SendGetQuestionnaireListRequest()
    GrpcMgr.SendRequestAsync(RpcDefines.CMSGameConfigEntriesGetRequest, {})
end

function QuestionBll:SendQuestionnaireGetWJXTokenRequest(QID)
    GrpcMgr.SendRequest(RpcDefines.QuestionnaireGetWJXTokenRequest, {QID = QID}, true)
end

return QuestionBll