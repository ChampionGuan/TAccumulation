---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/11/1 10:48
---@class ScoreStoryBLL
local ScoreStoryBLL = class("ScoreStoryBLL", BaseBll)
---@type ScoreStoryConst
local ScoreStoryConst = require("Runtime.System.X3Game.UI.UIView.ScoreStoryChapterWnd.Data.ScoreStoryConst")
local IsOffLine = false
---@type ScoreStoryChapterWnd
local OffLineView
function ScoreStoryBLL:OnInit()
end

---@param root GameObject 设置viewRoot
function ScoreStoryBLL:SetViewRoot(root)
    self.viewRoot = root
end

---@return GameObject 获取当前root
function ScoreStoryBLL:GetViewRoot()
    return self.viewRoot
end

---@param tag
---@return ScoreStoryTouchCtrl
function ScoreStoryBLL:GetTouchCtrl()
    local touchCtrl = require(ScoreStoryConst.ScoreStoryTouchCtrl).new()
    return touchCtrl
end

---@return ScoreStoryAvgController
function ScoreStoryBLL:GetAvgCtrl()
    return self.avgCtrl
end

---清除avg
function ScoreStoryBLL:ResetAvgCtrl()
    self.avgCtrl = nil
end

---@param rect table RectTransform.rect
---@param fontSize number 字体大小
---@param lineSpacing number 行间距
function ScoreStoryBLL:GetLineNum(rect, fontSize, lineSpacing)
    local lineNum = 1
    if lineSpacing > 0 then
        lineNum = math.round(rect.height / (fontSize + lineSpacing))
    else
        lineNum = math.round(rect.height / (fontSize * 1.5))
    end
    return lineNum
end

-------------------------------------------region 新拆分系统Start---------------------------------------------------
---@param storyType int
---@param storyId int
---@param lastReadSection int
---@param lastReadSectionNum int
function ScoreStoryBLL:Send_StoryUpdateRequest(storyType, storyId, lastReadSection, lastReadSectionNum)
    local req = {}
    req.StoryType = storyType
    req.storyID = storyId
    req.LastReadSection = lastReadSection
    req.LastReadSectionNum = lastReadSectionNum
    GrpcMgr.SendRequest(RpcDefines.StoryUpdateRequest, req)
end

---请求完本
---@param storyType int
---@param storyId int
function ScoreStoryBLL:Send_StoryFinishRequest(storyType, storyId)
    local req = {}
    req.StoryType = storyType
    req.storyID = storyId
    GrpcMgr.SendRequest(RpcDefines.StoryFinishRequest, req)
end

---请求领奖
---@param storyType int
---@param storyId int
function ScoreStoryBLL:Send_StoryRewardRequest(storyType, storyId)
    local req = {}
    req.StoryType = storyType
    req.storyID = storyId
    GrpcMgr.SendRequest(RpcDefines.StoryRewardRequest, req)
end

function ScoreStoryBLL:Send_StoryDataRequest(storyType, storyId)
    local req = {}
    req.StoryType = storyType
    req.storyID = storyId
    GrpcMgr.SendRequest(RpcDefines.StoryDataRequest, req)
end

---@param anecdoteData X3Data.AnecdoteItem
function ScoreStoryBLL:SetSelectAnecdote(anecdoteData)
    self.selectAnecdote = anecdoteData
end

---@return X3Data.AnecdoteItem
function ScoreStoryBLL:GetSelectAnecdote()
    return self.selectAnecdote
end

---@param legendItem X3Data.LegendItem
---@param secData X3Data.LegendSection
---@param callBack function
---@return ScoreStoryAvgController
function ScoreStoryBLL:PlayAvg(legendItem, secData, callBack)
    ---@type ScoreStoryAvgController
    self.avgCtrl = require(ScoreStoryConst.ScoreStoryAvgController).new()
    if self.avgCtrl then
        self.avgCtrl:Enter(legendItem, secData, callBack)
    end
    return self.avgCtrl
end

---@param legendItem X3Data.LegendItem
---@param secData X3Data.LegendSection
function ScoreStoryBLL:OpenAvgWin(legendItem, secData)
    local secCfg = LuaCfgMgr.Get("LegendStorySection", secData:GetPrimaryValue())
    if not secCfg or secCfg.DialogueID == 0 then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.ScoreStory, "score story(%s) dialogue id is nil!!!", secData:GetPrimaryValue())
        return false
    end
    if not secCfg or string.isnilorempty(secCfg.ConversationName) then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.ScoreStory, "score story(%s) conversation name is nil!!!", secData:GetPrimaryValue())
        return false
    end
    UICommonUtil.SetLoadingEnableWithOpenParam({
        MoveInCallBack = function()
            GameStateMgr.Switch(GameState.ScoreStoryAvg, legendItem, secData)
        end,
        IsPlayMoveOut = true,
    }, GameConst.LoadingType.Common, true)
    return true
end

---@param wndType X3DataConst.StoryType
---@param roleId int
---@param scoreId int 小传id
function ScoreStoryBLL:OpenWnd(wndType, roleId, scoreId)
    if wndType == X3DataConst.StoryType.Anecdote then
        if UIMgr.IsOpened(UIConf.AnecdoteWnd) then
            UIMgr.Close(UIConf.AnecdoteWnd)
        end
        local anecdoteItem
        if scoreId then
            anecdoteItem = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteItem, scoreId)
            if not anecdoteItem then
                anecdoteItem = X3DataMgr.AddByPrimary(X3DataConst.X3Data.AnecdoteItem, nil, scoreId)
            end
        end
        UIMgr.Open(UIConf.AnecdoteWnd, roleId, anecdoteItem)
    else
        UIMgr.Open(UIConf.SpecialDateChooseDateWnd, roleId, 3, scoreId)
    end
end

---region TLog相关
function ScoreStoryBLL:Send_TLogRemindTriggerRequest(storyMap, callBack)
    local req = {}
    req.TLogType = 1  --小传
    req.Story = storyMap
    GrpcMgr.SendRequest(RpcDefines.TLogRemindTriggerRequest, req)
    if callBack then
        callBack()
    end
end

---@param storyType X3DataConst.StoryType
---@param storyId int 小传id
---@param sectionId int 小节id
function ScoreStoryBLL:CreateStoryRemind(storyType, storyId, sectionId)
    local storyRemind = {}
    storyRemind.StoryType = storyType
    storyRemind.StoryID = storyId
    storyRemind.StorySessionID = sectionId
    return storyRemind
end

---跳转传说
---@param roleId int 男主id
---@param scoreId int
---@param showTips bool 未解锁是否飘字提示
function ScoreStoryBLL:JumpLegend(roleId, scoreId, showTips)
    if not roleId or roleId == 0 then
        roleId = BllMgr.GetLovePointBLL():GetMaxPointRole()
    end
    if not SelfProxyFactory.GetLegendProxy():IsUnlock() then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_14112)
        return
    end
    if showTips then
        if scoreId and scoreId > 0 then
            local itemData = X3DataMgr.Get(X3DataConst.X3Data.LegendItem, scoreId)
            if not itemData then
                Debug.LogErrorFormatWithTag(GameConst.LogTag.ScoreStory, "jump legendId{%s} roleId{%s} is invalid! ", scoreId, roleId)
                return
            end
            if itemData and itemData:GetState() == X3DataConst.StoryStatus.Lock then
                local tips = ""
                local legendCfg = LuaCfgMgr.Get("LegendStoryInfo", scoreId)
                local roleCfg = LuaCfgMgr.Get("RoleInfo", legendCfg.RoleID)
                local hasCard = SelfProxyFactory.GetLegendProxy():CheckHasScore(scoreId)
                if hasCard then
                    tips = UITextHelper.GetUIText(UITextConst.UI_TEXT_38022, UITextHelper.GetUIText(roleCfg.Name), BllMgr.GetLovePointBLL():GetPeriodByLevel(legendCfg.LoveLevelCondition))
                else
                    local _, cardList = SelfProxyFactory.GetLegendProxy():CheckHasScore(self.legendItem:GetPrimaryValue())
                    local cardName = PoolUtil.GetTable()
                    for i, v in pairs(cardList) do
                        cardName[i] = UITextHelper.GetUIText(v.Name)
                    end
                    tips = UITextHelper.GetUIText(UITextConst.UI_TEXT_38027, cardName[1], cardName[2])
                end
                UICommonUtil.ShowMessage(tips)
                return
            end
        end
    end
    self:OpenWnd(X3DataConst.StoryType.Legend, roleId, scoreId)
end

---跳转逸闻
---@param roleId int 男主id
---@param anecdoteId int 逸闻id 可为空 不传则跳转至第一个逸闻
---@param showTips bool 未解锁是否飘字提示
function ScoreStoryBLL:JumpAnecdote(roleId, anecdoteId, showTips)
    if not roleId or roleId == 0 then
        roleId = BllMgr.GetLovePointBLL():GetMaxPointRole()
    end
    if not SelfProxyFactory.GetAnecdoteProxy():IsUnlock() then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_14112)
        return
    end
    if showTips then
        if anecdoteId and anecdoteId > 0 then
            local itemData = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteItem, anecdoteId)
            if not itemData then
                Debug.LogErrorFormatWithTag(GameConst.LogTag.ScoreStory, "jump anecdoteId{%s} roleId{%s} is invalid! ", anecdoteId, roleId)
                return
            end
            if itemData and itemData:GetState() == X3DataConst.StoryStatus.Lock then
                local tips = ""
                local anecdoteCfg = LuaCfgMgr.Get("AnecdoteInfo", anecdoteId)
                local roleCfg = LuaCfgMgr.Get("RoleInfo", anecdoteCfg.RoleID)
                if anecdoteCfg.Condition > 0 then
                    local hasEnough = ConditionCheckUtil.CheckConditionByCommonConditionGroupId(anecdoteCfg.Condition)
                    if not hasEnough then
                        tips = ConditionCheckUtil.GetConditionDescByGroupId(anecdoteCfg.Condition)
                    end
                end
                if anecdoteCfg.LoveLevelCondition > 0 then
                    if BllMgr.GetRoleBLL():GetRoleLoveLevel(anecdoteCfg.RoleID) < anecdoteCfg.LoveLevelCondition then
                        tips = UITextHelper.GetUIText(UITextConst.UI_TEXT_38022, UITextHelper.GetUIText(roleCfg.Name), BllMgr.GetLovePointBLL():GetPeriodByLevel(anecdoteCfg.LoveLevelCondition))
                    end
                end
                UICommonUtil.ShowMessage(tips)
                return
            end
        end
    end
    self:OpenWnd(X3DataConst.StoryType.Anecdote, roleId, anecdoteId)
end

---@param scoreId int 从传说返回存储
function ScoreStoryBLL:SetLegendBackID(scoreId)
    self.legendBackId = scoreId
end

function ScoreStoryBLL:GetLegendBackID()
    return self.legendBackId
end

---end region TLog
-------------------------------------------region 新拆分系统End---------------------------------------------------

---@param wndType X3DataConst.StoryType
---@param roleId int
---@param scoreId int 小传id
function ScoreStoryBLL.CS_OpenWns(wndType, roleId, scoreId)
    BllMgr.GetScoreStoryBLL():OpenWnd(wndType, roleId, scoreId)
end

---@param wndType X3DataConst.StoryType
---@param obj GameObject
---@param scoreId int
function ScoreStoryBLL.CS_OpenOffLine(obj, wndType, scoreId, scoreName)
    IsOffLine = true
    local scoreData
    local roleId
    if wndType == X3DataConst.StoryType.Anecdote then
        --OffLineView = Framework.GetOrAddCtrlByPath(obj, "Runtime/System/X3Game/UI/UIView/AnecdoteWnd/UIViewContext_AnecdoteWnd")
        --OffLineView = Framework.GetOrAddCtrl(obj, X3Game.Ctrl.AnecdoteWnd)
        --scoreData = X3DataMgr.Get(X3DataConst.X3Data.AnecdoteItem, scoreId)
        --if not scoreData then
        --    scoreData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.AnecdoteItem, nil, scoreId)
        --end
    else
        local legendCfg = LuaCfgMgr.Get("LegendStoryInfo", scoreId)
        roleId = legendCfg.RoleID
        OffLineView = UICtrl.GetOrAddCtrl(obj, "Runtime.System.X3Game.UI.UIView.ScoreStoryChapterWnd.UIViewContext_ScoreStoryChapterWnd")
        scoreData = BllMgr.GetScoreStoryBLL():CreateCSData(scoreId)
    end
    OffLineView:SetOfflineData(scoreData, roleId, scoreName)
end

function ScoreStoryBLL:CreateCSData(scoreId)
    local scoreData = X3DataMgr.Get(X3DataConst.X3Data.LegendItem, scoreId)
    if not scoreData then
        scoreData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.LegendItem, nil, scoreId)
    end
    local secList = scoreData:GetSectionData()
    if not secList then
        local sectionList = LuaCfgMgr.GetListByCondition("LegendStorySection", { SCoreID = scoreId })
        table.sort(sectionList, function(a, b)
            return a.SectionID < b.SectionID
        end)
        for _, sec in ipairs(sectionList) do
            local secData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.LegendSection, nil, sec.SectionID)
            secData:SetState(X3DataConst.StoryStatus.Normal)
            scoreData:AddSectionDataValue(secData, sec.SectionID)
        end
    end
    return scoreData
end

---@return GameObject
function ScoreStoryBLL.CS_GetSelectPoint(wndType)
    if IsOffLine then
        return OffLineView:GetCurPoint()
    else
        if wndType == X3DataConst.StoryType.Legend then
            ---@type ScoreStoryChapterWnd
            local view = UIMgr.GetViewByTag(UIConf.ScoreStoryChapterWnd)
            if view then
                return view:GetCurPoint()
            end
        end
    end
end

function ScoreStoryBLL:GetIsOffline()
    return IsOffLine
end

function ScoreStoryBLL:OnClear()
end

return ScoreStoryBLL