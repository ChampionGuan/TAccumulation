---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianxin.
--- DateTime: 2023/10/25 11:34
---

---@class ActivityFieryFantasyBLL:BaseBll
local ActivityFieryFantasyBLL = class("ActivityFieryFantasyBLL", BaseBll)
local ActivityCenterConst = require("Runtime.System.X3Game.GameConst.ActivityCenterConst")
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
---@type ActivityFieryFantasyConst
local ActivityFieryFantasyConst = require("Runtime.System.X3Game.Modules.Activity.ActivityFieryFantasy.Data.ActivityFieryFantasyConst")
--region 活动

function ActivityFieryFantasyBLL:OnInit()
    self.prankDialogCtrl = nil
    self.isPreDialogue = false
    self.activityIDs = {}
end

function ActivityFieryFantasyBLL:AddActivityFieryFantasyID(activityID)
    if not table.containskey(self.activityIDs, activityID) then
        self.activityIDs[activityID] = activityID
    end
    self:OnAddEventListener()
    self:RefreshRedPoint()
    self:OnTaskDataUpdate()
end

function ActivityFieryFantasyBLL:RemoveActivityFieryFantasyID(activityID)
    if table.containskey(self.activityIDs, activityID) then
        self.activityIDs[activityID] = nil
    end
    self:OnRemoveEventListener()
end

function ActivityFieryFantasyBLL:OnAddEventListener()
    EventMgr.AddListener("TaskEventCheckRp", self.OnTaskCheckRp, self)
    EventMgr.AddListener(GameConst.TaskEvent.TaskStatusChange, self.OnTaskCheckRp, self)
    EventMgr.AddListener(ActivityCenterConst.EventType.REWARD_CLAIM_REPLY, self.OnActivityRewardUpdate, self)
    EventMgr.AddListener(ActivityFieryFantasyConst.Event.RewardUpdate, self.RefreshRedPoint, self)
    X3DataMgr.Subscribe(X3DataConst.X3Data.ActivityDialogue, self.RefreshRedPoint, self, X3DataConst.X3DataField.ActivityDialogue.UnlockIDs)
    X3DataMgr.Subscribe(X3DataConst.X3Data.ActivityDialogue, self.RefreshRedPoint, self, X3DataConst.X3DataField.ActivityDialogue.FinishIDs)
end

function ActivityFieryFantasyBLL:OnActivityRewardUpdate(rewards, activityId)
    self:OnTaskCheckRp()
end

function ActivityFieryFantasyBLL:OnTaskCheckRp(taskId)
    local shouldCheck = false
    if taskId then
        local config = BllMgr.GetTaskBLL():GetTaskCfg(taskId)
        if config and config.TaskType == Define.EumTaskType.Activity then
            shouldCheck = true

        end
    else
        shouldCheck = true
    end
    if shouldCheck then
        self:OnTaskDataUpdate(taskId)
    end
end

function ActivityFieryFantasyBLL:OnRemoveEventListener()
    EventMgr.RemoveListenerByTarget(self)
    X3DataMgr.UnsubscribeWithTarget(self)
end

function ActivityFieryFantasyBLL:OnTaskDataUpdate(taskId)

    local _type = ActivityCenterConst.ActivityEntryType.Task
    local _sortType = ActivityCenterConst.ActivityEntrySignType.ActivityFieryFantasy
    local cfg = BllMgr.GetActivityCenterBLL():GetActivityCenterCfgByType(_type, _sortType)
    if not cfg then
        Debug.LogError("找不到活动数据，type => ", _type, " sortType => ", _sortType)
        return
    end
    if taskId then
        local taskCfg = BllMgr.GetTaskBLL():GetTaskCfg(taskId)
        if not taskCfg then
            return
        end
        local shouldCheck = false
        for i, v in ipairs(cfg.ActivityTaskGroupID) do
            if v == taskCfg.GroupID then
                shouldCheck = true
                break
            end
        end
        if not shouldCheck then
            return
        end
    end
    self:UpdateTaskRedPoint(cfg.ActivityID)
end

function ActivityFieryFantasyBLL:UpdateTaskRedPoint(activityID)
    local hadTaskRewards, canGetRewardTaskList, canGetProgressReward = self:GetIsHadTaskRewards(activityID, true)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_FIERYFANTASY_TASK, hadTaskRewards and 1 or 0, activityID)
    EventMgr.Dispatch(ActivityFieryFantasyConst.Event.RewardUpdate, hadTaskRewards)
    return hadTaskRewards, canGetRewardTaskList, canGetProgressReward
end

function ActivityFieryFantasyBLL:GetIsHadTaskRewards(activityID, forceGet)
    if not activityID then
        Debug.Log("ActivityFieryFantasy CMS is Null!!!")
        return false
    end
    local canGetRewardTaskList = false
    local canGetProgressReward = false
    if not self.hadTaskRewards or forceGet then
        local cfg = LuaCfgMgr.Get("ActivityCenter", activityID)
        if not cfg then
            Debug.Log("ActivityCenter cfg is Null!!!,cfgId => ", activityID)
            return
        end
        if table.isnilorempty(cfg.ActivityTaskGroupID) then
            Debug.Log("ActivityCenter cfg ActivityTaskGroupID is Null!!!,cfgId => ", activityID)
            return
        end
        local taskData = self:InitTaskData(cfg.ActivityTaskGroupID)
        canGetRewardTaskList = self:GetCanGetRewardTaskList(activityID, taskData)
        canGetProgressReward = self:GetCanGetProcessReward(activityID)
        self.hadTaskRewards = (#canGetRewardTaskList > 0 or canGetProgressReward)
    end
    return self.hadTaskRewards, canGetRewardTaskList, canGetProgressReward
end

---@param activityID int
---@return X3Data.ActivityDialogue
function ActivityFieryFantasyBLL:GetActivityDialogueData(activityID)
    return SelfProxyFactory.GetActivityDialogueProxy():GetActivityDialogueData(activityID)
end

--endregion


--region 男主相关
function ActivityFieryFantasyBLL:SetSelectRoleID(activityID, roleID)
    BllMgr.GetActivityDialogueBLL():SendChooseMale(activityID, roleID)
end

function ActivityFieryFantasyBLL:GetSelectRoleID(activityID)
    return SelfProxyFactory.GetActivityDialogueProxy():GetActivityDialogueMaleID(activityID)
end

--endregion

--region 剧情相关
function ActivityFieryFantasyBLL:CheckPreDialogue(activityID)
    local activityData_cfg = LuaCfgMgr.Get("ActivityCenter", activityID)
    if activityData_cfg ~= nil then
        local activityDialogueData_x3 = self:GetActivityDialogueData(activityID)
        if activityDialogueData_x3 ~= nil then
            if activityDialogueData_x3:GetMaleID() == 0 then
                return true
            end
        end
    end
    return false
end

--
function ActivityFieryFantasyBLL:PlayDialogueSimple(dialogID, conversationID, dialogueEndCallBack, manType, actor)
    if (not self.prankDialogCtrl) then
        self.prankDialogCtrl = DialogueManager.InitByName("PrankDialogCtrl")
    end
    if (manType and actor) then
        local assetID = LuaCfgMgr.Get("RoleInfo", manType).DefaultAssetID
        self.prankDialogCtrl:InjectGameObject(assetID, actor)
    end
    local system = self.prankDialogCtrl:InitDialogue(dialogID, Mathf.Random(1, 10000), nil)
    local settingData = system:GetSettingData()
    settingData:SetShowReviewButton(false)
    settingData:SetShowAutoButton(false)
    self.prankDialogCtrl:StartDialogueById(dialogID, conversationID, nil, nil, function()
        if (dialogueEndCallBack) then
            dialogueEndCallBack()
        end
    end)
end

function ActivityFieryFantasyBLL:ClosePrankDialog()
    if (self.prankDialogCtrl) then
        self.prankDialogCtrl:ExitDialogueAll()
    end
    --这里有时会空，具体还没看
    if (self.prankDialogCtrl) then
        self.prankDialogCtrl:ClearDialogueAll()
    end
    self.prankDialogCtrl = nil
end

function ActivityFieryFantasyBLL:PlayPreDialogue(activityID)
    self.preDialogue = self:CheckPreDialogue(activityID)
    if self.preDialogue then
        local activityDialogueData_cfgList = LuaCfgMgr.GetListByCondition("ActivityDialogue", {
            ActivityID = activityID,
            ManLimit = -1
        })
        local activityDialogueData_cfg = activityDialogueData_cfgList[1]
        BllMgr.GetActivityDialogueBLL():PlayDialogue(activityDialogueData_cfg, function()
            UIMgr.Open(UIConf.CommonManListWnd, nil, Define.CommonManListWndType.Activity, function(roleId)
                BllMgr.GetActivityDialogueBLL():SendChooseMale(activityDialogueData_cfg.ActivityID, roleId)
                self:PlayRolePreDialogue(activityDialogueData_cfg.ActivityID)
            end, -1)
        end, true)
    end
end

---@param activityID int
---@return bool
function ActivityFieryFantasyBLL:PlayRolePreDialogue(activityID)
    local roleID = self:GetSelectRoleID(activityID)
    local activityDialogueData_cfgList = LuaCfgMgr.GetListByCondition("ActivityDialogue", {
        ActivityID = activityID,
        ManLimit = roleID,
        ShowOrder = 1,
    })
    local activityDialogueData_cfg = activityDialogueData_cfgList[1]
    if not SelfProxyFactory.GetActivityDialogueProxy():IsDialogueFinish(activityDialogueData_cfg.ID) then
        BllMgr.GetActivityDialogueBLL():PlayDialogue(activityDialogueData_cfg, function()
            BllMgr.GetActivityDialogueBLL():SendChooseMale(activityID, roleID)
            self:QuitFieryFieryFantasyDialogue()
        end)
    end
end

function ActivityFieryFantasyBLL:PlayRoleDialogue(activityDialogueData_Cfg)
    BllMgr.GetActivityDialogueBLL():PlayDialogue(activityDialogueData_Cfg, function()
        self:QuitFieryFieryFantasyDialogue()
    end)
end

function ActivityFieryFantasyBLL:QuitFieryFieryFantasyDialogue()
    EventMgr.AddListenerOnce(MainHomeConst.Event.MAIN_HOME_ENTER_AND_ACTOR_LOADED, self.EnterMainHome, self)
    UICommonUtil.WhiteScreenIn(function()
        EventMgr.Dispatch(ActivityCenterConst.EventType.RECOVER_VIEW)
        GameStateMgr.Switch(GameState.MainHome, false, false)
    end)
end

function ActivityFieryFantasyBLL:EnterMainHome()
    UICommonUtil.WhiteScreenOut(function()
        EventMgr.Dispatch(ActivityCenterConst.EventType.FANTASY_DIALOGUE_END)
    end)
end


--endregion

--region sendMessage
--region 恶作剧专用
function ActivityFieryFantasyBLL:SendPrankStartReq(activityID, interactionId)
    local req = {}
    req.ActivityID = activityID
    req.InteractionID = interactionId
    --Debug.LogErrorTable(req)
    GrpcMgr.SendRequestAsync(RpcDefines.ActivityInteractionStartRequest, req, true)
end

function ActivityFieryFantasyBLL:OnSendPrankStartReply()
end

function ActivityFieryFantasyBLL:SendPrankEndReq(activityID, interactionId, result, time)
    local req = {}
    req.ActivityID = activityID
    req.InteractionID = interactionId
    req.Result = result
    req.QteSec = math.floor(time or 0)
    GrpcMgr.SendRequest(RpcDefines.ActivityInteractionEndRequest, req, true)
end

function ActivityFieryFantasyBLL:OnSendPrankEndReply()

end

--endregion
--endregion

function ActivityFieryFantasyBLL:CaptureScreen(withUI, callback)
    ScreenCaptureUtil.CaptureTextureByMainCamera(nil, function(texture)
        BllMgr.GetPhotoSystemBLL():SaveSnapshotPicToLocal(texture, -1, GameConst.PhotoMode.Other)
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7345)
        if callback then
            callback(texture)
        end
    end, false, nil, withUI)
end

--region Task相关

---@param activityID number taskID
---@param taskData table table<X3Data.Task>
function ActivityFieryFantasyBLL:GetCanGetRewardTaskList(activityID, taskData)
    local result = {}
    local cmsCfg = BllMgr.GetActivityCenterBLL():GetActivityCMSConfig(activityID)
    local isOpen, isClose = BllMgr.GetActivityCenterBLL():GetOpenState(cmsCfg, true)
    if not isOpen then
        return result
    end
    for i, v in ipairs(taskData) do
        if v:GetStatus() == X3DataConst.TaskStatus.TaskCanFinish then
            table.insert(result, v:GetPrimaryValue())
        end
    end
    return result
end

---@public 初始化任务数据
---@return table<X3Data.Task>
function ActivityFieryFantasyBLL:InitTaskData(activityTaskGroupID)
    local taskGroupData = {}
    local taskData = {}
    for k, v in ipairs(activityTaskGroupID) do
        taskGroupData = table.insertto(taskGroupData, LuaCfgMgr.Get("TaskTableByGroupId", v))
    end

    for i, v in ipairs(taskGroupData) do
        local task = BllMgr.GetTaskBLL():GetTaskInfoById(v.ID)
        if task and task:GetIsShow() then
            table.insert(taskData, task)
        end
    end
    table.sort(taskData, function(a, b)
        local stateA = a:GetStatus()
        local stateB = b:GetStatus()
        if stateA ~= stateB then
            return stateA < stateB--- X3DataConst.TaskStatus.TaskCanFinish
        end
        return a:GetPrimaryValue() < b:GetPrimaryValue()
    end)
    return taskData
end

---@param cmsID number
---@return bool 是否可以领取阶段奖励
function ActivityFieryFantasyBLL:GetCanGetProcessReward(cmsID)
    local curPoint, limitPoint, hadReward, cfg = BllMgr.GetActivityCenterBLL():GetIntegralProgressData(cmsID)
    if hadReward then
        return true, { cfg.Rank }
    end
    return false
end

--endregion

---Rp
---@param activityID
function ActivityFieryFantasyBLL:RefreshRedPoint()
    for k, activityID in pairs(self.activityIDs) do
        local roleID = SelfProxyFactory.GetActivityDialogueProxy():GetActivityDialogueMaleID(activityID)
        if roleID == nil then
            return
        end
        local storyRedPointCount = 0
        local activityDialogData_cfgDatas = LuaCfgMgr.GetListByCondition("ActivityDialogue", { ActivityID = activityID })
        local roleRedPointCountDic = {}
        for i, v in ipairs(activityDialogData_cfgDatas) do
            if v.ManLimit ~= -1 then
                if not table.containskey(roleRedPointCountDic, v.ManLimit) then
                    roleRedPointCountDic[v.ManLimit] = 0
                end
                local canUnlock = false
                if BllMgr.GetActivityDialogueBLL():IsCanUnlock(v) and (not BllMgr.GetActivityDialogueBLL():IsActivityDialogueUnlock(activityID, v.ID)) then
                    if not table.isnilorempty(v.CostItem) then
                        local constItem = v.CostItem[1]
                        if BllMgr.GetItemBLL():GetItemNum(constItem.ID, constItem.Type) >= constItem.Num then
                            canUnlock = true
                        end
                    end
                end
                if canUnlock then
                    roleRedPointCountDic[v.ManLimit] = roleRedPointCountDic[v.ManLimit] + 1
                    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_FIERYFANTASY_STORY, 1, v.ID)
                else
                    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_FIERYFANTASY_STORY, 0, v.ID)
                end
            end
        end
        ---情人节剧情
        for k, v in pairs(roleRedPointCountDic) do
            local key = string.format("%s_%s", tostring(activityID), tostring(k))
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_FIERYFANTASY_STORY, v, key)
        end
    end
end

---Condition

---条件检查
---@param id int
---@param datas string[]
function ActivityFieryFantasyBLL:CheckCondition(id, datas)

end

return ActivityFieryFantasyBLL