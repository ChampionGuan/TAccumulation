---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/4/26 14:23
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")

---@class MainInteractBLL: BaseBll
local MainInteractBLL = class("MainInteractBLL", BaseBll)

function MainInteractBLL:OnInit()
    self.inter_proxy = SelfProxyFactory.GetMainInteractProxy()
    self.inter_type_list = PoolUtil.GetTable()
    ---@type bool
    self.is_blowing_success = false --是否吹气成功
    self:SetValidInteractType()
end

---通用检测时间接口
---@param curTime:当前时间 TimerMgr.GetCurDate()获得的数据结构
---@class TimeConfig: 配置时间类型数据
---@field param0:int 时间类型
---@field param1:int 参考CommonCondition配置表5配置的参数配置意义
---@field param2:int 参考CommonCondition配置表5配置的参数配置意义
---@field param3:int 参考CommonCondition配置表5配置的参数配置意义
---@field param4:int 参考CommonCondition配置表5配置的参数配置意义
---@param config:TimeConfig
function MainInteractBLL:CheckInTimeRange(curTime, config)
    ---@type MainInteractData
    local interData = self.inter_proxy:GetInteractData()
    if interData then
        local timeData = interData:GetConditionTime(config)
        return interData:CheckInTimeRange(curTime, timeData)
    end
    return false
end

function MainInteractBLL:ChangeScene(place_id, scene_id, Resource)
    if self.lastSceneId and self.lastSceneId == scene_id then
        --避免重复触发切换操作
        return
    end
    Debug.LogFormatWithTag(GameConst.LogTag.MainInteract, "Request ChangeScene scene_id==%s", scene_id)
    self:RequestChangeScene(place_id, scene_id)
    local finish_call = function()
        self.lastSceneId = nil
        self.inter_proxy:ChangeSceneInfo(place_id, scene_id)
        self.inter_proxy:SetResource(Resource)
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_CHANGE_SCENE_FINISH)
    end

    if not BllMgr.GetMainHomeBLL():IsEnterView() then
        finish_call()
        return
    end

    if not SceneMgr.IsSceneObjActive() then
        self:DoChangeScene(Resource, function()
            finish_call()
        end)
        return
    end

    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_CHANGE_SCENE_ACTION, { Resource = Resource, CallBack = function()
        finish_call()
    end })
end

function MainInteractBLL:DoChangeScene(Resource, callback)
    if Resource == SceneMgr.GetCurScene() then
        if callback then
            callback()
        end
        return
    end
    local change_event = function()
        SceneMgr.LoadSceneAsync(Resource, nil, GameConst.LoadingType.None, function()
            if callback then
                callback()
            end
            self.changeEvent = nil
            EventMgr.RemoveListener(MainHomeConst.Event.MAIN_HOME_POST_PROGRESS_ENABLE_CHANGED, self.ChangeSceneEvent, self)
        end)
    end
    self.changeEvent = change_event
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_POST_PROGRESS_ENABLE_CHANGED, self.ChangeSceneEvent, self)
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_CHANGE_SCENE_START)
end

---@param value bool
function MainInteractBLL:SetIsDelay(value)
    self.isDelay = value
end

---是否需要延迟
---@return bool
function MainInteractBLL:GetIsDelay()
    return self.isDelay
end

function MainInteractBLL:ChangeSceneEvent(is_active)
    if is_active and self.changeEvent then
        self.changeEvent()
    end
end

function MainInteractBLL:RequestChangeScene(place_id, scene_id)
    local req = {}
    req.PlaceID = place_id
    req.SceneID = scene_id
    GrpcMgr.SendRequest(RpcDefines.MainUISetPlaceSceneRequest, req)
    self.lastSceneId = scene_id
end

function MainInteractBLL:ChangeSceneStatus(placeID, status)
    local req = {}
    req.PlaceID = placeID
    req.Status = status
    GrpcMgr.SendRequest(RpcDefines.MainUISetPlaceStatusRequest, req, true)
end

function MainInteractBLL:Send_MainUISetCurPlaceRequest(placeID)
    local req = {}
    req.CurPlaceID = placeID
    GrpcMgr.SendRequest(RpcDefines.MainUISetCurPlaceRequest, req, true)
end

---@param type_id:MainUIAction表的配置ID
---@param role_id:男主id
function MainInteractBLL:Send_InterActiveTimeRequest(type_id, role_id)
    if not role_id then
        role_id = BllMgr.GetMainHomeBLL():GetData():GetRoleId()
    end
    local req = {}
    req.RoleID = role_id
    req.TypeID = type_id
    req.TriggerTime = TimerMgr.GetCurTimeSeconds()
    GrpcMgr.SendRequest(RpcDefines.InterActiveTimeRequest, req, true)
end

---@param roleId int  男主id
---@param maxValue int 心跳最大值
function MainInteractBLL:Send_InterActiveHeartBeatRequest(roleId, maxValue)
    local req = {}
    req.RoleID = roleId
    req.MaxValue = maxValue
    GrpcMgr.SendRequest(RpcDefines.InterActiveHeartBeatRequest, req)
end

function MainInteractBLL:SetValidInteractType()
    local condition = PoolUtil.GetTable()
    for actionType, v in pairs(MainHomeConst.InteractRedType) do
        condition.ActionType = actionType
        local cfg = LuaCfgMgr.GetDataByCondition("MainUIActionBtn", condition)
        if cfg then
            self.inter_type_list[actionType] = v
        end
    end
    PoolUtil.ReleaseTable(condition)
end

function MainInteractBLL:GetInteractType()
    return self.inter_type_list
end

---刷新交互红点
---@param roleId int 男主id
function MainInteractBLL:RefreshRed(roleId)
    if roleId == 0 then
        return
    end
    local count = 0
    if RedPointMgr.GetValue(X3_CFG_CONST.RED_MAINHOME_CHOOSE_MAN, roleId) ~= 1 then
        local mainUIActorInfo = LuaCfgMgr.Get("MainUIActorInfo", roleId)
        local conditionFinish = false
        if mainUIActorInfo ~= nil then
            local conditionID = mainUIActorInfo.UnlockConditionCheck[1]
            local data = {}
            for i = 2, #mainUIActorInfo.UnlockConditionCheck do
                data[#data + 1] = mainUIActorInfo.UnlockConditionCheck[i]
            end
            conditionFinish = ConditionCheckUtil.SingleConditionCheck(conditionID, data)
        end
        count = conditionFinish and count + 1 or count
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAINHOME_CHOOSE_MAN, count, roleId)
    end
    local condition = PoolUtil.GetTable()
    for actionType, v in pairs(self.inter_type_list) do
        local red_id = v.red_id
        if RedPointMgr.GetValue(red_id, roleId) ~= 1 then
            condition.ActionType = actionType
            condition.ActorID = roleId
            local actionCfg = LuaCfgMgr.GetDataByCondition("MainUIAction", condition)
            local conditionId = actionCfg and actionCfg.UnlockCondition or 0
            local checkRes = true
            if v.check_func then
                checkRes = v.check_func(roleId)
            end
            if conditionId > 0 then
                local ok = ConditionCheckUtil.CheckConditionByCommonConditionGroupId(conditionId)
                ok = ok and checkRes
                count = ok and count + 1 or count
                RedPointMgr.UpdateCount(red_id, ok and 1 or 0, roleId)
            end
        end
    end
    PoolUtil.ReleaseTable(condition)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_MAINHOME_INTERACT, count, roleId)
end

---刷新交互红点状态
---@param roleId int
---@param actionType MainHomeConst.ActionType
function MainInteractBLL:RefreshInteractRedState(roleId, actionType)
    if not actionType then
        for _, v in pairs(self.inter_type_list) do
            local value = RedPointMgr.GetCount(v.red_id, roleId)
            if value > 0 then
                RedPointMgr.Save(1, v.red_id, roleId)
                RedPointMgr.UpdateCount(v.red_id, 0, roleId)
            end
        end
    else
        local data = self.inter_type_list[actionType]
        if data then
            local value = RedPointMgr.GetCount(data.red_id, roleId)
            if value > 0 then
                RedPointMgr.Save(1, data.red_id, roleId)
                RedPointMgr.UpdateCount(data.red_id, 0, roleId)
            end
        end
    end

end

---判断特殊互动交互解锁状态
---@param roleId int
function MainInteractBLL:CheckScoreSpecial(roleId)
    local spList = LuaCfgMgr.GetListByCondition("MainUIAction", { ActionType = MainHomeConst.ActionType.ScoreSpecialAction, ActorID = roleId })
    local specialList = PoolUtil.GetTable()
    for k, v in pairs(spList) do
        local cfg = LuaCfgMgr.Get("MainUIActionBtn", v.ID)
        if cfg then
            table.insert(specialList, cfg)
        end
    end
    local unlock = #specialList > 0
    PoolUtil.ReleaseTable(specialList)
    return unlock
end

function MainInteractBLL:CheckCondition(id, datas)
    if not self.inter_proxy then
        self.inter_proxy = SelfProxyFactory.GetMainInteractProxy()
    end
    if id == X3_CFG_CONST.CONDITION_MUI_INTERACTIVE_HEARTBEAT_CD then
        local roleID = tonumber(datas[1])
        local cdState = tonumber(datas[2])
        local mainCfg = LuaCfgMgr.GetDataByCondition("MainUIAction", { ActionType = MainHomeConst.ActionType.Heartbeat, ActorID = roleID })
        local interType = mainCfg and mainCfg.ID or 0
        local cdTime = self.inter_proxy:GetCDTimeByType(interType, roleID)
        if cdState == 1 then
            return cdTime > TimerMgr.GetCurTimeSeconds()
        else
            return cdTime <= TimerMgr.GetCurTimeSeconds()
        end
    elseif id == X3_CFG_CONST.CONDITION_MUI_SCENE then
        --当前主界面场景是否（para1）为指定场景（para2）
        local isSame = tonumber(datas[1])
        local sceneId = tonumber(datas[2])
        Debug.LogFormatWithTag(GameConst.LogTag.MainInteract, "isSame==%s,ChecksceneId==%s,curSceneID==%s", isSame, sceneId, self.inter_proxy:GetSceneId())
        if isSame == 0 then
            return self.inter_proxy:GetSceneId() ~= sceneId
        else
            return self.inter_proxy:GetSceneId() == sceneId
        end
    end
end

---@param value bool
function MainInteractBLL:SetBlowState(value)
    self.is_blowing_success = value
end

---@return bool
function MainInteractBLL:GetBlowState()
    return self.is_blowing_success
end

---@param value fun
function MainInteractBLL:SetBlowCallBack(value)
    self.blow_call_back = value
end

---@return fun
function MainInteractBLL:GetBlowCallBack()
    return self.blow_call_back
end

---判断是否解锁主界面看板娘功能
---@param roleId int
---return bool
function MainInteractBLL:CheckMainUIMeetByRoleID(roleId)
    if not BllMgr.GetRoleBLL():IsUnlocked(roleId) then
        return false
    end
    local mainUIActorInfo = LuaCfgMgr.Get("MainUIActorInfo", roleId)
    local conditionFinish = false
    if mainUIActorInfo ~= nil then
        local conditionID = mainUIActorInfo.UnlockConditionCheck[1]
        local data = {}
        for i = 2, #mainUIActorInfo.UnlockConditionCheck do
            data[#data + 1] = mainUIActorInfo.UnlockConditionCheck[i]
        end
        conditionFinish = ConditionCheckUtil.SingleConditionCheck(conditionID, data)
    end
    return conditionFinish
end

---跳转主界面交互模式条件判断
---@param roleId int
---@return bool
function MainInteractBLL:CheckJumpCondition(roleId)
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_MAINUIINTERACTIVE) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9203)
        return
    end
    if roleId and roleId > 0 then
        local conditionFinish = self:CheckMainUIMeetByRoleID(roleId)
        if not conditionFinish then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9202)
            return
        end
        if BllMgr.GetMainHomeBLL():GetData():GetActorId() ~= roleId then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9206)
            return
        end
    end
    local isFirst = BllMgr.GetMainHomeBLL():IsFirstEvent(BllMgr.GetMainHomeBLL():GetData():GetActorId(), BllMgr.GetMainHomeBLL():GetData():GetEventId())
    if BllMgr.GetMainHomeBLL():GetData():GetActorId() == 0 or isFirst then
        --必须完成初见事件， 或者主界面有解锁男主
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9204)
        return
    end
    local stateCfg = BllMgr.GetMainHomeBLL():GetData():GetStateConf()
    local is_out = stateCfg and stateCfg.PosType == MainHomeConst.PosType.OUT
    if is_out then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9205)
        return
    end
    return true
end

function MainInteractBLL:OnClear()
    PoolUtil.ReleaseTable(self.inter_type_list)
    self.inter_type_list = nil
    EventMgr.RemoveListenerByTarget(self)
end

return MainInteractBLL