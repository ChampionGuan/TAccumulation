---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by PC.
--- DateTime: 2021/5/21 11:06
---@class RankBLL
local RankBLL = class("RankBLL", BaseBll)

local RankListMap = nil
local MyRankNum = nil
local MyRankInfoDic = nil
function RankBLL:Init()

end
function RankBLL:ClearRankData()
    RankListMap = nil
    MyRankNum = nil
end
function RankBLL:GetRankListCallBack(msg)
    local startIndex = msg.StartIndex
    if RankListMap == nil then
        RankListMap = {}
    end
    self.rankCount = msg.RankCount
    self.rankEnd = #msg.PlayerRankList == 0
    if msg.StartIndex == 0 then
        RankListMap[msg.RankID] = {}
        RankListMap[msg.RankID][msg.Season] = {}
        RankListMap[msg.RankID][msg.Season].PlayerRankList={}
        for i = 1, #msg.PlayerRankList do
            local playerRankData = msg.PlayerRankList[i]
            playerRankData.BaseData.ShowName = GameHelper.FilterSensitiveWord(PlayerUtil.GetFixName(playerRankData.BaseData.FamilyName, playerRankData.BaseData.Name))
            table.insert(RankListMap[msg.RankID][msg.Season].PlayerRankList, playerRankData)
        end
    else
        for i = 1, #msg.PlayerRankList do
            local playerRankData = msg.PlayerRankList[i]
            playerRankData.BaseData.ShowName = GameHelper.FilterSensitiveWord(PlayerUtil.GetFixName(playerRankData.BaseData.FamilyName, playerRankData.BaseData.Name))
            playerRankData.Rank = playerRankData.Rank + 1
            table.insert(RankListMap[msg.RankID][msg.Season].PlayerRankList, startIndex + i, playerRankData)
        end
    end
    if msg.StartIndex == 0 then
        if MyRankInfoDic == nil then
            MyRankInfoDic = {}
        end
        if msg.PlayerRank ~= nil then
            msg.PlayerRank.Rank = msg.PlayerRank.Rank + 1
            MyRankInfoDic[msg.RankID] = {}
            MyRankInfoDic[msg.RankID][msg.Season] = msg.PlayerRank
        end
    end
    table.sort(RankListMap[msg.RankID][msg.Season].PlayerRankList, function(a, b)
        return a.Rank < b.Rank
    end)
    EventMgr.Dispatch("GetRankListCallBack", msg.RankID)
end

function RankBLL:UpdatePlayerInfo(baseInfo)
    if RankListMap == nil then
        return
    end
    for _, seasonList in pairs(RankListMap) do
        for _,seasonInfo in pairs(seasonList) do
            for _,playerInfo in ipairs(seasonInfo.PlayerRankList) do
                if playerInfo.BaseData.Uid == baseInfo.Uid and playerInfo.BaseData.LastUpdateTime < baseInfo.LastUpdateTime then
                    playerInfo.BaseData = baseInfo
                    playerInfo.BaseData.ShowName = GameHelper.FilterSensitiveWord(PlayerUtil.GetFixName(playerInfo.BaseData.FamilyName, playerInfo.BaseData.Name))
                    EventMgr.Dispatch("RankPlayerInfoUpdate")
                end
            end
        end
    end
end

function RankBLL:GetRankCount()
    return self.rankCount or 1
end

function RankBLL:GetRankFlag()
    return self.rankEnd
end

function RankBLL:GetPlayerRankCallBack(msg)
    if MyRankNum == nil then
        MyRankNum = {}
    end

    if SelfProxyFactory.GetPlayerInfoProxy():GetUid() == msg.Uid then
        if MyRankNum[msg.RankID] == nil then
            MyRankNum[msg.RankID] = {}
        end
        MyRankNum[msg.RankID][msg.Season] = msg.Rank
    end
    EventMgr.Dispatch("GetPlayerRankCallBack")
end
function RankBLL:GetMyPlayerRankInfo(rankId, seasonId)
    if seasonId == nil then
        seasonId = 0
    end
    if MyRankInfoDic ~= nil and MyRankInfoDic[rankId] ~= nil and MyRankInfoDic[rankId][seasonId] ~= nil then
        return MyRankInfoDic[rankId][seasonId]
    end
    return nil
end
function RankBLL:GetRankListByRankId(rankId, seasonId)
    if seasonId == nil then
        seasonId = 0
    end
    local minVal = 7
    local sundryCfg = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.FRIENDSPOWERRANKMIN)
    if sundryCfg ~= nil then
        minVal = tonumber(sundryCfg)
    end
    local curRankList = {}
    if RankListMap ~= nil and RankListMap[rankId] ~= nil and RankListMap[rankId][seasonId] ~= nil and RankListMap[rankId][seasonId].PlayerRankList ~= nil then
        curRankList = RankListMap[rankId][seasonId].PlayerRankList
    end
    --table.sort(curRankList, function(a, b)
    --    return a.Rank < b.Rank
    --end)
    local retTab = {}
    if #curRankList < minVal then
        for i = 1, minVal do
            if i <= #curRankList then
                table.insert(retTab, curRankList[i])
            else
                local tab = {}
                table.insert(retTab, tab)
            end
        end
    else
        local rankListCfg = LuaCfgMgr.Get("RankList", rankId)
        if rankListCfg ~= nil and #curRankList > rankListCfg.RankDisplay then
            for i = 1, rankListCfg.RankDisplay do
                table.insert(retTab, curRankList[i])
            end
        else
            retTab = curRankList
        end
    end
    return retTab
end
function RankBLL:GetRankByUid(rankId, seasonId)
    if seasonId == nil then
        seasonId = 0
    end
    local rank = 0
    if MyRankNum ~= nil and MyRankNum[rankId] ~= nil and MyRankNum[rankId][seasonId] ~= nil then
        rank = MyRankNum[rankId][seasonId] + 1
    end
    return rank
end
local getRankListMessage = {}
function RankBLL:SendGetRankList(startIndex, rankId, isAsync, season)
    if season == nil then
        season = 0
    end
    getRankListMessage = {}
    getRankListMessage.StartIndex = startIndex
    getRankListMessage.RankID = rankId
    getRankListMessage.Season = season
    if startIndex == 0 then
        getRankListMessage.IncludeSelf = true
    else
        getRankListMessage.IncludeSelf = false
    end
    if isAsync then
        GrpcMgr.SendRequestAsync(RpcDefines.GetRankDataRequest, getRankListMessage)
    else
        GrpcMgr.SendRequest(RpcDefines.GetRankDataRequest, getRankListMessage)
    end
end
local getPlayerRankMessage = {}
function RankBLL:SendGetPlayerRank(uid, rankId)
    getPlayerRankMessage = {}
    getPlayerRankMessage.Uid = uid
    getPlayerRankMessage.RankID = rankId
    RankGameServiceAuto.GetPlayerRankAsync(getPlayerRankMessage)
end

return RankBLL