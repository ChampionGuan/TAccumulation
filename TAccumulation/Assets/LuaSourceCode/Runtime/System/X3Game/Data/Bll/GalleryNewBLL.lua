---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/3/15 12:24
---@class GalleryNewBLL:BaseBll
local GalleryNewBLL = class("GalleryNewBLL", BaseBll)

function GalleryNewBLL:OnInit()
    --region doll
    ---@type table<int, cfg.CollectionInfo[]>
    self._roleDollMap = {}
    ---@type table<int, cfg.CollectionInfo>
    local allCollection = LuaCfgMgr.GetAll("CollectionInfo")
    ---@type table<int, cfg.RoleInfo>
    local allRole = LuaCfgMgr.GetAll("RoleInfo")

    for k, _ in pairs(allRole) do
        self._roleDollMap[k] = {}
    end

    for _, v in pairs(allCollection) do
        if v.Source == 2 then
            local itemCfg = LuaCfgMgr.Get("Item", v.ID)
            if itemCfg then
                if itemCfg.Role == 0 or itemCfg.Role == -1 then
                    for _, list in pairs(self._roleDollMap) do
                        table.insert(list, v)
                    end
                elseif self._roleDollMap[itemCfg.Role] then
                    table.insert(self._roleDollMap[itemCfg.Role], v)
                end
            end
        end
    end

    local _collectionCompare = function(a, b)
        return a.Order < b.Order
    end

    for _, v in pairs(self._roleDollMap) do
        table.sort(v, _collectionCompare)
    end
    --endregion
end

---@param collection pbcmessage.CollectionData
---@param miaoGacha pbcmessage.MiaoGachaData
function GalleryNewBLL:Init(collection, miaoGacha)
    local proxy = SelfProxyFactory.GetGalleryProxy()
    proxy:InitCollectionMaxNum(collection)
    if collection.RoleCollectionMap then
        for roleId, v in pairs(collection.RoleCollectionMap) do
            if v.RewardGottenMap then
                for num, gotten in pairs(v.RewardGottenMap) do
                    if gotten then
                        proxy:AddDollRwd(roleId, num)
                    end
                end
            end
        end
    end

    if miaoGacha.RoleRewardsGotten then
        for roleId, v in pairs(miaoGacha.RoleRewardsGotten) do
            if v.RewardsGotten then
                for id, gotten in pairs(v.RewardsGotten) do
                    if gotten then
                        proxy:AddMiaoGachaRwd(roleId, id)
                    end
                end
            end
        end
    end

    self:RefreshRewardRed()
end

--region Card
function GalleryNewBLL:GetCardCount(roleId)
    local cardList = SelfProxyFactory.GetCardDataProxy():GetCardListByRoleId(roleId)
    local cardCfgList = self:GetCardIds(roleId)
    if #cardCfgList == 0 or cardList == nil or #cardList == 0 then
        return 0, #cardCfgList
    end

    local count = 0
    for _, v in pairs(cardList) do
        ---@type cfg.CardBaseInfo
        local cfg = LuaCfgMgr.Get("CardBaseInfo", v:GetPrimaryValue())
        if cfg and cfg.Visible == 1 then
            count = count + 1
        end
    end

    return count, #cardCfgList
end

function GalleryNewBLL:GetCardProgress(roleId)
    local count, total = self:GetCardCount(roleId)
    if total == 0 then
        return 0
    end
    return math.floor(count / total * 100)
end

function GalleryNewBLL:GetCardIds(roleId)
    local result = SelfProxyFactory.GetCardDataProxy():GetCardCfgListByRoleId(roleId) or {}
    result = BllMgr.GetCardBLL():CommonSortWithoutDevelop(result)
    return result
end

--endregion

--region collection
function GalleryNewBLL:GetDollCfgList(roleId)
    return self._roleDollMap[roleId]
end

function GalleryNewBLL:GetDollCount(roleId)
    if self._roleDollMap[roleId] == nil or #self._roleDollMap[roleId] == 0 then
        return 0, 0
    end

    local count = 0
    for i = 1, #self._roleDollMap[roleId] do
        ---@type Collection
        local data = BllMgr.GetCollectionRoomBLL():GetCollectionDataByRole(self._roleDollMap[roleId][i].ID, roleId)
        if data then
            count = count + 1
        end
    end

    return count, #self._roleDollMap[roleId]
end

function GalleryNewBLL:GetDollProgress(roleId)
    local count, total = self:GetDollCount(roleId)
    if total == 0 then
        return 0
    end
    return math.floor(count / total * 100)
end

function GalleryNewBLL:GetMiaoCard(roleId)
    ---@type table<int, cfg.MiaoGachaPackLibrary>
    local packMap = LuaCfgMgr.GetAll("MiaoGachaPackLibrary")
    local total = 0
    local count = 0

    for _, v in pairs(packMap) do
        if v.ModuleList then
            for i = 1, #v.ModuleList do
                total = total + 1
                count = count + (BllMgr.GetCollectionRoomBLL():GetCollectionDataByRole(v.ModuleList[i], roleId) and 1 or 0)
            end
        end
    end

    return count, total
end

function GalleryNewBLL:GetMiaoCardPackCount(roleId)
    ---@type table<int, cfg.MiaoGachaPackLibrary>
    local packMap = LuaCfgMgr.GetAll("MiaoGachaPackLibrary")
    local total = 0
    local count = 0

    for _, v in pairs(packMap) do
        total = total + 1

        if v.ModuleList then
            local get = true

            for i = 1, #v.ModuleList do
                local data = BllMgr.GetCollectionRoomBLL():GetCollectionDataByRole(v.ModuleList[i], roleId)
                if data == nil then
                    get = false
                    break
                end
            end

            if get then
                count = count + 1
            end
        end
    end

    return count, total
end

function GalleryNewBLL:GetMiaoPackCount(roleId, cards)
    local count = 0
    for i = 1, #cards do
        local data = BllMgr.GetCollectionRoomBLL():GetCollectionDataByRole(cards[i], roleId)
        if data then
            count = count + 1
        end
    end

    return count
end

function GalleryNewBLL:GetMiaoCardProgress(roleId)
    local count, total = self:GetMiaoCard(roleId)
    if total == 0 then
        return 0
    end
    return math.floor(count / total * 100)
end


--endregion

--region redPoint
function GalleryNewBLL:RefreshRewardRed()
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_HANDBOOK) then
        return
    end
    local rewards = LuaCfgMgr.GetAll("GalleryDollCollection")
    for roleId = 1, 5 do
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GALLERY_COLLECTION_DOLL_REWARD_ROLE, 0, roleId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GALLERY_COLLECTION_CAT_REWARD_ROLE, 0, roleId)

        local rpCount = 0
        for _, v in pairs(rewards) do
            local count, _ = self:GetDollCount(roleId)
            if count >= v.Num and not SelfProxyFactory.GetGalleryProxy():IsDollRewarded(roleId, v.Num) then
                rpCount = rpCount + 1
            end
        end
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GALLERY_COLLECTION_DOLL_REWARD_ROLE, rpCount, roleId)

        ---@type table<int, cfg.MiaoGachaPackLibrary>
        local allCatPack = LuaCfgMgr.GetAll("MiaoGachaPackLibrary")
        rpCount = 0
        for _, v in pairs(allCatPack) do
            local count, _ = self:GetMiaoPackCount(roleId, v.ModuleList)
            if count >= #v.ModuleList and not SelfProxyFactory.GetGalleryProxy():IsMiaoGachaRewarded(roleId, v.ID) then
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GALLERY_COLLECTION_CAT_PACK_REWARD, 1, v.ID * 10 + roleId)
                rpCount = rpCount + 1
            else
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GALLERY_COLLECTION_CAT_PACK_REWARD, 0, v.ID * 10 + roleId)
            end
        end

        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GALLERY_COLLECTION_CAT_REWARD_ROLE, rpCount, roleId)
    end
end

--endregion

function GalleryNewBLL:SwitchToSingleCard(cardId)
    DevelopHelper.OpenCardMainWnd(cardId, Define.CardMainWndViewMode.Preview_PICTURE, {cardId})
end

---检测条件,为CommonCondition检测藏品相关条件
function GalleryNewBLL:CheckCondition(id, datas, ...)
    local result = false
    if id == X3_CFG_CONST.CONDITION_DOLL_NUM_HISTORY then
        local count = SelfProxyFactory.GetGalleryProxy():GetCollectionNum(tonumber(datas[1]), tonumber(datas[2]))
        result = ConditionCheckUtil.IsInRange(count, tonumber(datas[3]), tonumber(datas[4]))
    end
    return result
end

---@return cfg.SCoreBaseInfo[]
function GalleryNewBLL:GetShowScoreList(roleId, unlock)
    ---@type cfg.SCoreBaseInfo[]
    local scoreList = LuaCfgMgr.GetListByCondition("SCoreBaseInfo", {Visible = 1, ManType = roleId})
    ---@type cfg.SCoreBaseInfo[]
    local result = {}

    local scoreBLL = BllMgr.GetScoreBLL()

    if unlock then
        for _, v in pairs(scoreList) do
            if scoreBLL:GetScoreData(v.ID) then
                table.insert(result, v)
            end
        end
    else
        result = scoreList
    end

    table.sort(result, function(a, b)
        if scoreBLL:GetScoreData(a.ID) and not scoreBLL:GetScoreData(b.ID) then
            return true
        end
        if not scoreBLL:GetScoreData(a.ID) and scoreBLL:GetScoreData(b.ID) then
            return false
        end

        return a.Rank < b.Rank
    end)

    return result
end

---@return X3Battle.DialogueConfig[]
function GalleryNewBLL:GetScoreVoiceList(scoreId)
    local dialogueDict = BattleUtil.GetBattleDialogueConfigs()
    local result = {}
    for _, v in pairs(dialogueDict) do
        if v.ScoreID == scoreId and v.IsGallery then
            table.insert(result, v)
        end
    end

    return result
end

function GalleryNewBLL:ActiveScoreVoices(voiceIdArray)
    if voiceIdArray == nil then
        return
    end

    local voiceIds = GameHelper.ToTable(voiceIdArray)
    local voiceMap = PoolUtil.GetTable()
    for i = 1, #voiceIds do
        local voiceId = voiceIds[i]
        local cfg = BattleUtil.GetBattleDialogueConfig(voiceId)
        if cfg == nil or cfg.IsGallery == false then
            return
        end

        local scoreId = cfg.ScoreID
        local scoreData = SelfProxyFactory.GetScoreProxy():GetScoreData(scoreId)
        local savedVoice = SelfProxyFactory.GetScoreProxy():HasVoice(scoreId)
        if scoreData ~= nil and not( savedVoice and savedVoice[voiceId]) then
            voiceMap[scoreId] = voiceMap[scoreId] or PoolUtil.GetTable()
            voiceMap[scoreId][voiceId] = true
        end
    end

    for scoreId, voiceIdMap in pairs(voiceMap) do
        ---@type pbcmessage.SCoreActiveVoicesRequest
        local messageBody = PoolUtil.GetTable()
        messageBody.SCoreId = scoreId
        messageBody.VoiceIDs = PoolUtil.GetTable()
        for k,_ in pairs(voiceIdMap) do
            table.insert(messageBody.VoiceIDs, k)
        end

        GrpcMgr.SendRequestAsync(RpcDefines.SCoreActiveVoicesRequest, messageBody, true)
        PoolUtil.ReleaseTable(messageBody.VoiceIDs)
        PoolUtil.ReleaseTable(messageBody)
        PoolUtil.ReleaseTable(voiceIdMap)
    end
    PoolUtil.ReleaseTable(voiceMap)
end

return GalleryNewBLL