---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/12/29 16:53
---@class ChargeBLL:BaseBll
local ChargeBLL = class("ChargeBLL", BaseBll)
local proxy = SelfProxyFactory.GetChargeProxy()
local SDKDefine = require("Runtime.System.X3Game.Modules.SDK.SDKDefine")
local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")
local ChargeConst = require("Runtime.System.X3Game.Modules.Charge.Data.ChargeConst")
function ChargeBLL:OnInit()
    proxy = SelfProxyFactory.GetChargeProxy()
    ---上一次充值时间戳
    self.lastChargeTime = 0
    ---是否是登录请求的发货
    self.isInitReward = false
    ---当前是否在购买商品
    self.curIsBuy = false
    ---chargeDataIsInit
    self.chargeDataIsInit = false
    ---是否在未初始化之前收到未发货订单消息
    self.isNeedSendDeliverPaidOrder = false
    ---充值的cd
    self.chargeCdTime = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.SHOPBUYCD)
    EventMgr.AddListener(SDKDefine.Event.SDK_BUY_CALL_BACK, self.OnSDKBuyCallBack, self)
    EventMgr.AddListener("Game_Focus", self.OnGameFocus, self)
    EventMgr.AddListener(ShopMallConst.ChargeEvent.CHARGE_DATA_INIT, self.OnChargeDataInit, self)
end

---@return table<cfg.Charge>,cfg.Charge
function ChargeBLL:GetChargeCfgData()
    local specialChargeCfg = nil
    local retTab = {}
    local allChargeCfg = LuaCfgMgr.GetAll("Charge")
    if allChargeCfg then
        for k, v in pairs(allChargeCfg) do
            if v.IsSpecial ~= 1 then
                table.insert(retTab, v)
            else
                specialChargeCfg = v
            end
        end
    end
    table.sort(retTab, function(a, b)
        if a.Sort ~= b.Sort then
            return a.Sort < b.Sort
        end
        return a.ID < b.ID
    end)
    return retTab, specialChargeCfg
end

---该档位是否是首次充值
---@param chargeId int
---@return boolean
function ChargeBLL:IsFirstChargeById(chargeId)
    local chargeRecord = proxy:GetChargeRecord()
    if chargeRecord == nil then
        return true
    end
    local chargeDic = chargeRecord:GetCharges()
    if chargeDic == nil then
        return true
    end
    return not table.containskey(chargeDic, chargeId)
end

---是否是首充状态
---@return boolean
function ChargeBLL:IsFirstCharge()
    local chargeData = proxy:GetChargeData()
    return chargeData:GetTotal() <= 0
end

---@param payId int PayInfoCfgId
---return  X3Data.PayInfo
function ChargeBLL:GetPayInfo(payId)
    return proxy:GetPayInfo(payId)
end

---获取价格
---@param payId int PayInfoCfgId
---@return string,boolean
function ChargeBLL:GetMoneyByPayId(payId)
    local payInfo = self:GetPayInfo(payId)
    local money = payInfo:GetMoney()
    if not string.isnilorempty(money) then
        return money, true
    end
    return money, false
end

---获取货币符号
---@param payId int PayInfoCfgId
---@return string
function ChargeBLL:GetCurrencySymbolByPayId(payId)
    local payInfo = self:GetPayInfo(payId)
    return payInfo:GetSymbol()
end

---获取当前价格货币显示
---@param price int
---@param payId int PayInfoCfgId
---@return string
function ChargeBLL:GetCurrencyAmountByPrice(price, payId)
    local payInfo = self:GetPayInfo(payId)
    local symbol = self:GetCurrencySymbolByPayId(payId)
    if payInfo:GetAlign() == 1 then
        return string.concat(tostring(price), symbol)
    else
        return string.concat(symbol, tostring(price))
    end
end

---带货币符号的价格
---param payId int PayInfoCfgId
---@return string
function ChargeBLL:GetCurrencyAmount(payId)
    local payInfo = self:GetPayInfo(payId)
    local retStr = nil
    if payInfo then
        retStr = payInfo:GetAmount()
    end
    if string.isnilorempty(retStr) then
        retStr = UITextHelper.GetUIText(UITextConst.UI_TEXT_50028)
    end
    return retStr
end

---获取多个payId价格的总和
---@param payIdList table<int>
---@return string
function ChargeBLL:GetCurrencySymbolByPayIdList(payIdList)
    if payIdList == nil then
        return
    end
    local totalPrice = 0
    local tempPayId = 0
    for i = 1, #payIdList do
        local payId = payIdList[i]
        if tempPayId == 0 then
            tempPayId = payId
        end
        local money, isSuccess = self:GetMoneyByPayId(payId)
        if isSuccess then
            totalPrice = totalPrice + tonumber(money)
        else
            return UITextHelper.GetUIText(UITextConst.UI_TEXT_50028)
        end
    end
    return self:GetCurrencyAmountByPrice(totalPrice, tempPayId)
end

---发送协议相关 现金支付统一接口
---@param payId int PayInfoCfgId
---@param depositId int 业务相关关联id 例：商品id
function ChargeBLL:SendCheckPayOrder(payId, depositId)
    local money, isSuccess = self:GetMoneyByPayId(payId)
    if not isSuccess then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_50029)
        return
    end
    self:OpenJpChargeSetAgeWnd(function()
        if depositId == nil then
            depositId = 0
        end
        local messageBody = PoolUtil.GetTable()
        messageBody.DepositId = depositId
        messageBody.PayID = payId
        GrpcMgr.SendRequest(RpcDefines.CheckPayOrderRequest, messageBody, true)
        PoolUtil.ReleaseTable(messageBody)
    end)
end

---@param birthday int
function ChargeBLL:SendReportPayLimitBirthday(birthday)
    local messageBody = PoolUtil.GetTable()
    messageBody.Birthday = birthday
    GrpcMgr.SendRequest(RpcDefines.ReportPayLimitBirthdayRequest, messageBody)
    PoolUtil.ReleaseTable(messageBody)
end

---CheckPayOrder的回调 下一步会去支付
---@param reply pbcmessage.CheckPayOrderReply
---@param request pbcmessage.CheckPayOrderRequest
function ChargeBLL:OnCheckPayOrderReply(reply, request)
    local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")
    local gmIsOpen = PlayerPrefs.GetBool(ShopMallConst.GM_CONST, false)
    if SDKMgr.IsHaveSDK() then
        ---开启gm 直接发货不去充值
        if gmIsOpen then
            self:SendPayDeliver(reply.ProductId)
            return
        end
        local payInfo = self:GetPayInfo(request.PayID)
        if payInfo then
            if self:CheckChargeCdTime() then
                self.curIsBuy = true
                SDKMgr.Buy(reply.ProductId, payInfo:GetName(), payInfo:GetDesc(), payInfo:GetMoney(), payInfo:GetProductId(), payInfo:GetCurrency())
            else
                local curTime = TimerMgr.GetCurTimeSeconds()
                local leftTime = self.chargeCdTime - (curTime - self.lastChargeTime)
                UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9498, tostring(leftTime))
            end
        end
    else
        self:SendPayDeliver(reply.ProductId)
    end
end

----Editor下购买接口
function ChargeBLL:SendPayDeliver(productId)
    local messageBody = PoolUtil.GetTable()
    messageBody.Params = BllMgr.GetGMCommandBLL():SplitBySpace(string.format("charge pay %s", tostring(productId)))
    GrpcMgr.SendRequest(RpcDefines.GmSendRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---请求将待发货订单发放
function ChargeBLL:SendDeliverPaidOrder()
    local messageBody = PoolUtil.GetTable()
    GrpcMgr.SendRequest(RpcDefines.DeliverPaidOrderRequest, messageBody)
    PoolUtil.ReleaseTable(messageBody)
end

---日服充值 专属年龄
function ChargeBLL:GetAge()
    local chargeData = proxy:GetChargeData()
    local birthday = tostring(chargeData:GetPayLimitBirthday())
    local year = tonumber(string.sub(birthday, 1, 4))
    local month = tonumber(string.sub(birthday, 5, 6))
    local curTimeData = TimerMgr.GetCurDate()
    local age = 0
    if curTimeData.year ~= year then
        age = (curTimeData.year - year) - 1
    end
    if curTimeData.month >= month then
        age = age + 1
    end
    if age <= 0 then
        age = 1
    end
    return age
end

---现金支付 日服需要年龄参数
function ChargeBLL:OpenJpChargeSetAgeWnd(callBack)
    if self:CheckIsOpenChargeLimitAgeWnd() then
        UIMgr.Open(UIConf.ShopLocaleJapanSettingWnd, callBack)
    else
        if callBack then
            callBack()
        end
    end
end

---是否需要打开设置年龄界面
function ChargeBLL:CheckIsOpenChargeLimitAgeWnd()
    local region = Locale.GetRegion()
    if region ~= Locale.Region.Japan then
        return false
    end
    local birthday = proxy:GetChargeData():GetPayLimitBirthday()
    if birthday == 0 then
        return true
    end
    return false
end

---韩服购买tips
function ChargeBLL:OpenSouthKoreaBuyTips()
    local urlInfo = LuaCfgMgr.Get("URL", X3_CFG_CONST.KRPURCHASEREMINDER)
    if urlInfo then
        UniWebViewUtil.OpenUrlView(urlInfo.URLJump, true)
    end
end

---日服购买tips
function ChargeBLL:OpenJapanBuyTips()
    UICommonUtil.ShowCommonRuleWnd(X3_CFG_CONST.RULETYPESHOPMALLJP)
end

---日服首次充值需要设置年龄
function ChargeBLL:OpenJapanSetAgeWnd()
    UIMgr.Open(UIConf.ShopLocaleJapanSettingWnd)
end

function ChargeBLL:OnMainHomeCallBack()
    self:InitPayInfo()
end

function ChargeBLL:OnGameFocus(focus)
    if UNITY_EDITOR then
        return
    end
    ---海外地区 从后台返回前台需要查询商品信息及价格
    if focus and Locale.GetRegion() ~= Locale.Region.ChinaMainland then
        self:SearchProductInfo()
    end
end

function ChargeBLL:OnChargeDataInit(isInit)
    if proxy:IsHavePaidOrders() or self.isNeedSendDeliverPaidOrder then
        self.isInitReward = not isInit
        self:SendDeliverPaidOrder()
        if self.isNeedSendDeliverPaidOrder then
            self.isNeedSendDeliverPaidOrder = false
        end
    end
    self:UpdateFirstChargeCount()
    if not self.chargeDataIsInit then
        self.chargeDataIsInit = true
    end
end

function ChargeBLL:UpdateFirstChargeCount()
    local chargeData = proxy:GetChargeData()
    local state = chargeData:GetFirstState()
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_FIRSTCHARGE, state == X3DataConst.FirstPayState.StateFinish and 1 or 0)
end

---sdk购买支付成功失败回调
function ChargeBLL:OnSDKBuyCallBack(isSuccess, ret)
    if isSuccess and self.curIsBuy then
        self.lastChargeTime = TimerMgr.GetCurTimeSeconds()
    else
        self.curIsBuy = false
    end
end

---充值检测本地的cd保护
---@return boolean
function ChargeBLL:CheckChargeCdTime()
    if self.lastChargeTime == 0 then
        return true
    end
    local curTime = TimerMgr.GetCurTimeSeconds()
    if curTime - self.lastChargeTime >= self.chargeCdTime then
        return true
    end
    return false
end

---重置充值时的时间戳
function ChargeBLL:ResetLastChargeTime()
    self.lastChargeTime = 0
end

---@param reply pbcmessage.DeliverPaidOrderReply
function ChargeBLL:OnDeliverPaidOrderCallBack(reply)
    local retShowReward = {}
    for i = 1, #reply.RewardOrders do
        local tempRewardOrder = reply.RewardOrders[i]
        for j = 1, #tempRewardOrder.RewardList do
            local reward = tempRewardOrder.RewardList[j]
            table.insert(retShowReward, reward)
        end
        SDKMgr.TrackPurchase(tempRewardOrder.Order.Amount, tempRewardOrder.Order.CurrencyType)
        SDKMgr.OrderComplete(tempRewardOrder.Order.OrderId, tempRewardOrder.Order.ChannelOrderId)
    end
    if not self.isInitReward then
        local retReward = GameHelper.CheckRewardListIsShow(retShowReward)
        if #retReward > 0 then
            ErrandMgr.Add(X3_CFG_CONST.POPUP_CHARGE_REWARD, { retReward, nil, true })
        end
    else
        self.isInitReward = false
    end
    self.curIsBuy = false
    self:ResetLastChargeTime()
end

---充值是否开放
function ChargeBLL:ChargeIsUnlock(isShowMessage)
    if isShowMessage == nil then
        isShowMessage = false
    end
    local isUnlock = SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_SHOP) and SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_SHOPMALL_CHARGE)
    if isShowMessage and not isUnlock then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_5926)
    end
    return isUnlock
end

function ChargeBLL:SearchProductInfo()
    proxy:SearchProductInfo()
end

---获取首充状态
---@return X3DataConst.FirstPayState
function ChargeBLL:GetFirstPayState()
    local chargeData = proxy:GetChargeData()
    local state = chargeData:GetFirstState()
    return state
end

---更新首充状态
---@param state X3DataConst.FirstPayState
function ChargeBLL:SetFirstPayState(state)
    local chargeData = proxy:GetChargeData()
    chargeData:SetFirstState(state)
    self:UpdateFirstChargeCount()
    EventMgr.Dispatch(ShopMallConst.ChargeEvent.FIRST_PAY_STATE_UPDATE)
end

---领取首充奖励
function ChargeBLL:FirstPayRewardRequest()
    local messageBody = PoolUtil.GetTable()
    GrpcMgr.SendRequest(RpcDefines.FirstPayRewardRequest, messageBody)
    PoolUtil.ReleaseTable(messageBody)
end

---获取chargeData 是否初始化
function ChargeBLL:GetChargeDataIsInit()
    return self.chargeDataIsInit
end

---设置初始化完是否需要请求未发货订单
function ChargeBLL:SetIsNeedSendDeliverPaidOrder(isSend)
    self.isNeedSendDeliverPaidOrder = isSend
end

return ChargeBLL