---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/11/29 15:33
---
---@class PhoneMsgBLL
local PhoneMsgBLL = class("PhoneMsgBLL", BaseBll)
local PhoneMsgConst = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgConst")
local PhoneMsgHelper = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgHelper")

function PhoneMsgBLL:OnInit()
    self.activeDelayTime = tonumber(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONEMSGACTIVETIME))
    EventMgr.AddListener("UserRecordUpdate", self.UpdateUploadCount, self)
    EventMgr.AddListener("FinStageReply", self.CheckPoke, self)
    EventMgr.AddListener("StageUpdateReply", self.CheckPoke, self)
    
    ---@type PhoneMsgSimulatorMgr
    self.simulator = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgSimulatorMgr").new()
    self.nudgeEnable = SysUnLock.IsUnLock(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONEPATUNLOCK))

    local convCfg = LuaCfgMgr.Get("PhoneMsgConversation", LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONEGUIDECONVERSATIONID))
    self.guideMsgId = convCfg and convCfg.MsgID
    self.waitingReplyList = {}
end

---@return PhoneMsgSimulatorMgr
function PhoneMsgBLL:GetSimulator()
    return self.simulator
end

---@param data pbcmessage.MessageData
function PhoneMsgBLL:OnEnterGame(data)
    SelfProxyFactory.GetPhoneMsgProxy():Init(data)
    self:CheckNewActiveMsg()
    RedPointUtil.CheckBubbleAndHeadIconRed()
    self.simulator:Start()
end

function PhoneMsgBLL:UpdateUploadCount(saveType, subID)
    if saveType == DataSaveRecordType.DataSaveRecordTypeMsgChatNum then
        local chatNum = self:GetChatNumber(subID)
        if chatNum == 0 then
            EventMgr.Dispatch("Mobile_Message_ReSetChatNumber")
        end
    end
end

function PhoneMsgBLL:CheckPoke()
    self.nudgeEnable = SysUnLock.IsUnLock(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONEPATUNLOCK))
end

---SaveCollectOrActiveSpecificMsg拆成两个函数
function PhoneMsgBLL:SaveCollect(id)
    self:CheckIsCollect(id)
end

function PhoneMsgBLL:CheckGuideMsg(id)
    if id == self.guideMsgId then
        self.simulator:CheckActive(id)
    end
end

function PhoneMsgBLL:CheckIsCollect(id)
    local msg = LuaCfgMgr.Get("PhoneMsg", id)
    if not msg then
        return
    end
    if msg.Type == X3_CFG_CONST.MESSAGE_TYPE_CHAT and msg.SubType == 2 and msg.CollectType == 1 then
        local chatSticker = LuaCfgMgr.GetDataByCondition("PhoneChatSticker", { MsgID = id })
        if chatSticker then
            self:AddCustomEmoji(chatSticker.Id, true, true)
        end
    end
end

function PhoneMsgBLL:ShowActiveTip(msgID)
    local msg = LuaCfgMgr.Get("PhoneMsg", msgID)
    if msg == nil then
        return
    end
    if msg.Type == 5 then
        --不处理闲聊
        return
    end
    if msg.Principal ~= 1 then
        --判断是否为主动激活
        return
    end
    local beginConversation = LuaCfgMgr.Get("PhoneMsgConversation", msg.Conversation)
    local firstTalk = LuaCfgMgr.Get("PhoneMsgConversation", beginConversation.NextID[1])
    if firstTalk == nil then
        return
    end
    local firstTalkType = LuaCfgMgr.Get("ConversationType", firstTalk.Type)

    if firstTalk.Teller == PhoneMsgConst.PlayerTellerId or firstTalkType.ShowMsgTips ~= 1 then
        --判断是否为男主先说第一句话
        return
    end

    local phoneSystemIsLock = SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_PHONE)
    local callIsLock = SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_MESSAGE)
    local retIsLock = callIsLock and phoneSystemIsLock
    if not retIsLock then
        return
    end
    ErrandMgr.Add(X3_CFG_CONST.POPUP_PHONE_MESSAGE_TIPS, { convId = firstTalk.ID, manID = msg.Contact })
end

function PhoneMsgBLL:ShowMiniTip(msgId, conversationId, contactId)
    local phoneMsgCfg = LuaCfgMgr.Get("PhoneMsg", msgId)
    local beginConversation = LuaCfgMgr.Get("PhoneMsgConversation", phoneMsgCfg.Conversation)
    local curConversationCfg = LuaCfgMgr.Get("PhoneMsgConversation", conversationId)
    local firstTalk = nil
    if beginConversation then
        firstTalk = LuaCfgMgr.Get("PhoneMsgConversation", beginConversation.NextID[1])
    end
    local curConversationType = LuaCfgMgr.Get("ConversationType", curConversationCfg.Type)
    if firstTalk and firstTalk.ID == conversationId then
        return
    end

    if curConversationCfg.Teller == PhoneMsgConst.PlayerTellerId or curConversationType.ShowMsgTips ~= 1 then
        return
    end

    local phoneSystemIsLock = SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_PHONE)
    local callIsLock = SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_MESSAGE)
    local retIsLock = callIsLock and phoneSystemIsLock
    if not retIsLock then
        return
    end
    ErrandMgr.Add(X3_CFG_CONST.POPUP_PHONE_MESSAGE_TIPS, { convId = conversationId, manID = contactId })
end

function PhoneMsgBLL:GetChatNumber(contactID)
    return SelfProxyFactory.GetUserRecordProxy():GetUserRecordValue(DataSaveRecordType.DataSaveRecordTypeMsgChatNum, contactID)
end

---所有调用的地方都需要额外处理
---@return X3Data.PhoneMsgDetailData
function PhoneMsgBLL:GetServerChatData(guid)
    return SelfProxyFactory.GetPhoneMsgProxy():GetMessageData(guid)
end

function PhoneMsgBLL:RedPackageIsGet(guid, convId)
    local redMap = SelfProxyFactory.GetPhoneMsgProxy():GetRedPacketMap()
    return redMap and (redMap[convId] == true)
end

function PhoneMsgBLL:HasRedPackageNotGet(guid)
    local mList = PhoneMsgHelper.GetConversation(guid)
    if mList == nil then
        return
    end
    for k, convId in pairs(mList) do
        local m_data = LuaCfgMgr.Get("PhoneMsgConversation", convId)

        if m_data.Type == X3_CFG_CONST.CONVERSATION_TYPE_REDPACKET then
            local isGet = self:RedPackageIsGet(guid, convId)
            if not isGet then
                return true
            end
        end
    end

    return false
end


-----------------------------------------------Client Line--------------------------------------------

local function GetAllNextID(conversationid, cfgName, ignoreCondition)
    local nextIdTB = {}

    ---@type cfg.PhoneMsgConversation
    local conversationidData = LuaCfgMgr.Get(cfgName or "PhoneMsgConversation", conversationid)

    if conversationidData.NextID ~= nil and conversationidData.Type ~= X3_CFG_CONST.CONVERSATION_TYPE_CHOICE_AUT then
        for i = 1, #conversationidData.NextID do
            table.insert(nextIdTB, #nextIdTB + 1, conversationidData.NextID[i])
        end
    end

    if conversationidData.ConditionNextID ~= nil then
        --对方才会配
        for i = 1, #conversationidData.ConditionNextID do
            local conditionData = LuaCfgMgr.GetListByCondition("PhoneMsgConversationCondition", { GroupId = conversationidData.ConditionNextID[i].Num })

            for j = 1, #conditionData do
                table.insert(nextIdTB, #nextIdTB + 1, conditionData[j].NextID)
            end
        end
    end

    if conversationidData.ConditionChoice ~= nil then
        --女方才会配
        for i = 1, #conversationidData.ConditionChoice do

            local isPass = ConditionCheckUtil.CheckConditionByCommonConditionGroupId(conversationidData.ConditionChoice[i].ID)

            if isPass or ignoreCondition then
                table.insert(nextIdTB, #nextIdTB + 1, conversationidData.ConditionChoice[i].Num)
            end
        end
    end

    return nextIdTB
end

----获取下一个节点集合
function PhoneMsgBLL:GetAllNextOption(converid, cfgName, ignoreCondition)
    return GetAllNextID(converid, cfgName, ignoreCondition)
end

---话题列表--不包含类型为5,6,7的话题
function PhoneMsgBLL:GetActiveEventMessageList(contactId, isAutoActive)
    local msgInfo = nil
    local result = {}

    ---@type X3Data.PhoneMsgContactData
    local contactData = SelfProxyFactory.GetPhoneMsgProxy():GetContactData(contactId)
    if contactData == nil then
        return result
    end

    ---@type cfg.PhoneMsg[]
    local cfgs = PoolUtil.GetTable()
    local activeMsg
    if isAutoActive then
        activeMsg = contactData:GetAutoActiveMsgMap()
    else
        activeMsg = contactData:GetTopicMap()
    end

    if activeMsg then
        for k, v in pairs(activeMsg) do
            msgInfo = LuaCfgMgr.Get("PhoneMsg", k)
            table.insert(cfgs, msgInfo)
        end
    end

    table.sort(cfgs, function(a, b)
        return a.Priority > b.Priority
    end)

    for i = 1, #cfgs do
        table.insert(result, cfgs[i].ID)
    end

    PoolUtil.ReleaseTable(cfgs)
    return result
end

---设置owner 获取闲聊列表
function PhoneMsgBLL:GetEmojiChatList()
    local result = {}
    local activeChatDic = SelfProxyFactory.GetPhoneMsgProxy():GetActiveMessageDic()
    if activeChatDic then
        for k, v in pairs(activeChatDic) do
            ---@type cfg.PhoneMsg
            local conInfo = LuaCfgMgr.Get("PhoneMsg", k)
            if conInfo then
                --剔除SubType == 2 ； SubType = 1代表闲聊；SubType = 2 代表表情包闲聊
                if conInfo.Type == X3_CFG_CONST.MESSAGE_TYPE_CHAT and conInfo.SubType == 1 then
                    table.insert(result, k)
                end
            else
                Debug.LogErrorFormat("Invalid MsgId : %d", k)
            end
        end
    end

    return result
end

---设置owner 获取闲聊列表
function PhoneMsgBLL:GetChatEventList(contactID)
    local result = {}
    local checkType = {}
    checkType[6] = true
    checkType[7] = true
    checkType[8] = true
    checkType[9] = true
    local activeChatDic = SelfProxyFactory.GetPhoneMsgProxy():GetActiveMessageDic()
    if activeChatDic then
        for k, v in pairs(activeChatDic) do
            local conInfo = LuaCfgMgr.Get("PhoneMsg", k)

            if conInfo and checkType[conInfo.Type] and conInfo.Contact == contactID then
                table.insert(result, k)
            end
        end
    end

    return result
end

--region 协议相关
--region 激活相关
function PhoneMsgBLL:CanStartMsg(id, contactId)
    local cfg = LuaCfgMgr.Get("PhoneMsg", id)
   return not self.simulator:IsWaitingForReply(contactId) or (cfg and cfg.InterruptMsg == 1)
end

function PhoneMsgBLL:SetIsWaitingForReply(contactId, isWaiting)
    if isWaiting then
        table.insert(self.waitingReplyList, contactId)
    else
        contactId = #self.waitingReplyList >= 1 and table.remove(self.waitingReplyList, 1) or 0
    end
    self.simulator:SetIsWaitingForReply(contactId, isWaiting)
end

function PhoneMsgBLL:StartNormalMsg(id, contactId, sync)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageNormalStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    if sync then
        GrpcMgr.SendRequest(RpcDefines.MessageNormalStartRequest, message)
    else
        GrpcMgr.SendRequestAsync(RpcDefines.MessageNormalStartRequest, message)
    end
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:StartRecallMsg(id, contactId)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageRecallStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    GrpcMgr.SendRequestAsync(RpcDefines.MessageRecallStartRequest, message)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:StartNudgeMsg(id, contactId)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageNormalStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    GrpcMgr.SendRequest(RpcDefines.MessageNudgeStartRequest, message)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:StartChatMsg(id, contactId)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageNormalStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    GrpcMgr.SendRequest(RpcDefines.MessageChatStartRequest, message)
    PoolUtil.ReleaseTable(message)
end

---@param contactNudge pbcmessage.ContactNudge
function PhoneMsgBLL:StartChangeManNudgeSignMsg(id, contactId, contactNudge)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageManNudgeSignStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    message.NudgeSign = contactNudge
    GrpcMgr.SendRequest(RpcDefines.MessageManNudgeSignStartRequest, message)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:StartChangeHeadMsg(id, contactId, head)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageManHeadStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    message.Head = head
    GrpcMgr.SendRequest(RpcDefines.MessageManHeadStartRequest, message)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:StartChangeBubbleMsg(id, contactId, bubbleId)
    if not self:CanStartMsg(id, contactId) then
        Debug.LogWarning("有正在等待激活回包的短信")
        return
    end
    self:SetIsWaitingForReply(contactId, true)
    ---@type pbcmessage.MessageManBubbleStartRequest
    local message = PoolUtil.GetTable()
    message.ID = id
    message.ContactID = contactId
    message.BubbleID = bubbleId
    GrpcMgr.SendRequest(RpcDefines.MessageManBubbleStartRequest, message)
    PoolUtil.ReleaseTable(message)
end

---@param shortMsg pbcmessage.ShortMsg
function PhoneMsgBLL:StartMsgSuccess(shortMsg, removeActive)
    local proxy = SelfProxyFactory.GetPhoneMsgProxy()
    local msgData = proxy:AddMessage(shortMsg)
    if removeActive then
        proxy:RemoveActiveMessage(shortMsg.TableID)
    end
    self:SetIsWaitingForReply(nil, false)
    local contactId = msgData:GetContactID()
    local contactData = SelfProxyFactory.GetPhoneMsgProxy():GetValidContactData(contactId)
    local cfg = LuaCfgMgr.Get("PhoneMsg", msgData:GetID())
    if cfg.InterruptMsg == 1 then
        local currentMsgId = contactData:GetCurMsgID()
        if currentMsgId ~= 0 then
            contactData:SetCurMsgID(0)
            self.simulator:FinishMsg(contactId)
            SelfProxyFactory.GetPhoneMsgProxy():RemoveMessage(currentMsgId, true)
        end
    end

    if msgData:GetIsFinished() then
        SelfProxyFactory.GetPhoneMsgProxy():AddMessageToHistory(msgData)
        contactData:SetLastMsgID(shortMsg.GUID)
        self.simulator:ActiveMsg(contactId)
    else
        contactData:SetCurMsgID(shortMsg.GUID)
        self.simulator:ActiveMsg(contactId, shortMsg.GUID)
    end

    self:ShowActiveTip(msgData:GetID())
    EventMgr.Dispatch("Mobile_Message_ActiveCallBack")
end

function PhoneMsgBLL:StartMsgFailed()
    self:SetIsWaitingForReply(nil, false)
end

---@param shortMsg pbcmessage.ShortMsg
function PhoneMsgBLL:StartInterruptMsgSuccess(shortMsg)
    local proxy = SelfProxyFactory.GetPhoneMsgProxy()
    local msgData = proxy:AddMessage(shortMsg)
    proxy:RemoveActiveMessage(shortMsg.TableID)

    local contactId = msgData:GetContactID()
    local contactData = SelfProxyFactory.GetPhoneMsgProxy():GetValidContactData(contactId)
    local currentMsgId = contactData:GetCurMsgID()
    if currentMsgId ~= 0 then
        self.simulator:FinishMsg(contactId)
        SelfProxyFactory.GetPhoneMsgProxy():RemoveMessage(currentMsgId, true)
    end

    if msgData:GetIsFinished() then
        SelfProxyFactory.GetPhoneMsgProxy():AddMessageToHistory(msgData)
        contactData:SetLastMsgID(shortMsg.GUID)
    else
        contactData:SetCurMsgID(shortMsg.GUID)
        self.simulator:ActiveMsg(contactId, shortMsg.GUID)
    end

    EventMgr.Dispatch("Mobile_Message_ActiveCallBack")
end
--endregion

function PhoneMsgBLL:UpdateMsgRequest(msgId, convId, sync)
    local message = PoolUtil.GetTable()
    message.Guid = msgId
    message.ConvID = convId
    if sync then
        GrpcMgr.SendRequest(RpcDefines.MessageUpdateRequest, message, true)
    else
        GrpcMgr.SendRequestAsync(RpcDefines.MessageUpdateRequest, message, true)
    end
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:UpdateMsgReply(msgId, convId)
    ---@type X3Data.PhoneMsgDetailData
    local msgInfo = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, msgId)
    if msgInfo then
        msgInfo:AddChoiceListValue(convId)
        self.simulator:UpdateMsg(msgInfo:GetContactID(), msgId, convId)
    end
end

function PhoneMsgBLL:MessageEnd(guid)
    local message = PoolUtil.GetTable()
    message.Guid = guid
    GrpcMgr.SendRequest(RpcDefines.MessageEndRequest, message, true)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:MessageEndReply(guid, rewardList)
    local msgData = self:GetServerChatData(guid)
    if msgData == nil then
        return
    end

    msgData:SetIsFinished(true)
    SelfProxyFactory.GetPhoneMsgProxy():AddMessageToHistory(msgData)

    self.simulator:FinishMsg(msgData:GetContactID())
    self:CheckNewActiveMsg()

    EventMgr.Dispatch("Mobile_Message_EndChat", rewardList)
end

function PhoneMsgBLL:GetReward(guid, convId)
    local message = PoolUtil.GetTable()
    message.Guid = guid
    message.ConversationID = convId
    GrpcMgr.SendRequest(RpcDefines.MessageGetRewardRequest, message, true)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:GetRewardReply(guid, convId, rewardList)
    SelfProxyFactory.GetPhoneMsgProxy():SetRewardState(convId, true)
    local severData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, guid)
    if severData == nil then
        return
    end

    local simData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgSimulatingData, severData:GetContactID())
    if simData then
        local guid = simData:GetGUID()
        local rewards = simData:GetRewardMap()
        local uid = PhoneMsgHelper.GetConverUid(guid, convId)
        if rewards and rewards[uid] then
            simData:RemoveRewardMapValue(uid)
        end
    end
    local convData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgConversationData, PhoneMsgHelper.GetConverUid(guid, convId))
    if convData then
        convData:SetRewardState(X3DataConst.PhoneMsgConversationRewardType.Rewarded)
    end
    EventMgr.Dispatch("Mobile_Message_GetRewardCallBack", rewardList)
end

function PhoneMsgBLL:GetRedPacket(guid, convId)
    local message = PoolUtil.GetTable()
    message.Guid = guid
    message.ConversationID = convId
    GrpcMgr.SendRequest(RpcDefines.MessageGetRedPacketRequest, message, true)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:GetRedPacketReply(guid, convId, rewardList)
    SelfProxyFactory.GetPhoneMsgProxy():SetRedPacketState(convId, true)
    local severData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, guid)
    if severData == nil then
        return
    end

    local simData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgSimulatingData, severData:GetContactID())
    if simData then
        local guid = simData:GetGUID()
        local rewards = simData:GetRedPacketMap()
        local uid = PhoneMsgHelper.GetConverUid(guid, convId)
        if rewards and rewards[uid] then
            simData:RemoveRedPacketMapValue(uid)
        end
    end

    local convData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgConversationData, PhoneMsgHelper.GetConverUid(guid, convId))
    if convData then
        convData:SetRewardState(X3DataConst.PhoneMsgConversationRewardType.Rewarded)
    end

    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_REDPACKAGE, 0, convId)
    EventMgr.Dispatch("Mobile_Message_RedPackageGetCallBack", guid, convId)
end

function PhoneMsgBLL:ManNudgePlayer(contactId, msgId, convId)
    local message = PoolUtil.GetTable()
    message.ContactID = contactId
    message.MessageGuid = msgId
    message.ConversationID = convId
    GrpcMgr.SendRequestAsync(RpcDefines.MessageManNudgePlayerRequest, message, true)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:ManNudgePlayerReply(contactId, msgId, convId)
    SelfProxyFactory.GetPhoneMsgProxy():AddNudge(contactId, msgId, convId)
    self.simulator:CheckNextNudge(contactId)
    ErrandMgr.Add(X3_CFG_CONST.POPUP_PHONE_MESSAGE_TIPS, { IsPoke = true, manID = contactId })
    EventMgr.Dispatch("Mobile_Message_ManPokePlayerCB", contactId, msgId, convId)
end

function PhoneMsgBLL:CollectSticker(stickerId)
    local message = PoolUtil.GetTable()
    message.StickerID = stickerId
    GrpcMgr.SendRequest(RpcDefines.MessageCollectStickerRequest, message, true)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:AddCustomEmoji(id, isHidTips, isNew)
    SelfProxyFactory.GetPhoneMsgProxy():AddCustomEmoji(id, isNew)
    EventMgr.Dispatch("Mobile_Message_SuccessSaveCustomEmoji", isHidTips)
    if not isHidTips then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_11713)
    end
end

function PhoneMsgBLL:ViewActiveMessageUpdateRequest()
    --todo redPoint
end
function PhoneMsgBLL:ClearEmojiRed(ids)
    if ids then
        for i = 1, #ids do
            RedPointMgr.Save(1, X3_CFG_CONST.RED_PHONE_MESSAGE_EMOJI, ids[i])
            SelfProxyFactory.GetPhoneMsgProxy():CheckStickerRed(ids[i])
        end
    end
end

function PhoneMsgBLL:HandlePlayerChoice(guid, convId)
    self:UpdateMsgRequest(guid, convId, true)
end

function PhoneMsgBLL:AddUniqueChoice(groupId, id)
    local preMap = SelfProxyFactory.GetPhoneMsgProxy():GetUniqueChoiceMap(groupId)
    local message = PoolUtil.GetTable()
    local dataList = PoolUtil.GetTable()
    message.Key = groupId
    message.Val = PoolUtil.GetTable()
    message.Val.DataList = dataList
    for k, _ in pairs(preMap) do
        table.insert( message.Val.DataList, k)
    end
    table.insert( message.Val.DataList, id)
    GrpcMgr.SendRequestAsync(RpcDefines.MessageUpdateCustomDataRequest, message, true)

    PoolUtil.ReleaseTable(dataList)
    PoolUtil.ReleaseTable(message.Val)
    PoolUtil.ReleaseTable(message)
end

function PhoneMsgBLL:ClearUniqueChoice(groupId)
    local message = PoolUtil.GetTable()
    message.Key = groupId
    SelfProxyFactory.GetPhoneMsgProxy():ClearUniqueChoice(groupId)
    GrpcMgr.SendRequestAsync(RpcDefines.MessageDeleteCustomDataRequest, message, true)
    PoolUtil.ReleaseTable(message)
end

--endregion

function PhoneMsgBLL:GetMsgProgress(contactId)
    ---@type cfg.PhoneMsg[]
    local allPhoneMsg = LuaCfgMgr.GetAll("PhoneMsg")
    local allMsgNum = 0
    local curHaveMsgNum = 0

    local allHaveMsg = {}

    ---@type X3Data.PhoneMsgDetailData[]
    local chatList = PoolUtil.GetTable()
    local count = SelfProxyFactory.GetPhoneMsgProxy():GetChatDic(chatList)

    if chatList then
        for i = 1, count do
            if chatList[i]:GetIsFinished() then
                allHaveMsg[chatList[i]:GetID()] = true
            end
        end
    end

    PoolUtil.ReleaseTable(chatList)

    for _, v in pairs(allPhoneMsg) do
        ---@type cfg.MsgType
        local typeCfg = LuaCfgMgr.Get("MsgType", v.Type)

        if v.Contact == contactId and typeCfg.IsShow and (v.IsShow == 1 or allHaveMsg[v.ID]) then
            allMsgNum = allMsgNum + 1
            curHaveMsgNum = curHaveMsgNum + (allHaveMsg[v.ID] and 0 or 1)
        end
    end
    return curHaveMsgNum, allMsgNum
end

--todo 直接传Type
function PhoneMsgBLL:IsStopType(converID, convInfo)
    local converInfo = convInfo
    if converInfo == nil then
        converInfo = LuaCfgMgr.Get("PhoneMsgConversation", converID)
    end

    return converInfo.Type and PhoneMsgConst.LogicConversationType[converInfo.Type]
end


--region 功能跳转
---历史聊天列表
function PhoneMsgBLL:JumpToHistoryList(contactID)
    UIMgr.Open(UIConf.MobileChatHistoryWnd, contactID)
end

---历史聊天
function PhoneMsgBLL:JumpToHistoryChat(msgID)
    ---@type cfg.PhoneMsg
    local msgInfo = LuaCfgMgr.Get("PhoneMsg", msgID)
    if msgInfo == nil then
        return
    end

    ---@type X3Data.PhoneMsgDetailData
    local chatData = nil
    ---@type X3Data.PhoneMsgDetailData[]
    local chatList = PoolUtil.GetTable()
    local count = SelfProxyFactory.GetPhoneMsgProxy():GetChatDic(chatList)

    for i = 1, count do
        if chatList[i]:GetContactID() == msgInfo.Contact and chatList[i]:GetID() == msgID and chatList[i]:GetIsFinished() then
            chatData = chatList[i]
        end
    end

    PoolUtil.ReleaseTable(chatList)

    if chatData == nil then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_5784)
        return
    end

    UIMgr.Open(UIConf.MobileChatHistoryViewWnd, chatData:GetPrimaryValue(), msgInfo.Contact)
end

function PhoneMsgBLL:IsChattingByContact(contactID)
    local proxy = SelfProxyFactory.GetPhoneMsgProxy()
    local contactData = proxy:GetContactData(contactID)
    if contactData then
        local curMsg = proxy:GetMessageData(contactData:GetCurMsgID())
        return curMsg ~= nil and not curMsg:GetIsFinished()
    end

    return false
end

function PhoneMsgBLL:HasAutoActiveMsg(params)
    local contactID = params[1]
    local param = params[2]
    local result = false

    local proxy = SelfProxyFactory.GetPhoneMsgProxy()
    local contactData = proxy:GetContactData(contactID)

    if contactData then
        local autoActiveMsgDic = contactData:GetAutoActiveMsgMap()
        result = autoActiveMsgDic and next(autoActiveMsgDic)
    end

    if param == 0 then
        return not result
    else
        return result
    end
end
--endregion

--region GM指令

---执行GM指令
---@param param table<string> GM参数
function PhoneMsgBLL:HandleGMCommand(param)
    if string.lower(param[2]) == "localclear" then
        --todo 清理本地数据
    end
end
--endregion
---清空短信提醒队列
function PhoneMsgBLL:ClearMessageTips()
    ErrandMgr.ClearByType(X3_CFG_CONST.POPUP_PHONE_MESSAGE_TIPS)
end

---获取联系人设置的动词
---@return string,string,string 前缀,角色名,后缀
function PhoneMsgBLL:GetContactInfo(roleID, contactID)
    local verb, suffix

    local roleName = BllMgr.GetMobileContactBLL():GetContactShowName(roleID)
    local contacts = BllMgr.GetMobileContactBLL():GetContactData(contactID)

    if contacts:GetNudge() ~= nil then
        if  contacts:GetNudge():GetAutoPatID() ~= 0 then
            local cfg = LuaCfgMgr.Get("PhoneAutoPat", contacts:GetNudge():GetAutoPatID())
            if cfg then
                verb = UITextHelper.GetUIText(cfg.PatAct)
                suffix = UITextHelper.GetUIText(cfg.PatSuffix)
            end
        elseif not (string.isnilorempty(contacts:GetNudge():GetVerb()) and string.isnilorempty(contacts:GetNudge():GetSuffix())) then
            verb = contacts:GetNudge():GetVerb()
            suffix = contacts:GetNudge():GetSuffix()
        end
    end

    local cfg = LuaCfgMgr.Get("PhoneContact", contactID)
    if cfg then
        if verb == nil then
            if cfg.DefaultPatAct == 0 then
                verb = contactID == 999 and UITextHelper.GetUIText(UITextConst.UI_TEXT_11162) or UITextHelper.GetUIText(UITextConst.UI_TEXT_11711)
            else
                verb = UITextHelper.GetUIText(cfg.DefaultPatAct)
            end
        end

        if suffix == nil then
            if cfg.DefaultPatSuffix == 0 then
                suffix = contactID == 999 and UITextHelper.GetUIText(UITextConst.UI_TEXT_11710) or UITextHelper.GetUIText(UITextConst.UI_TEXT_11712)
            else
                suffix = UITextHelper.GetUIText(cfg.DefaultPatSuffix)
            end
        end
    else
        verb = contactID == 999 and UITextHelper.GetUIText(UITextConst.UI_TEXT_11162) or UITextHelper.GetUIText(UITextConst.UI_TEXT_11711)
        suffix = contactID == 999 and UITextHelper.GetUIText(UITextConst.UI_TEXT_11710) or UITextHelper.GetUIText(UITextConst.UI_TEXT_11712)
    end

    return verb, roleName, suffix
end

--region condition check
function PhoneMsgBLL:CheckCondition(id, datas)
    if id == X3_CFG_CONST.CONDITION_PHONE_MSG_STATE then
        local msgId = tonumber(datas[1])
        local checkType = tonumber(datas[3])
        local state = tonumber(datas[3])
        return self:CheckMsgState(msgId, checkType, state)
    elseif id == X3_CFG_CONST.CONDITION_PHONE_AVATAR_DAILY_TIME then
        local changeTime = PhoneMsgHelper.GetDailyTime(datas[1], X3_CFG_CONST.MESSAGE_TYPE_AVATAR)
        return changeTime >= datas[2] and changeTime <= datas[3]
    elseif id == X3_CFG_CONST.CONDITION_PHONE_AVATAR_MATCHED then
        local chooseHead = self:GetChooseHead(datas[1])
        local playerHead = self:GetCurrentHead()
        if chooseHead == nil or playerHead == nil or playerHead:GetType() ~= X3DataConst.PhoneContactHeadType.PhotoHead then
            return false
        end
        local cfg = LuaCfgMgr.Get("PhoneAvatarPlayer", playerHead:GetPhotoId())
        if cfg ~= nil then
            if cfg.MatchingHeadType == 1 and chooseHead:GetType() == X3DataConst.PhoneContactHeadType.CardHead then
                return chooseHead:GetCardId() == cfg.MatchingHeadID
            elseif cfg.MatchingHeadType == 2 and chooseHead:GetType() == X3DataConst.PhoneContactHeadType.PhotoHead then
                return chooseHead:GetPhotoId() == cfg.MatchingHeadID
            end
        end

        return false
    elseif id == X3_CFG_CONST.CONDITION_PHONE_AVATAR_TYPE then
        local chooseHead = self:GetChooseHead(datas[1])

        if chooseHead == nil then
            return false
        end

        if datas[2] == 0 then
            if chooseHead:GetType() == X3DataConst.PhoneContactHeadType.PhotoHead then
                local cfg = LuaCfgMgr.Get("PhoneAvatarMale", chooseHead:GetPhotoId())
                return cfg and cfg.SpecialFeedbackType == 0
            else
                return chooseHead:GetType() == X3DataConst.PhoneContactHeadType.CardHead
            end
        elseif datas[2] == 1 then
            if chooseHead:GetType() == X3DataConst.PhoneContactHeadType.PhotoHead then
                local cfg = LuaCfgMgr.Get("PhoneAvatarMale", chooseHead:GetPhotoId())
                return cfg and cfg.SpecialFeedbackType == datas[2]
            else
                return false
            end
        elseif datas[2] == 2 then
            local photo = chooseHead:GetPhoto()
            if chooseHead:GetType() == X3DataConst.PhoneContactHeadType.ImgHead and photo ~= nil then
                local numCheck = true
                local modeCheck = true
                if datas[3] == 0 then
                    numCheck = photo:GetRoleId() == 0 and photo:GetGroupMode() ~= GameConst.PhotoMode.Double
                elseif datas[3] == 1 then
                    numCheck = photo:GetRoleId() ~= 0 and photo:GetGroupMode() ~= GameConst.PhotoMode.Double
                elseif datas[3] == 2 then
                    numCheck = photo:GetGroupMode() == GameConst.PhotoMode.Double
                end

                modeCheck = datas[4] == chooseHead:GetPhoto():GetPuzzleMode()
                return modeCheck and numCheck
            else
                return false
            end
        end

        return false
    elseif id == X3_CFG_CONST.CONDITION_PHONE_AVATAR_SPECIAL_FEEDBACK_TYPE then
        local chooseHead = self:GetChooseHead(datas[1])
        if chooseHead and chooseHead:GetType() == X3DataConst.PhoneContactHeadType.PhotoHead then
            local cfg =LuaCfgMgr.Get("PhoneAvatarMale", chooseHead:GetPhotoId())
            return cfg and cfg.SpecialFeedbackType == datas[2]
        end
        return false
    elseif id == X3_CFG_CONST.CONDITION_PHONE_MSG_BUBBLE_DAILY_TIME then
        local changeTime = PhoneMsgHelper.GetDailyTime(datas[1], X3_CFG_CONST.MESSAGE_TYPE_BUBBLE)
        return changeTime >= datas[2] and changeTime <= datas[3]
    elseif id == X3_CFG_CONST.CONDITION_PHONE_MSG_BUBBLE_INTEREST then
        local bubbleId = self:GetChooseBubbleId(datas[1])
        local bubbleCfg = LuaCfgMgr.Get("PhoneMsgBubble", bubbleId)
        return bubbleCfg and bubbleCfg.MaleInterest == datas[2]
    elseif id == X3_CFG_CONST.CONDITION_PHONE_MSG_CHAT_DAILY_TIME then
        local changeTime = PhoneMsgHelper.GetDailyTime(datas[1], X3_CFG_CONST.MESSAGE_TYPE_CHAT, datas[2])
        return changeTime >= datas[3] and changeTime <= datas[4]
    elseif id == X3_CFG_CONST.CONDITION_PHONE_PAT_DAILY_TIME then
        local changeTime = PhoneMsgHelper.GetDailyTime(datas[1], X3_CFG_CONST.MESSAGE_TYPE_PAT)
        return changeTime >= datas[2] and changeTime <= datas[3]
    elseif id == X3_CFG_CONST.CONDITION_PHONE_PAT_SUFFIX_DAILY_TIME then
        local changeTime = PhoneMsgHelper.GetDailyTime(datas[1], X3_CFG_CONST.MESSAGE_TYPE_SUFFIX)
        return changeTime >= datas[2] and changeTime <= datas[3]
    elseif id == X3_CFG_CONST.CONDITION_PHONE_MALEAVATAR_AUDIT_RESULT then
        return PhoneMsgConst.HeadStateCondition[datas[2]] == self:GetHeadImgState(datas[1])
    end

    return true
end

---@return X3DataConst.PhoneContactHeadState, boolean
function PhoneMsgBLL:GetHeadImgState(contactId)
    local chooseHead = self:GetChooseHead(contactId)
    if chooseHead == nil then
        return X3DataConst.PhoneContactHeadState.ChangeFail, true
    end

    if chooseHead:GetType() == X3DataConst.PhoneContactHeadType.ImgHead then
        local contact = BllMgr.GetMobileContactBLL():GetContactData(contactId)
        local cache = contact and contact:GetHeadImgCache()
        local photo = chooseHead:GetPhoto()
        if not photo then
            return X3DataConst.PhoneContactHeadState.ChangeFail, true
        end

        local expireTime = BllMgr.GetPlayerServerPrefsBLL():GetInt(PhoneMsgConst.ChangeHeadWaitStartTime[contactId], 0) + PhoneMsgConst.ChangeHeadWaitTime
        if cache and cache:GetUrl() == photo:GetPrimaryValue() then
            if cache:GetSetTime() <= expireTime  then
                if cache:GetState() ~= X3DataConst.PhoneContactHeadState.ChangeWaiting then
                    return cache:GetState(), true
                else
                    if GrpcMgr.GetServerTimeToUnixTimeSeconds() <= expireTime  then
                        return X3DataConst.PhoneContactHeadState.ChangeWaiting
                    else
                        return X3DataConst.PhoneContactHeadState.ChangeFail, true
                    end
                end
            else
                return X3DataConst.PhoneContactHeadState.ChangeFail, true
            end
        else
            if GrpcMgr.GetServerTimeToUnixTimeSeconds() <= expireTime  then
                return X3DataConst.PhoneContactHeadState.ChangeWaiting
            else
                return X3DataConst.PhoneContactHeadState.ChangeFail, true
            end
        end
    else
        return X3DataConst.PhoneContactHeadState.ChangeSuccess
    end
end

function PhoneMsgBLL:GetCurrentHead()
    local contactData = BllMgr.GetMobileContactBLL():GetContactData(BllMgr.GetMobileContactBLL():GetPlayerContactId())
    return contactData and contactData:GetHead()
end

---@return X3Data.PhoneContactHead
function PhoneMsgBLL:GetChooseHead(contactId)
    local contactInfo = SelfProxyFactory.GetPhoneMsgProxy():GetContactData(contactId)
    if contactInfo == nil then
        return nil
    end
    local msgData = SelfProxyFactory.GetPhoneMsgProxy():GetMessageData(contactInfo:GetCurMsgID())
    if msgData == nil then
        return nil
    end

    local extraInfo = msgData:GetExtra()
    return extraInfo and extraInfo:GetHeadIcon()
end

function PhoneMsgBLL:GetChooseBubbleId(contactId)
    local contactInfo = SelfProxyFactory.GetPhoneMsgProxy():GetContactData(contactId)
    if contactInfo == nil then
        return 0
    end
    local msgData = SelfProxyFactory.GetPhoneMsgProxy():GetMessageData(contactInfo:GetCurMsgID())
    if msgData == nil then
        return 0
    end

    local extraInfo = msgData:GetExtra()
    return extraInfo and extraInfo:GetBubbleID() or 0
end

function PhoneMsgBLL:CheckMsgState(msgId, checkType, state)
    local proxy = SelfProxyFactory.GetPhoneMsgProxy()
    local msgData = proxy:GetMessageDataByCfgId(msgId)
    local msgState = 0

    if msgData == nil then
        if proxy:IsInActiveDic(msgId) then
            msgState = 1
        end
    else
        msgState = msgData:GetIsFinished() and 3 or 2
    end

    if checkType == 0 then
        return msgState ~= state
    else
        return msgState == state
    end
end

function PhoneMsgBLL:HasConverstaionPassed(convId)
    local cfg = LuaCfgMgr.Get("PhoneMsgConversation", convId)
    if cfg then
        local proxy = SelfProxyFactory.GetPhoneMsgProxy()
        local msgData = proxy:GetMessageDataByCfgId(cfg.MsgID)
        if msgData then
            if msgData:GetIsFinished() then
                return true
            else
                local convData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgConversationData, PhoneMsgHelper.GetConverUid(msgData:GetPrimaryValue(), convId))
                if convData then
                    return convData:GetReadState() == X3DataConst.PhoneMsgConversationReadType.Read
                end
            end
        end
    end

    return false
end
--endregion

---wwise 暂时放这边
local VoiceBankDic = {}

function PhoneMsgBLL:LoadMsgBank(mEventName)
    local bankName = WwiseMgr.GetBankNameWithEventName(mEventName)

    if bankName == nil then
        return
    end

    local bankInfo = VoiceBankDic[bankName]

    if bankInfo ~= nil then
        return
    end

    WwiseMgr.LoadBank(bankName)

    VoiceBankDic[bankName] = true
end

function PhoneMsgBLL:ClearMsgBank()
    for bankName, v in pairs(VoiceBankDic) do
        WwiseMgr.UnloadBank(bankName)
        VoiceBankDic[bankName] = nil
    end
end

function PhoneMsgBLL:GetNudgeEnable()
    return self.nudgeEnable
end

function PhoneMsgBLL:SetIsInHistory(isInHistory)
    self.isInHistory = isInHistory
end

function PhoneMsgBLL:IsInHistory()
    return self.isInHistory
end

function PhoneMsgBLL:ClearVoiceRed(msgId, convId)
    local uid = PhoneMsgHelper.GetConverUid(msgId, convId)
    RedPointMgr.Save(2, X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, uid)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, 0, uid)
end
---这个方法用来替代PhoneMsgSimulation:LoopActiveMsg()
function PhoneMsgBLL:CheckNewActiveMsg()
    self.simulator:CheckActive()
end

function PhoneMsgBLL:_GetActiveMsgID(contactID)
    --从重要事件列表中获取
    local mEvents = self:GetActiveEventMessageList(contactID, true)
    if #mEvents > 0 then
        return mEvents[1]
    end

    return nil
end

---根据联系人ID获取ServerID
---@param contactId int 联系人ID
---@return int ServerID
function PhoneMsgBLL:_GetCurrentMsgGUID(contactId)
    ---@type X3Data.PhoneMsgContactData
    local contactData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgContactData, contactId)
    local curMsgId = 0
    if contactData then
        curMsgId = contactData:GetCurMsgID()
    end
    return curMsgId ~= 0 and curMsgId or nil
end

function PhoneMsgBLL:ReadAllMsg(contactId)
    SelfProxyFactory.GetPhoneMsgProxy():ClearAutoFinishRed(contactId)
    self.simulator:ReadAll(contactId)
end

function PhoneMsgBLL:GetAllReward(contactId)
    local simData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgSimulatingData, contactId)
    if simData then
        local guid = simData:GetGUID()
        local rewards = simData:GetRewardMap()
        if rewards then
            for uid, _ in pairs(rewards) do
                self:GetReward(guid, PhoneMsgHelper.GetConverId(guid, uid))
            end
        end
    end
end

--region jump
function PhoneMsgBLL:JumpToChatWnd(contactId, type)
    if not BllMgr.GetMobileContactBLL():IsUnlockContact(contactId) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_11624)
    else
        local contactInfo = SelfProxyFactory.GetPhoneMsgProxy():GetContactData(contactId)
        if contactInfo and (contactInfo:GetCurMsgID() ~= 0 or contactInfo:GetLastMsgID() ~= 0) then
            UIMgr.Open(UIConf.MobileChatMainWnd, contactId, type)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_11625)
        end
    end
end

---打开聊天
function PhoneMsgBLL:JumpToChat(msgID)
    ---@type cfg.PhoneMsg
    local msgInfo = LuaCfgMgr.Get("PhoneMsg", msgID)
    if msgInfo == nil then
        return
    end

    local proxy = SelfProxyFactory.GetPhoneMsgProxy()
    local contactData = proxy:GetContactData(msgInfo.Contact)
    if contactData then
        UIMgr.Open(UIConf.MobileChatMainWnd, msgInfo.Contact)
        local curMsg = proxy:GetMessageData(contactData:GetCurMsgID())
        if curMsg ~= nil or curMsg:GetID() ~= msgID then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_5783)
        end
    end
end
--endregion

--region local msg sim
function PhoneMsgBLL:StartLocalMsg(cfgId)
    local cfg = LuaCfgMgr.Get("DialoguePhoneMsg", cfgId)
    if cfg then
        self.simulator:StartLocalMsg(cfg.Contact, cfgId)
    end
end

function PhoneMsgBLL:UpdateLocalMsg(contactId, convId)
    self.simulator:UpdateLocalMsg(contactId, convId)
end

function PhoneMsgBLL:FinishLocalMsg(contactId)
    self.simulator:FinishLocalMsg(contactId)
end

function PhoneMsgBLL:GetLocalConversationList(contactId)
    return self.simulator:GetLocalConversationList(contactId)
end
--endregion

function PhoneMsgBLL:OnClear()
    self.waitingReplyList = {}
    self.simulator:OnClear()
    self.simulator = nil

    X3DataMgr.RemoveAll(X3DataConst.X3Data.PhoneMsgSimulatingData)
    X3DataMgr.RemoveAll(X3DataConst.X3Data.PhoneMsgContactData)
end

return PhoneMsgBLL