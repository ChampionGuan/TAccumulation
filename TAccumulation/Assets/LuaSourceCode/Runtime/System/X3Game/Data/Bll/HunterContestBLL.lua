---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiangyu.
--- DateTime: 2023/10/18 16:16
---

---@class HunterContestBLL
local HunterContestBLL = class("HunterContestBLL", BaseBll)

local HunterContestConst = require("Runtime.System.X3Game.GameConst.HunterContestConst")

function HunterContestBLL:OnInit()
    -- 战斗返回处理
    EventMgr.AddListener(Const.Event.RECOVER_VIEW_SNAPSHOT_FINISH, self.ExitBattle, self)

    EventMgr.AddListener(HunterContestConst.Event.HunterContestUpdateRankingReply, self.UpdateRanking, self)
    EventMgr.AddListener(HunterContestConst.Event.HunterContestUpdateReply, self.UpdateReply, self)
    
    EventMgr.AddListener("UnlockStage", self.ChapterStageChanged, self)

    EventMgr.AddListener(HunterContestConst.Event.GainHunterContestRewardReply, self.GainRewardReply, self)
    
    self.endSeaon = false
    self.newSeaonOpen = false
end

function HunterContestBLL:OnClear()
    EventMgr.RemoveListener(Const.Event.RECOVER_VIEW_SNAPSHOT_FINISH, self.ExitBattle, self)

    EventMgr.RemoveListener(HunterContestConst.Event.HunterContestUpdateRankingReply, self.UpdateRanking, self)
    EventMgr.RemoveListener(HunterContestConst.Event.HunterContestUpdateReply, self.UpdateReply, self)

    EventMgr.RemoveListener("UnlockStage", self.ChapterStageChanged, self)

    EventMgr.RemoveListener(HunterContestConst.Event.GainHunterContestRewardReply, self.GainRewardReply, self)

    if self.countTimeID then
        TimerMgr.Discard(self.countTimeID)
        self.countTimeID = nil
    end

    self:ClearShowTick()

    self.endSeaon = false
    self.newSeaonOpen = false
end

---设置本地阵容数据
---@param totalCards table<int,table> 所有的思念卡信息
function HunterContestBLL:SetLocalFormationData(totalCards)
    local rankLevel = PlayerUtil.GetUid() -- 本地数据以uid作为key
    ---@type X3Data.HunterContest
    local hunterContestData = X3DataMgr.Get(X3DataConst.X3Data.HunterContest, tostring(rankLevel))
    if not hunterContestData then
        hunterContestData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContest, nil, tostring(rankLevel))
    end
    if hunterContestData then
        hunterContestData:ClearCardsValue()
        for i, v in pairs(totalCards) do
            local uid = rankLevel * 10 + i
            ---@type X3Data.HunterContestCards
            local areaCards = X3DataMgr.Get(X3DataConst.X3Data.HunterContestCards, tostring(uid))
            if not areaCards then
                areaCards = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContestCards, nil, tostring(uid))
            end
            areaCards:ClearCardIDsValue()
            
            local prefixIndex = rankLevel * 100 + i * 10
            for j, k in pairs(v.Cards) do
                local cardUID = prefixIndex + k.Slot
                ---@type X3Data.HunterContestCard
                local cardInfo = X3DataMgr.Get(X3DataConst.X3Data.HunterContestCard, tostring(cardUID))
                if not cardInfo then
                    cardInfo = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContestCard, nil, tostring(cardUID))
                end
                cardInfo:SetCardID(k.CardID)
                cardInfo:SetSlot(k.Slot)
                areaCards:AddOrUpdateCardIDsValue(k.Slot, cardInfo)
            end
            if hunterContestData then
                hunterContestData:AddOrUpdateCardsValue(tostring(uid), areaCards)
            end
        end
    end
end

---清理本地阵容数据
function HunterContestBLL:ClearLocalFormation()
    local rankLevel = PlayerUtil.GetUid() -- 本地数据以uid作为key
    ---@type X3Data.HunterContest
    local hunterContestData = X3DataMgr.Get(X3DataConst.X3Data.HunterContest, tostring(rankLevel))
    if hunterContestData then
        --hunterContestData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.HunterContest, nil, rankLevel)
        X3DataMgr.Remove(X3DataConst.X3Data.HunterContest, tostring(rankLevel))
    end
end

function HunterContestBLL:ExitBattle()
    local stageID = ChapterStageManager.GetCurStageID()
    local stageCfg = LuaCfgMgr.Get("CommonStageEntry", stageID)
    if table.isnilorempty(stageCfg) then return end
    if stageCfg.Type and stageCfg.Type == Define.EStageType.HunterContest then
        ---如果段位组有变化，提示升级
        self:CheckRankLevelUpAndOpen()
    end
end

function HunterContestBLL:UpdateRanking(rankLevel)
    if rankLevel ~= HunterContestConst.RankLevel.Senior then
        --升级了需要记录一下
        self:RecordUpRankInfo(rankLevel)
        self:ClearLocalFormation()
    end
    self:SetGainRewardNewPoint(rankLevel)
end

--记录升级信息
---@param rankLevel int 段位组等级
function HunterContestBLL:RecordUpRankInfo(rankLevel)
    local key = string.format("%s_%d", HunterContestConst.RankLevelUpKey, PlayerUtil.GetUid())
    PlayerPrefs.SetInt(key, rankLevel)
end

---得到升级信息
---@return int 0：表示没有升级
function HunterContestBLL:GetRecordRankInfo()
    local key = string.format("%s_%d", HunterContestConst.RankLevelUpKey, PlayerUtil.GetUid())
    return PlayerPrefs.GetInt(key, 0)
end

---清除记录的升级信息
function HunterContestBLL:ClearRankInfo()
    local key = string.format("%s_%d", HunterContestConst.RankLevelUpKey, PlayerUtil.GetUid())
    PlayerPrefs.DeleteKey(key)
end


function HunterContestBLL:UpdateReply(rankLevel)
    self:SetGainRewardNewPoint(rankLevel)
end

---添加新赛季开启的标记
function HunterContestBLL:AddNewSeaonFlag()
    if self.newSeaonOpen then
        return
    end
    self.newSeaonOpen = true
    self:ClearLocalFormation()
    self:ClearFirstOpenCounting()
    self:SetFirstOpenSeaonKey(HunterContestConst.RankLevel.Senior, false)
    EventMgr.Dispatch(HunterContestConst.Event.HunterContestNewSeaonOpen)
end

function HunterContestBLL:IsHasNewSeaonFlag()
    return self.newSeaonOpen
end

---清理并开启新赛季
function HunterContestBLL:ClearAndOpenNewSeaon()
    if not self.newSeaonOpen then
        return
    end
    self.newSeaonOpen = false
    
    if self:IsFirstOpenCounting() then
        self:SetFirstOpenCounting()
        UIMgr.Close(UIConf.TeamWnd)
        UIMgr.Close(UIConf.HunterContestWnd)
        UIMgr.Close(UIConf.HunterContestLayerWnd)
        UIMgr.Close(UIConf.HunterContestTeamSet)
        UIMgr.Close(UIConf.HunterContestTeamEdit)
        UIMgr.Close(UIConf.HunterContestReward)
        UIMgr.CloseSysPanels()
        UIMgr.Open(UIConf.HunterContestPreMatch, HunterContestConst.EnterState.Counting)
        self:EnterNewSeasonRefreshRedPoint()
    end
end


---关卡解锁了
---@param stageID int
function HunterContestBLL:ChapterStageChanged(stageID)
    if self.unLockID == nil then
        local cfg_CommonStageEntry = LuaCfgMgr.Get("CommonStageEntry", stageID)
        local nextCfg = BllMgr.GetChapterAndStageBLL():GetNextStage(cfg_CommonStageEntry)
        if nextCfg then
            self.unLockID = nextCfg.ID
        end
    end
end

function HunterContestBLL:GainRewardReply(groupID)
    self:SetGainRewardNewPoint(groupID)
end

---关卡是否解锁了
---@param stageID int
---@return Boolean
function HunterContestBLL:IsUnLockStage(stageID)
    if self.unLockID == stageID then
        return true
    end
    return false
end

---清理大螺旋关卡解锁标记
function HunterContestBLL:ClearUnLockStage()
    self.unLockID = nil
end

--region 网络通讯

---请求首次进入某个段位组
---@param rankLevel int 段位组等级
function HunterContestBLL:RequestFirstEnter(rankLevel)
    local groupID, isEnd = self:GetCurrentContestIDByRankLevel(rankLevel)
    if isEnd then
        return
    end
    if groupID > 0 then
        self:RequestSeniorFirstEnter(groupID)
    end
end

function HunterContestBLL:RequestSeniorFirstEnter(groupId)
    local groupID = groupId
    local requestData = {}
    requestData.ID = groupID
    GrpcMgr.SendRequest(RpcDefines.HunterContestFirstEnterSeasonRequest, requestData, true)
end

---请求设置某个段位组思念卡上阵情况
---@param rankLevel int 段位组等级
---@param cardMap 
function HunterContestBLL:SetHunterContestCardsRequest(rankLevel, cardMap)
    local groupID = self:GetCurrentContestIDByRankLevel(rankLevel)
    local requestData = {}
    requestData.ID = groupID
    requestData.TotalCards = cardMap
    GrpcMgr.SendRequest(RpcDefines.SetHunterContestCardsRequest, requestData, true)
end


---手动重置某段位数据
---@param rankLevel int 段位组等级
---@param areaPosList int[] 区域id
function HunterContestBLL:ResetHunterContestSeasonRequest(rankLevel, areaPosList)
    local groupID = self:GetCurrentContestIDByRankLevel(rankLevel)
    local requestData = {}
    requestData.ID = groupID
    requestData.Locations = areaPosList
    GrpcMgr.SendRequest(RpcDefines.ResetHunterContestSeasonRequest, requestData, true)
    --SelfProxyFactory.GetHunterContestDataProxy():ResetSeaonCardsReply(requestData)
    --EventMgr.Dispatch(HunterContestConst.Event.ResetHunterContestSeasonReply)
end


---手动重置某段位数据
---@param groupId int 奖励组
---@param starList int[] 星级列表
function HunterContestBLL:GainHunterContestRewardRequest(groupId, starList)
    local requestData = {}
    requestData.GroupID = groupId
    requestData.NeedStars = starList
    GrpcMgr.SendRequest(RpcDefines.GainHunterContestRewardRequest, requestData, true)
end

---赛季结束请求(到结束时间)
---@param id int 段位id
function HunterContestBLL:HunterContestSeasonEndRequest(id)
    local requestData = {}
    requestData.ID = id
    GrpcMgr.SendRequest(RpcDefines.HunterContestSeasonEndRequest, requestData, true)
end

---获取大螺旋数据
function HunterContestBLL:GetHunterContestDataRequest()
    local requestData = {}
    GrpcMgr.SendRequest(RpcDefines.GetHunterContestDataRequest, requestData)
end
--endregion

---进入游戏
function HunterContestBLL:EnterGame()
    local state = self:GetContestState()
    if state == HunterContestConst.SeasonState.UpHigh_Ing then
        self:GetLeftTimeAndTriggerCount(state)
    end
end

---刷新大螺旋时间
---@param first boolean 是否第一次进入
function HunterContestBLL:UpdateTickTime(first)
    local state = self:GetContestState()
    local isClose = false ---是否是结算状态
    if state == HunterContestConst.SeasonState.UpHigh_End then
        local isOpen, newGroupID = self:CheckSeniorRankIsOpen()
        isClose = newGroupID == -1
        if first and isOpen and newGroupID > 0 then
            if not self:IsHasNewSeaonFlag() then
                self:AddNewSeaonFlag()
                self:RequestSeniorFirstEnter(newGroupID)
            end
            return state
        end
    end

    local leftTime = self:GetLeftTimeAndTriggerCount(state, isClose)
    if leftTime > 0 then
        self.leftTime = leftTime
        local delCheckTime = self:GetCheckSeasonDelTime(leftTime)
        EventMgr.Dispatch(HunterContestConst.Event.HunterContestTimeUpdate, state, self.leftTime)
        self:ClearShowTick()
        self.tickID = TimerMgr.AddTimer(delCheckTime, function()
            self:Tick(delCheckTime, state)
        end, self, true)
    else
        EventMgr.Dispatch(HunterContestConst.Event.HunterContestTimeUpdate, state, 0)
        self:ClearShowTick()
    end
end

function HunterContestBLL:Tick(delTime, state)
    self.leftTime = self.leftTime - delTime
    if self.leftTime < delTime then
        --到临近点了，重新刷新时间
        self:ClearShowTick()
        self:UpdateTickTime()
        return
    end
    ---显示时间
    EventMgr.Dispatch(HunterContestConst.Event.HunterContestTimeUpdate, state, self.leftTime)
end

---主动清理展示的tick
function HunterContestBLL:ClearShowTick()
    if self.tickID then
        TimerMgr.Discard(self.tickID)
        self.tickID = nil
    end
end

---得到赛季剩余时间（可能是将要结束or将要开启）
---@return int 剩余时间
function HunterContestBLL:GetLeftTime()
    return self.leftTime
end

---得到当前赛季结束时间的时间间隔
---@return int 剩余时间
---@return int 当前的赛季ID
function HunterContestBLL:GetCurrentSeasonEndDelTime()
    local contestID = self:GetCurrentContestIDByRankLevel(HunterContestConst.RankLevel.Senior)
    if contestID == 0 then
        return 0, contestID
    end
    local cfg = LuaCfgMgr.Get("HunterContest", contestID)
    local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg.EndTime))
    local leftTime = endTime - TimerMgr.GetCurTimeSeconds()
    return leftTime, contestID
end

---得到下一个赛季的开始时间间隔
---@return int 剩余时间
---@return int 下一个赛季ID
function HunterContestBLL:GetNextSeasonStartDelTime()
    local contestID = self:GetCurrentContestIDByRankLevel(HunterContestConst.RankLevel.Senior)
    if contestID == 0 then
        return 0, contestID
    end
    local cfg = LuaCfgMgr.Get("HunterContest", contestID)
    local nextContestId = cfg.Next
    local cfg_Next = LuaCfgMgr.Get("HunterContest", cfg.Next)
    if cfg_Next then
        local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg_Next.OpenTime))
        local leftTime = endTime - TimerMgr.GetCurTimeSeconds(true)
        return leftTime, nextContestId
    end
    return 0, 0
end

---得到赛季检查的间隔时间
---@param leftTime int 剩余时间
---@return int 检查的时间间隔
function HunterContestBLL:GetCheckSeasonDelTime(leftTime)
    local delTime = 1
    if 0 <= leftTime and leftTime < 60 then
        ---秒
        delTime = 1
    elseif 60 <= leftTime and leftTime < 3600 then
        ---分钟
        delTime = 1 --60
    elseif 3600 <= leftTime and leftTime < 86400 then
        ---小时
        delTime = 60--3600
    else
        delTime = 3600
    end
    
    return delTime
end

---根据不同的赛季状态得到剩余时间并开启倒计时
---@param state int 赛季状态
---@param isClose Boolean 是否是结算状态
---@return int 剩余时间
function HunterContestBLL:GetLeftTimeAndTriggerCount(state, isClose)
    local leftTime, contestID = 0
    if isClose then
        leftTime, contestID = self:GetNextSeasonStartDelTime()
    else
        if state == HunterContestConst.SeasonState.UpHigh_Ing then
            --显示结束倒计时
            leftTime, contestID = self:GetCurrentSeasonEndDelTime()
        elseif state == HunterContestConst.SeasonState.UpHigh_End then
            --显示进入下一次赛季倒计时
            leftTime, contestID = self:GetNextSeasonStartDelTime()
        end
    end
    
    self:TriggerTime(state, leftTime, contestID)
    return leftTime
end

---触发逻辑上的倒计时
---比赛中：时间结束，请求结束信息，刷新显示结束状态。
---比赛结束： 时间结束，请求进入新赛季，刷新显示赛季中状态
---@param state int 当前的状态
---@param leftTime int 剩余时间 
---@param contestID int 段位组id
function HunterContestBLL:TriggerTime(state, leftTime, contestID)
    if leftTime > 0 then
        if self.countTimeID then
            return
        end
        --倒计时开始
        self.countTimeID = TimerMgr.AddTimer(leftTime + 1, function()
            if state == HunterContestConst.SeasonState.UpHigh_Ing then
                self:HunterContestSeasonEndRequest(contestID)
            elseif state == HunterContestConst.SeasonState.UpHigh_End then
                --进入下一个赛季
                local nextGroupID = self:GetNextSeaonGroupID(contestID)
                if nextGroupID ~= -1 then
                    if not self:IsHasNewSeaonFlag() then
                        self:AddNewSeaonFlag()
                        self:RequestSeniorFirstEnter(nextGroupID)
                        self:AddNewSeaonFlag()
                    end
                end
            end
            TimerMgr.Discard(self.countTimeID)
            self.countTimeID = nil
        end, self, 1)
    end
end

---得到下个赛季的段位组id，仅仅是客户端数据逻辑，不走服务器
---@param groupId int 段位组id
---@return int 高段位组id
function HunterContestBLL:GetNextSeaonGroupID(groupId)
    return self:GetLocalSeniorGroupID(groupId)
end

function HunterContestBLL:EndSeaonReply()
    self:AddEndSeaonFlag()
    local rewardValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, HunterContestConst.RankLevel.Senior)
    if rewardValue == 1 then
        RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, HunterContestConst.RankLevel.Senior)
        RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, HunterContestConst.RankLevel.Senior)
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, 0, HunterContestConst.RankLevel.Senior)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, 0, HunterContestConst.RankLevel.Senior)
end

---添加一个赛季结束的标记
function HunterContestBLL:AddEndSeaonFlag()
    self.endSeaon = true
end

---赛季是否已经结束了
function HunterContestBLL:IsHasEndSeasonFlag()
    return self.endSeaon
end

---清理赛季结束的标记
function HunterContestBLL:ClearEndSeaonFlag()
    self.endSeaon = false
end

---显示赛季结束的弹框
function HunterContestBLL:CheckShowEndSeasonTips()
    if not self:IsHasEndSeasonFlag() then
        return
    end
    self:ClearEndSeaonFlag()
    --阵容区域页 or 关卡列表页 or  --阵容编队设置相关页面
    UIMgr.Close(UIConf.TeamWnd)
    UIMgr.Close(UIConf.HunterContestWnd)
    UIMgr.Close(UIConf.HunterContestLayerWnd)
    UIMgr.Close(UIConf.HunterContestTeamSet)
    UIMgr.Close(UIConf.HunterContestTeamEdit)
    UIMgr.Close(UIConf.HunterContestReward)
    UIMgr.CloseSysPanels()
    UIMgr.Open(UIConf.HunterContestWnd, HunterContestConst.RankLevel.Senior)
end

---段位组等级是否已经通关
---@param rankLevel int 段位组等级
---@return boolean 是否通关
function HunterContestBLL:IsRankLevelPass(rankLevel)
    local hunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if not hunterContest or hunterContest:GetCurrentSeason() == nil then
        return false
    end
    local pass = hunterContest:GetCurrentSeason():GetPass()
    return pass
end

---得到当前赛季的状态
---@return int
function HunterContestBLL:GetContestState()
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_HUNTERCONTEST) then
        return HunterContestConst.SeasonState.Lock
    end

    local highLevelOpen = self:IsRankLevelPass(HunterContestConst.RankLevel.Midium)
    if not highLevelOpen then
        --玩家未解锁高级段位
        return HunterContestConst.SeasonState.NoUpHigh
    end
    
    local groupId, isEnd = self:GetCurrentContestIDByRankLevel(HunterContestConst.RankLevel.Senior)
    if groupId > 0 then
        if isEnd then
            return HunterContestConst.SeasonState.UpHigh_End, groupId
        end
        local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", groupId)
        local seconds = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg_HunterContest.EndTime))
        local leftTime = seconds - TimerMgr.GetCurTimeSeconds()
        if leftTime <= 0 then
            local nextGroupID = self:GetLocalSeniorGroupID(groupId)
            return HunterContestConst.SeasonState.UpHigh_End, nextGroupID
        end
    end
    return HunterContestConst.SeasonState.UpHigh_Ing
end

function HunterContestBLL:GetNoHighRankLevel()
    if self:IsRankLevelPass(HunterContestConst.RankLevel.Primary) then
        return HunterContestConst.RankLevel.Midium
    end
    return HunterContestConst.RankLevel.Primary
end

---得到当前需要展示的段位组等级和状态
---@return int 只能显示的段位组等级
function HunterContestBLL:GetCurrentRankLevelAndState()
    local state = self:GetContestState()
    if state == HunterContestConst.SeasonState.Lock then
        return 0, state
    end
    if state == HunterContestConst.SeasonState.NoUpHigh then
       return self:GetNoHighRankLevel(), state
    end

    if state == HunterContestConst.SeasonState.UpHigh_Ing or state == HunterContestConst.SeasonState.UpHigh_End then
        return HunterContestConst.RankLevel.Senior, state
    end
    
    return self:GetNoHighRankLevel(), state
end

---得到协会助力信息
function HunterContestBLL:GetHunterContestBless()
    local groupId = self:GetCurrentContestIDByRankLevel(HunterContestConst.RankLevel.Senior)
    local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", groupId)
    local blessID = cfg_HunterContest.BlessID
    if blessID == 0 then
        return nil
    end
    local cfg_HunterContestBless = LuaCfgMgr.Get("HunterContestBless", blessID)
    if not cfg_HunterContestBless then
        return nil
    end
    ---得到思念卡的信息和拥有的个数
    local function getCardsInfo(cardList)
        local cardInfo = {}
        local hasNum = 0
        for i, v in ipairs(cardList) do
            local isHas = BllMgr.GetCardBLL():IsHaveCard(v)
            if isHas then
                hasNum = hasNum + 1
            end
            table.insert(cardInfo, { ID = v, Has = isHas})
        end
        return cardInfo, hasNum
    end
    local function getBuffAddAttr(buffAdd, hasNum, allNum)
        local addNum = hasNum >= allNum and allNum or hasNum
        return addNum*buffAdd
    end
    local data = {}
    local fiveStarCards, fiveHasNum = getCardsInfo(cfg_HunterContestBless.Qualit4Cards)
    local fourStarCards, fourHasNum = getCardsInfo(cfg_HunterContestBless.Qualit3Cards)
    data.FourStarCardsNum = cfg_HunterContestBless.Qualit3CardsNum
    data.FiveStarCardsNum = cfg_HunterContestBless.Qualit4CardsNum
    data.FiveStarAddAttr = getBuffAddAttr(cfg_HunterContestBless.SingleQualit4Value, fiveHasNum, cfg_HunterContestBless.Qualit4CardsNum)
    data.FourStarAddAttr = getBuffAddAttr(cfg_HunterContestBless.SingleQualit3Value, fourHasNum, cfg_HunterContestBless.Qualit3CardsNum)
    data.FiveStarCards = fiveStarCards
    data.FourStarCards = fourStarCards
    data.hasFourNum = fourHasNum
    data.hasFiveNum = fiveHasNum
    return data, cfg_HunterContestBless
end

---得到区域思念卡上阵信息
---@param rankLevel int 段位组等级
---@param pos int 区域位置
---@param isNeedLocal Boolean 是否需要显示本地数据
---@return table<int,int> 上阵的思念卡 可能为nil key:slot, value:cardID
function HunterContestBLL:GetAreaCardMapInfo(rankLevel, pos, isNeedLocal)
    local x3Data = nil
    local hunterContestCards = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestCards(rankLevel, pos)
    if hunterContestCards and hunterContestCards:GetCardIDs() then
        x3Data = hunterContestCards
    elseif isNeedLocal then
        ---@type X3Data.HunterContest
        local hunterContestData = X3DataMgr.Get(X3DataConst.X3Data.HunterContest, tostring(PlayerUtil.GetUid()))
        if hunterContestData then
            local localHunterContestCards = hunterContestData:GetCards()
            if localHunterContestCards then
                local uid = PlayerUtil.GetUid() * 10 + pos
                for i, v in pairs(localHunterContestCards) do
                    if i == tostring(uid) then
                        x3Data = v
                        break
                    end
                end
            end
        end
    end

    if x3Data then
        local cardMap = {}
        for i, v in pairs(x3Data:GetCardIDs()) do
            ---@type X3Data.HunterContestCard
            cardMap[v:GetSlot()] = v:GetCardID()
        end
        return cardMap
    end
    return nil
end

---得到高级段位当前的groupID
function HunterContestBLL:GetSeniorGroupID()
    local currentContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(HunterContestConst.RankLevel.Senior)
    if currentContest ~= nil and currentContest:GetCurrentSeason() then
        return currentContest:GetCurrentSeason():GetPrimaryValue()
    end
    local cfg_HunterContest = LuaCfgMgr.GetDataByCondition("HunterContest", { RankLevel = HunterContestConst.RankLevel.Senior, IsFirstInRankLevel = 1 })
    local seniorInitGroupId = cfg_HunterContest.ID
    local groupId = self:GetLocalSeniorGroupID(seniorInitGroupId)
    if groupId == -1 then
        local result = self:GetGroupIdInEndState()
        if result > 0 then
            return result, true
        end
    end
    return self:GetLocalSeniorGroupID(seniorInitGroupId)
end

---得到高段位赛季结束的groupid
function HunterContestBLL:GetGroupIdInEndState()
    local function checkGroupId(groupId)
        local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", groupId)
        if cfg_HunterContest == nil then
            return -1
        end
        local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg_HunterContest.EndTime))
        local curTime = TimerMgr.GetCurTimeSeconds()
        local cfg_HunterContestNext = LuaCfgMgr.Get("HunterContest", cfg_HunterContest.Next)
        if cfg_HunterContestNext then
            local nextStartTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg_HunterContestNext.OpenTime))
            if curTime > endTime and curTime < nextStartTime then
                return cfg_HunterContest.ID
            end
            return checkGroupId(cfg_HunterContestNext.ID)
        else
            return 0
        end
    end
    local cfg_HunterContestInit = LuaCfgMgr.GetDataByCondition("HunterContest", { RankLevel = HunterContestConst.RankLevel.Senior, IsFirstInRankLevel = 1 })
    local id = checkGroupId(cfg_HunterContestInit.ID)
    return id
end

function HunterContestBLL:GetLocalSeniorGroupID(checkGroupId)
    local function getGroupId(groupId)
        local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", groupId)
        if cfg_HunterContest == nil then
            return -1
        end
        local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg_HunterContest.EndTime))
        local startTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(cfg_HunterContest.OpenTime))
        local curTime = TimerMgr.GetCurTimeSeconds()
        if curTime >= startTime and curTime < endTime then
            return groupId
        elseif curTime < startTime then
            return -1
        end
        return 0
    end
    local result = 0
    local function CheckId(curGroupId)
        result = getGroupId(curGroupId)
        if result == 0 then
            local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", curGroupId)
            if cfg_HunterContest then
                curGroupId = cfg_HunterContest.Next
                CheckId(curGroupId)
            end
        else
            return result
        end
    end
    CheckId(checkGroupId)
    return result
end


---检查高段位是否已经开启
---@return Boolean
---@return int 段位组id
function HunterContestBLL:CheckSeniorRankIsOpen()
    local groupId = self:GetCurrentContestIDByRankLevel(HunterContestConst.RankLevel.Senior)
    local newGroupId = self:GetLocalSeniorGroupID(groupId)
    if newGroupId == -1 then
        --一个都没有找到
        return false, newGroupId
    elseif newGroupId > groupId then
        return true, newGroupId
    end
    return false, newGroupId
end

---通关段位组等级获取当前赛季的段位组ID
function HunterContestBLL:GetCurrentContestIDByRankLevel(rankLevel)
    local currentContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    local id = 0
    local isSeasonEnd = false
    if currentContest and currentContest:GetCurrentSeason() then
        id = currentContest:GetCurrentSeason():GetPrimaryValue()
    elseif rankLevel == HunterContestConst.RankLevel.Primary then
        local cfg_HunterContest = LuaCfgMgr.GetDataByCondition("HunterContest", { RankLevel = HunterContestConst.RankLevel.Primary, IsFirstInRankLevel = 1 })
        id = cfg_HunterContest.ID
    elseif rankLevel == HunterContestConst.RankLevel.Midium then
        local cfg_HunterContest = LuaCfgMgr.GetDataByCondition("HunterContest", { RankLevel = HunterContestConst.RankLevel.Midium, IsFirstInRankLevel = 1 })
        id = cfg_HunterContest.ID
    elseif rankLevel == HunterContestConst.RankLevel.Senior then
        local groupId, isEnd = self:GetSeniorGroupID()
        isSeasonEnd = isEnd
        id = groupId
    end
    return id, isSeasonEnd
end

---得到当前段位的段位名称
---@param rankLevel int 段位组等级
---@return string 名称
function HunterContestBLL:GetCurrentContestRankName(rankLevel)
    local groupId = self:GetCurrentContestIDByRankLevel(rankLevel)
    local cfg = LuaCfgMgr.Get("HunterContest", groupId)
    return cfg.Name
end

---得到区域内的通关进度和星级
---@param rankLevel int 段位组id
---@param pos int 区域位置
---@return int 通关到第几关了
---@return int 通关的星级数量
---@return int 总的星级数量 （关卡数*3）
---@return boolean 是否通关
function HunterContestBLL:GetAreaStarAndProgress(rankLevel, pos)
    local passLevelNum = 0
    local passStarNum = 0
    local allStarNum = 0
    local levelIDs = self:GetAreaLevelID(rankLevel, pos)
    if levelIDs then
        for i, v in ipairs(levelIDs) do
            local stageData = BllMgr.GetChapterAndStageBLL():GetStage(v)
            if stageData then
                passStarNum = passStarNum + stageData.Star
                if stageData.State == 2 then
                    passLevelNum = passLevelNum + 1
                end
            end
        end
        allStarNum = #levelIDs * 3
    end
    return passLevelNum, passStarNum, allStarNum
end

---得到当前段位等级所有的星级
---@param rankLevel number
---@return number 已经获得的星级数目
---@return number 所有的星级数目
function HunterContestBLL:GetRankLevelAllStar(rankLevel)
    local allStarNum = 0
    local hasStarNum = 0
    for i = 1, HunterContestConst.AllAreaCount do
        local _, passStarNum, stageAllStarNum =  self:GetAreaStarAndProgress(rankLevel, i)
        allStarNum = allStarNum + stageAllStarNum
        hasStarNum = hasStarNum + passStarNum
    end
    
    return hasStarNum, allStarNum
end

---得到高段位赛季上次的段位星级信息
function HunterContestBLL:GetSeniorRankLevelBeforeGetStars()
    local _, allStar = self:GetRankLevelAllStar(HunterContestConst.RankLevel.Senior)
    local huntercontestData = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(HunterContestConst.RankLevel.Senior)
    if huntercontestData and huntercontestData:GetLastSeason() then
        return huntercontestData:GetLastSeason():GetTotalStar(), allStar
    end
    return 0, allStar
end

---得到某个区域的状态
---@param rankLevel int 段位组等级
---@param pos int 区域位置
---@return int 区域状态
---@return int 上阵的思念卡，可能为无
function HunterContestBLL:GetAreaState(rankLevel, pos)
    ---@type X3Data.HunterContest
    local data = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if data == nil then
        return HunterContestConst.AreaState.BeforeNoCards
    end
    ---@type X3Data.HunterContestCards
    local cards = self:GetAreaCardMapInfo(rankLevel, pos)
    if cards == nil then
        return HunterContestConst.AreaState.BeforeNoCards
    end
    local num = 0
    for i, v in pairs(cards) do
        if v ~= nil then
            num = num + 1
            break
        end
    end
    if num == 0 then
        return HunterContestConst.AreaState.BeforeNoCards
    end
    
    if self:IsFirstOpenSeaon(rankLevel) then
        return HunterContestConst.AreaState.BeforeHasCards, num
    end
    return HunterContestConst.AreaState.Start
end

---设置段位组等级第一次开启赛季
---@param rankLevel int 段位组等级
---@param isOpen boolean 是否开启 高段位组等级可能存在重置现象，所以需要清理
function HunterContestBLL:SetFirstOpenSeaonKey(rankLevel, isOpen)
    local key
    if rankLevel == HunterContestConst.RankLevel.Primary then
        key = GameConst.CustomDataIndex.HUNTERCONTEST_PRIMARY
    elseif rankLevel == HunterContestConst.RankLevel.Midium then
        key = GameConst.CustomDataIndex.HUNTERCONTEST_MIDIUM
    elseif rankLevel == HunterContestConst.RankLevel.Senior then
        key = GameConst.CustomDataIndex.HUNTERCONTEST_SENIOR    
    end
    local num = isOpen and 1 or 0
    BllMgr.GetPlayerServerPrefsBLL():SetInt(key, num)
end

---段位组等级是否第一次打开赛季
---@param rankLevel int 段位组等级
---@return int 0：第一次打开
function HunterContestBLL:IsFirstOpenSeaon(rankLevel)
    local key
    if rankLevel == HunterContestConst.RankLevel.Primary then
        key = GameConst.CustomDataIndex.HUNTERCONTEST_PRIMARY
    elseif rankLevel == HunterContestConst.RankLevel.Midium then
        key = GameConst.CustomDataIndex.HUNTERCONTEST_MIDIUM
    elseif rankLevel == HunterContestConst.RankLevel.Senior then
        key = GameConst.CustomDataIndex.HUNTERCONTEST_SENIOR
    end
    local result = BllMgr.GetPlayerServerPrefsBLL():GetInt(key, 0)
    return result == 0
end


---得到段位组的状态信息
---@param rankLevel int 段位组等级
---@return int 段位组状态信息：HunterContestConst.RankGroupState
function HunterContestBLL:GetRankGroupState(rankLevel)
    ---@type X3Data.HunterContest
    local hunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if hunterContest and hunterContest:GetCurrentSeason() then
        local pass = hunterContest:GetCurrentSeason():GetPass()
        if pass then
            return HunterContestConst.RankGroupState.pass
        end
    end
    local rankGroupId = self:GetCurrentContestIDByRankLevel(rankLevel)
    if rankLevel == HunterContestConst.RankLevel.Senior and rankGroupId < 0 then
        return HunterContestConst.RankGroupState.Lock
    end
    local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", rankGroupId)
    if cfg_HunterContest and cfg_HunterContest.BeforeRankLevel ~= 0 then
        ---@type X3Data.HunterContest
        local beforeHunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(cfg_HunterContest.BeforeRankLevel)
        if beforeHunterContest and beforeHunterContest:GetCurrentSeason() then
            local pass = beforeHunterContest:GetCurrentSeason():GetPass()
            if pass then
                return HunterContestConst.RankGroupState.unLock
            end
        end
        return HunterContestConst.RankGroupState.Lock
    else
        return HunterContestConst.RankGroupState.unLock
    end
end

---是否满星通关高级段位组之前的关卡
function HunterContestBLL:IsFullStarPassNormalGroup()
    local fullStar = true
    for i = 1, 2 do
        local totalStarNum = 0
        ---@type X3Data.HunterContest
        local hunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(i)
        if hunterContest then
            for j = 1, 3 do
                local levelIDs = self:GetAreaLevelID(i, j)
                if levelIDs then
                    local stageStar = 3 * #levelIDs
                    totalStarNum = totalStarNum + stageStar
                end
            end
            local currentSeason = hunterContest:GetCurrentSeason()
            if currentSeason then
                local ownStar = currentSeason:GetTotalStar()
                if ownStar < totalStarNum then
                    fullStar = false
                    break
                end
            end
        end
    end
    return fullStar
end

---得到奖励列表信息 包括可以领取的奖励列表
---@param rankLevel int 段位组等级
function HunterContestBLL:GetRewardListInfo(rankLevel)
    local currentRankGroupId = self:GetCurrentContestIDByRankLevel(rankLevel)
    if currentRankGroupId <= 0 then
        return {},{}
    end
    local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", currentRankGroupId)
    local staticData = LuaCfgMgr.Get("HunterContestReward", cfg_HunterContest.RewardGroupID)
    local rewards = {}
    local canGainRewards = {}
    for i, v in pairs(staticData) do
        local itemState = self:GetRewardItemState(rankLevel, v.ID, v.NeedStar)
        table.insert(rewards, { cfg = v, state = itemState })
        if itemState == HunterContestConst.StarRewardState.CanGet then
            table.insert(canGainRewards, v.NeedStar)
        end
    end
    
    local function getWeightNum(state)
        if state == HunterContestConst.StarRewardState.CanGet then
            return 3
        end
        if state == HunterContestConst.StarRewardState.NoGet then
            return 2
        end
        return 1
    end
    table.sort(rewards, function(a, b)
        local aWeight = getWeightNum(a.state)
        local bWeight = getWeightNum(b.state)
        if aWeight ~= bWeight then
            return aWeight > bWeight
        end
        return a.cfg.NeedStar < b.cfg.NeedStar
    end)
    
    return rewards, canGainRewards
end

---得到高段位等级的最高星级数目
---@param rankLevel int 段位组等级
---@return int 已经获取的星级数量
---@return int 星级的总数量
function HunterContestBLL:GetCurrentRankLevelTotalStar(rankLevel)
    local star, allStar = 0, 36
    local hunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if hunterContest == nil or hunterContest:GetCurrentSeason() == nil then
        return star, allStar
    end
    star = hunterContest:GetCurrentSeason():GetTotalStar()
    return star, allStar
end

---得到单个星级奖励的领取状态
---@param rankLevel int 段位组等级
---@param id int 奖励组id
---@param needStar int 所需星级数
---@return int 可领取状态
function HunterContestBLL:GetRewardItemState(rankLevel, id, needStar)
    local hasStarNum = 0
    local hunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if hunterContest and hunterContest:GetCurrentSeason() then
        hasStarNum = hunterContest:GetCurrentSeason():GetTotalStar()
    end
    
    local condition = {ID = id, NeedStar = needStar}
    local cfg_HunterContestReward = LuaCfgMgr.GetDataByCondition("HunterContestReward", condition)
    if cfg_HunterContestReward then
        if hasStarNum >= needStar then
            local hasGetRewards = SelfProxyFactory.GetHunterContestDataProxy():GetHasGetReward(id)
            if table.containsvalue(hasGetRewards, cfg_HunterContestReward.NeedStar) then
                return HunterContestConst.StarRewardState.HasGet
            else
                return HunterContestConst.StarRewardState.CanGet
            end
        else
            return HunterContestConst.StarRewardState.NoGet
        end
    end
    
    return HunterContestConst.StarRewardState.NoGet
end

---是否第一次进入当前赛季
---@param rankLevel int 段位组等级（1~3都可传）
---@return boolean 
function HunterContestBLL:IsFirstEnterCurrentContest(rankLevel)
    local contest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if contest == null then
        return true
    end
    return not contest:GetFirstEnterSeason()
end

---得到上个赛季的数据
---@param rankLevel int 查询的段位组等级
function HunterContestBLL:GetLastSeasonContest(rankLevel)
    local hunterContest = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestData(rankLevel)
    if hunterContest == nil then
        return nil
    end
    local lastSeason = hunterContest:GetLastSeason()
    return lastSeason
end

---获取区域的tag列表(按照ID从小到大排序)
---@param rankLevel int 段位组等级
---@param pos int 区域位置
---@return int[]
function HunterContestBLL:GetAreaTagList(rankLevel, pos)
    local levelIDs = self:GetAreaLevelID(rankLevel, pos)
    if levelIDs == nil then
        return nil
    end
    local tagList = PoolUtil.GetTable()
    local allTag = PoolUtil.GetTable()
    for i, v in ipairs(levelIDs) do
        local stageCfg = LuaCfgMgr.Get("CommonStageEntry", v)
        local stageTag = {}
        if stageCfg.Tag then
            for j, k in ipairs(stageCfg.Tag) do
                if stageTag[k] == nil then
                    stageTag[k] = 0
                end
                stageTag[k] = stageTag[k] + 1
            end
        end
        table.insert(allTag, { data = stageTag })
    end

    for i, v in ipairs(allTag) do
        for j, k in pairs(v.data) do
            if tagList[j] == nil then
                tagList[j] = k
            else
                tagList[j] = tagList[j] < k  and k or tagList[j]
            end
        end
    end

    local result = {}
    for i, v in pairs(tagList) do
        for j = 1, v do
            table.insert(result, i)
        end
    end
    
    table.sort(result, function(a, b) return a<b end)
    PoolUtil.ReleaseTable(allTag)
    PoolUtil.ReleaseTable(tagList)
    return result
end

---得到当前区域的tag类型列表
---@param rankLevel int 段位组等级
---@param pos int 区域
---@return int[] 
function HunterContestBLL:GetAreaTagTypeList(rankLevel, pos)
    local levelIDs = self:GetAreaLevelID(rankLevel, pos)
    if levelIDs == nil then
        return nil
    end

    local tagList = PoolUtil.GetTable()
    for i, v in ipairs(levelIDs) do
        local stageCfg = LuaCfgMgr.Get("CommonStageEntry", v)
        if stageCfg.Tag then
            for j, k in ipairs(stageCfg.Tag) do
                if tagList[k] == nil then
                    tagList[k] = 1
                end
            end
        end
    end
    local result = {}
    for i, v in pairs(tagList) do
        local cfg_FormationTag = LuaCfgMgr.Get("FormationTag", i)
        table.insert(result, { cfg = cfg_FormationTag })
    end
    PoolUtil.ReleaseTable(tagList)

    table.sort(result, function(a, b) return a.cfg.FormationTag < b.cfg.FormationTag end)
    return result 
end

---得到区域内的关卡ID列表
---@param rankLevel int 段位组等级
---@param pos int 区域位置
---@return int[] 关卡列表id
function HunterContestBLL:GetAreaLevelID(rankLevel, pos)
    local groupID = self:GetCurrentContestIDByRankLevel(rankLevel)
    local cfg_HunterContest = LuaCfgMgr.Get("HunterContest", groupID)
    local cfg_HunterContestArea = LuaCfgMgr.Get("HunterContestArea", cfg_HunterContest.AreaGroupID, pos)
    if cfg_HunterContestArea then
       return cfg_HunterContestArea.StageList
    end
    return nil
end

---得到需要跳转的关卡（从关卡入口进入关卡，要做一下自动选择判断：默认选中最新未挑战（通关）的关卡，如无则选中首个未满星关卡，如也无则选中最后一个关卡。）
---@param rankLevel int 段位组等级
---@param pos int 区域位置
---@return int 还没有通关的或者是通关后没有满星的或者最后一个关卡
---@return int 第几个关卡
function HunterContestBLL:GetNeedJumpLevel(rankLevel, pos)
    local levelIDList = self:GetAreaLevelID(rankLevel, pos)
    local resultID = 0
    local index = 0
    for i, v in ipairs(levelIDList) do
        local pass = BllMgr.GetChapterAndStageBLL():StageIsUnLockById(v)
        if not pass then
            resultID = v
            index = i
            break
        end
    end
    if resultID == 0 then
        for i, v in ipairs(levelIDList) do
            local starNum = BllMgr.GetChapterAndStageBLL():GetStageStar(v)
            if starNum ~= 3 then
                resultID = v
                index = i
                break
            end
        end 
    end
    if resultID == 0 then
        resultID = levelIDList[4]
        index = 4
    end
    return resultID, index
end


---外部跳转到猎人锦标赛
function HunterContestBLL:JumpToRankLevel(jumpRankLevel)
    local rankLevel, state = self:GetCurrentRankLevelAndState()
    if state == HunterContestConst.SeasonState.Lock then
        --未解锁系统
        return
    end
    if jumpRankLevel then
        if jumpRankLevel > rankLevel then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_21552)
        else
            rankLevel = jumpRankLevel
        end
    end

    if rankLevel == 0 then
        rankLevel = HunterContestConst.RankLevel.Primary --0默认走初级
    end
    
    if rankLevel == HunterContestConst.RankLevel.Primary then
        ---是否第一次进入初级段位
        local isFirstEnterPrimary = self:IsFirstEnterCurrentContest(HunterContestConst.RankLevel.Primary)
        if isFirstEnterPrimary then
            --首次进入猎人锦标赛展示页签
            UIMgr.Open(UIConf.HunterContestPreMatch, HunterContestConst.EnterState.FirstEnter)
            self:SetNewSystem()
            return
        end
    end
    
    if state == HunterContestConst.SeasonState.UpHigh_Ing then
        local hasLastData = BllMgr.GetHunterContestBLL():GetLastSeasonContest(rankLevel) ~= nil
        if hasLastData then
            --显示当前猎人锦标赛首次进入时的界面显示
            if self:IsFirstOpenCounting() then
                self:SetFirstOpenCounting()
                self:SetFirstOpenSeaonKey(HunterContestConst.RankLevel.Senior, false)
                UIMgr.Open(UIConf.HunterContestPreMatch, HunterContestConst.EnterState.Counting)
                self:EnterNewSeasonRefreshRedPoint()
                return
            end
        else
            self:ClearAndOpenNewSeaon()
        end
    end

    if self:CheckRankLevelUpAndOpen() then
        return
    end
  
    UIMgr.Open(UIConf.HunterContestWnd, rankLevel)
end

---检查段位组等级是否提升并打开
---@return boolean
function HunterContestBLL:CheckRankLevelUpAndOpen()
    local rankUpLevel = self:GetRecordRankInfo()
    if rankUpLevel > 0 then
        UIMgr.Open(UIConf.HunterContestPreMatch, HunterContestConst.EnterState.Ranking, rankUpLevel)
        self:ClearRankInfo()
        return true
    end
    return false
end

---大螺旋是否展示升级段位
function HunterContestBLL:IsFirstOpenCounting()
    local key = string.format("%s_%d_%d", HunterContestConst.ClientCounting, PlayerUtil.GetUid(), HunterContestConst.RankLevel.Senior)
    local result = PlayerPrefs.GetInt(key, 0)
    return result == 0
end

---大螺旋设置展示升级段位
function HunterContestBLL:SetFirstOpenCounting()
    local key = string.format("%s_%d_%d", HunterContestConst.ClientCounting, PlayerUtil.GetUid(), HunterContestConst.RankLevel.Senior)
    PlayerPrefs.SetInt(key, 1)
end

---清理大螺旋升级段位
function HunterContestBLL:ClearFirstOpenCounting()
    local key = string.format("%s_%d_%d", HunterContestConst.ClientCounting, PlayerUtil.GetUid(), HunterContestConst.RankLevel.Senior)
    PlayerPrefs.DeleteKey(key)
end

--region 对接芯核
---当前思念卡是否包含其他队伍已经使用的芯核
function HunterContestBLL:IsCardHasOtherGemCores(rankLevel, currentAreaList, cardID)
    local cardGemCoreList = SelfProxyFactory.GetCardDataProxy():GetCardGemCores(cardID)
    if cardGemCoreList == nil then
        return false
    end

    local checkList = {}
    for i, v in ipairs(cardGemCoreList) do
        table.insert(checkList, v:GetPrimaryValue())
    end
    return self:CheckIsHasGemCore(rankLevel, currentAreaList, checkList)
end

---检查所有的段位组是否包含芯核
---@param  cardGemCoreList int[] id列表
---@return Boolean
function HunterContestBLL:CheckAllRankIsHasGemCore(cardGemCoreList)
    for i = 1, HunterContestConst.AllGroupIDCount do
        local check = self:CheckIsHasGemCore(i, nil, cardGemCoreList)
        if check then
            return true
        end
    end
    return false
end

---检查某个段位是否包含芯核
---@param rankLevel int 段位组等级
---@param expectAreaList int[] 排除的区域列表
---@param cardGemCoreList int[] 芯核列表
---@return boolean
function HunterContestBLL:CheckIsHasGemCore(rankLevel, expectAreaList, cardGemCoreList)
    local noCheckAreaList = expectAreaList and expectAreaList or {}
    for i = 1, HunterContestConst.AllAreaCount do
        local isNeedCheck = true
        if #noCheckAreaList > 0 then
            if table.containsvalue(noCheckAreaList, i) then
                isNeedCheck = false
            end
        end
        if isNeedCheck then
            local cards = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestCards(rankLevel, i)
            if cards and cards:GetCardIDs() then
                for j, v in pairs(cards:GetCardIDs()) do
                    local gemCores = v:GetGemCores()
                    if gemCores then
                        local checkList = PoolUtil.GetTable()
                        for h, n in ipairs(gemCores) do
                            table.insert(checkList, n)
                        end
                        if #checkList > 0 then
                            for k = 1, #cardGemCoreList do
                                if table.containsvalue(checkList, cardGemCoreList[k]) then
                                    return true
                                end
                            end
                        end
                        PoolUtil.ReleaseTable(checkList)
                    end
                end
            end
        end
    end
    return false
end

---得到当前段位组指定区域内的芯核数据
---@param rankLevel int 段位组等级
---@param areaList int[] 所在的区域列表
---@return int[] 所有使用的芯核， 可能为nil
function HunterContestBLL:GetAreaAllUseGemCores(rankLevel, areaList)
    if areaList == nil then
        return nil
    end
    local allGemCores = {}
    for i, v in ipairs(areaList) do
        local cards = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestCards(rankLevel, v)
        if cards then
            for j, k in pairs(cards:GetCardIDs()) do
                local gemCores = k:GetGemCores()
                if gemCores then
                    for h, n in ipairs(gemCores) do
                        table.insert(allGemCores, n)
                    end
                end
            end
        end
    end
    return allGemCores
end


---得到所有使用的芯核
---@return int[] 芯核id列表
function HunterContestBLL:GetAllUseGemCore()
    local gemCoreList = {}
    for i = 1, HunterContestConst.AllGroupIDCount do
        for j = 1, HunterContestConst.AllAreaCount do
            local cards = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestCards(i, j)
            if cards then
                for k, v in pairs(cards:GetCardIDs()) do
                    local gemCores = v:GetGemCores()
                    if gemCores and #gemCores > 0 then
                        table.insertto(gemCoreList, gemCores)
                    end
                end
            end
        end
    end
    return gemCoreList
end

---获取大螺旋数据中已经上阵的芯核数据
---@param cardId number 思念卡id
---@param rankLevel number 段位组等级
---@return int[] 上阵的芯核数据 可能为nil
function HunterContestBLL:GetGemCoreIds(cardId, rankLevel)
    for j = 1, HunterContestConst.AllAreaCount do
        local cards = SelfProxyFactory.GetHunterContestDataProxy():GetStageHunterContestCards(rankLevel, j)
        if cards then
            for k, v in pairs(cards:GetCardIDs()) do
                if cardId == v:GetCardID() then
                    local gemCores = v:GetGemCores()
                    if gemCores then
                        return gemCores
                    end
                end
            end
        end
    end
    return nil
end

---获取大螺旋数据中已经上阵的芯核数据
---@param cardId number 思念卡id
---@param rankLevel number 段位组等级
---@return X3Data.GemCore[] 上阵的芯核数据 可能为nil
function HunterContestBLL:GetGemCores(cardId, rankLevel)
    local gemCoreIds = self:GetGemCoreIds(cardId, rankLevel)
    if not gemCoreIds then
        return nil
    end
    local result = {}
    for _, gemCoreId in pairs(gemCoreIds) do
        local gemCoreData = SelfProxyFactory.GetGemCoreProxy():GetGemCoreDataByGemCoreId(gemCoreId)
        if gemCoreData then
            table.insert(result, gemCoreData)
        end
    end
    return result
end

---@return int
function HunterContestBLL:GetGemCoreId(cardId, siteId, rankLevel)
    local cardGemCores = self:GetGemCoreIds(cardId, rankLevel)
    if not cardGemCores then
        return nil
    end
    for _, gemCoreId in pairs(cardGemCores) do
        local gemCoreCfg = SelfProxyFactory.GetGemCoreProxy():GetGemCoreCfgById(gemCoreId)
        if gemCoreCfg and gemCoreCfg.SiteID == siteId then
            return gemCoreId
        end
    end
    return nil
end

---@return X3Data.GemCore
function HunterContestBLL:GetGemCore(cardId, siteId, rankLevel)
    local gemCoreId = self:GetGemCoreId(cardId, siteId, rankLevel)
    if gemCoreId == nil then
        return nil
    end
    return SelfProxyFactory.GetGemCoreProxy():GetGemCoreDataByGemCoreId(gemCoreId)
end

---指定参数获取Card属性,只能获取已有卡的属性
---@return table<int,int>,table<int,int>,table<int,int>,table<int,int>  最终属性，基础属性，芯核加成属性，天赋加成属性。key:PropertyType  value:PropertyValue, 可能为空
function HunterContestBLL:GetCardProperties(cardId, rankLevel, level, starLevel, phaseLevel, awakeLevel)
    local cardData = SelfProxyFactory.GetCardDataProxy():GetData(cardId)
    if not cardData then
        return nil
    end
    if not level then
        level = cardData:GetLevel()
    end
    if not starLevel then
        starLevel = cardData:GetStarLevel()
    end
    if not phaseLevel then
        phaseLevel = cardData:GetPhaseLevel()
    end
    if not awakeLevel then
        awakeLevel = cardData:GetAwaken()
    end
    local finalProperty, baseProperty, gemCoreProperty, talentProperty = DevelopPropertyUtil.GetCardFinalProperty(cardId, level, starLevel, phaseLevel, awakeLevel, self:GetGemCores(cardId, rankLevel))
    return finalProperty:GetPropertyMap(), baseProperty:GetPropertyMap(), gemCoreProperty:GetPropertyMap(), talentProperty:GetPropertyMap()
end

--endregion


--region 红点相关

---系统是否新解锁
function HunterContestBLL:CheckNewSystem()
    if not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_HUNTERCONTEST) then
        return
    end
    local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_HUNTERCONTEST_NEW)
    if value == 0 then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_HUNTERCONTEST_NEW)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_NEW, 1)
    elseif value == 2 then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_NEW, 0)
    end
end

function HunterContestBLL:SetNewSystem()
    local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_HUNTERCONTEST_NEW)
    RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_NEW)
    if value == 1 then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_NEW, 0)
    end
end

---检查是否有未领取的奖励
function HunterContestBLL:SetGainRewardNewPoint(rankLevel)
    local _, canGetList = self:GetRewardListInfo(rankLevel)
    local result = 0
    if #canGetList > 0 then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, rankLevel)
        RedPointMgr.Save(1, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, rankLevel)
        result = 1
    else
        RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, rankLevel)
        RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, rankLevel)
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, result, rankLevel)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, result, rankLevel)
end

function HunterContestBLL:CheckGainRewardNewPoint(rankLevel)
    local rewardValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, rankLevel)
    local canGetList = 0
    local result = 0
    if rewardValue == 0 then
        local _, canGetLists = self:GetRewardListInfo(rankLevel)
        canGetList = #canGetLists
        if canGetList > 0 then
            RedPointMgr.Save(1, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, rankLevel)
            RedPointMgr.Save(1, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, rankLevel)
            result = 1
        end
    elseif rewardValue == 1 then
        result = 1
        if rankLevel == HunterContestConst.RankLevel.Senior then
            --判断下当前的状态
            local state = self:GetContestState()
            if state == HunterContestConst.SeasonState.UpHigh_End then
                --处于结算状态
                RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, rankLevel)
                RedPointMgr.Save(2, X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, rankLevel)
                result = 0
            end
        end
    end
    
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD, result, rankLevel)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_REWARD_TAB, result, rankLevel)
end

---检查是否新赛季开启
function HunterContestBLL:CheckIsNewSeason()
    local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_HUNTERCONTEST_SEASON_NEW)
    local result = value
    if value == 0 then
        local rankLevel, state = self:GetCurrentRankLevelAndState()
        if state == HunterContestConst.SeasonState.UpHigh_Ing then
            local hasLastData = BllMgr.GetHunterContestBLL():GetLastSeasonContest(rankLevel) ~= nil
            if self:IsFirstEnterCurrentContest(rankLevel) and hasLastData then
                --显示当前猎人锦标赛首次进入时的界面显示
                RedPointMgr.Save(1, X3_CFG_CONST.RED_HUNTERCONTEST_SEASON_NEW)
                result = 1
            end
        else
            if self.newSeaonOpen then
                result = 1
            end
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_SEASON_NEW, result)
end


function HunterContestBLL:EnterNewSeasonRefreshRedPoint()
    local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_HUNTERCONTEST_SEASON_NEW)
    if value == 1 then
        RedPointMgr.Save(0, X3_CFG_CONST.RED_HUNTERCONTEST_SEASON_NEW)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_HUNTERCONTEST_SEASON_NEW, 0)
    end
end


function HunterContestBLL:RefreshRedPoint()
    self:CheckNewSystem()
    self:CheckIsNewSeason()

    for i = 1, HunterContestConst.AllGroupIDCount do
        self:CheckGainRewardNewPoint(i)
    end
end


--endregion

return HunterContestBLL