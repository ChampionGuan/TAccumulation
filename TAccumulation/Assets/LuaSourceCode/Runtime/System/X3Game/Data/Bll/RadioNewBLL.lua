---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/4/10 16:38
---

------------------------------------------------------------------------------------------------------------------------
---@class RadioNewBLL
local RadioNewBLL = class("RadioNewBLL", BaseBll)
local RadioConst = require("Runtime.System.X3Game.UI.UIView.RadioListWnd.RadioConst")
local RadioPlayerCtrl = require("Runtime.System.X3Game.Modules.RadioPlayer.RadioPlayerCtrlNew")
local RadioPlayerCtrlMedium = require("Runtime.System.X3Game.Modules.RadioPlayer.RadioPlayerCtrlMediumNew")
local RadioPlayerUtil = require("Runtime.System.X3Game.Modules.RadioPlayer.RadioPlayerUtil")

---@type X3DataConst.X3DataField.RadioTimeRecord
local RadioTimeRecordType = nil

---@class RadioStateData
---@field Time number 累计阅读时长：毫秒
---@field GetReward boolean
---@field Buy boolean 表明是否购买的状态， 对于不需要购买的则默认是true ---弃用
---@field ActiveRedPoint boolean 是否读过红点
---@field SubtitlesMap table<number, boolean> 功能废弃

---@class RadioPlayData
---@field LastEnterTime number 毫秒
---@field LastQuitTime number 毫秒
---@field CurPlayID number
---@field CurSubtitleID number

local _ServerTsAmplifyFactor = 1000

local _RecordHandleOrder = 0

function RadioNewBLL:OnInit()
    ---@type table<number, string>
    self._saveCardImgPaths = {}
    ---@type table<number, RadioPlayData>
    self._serverRoleRadioDict = {}
    ---@type table<number, RadioStateData>
    self._serverRadioStateDict = {}
    ---@type table<number, boolean>
    self._serverRadioRewardDict = {}
    ---@type table<number, RadioConfig[]>
    self._roleRadiosDict = self:_GetRadios()
    --@type  RadioConst.PlayMode  int
    self.playMode = 0

    self.curRoleId = 0;

    ---后台时的广播剧数据记录
    self._backgroundNameRecord = {}
    self._backgroundTimeRecord = {}
    self._backgroundLastRecord = {}
    self._backgroundSubTitleRecord = {}

    --逻辑控件
    self.PlayerCtrl = RadioPlayerCtrl.new()
    self.PlayerMedium = RadioPlayerCtrlMedium.new()
    --self.PlayerMedium:Init(self.PlayerCtrl, nil)
    RadioTimeRecordType = X3DataConst.X3DataField.RadioTimeRecord
    --牵绊度升级判断广播剧
    EventMgr.AddListener("OnRoleLovePointLevelUp", self.CheckRoleRadioUnlock, self)
    EventMgr.AddListener(GameConst.CardEvent.CardAdd, self.OnCardUnlock, self)
    EventMgr.AddListener("RoleUpdate", self.CheckListRoleRadioUnlock, self)



end

---增加本地数据cache
---@param radioId number 广播剧ID
---@param curTime number 此时的时间点，用于在两个触发时机相减（例如进入后台与返回前台（实际会有更多实际）），以得处播放时间差值
---@param frontTime number 前台时间，即本次已播放的时间
---@param subTitle number 歌词ID，用于标示播放到了哪一句
---@param handleOrder number 操作序号（自增）
---@return X3Data.RadioTimeRecord
function RadioNewBLL:AddLocalTimeRecordData(radioId, curTime, frontTime, subTitle, handleOrder)
    if((not radioId)or (radioId == 0)) then
        Debug.LogError("RecordBackgroundData ERROR ", radioId)
    end
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, radioId)
    if (not data) then
        --Debug.LogError("RecordBackgroundData Add  curTime ", curTime, " frontTime ", frontTime, " eventName ", eventName)
        local source = {
            RadioId = radioId,
            Time = frontTime or 0,
            LastRecordTime = curTime or 0,
            HandleOrder = handleOrder or 0,
            SubId = subTitle or 0,
            RecordType = X3DataConst.RadioRecordType.Radio
        }
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.RadioTimeRecord, source, radioId)
        --Debug.LogError("RecordBackgroundData Add  success ", data)
    end
    return data
end

---统计后台时的数据----后台时子线程会调用，请勿执行主线程操作
---@param radioId number 广播剧ID
---@param curTime number 此时的时间点，用于在两个触发时机相减（例如进入后台与返回前台（实际会有更多实际）），以得处播放时间差值
---@param frontTime number 前台时间，即本次已播放的时间
---@param subTitle number 歌词ID，用于标示播放到了哪一句
function RadioNewBLL:RecordBackgroundData(radioId, curTime, frontTime, subTitle)
    if((not radioId)or (radioId == 0)) then
        Debug.LogError("RecordBackgroundData ERROR ", radioId)
    end
    _RecordHandleOrder = _RecordHandleOrder + 1
    ---@type X3Data.RadioTimeRecord
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, radioId)
    if (not data) then
        --Debug.LogError("RecordBackgroundData Add  curTime ", curTime, " frontTime ", frontTime, " eventName ", eventName)
        data = self:AddLocalTimeRecordData(radioId, curTime, frontTime, subTitle, _RecordHandleOrder)
    else
        if(data:GetLastRecordTime() ~= 0) then
            local offset = curTime - data:GetLastRecordTime()
            --Debug.LogError("RecordBackgroundData offset ", offset, " GetTime ", data:GetTime(), "frontTime ", (frontTime or 0), " data ", data, "radioId ", radioId)
            --Debug.LogError("data:GetLastRecordTime() ", data:GetLastRecordTime(), " === curTime ", curTime)
            if(offset) > 0 then
                data:SetTime(offset + data:GetTime() + (frontTime or 0))
                data:SetLastRecordTime(curTime or 0)
                data:SetHandleOrder(_RecordHandleOrder)
                data:SetSubId(subTitle or 0)
            end
        else
            data:SetLastRecordTime(curTime)
            --Debug.LogError("SetLastRecordTime", data:GetLastRecordTime(), " === curTime ", curTime, " radioId ", radioId)
        end
    end
end

---直接修改X3data的时间，设计在在tick中调用
function RadioNewBLL:RecordBackgroundDataWithInterval(radioId, subTitle, interval)
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, radioId)
    if(not data) then
        data = self:AddLocalTimeRecordData(radioId)
    end
    _RecordHandleOrder = _RecordHandleOrder + 1
    if(data and interval) then
        data:SetTime(data:GetTime() + interval)
        data:SetSubId(subTitle or 0)
        --Debug.LogWarning("RecordBackgroundDataWithInterval ",radioId, " = ", interval, " TOTAL ", data:GetTime(), " subTitle ", subTitle)
    end
end

---清理后台相关数据
function RadioNewBLL:ClearBackgroundData(radioId)
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, radioId)
    if(data) then
        data:SetLastRecordTime(0)
    end
end

---填充后台播放歌词奖励
function RadioNewBLL:FillSubRewardData(radioId, rewardId)
    if(rewardId == 0 or not rewardId) then
        return
    end
    ---@type X3Data.RadioTimeRecord
    local data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, radioId)
    if(data) then
        if(not data:IsTableValueExist(X3DataConst.X3DataField.RadioTimeRecord.SignList, rewardId))then
            data:AddSignListValue(rewardId)
        end
    end
end

---补发歌词奖励，对应场景为后台播放，或歌曲已完播
function RadioNewBLL:CheckSendSubReward()
    local recordList = {}
    local num = X3DataMgr.GetAll(X3DataConst.X3Data.RadioTimeRecord, recordList, function(a)
        return a:GetRecordType() == X3DataConst.RadioRecordType.Radio
    end, function(a, b)
        return a:GetHandleOrder() < b:GetHandleOrder()
    end)

    ----建立歌词奖励数据索引
    local subConfigDic = LuaCfgMgr.GetAll("RadioReward")
    local radioRewardDic = {}
    for id, item in pairs(subConfigDic) do
        local radioId = item.RadioID
        radioRewardDic[radioId] = radioRewardDic[radioId] or {}
        table.insert(radioRewardDic[radioId], id)
    end

    local totalSubRewardList = {}
    for i = 1, num do
        ---@type X3Data.RadioTimeRecord
        local record = recordList[i]
        ---检测漏上传的
        local subRewardList = record:GetSignList()
        if(subRewardList) then
            for j = 1, #subRewardList do
                totalSubRewardList[subRewardList[j]] = true
            end
        end
        ---检测完播的 ---有奖，并且没有领过
        local subList = radioRewardDic[record:GetPrimaryValue()]
        local radioConfig = LuaCfgMgr.Get("RadioInfo", record:GetPrimaryValue())
        if(subList and record:GetTotalTime() > radioConfig.RewardTime) then
            --判断是否已完播
            for j = 1, #subList do
                if(not self:GetSubRewardState(subList[j])) then
                    totalSubRewardList[subList[j]]  = true
                end
            end
        end
    end

    --Debug.LogError("检测完毕，准备上报CheckSendSubReward")
    --Debug.LogErrorTable(totalSubRewardList)
    for subRewardId, useless in pairs(totalSubRewardList) do
        if(subConfigDic[subRewardId]) then
            self:SendMsg_SubRadioReward(subRewardId)
        end
    end


end

function RadioNewBLL:JustTest()
    Debug.LogError("JustTest -----------")
    Debug.LogErrorTable(self._backgroundNameRecord)
    Debug.LogErrorTable(self._backgroundLastRecord)
    Debug.LogErrorTable(self._backgroundTimeRecord)
    Debug.LogError("JustTest ===========")

end

---GM指令。单句音频检验
function RadioNewBLL:CheckAllSubConfig()
    RadioPlayerUtil.CheckAllSubConfig()
end

---检查单首内的所有单句
---@param name string 配置表名称
function RadioNewBLL:CheckRadioSub(name)
    RadioPlayerUtil.CheckRadioSubConfig(name)
end

function RadioNewBLL:_GetRadios()
    local _roleRadiosDict = {}

    ---@type table<number, RadioConfig>
    local _radioData = LuaCfgMgr.GetAll("RadioInfo")
    for _, radioConfig in pairs(_radioData) do
        local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioConfig.CardID)
        if _cardConfig then
            local _radioList = _roleRadiosDict[_cardConfig.ManType]
            if not _radioList then
                _radioList = {}
                _roleRadiosDict[_cardConfig.ManType] = _radioList
            end
            table.insert(_radioList, radioConfig)
        else
            print("LLM:RadioListView._InitConfig,===", radioConfig.CardID)
        end
    end
    return _roleRadiosDict
end



---临时配合BGM新增功能记录
function RadioNewBLL:TempOnRoleChange(roleId)
    --Debug.LogError(" TempOnRoleChange", roleId)
    self.curRoleId = roleId
end

------------------------------------------------------------------------------------------------------------------------
function RadioNewBLL:GetRoleName(roleID)
    if not roleID or roleID == 0 then
        --local _name = BllMgr.Get("PlayerBLL"):GetPlayerVO().Name
        --return string.isnilorempty(_name) and UITextHelper.GetUIText(6303) or _name
        return UITextHelper.GetUIText(UITextConst.UI_TEXT_15102)
    elseif roleID and roleID < 0 then
        --return string.format("%s：", UITextHelper.GetUIText(110008))
        return ""
    else
        local roleCfg = LuaCfgMgr.Get("RoleInfo", roleID)
        roleCfg = roleCfg or LuaCfgMgr.Get("RadioNPC", roleID)
        if not roleCfg then
            return ""
        end
        return string.format("%s%s", UITextHelper.GetUIText(roleCfg.Name), UITextHelper.GetUIText(UITextConst.UI_TEXT_15103))
    end
end

---获取当前播放subID
function RadioNewBLL:GetCurSubtitleID(radioID)
    if radioID then
        local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioID)
        if _cardConfig then
            local radioData = self:GetRadioData(_cardConfig.ManType)
            ---暂时只有这个，唯一替换的
            if radioData.CurPlayID == radioID then
                return radioData.CurSubtitleID
            end
        end
    end
end

---设置当前播放subID
function RadioNewBLL:SetCurSubtitleID(roleID, radioID, subID)
    --Debug.LogError("SetCurSubtitleID ", roleID, " radioID ", radioID, " subID ", subID)
    if radioID then
        if not roleID then
            roleID = LuaCfgMgr.Get("CardBaseInfo", radioID).ManType
        end

        local radioData = self:GetRadioData(roleID)
        ---暂时只有这个，唯一替换的
        radioData.CurPlayID = radioID
        radioData.CurSubtitleID = subID or radioData.CurSubtitleID or 0
    end
end

---@param radioCardId number radioInfo-radioCardId
---@param subTitleID number subtitleID或索引
---@return RadioSubConfig
function RadioNewBLL:GetSubConfig(radioCardId, subTitleID)
    assert(radioCardId and subTitleID)
    if (radioCardId == 0) then
        return
    end
    ---@type RadioConfig
    local radioConfig = LuaCfgMgr.Get("RadioInfo", radioCardId)
    --assert(radioConfig)
    local radioSubConfig = LuaCfgMgr.Get(radioConfig.RadioName, subTitleID)
    --Debug.LogError("radioConfig.RadioName ", radioConfig.RadioName, " subTitleIndex ", subTitleIndex)
    if(not radioSubConfig) then
        Debug.LogErrorWithTag(GameConst.LogTag.Radio, "No such radioSubConfig ", subTitleID)
    end
    return radioSubConfig
end

---这个最好不用于判定是否存在广播剧，只是一个缓存数据而已
---@public
---@param roleID number
---@return RadioPlayData
function RadioNewBLL:GetRadioData(roleID)
    assert(roleID)
    if not self._serverRoleRadioDict then
        print("RadioBLL-Error-serverdata:_serverRoleRadioDict is nil===>", roleID)
        self._serverRoleRadioDict = {}
    end

    local radioData = self._serverRoleRadioDict[roleID]
    if not radioData then
        print("RadioBLL-Error:GetRadioData is nil===>", roleID)
        radioData = {
            LastEnterTime = 0,
            LastQuitTime = 0,
            CurPlayID = 0,
            CurSubtitleID = 0,
        }
        self._serverRoleRadioDict[roleID] = radioData
    end
    return radioData
end

---@param radioID number
---@return RadioStateData
function RadioNewBLL:GetRadioStateData(radioID)
    assert(radioID)
    return self._serverRadioStateDict and self._serverRadioStateDict[radioID]
end

---@return table<number, RadioConfig[]>
function RadioNewBLL:GetAllRoleRadios()
    return self._roleRadiosDict
end

---@param roleID number
---@return RadioConfig[]
function RadioNewBLL:GetRoleRadioList(roleID)
    assert(roleID)
    return self._roleRadiosDict[roleID]
end

---通过x3data的时间判断---由播放器Tick
function RadioNewBLL:CheckRewardTimeEnough(radioId)
    local radioConfig = LuaCfgMgr.Get("RadioInfo", radioId)
    if(radioConfig) then
        local radioData = self:GetRadioStateData(radioId)
        self:UpdateRedDot(RadioConst.RedDotType.RadioReward, radioId)
        EventMgr.Dispatch("CHECK_RADIOREWARD")

        --local newRadioState = self:GetState(nil, radioId)
        if(radioData and (not radioData.GetReward)) then
            ---@type X3Data.RadioTimeRecord
            local x3Data = X3DataMgr.Get(X3DataConst.X3Data.RadioTimeRecord, radioId)
            if(x3Data) then
                local totalTime = x3Data:GetTotalTime() + x3Data:GetTime()
                if(totalTime > radioConfig.RewardTime and (not x3Data:GetUpload())) then
                    --Debug.LogWarning("CheckRewardTimeEnough ", radioId, " == ", x3Data:GetTotalTime(), " TIME ", x3Data:GetTime())

                    x3Data:SetUpload(true)
                    self:SendMsg_UpdatePlayRecord(nil, false)
                    EventMgr.Dispatch("UPDATE_RADIOVIEW", radioId)
                end
            end
        end
    end
end

---@param roleID number 参数已经废弃
---@param radioID number
---@param isBuyed boolean 是否完成购买
---@return boolean
function RadioNewBLL:AddRadioData(roleID, radioID, isBuyed)
    assert(radioID)
    ---新加解锁或是购买的radio
    local radioStateData = self:GetRadioStateData(radioID)
    if not radioStateData then
        local _isNeedBuy = self:IsCanBuy(radioID) == nil ---是否需要购买
        ---@type RadioStateData
        radioStateData = {
            Time = 0,
            GetReward = false,
            Buy = _isNeedBuy,
            ActiveRedPoint = false,
        }
        self._serverRadioStateDict[radioID] = radioStateData
    end
    --radioStateData.Buy = isBuyed or radioStateData.Buy
    return true
end

---@public
---@param radioID number 广播剧ID-CardID
function RadioNewBLL:IsUnlockRadio(radioID)
    local isHasCard = LuaCfgMgr.Get("RadioInfo", radioID) ~= nil
    if not isHasCard then
        return false
    end

    local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioID)
    if _cardConfig then
        ---1、角色解锁
        local roleData = BllMgr.GetRoleBLL():GetRole(_cardConfig.ManType)
        if not roleData then
            return false
        end
    end
    ---2、card解锁
    return SelfProxyFactory.GetCardDataProxy():GetData(radioID) ~= nil
end

---@public
---@param radioID number RadioInfo-Key
---@return boolean 是否可以购买 true:足够可以购买，false:不足不能购买，nil:不需要购买
function RadioNewBLL:IsCanBuy(radioID)
    ---@type RadioConfig
    --local radioConfig = LuaCfgMgr.Get("RadioInfo", radioID)
    --if not radioConfig then
    --    Debug.LogError("RadioBLL:radioConfig == nil=>", radioID)
    --    return
    --end
    --
    --if radioConfig.RadioCost then
    --    local itemAmount = BllMgr.Get("ItemBLL"):GetItemNum(radioConfig.RadioCost.ID)
    --    return itemAmount >= radioConfig.RadioCost.Num
    --end
    return nil
end

---@public
---@param roleID number 参数已经废弃
---@param radioID number RadioInfo-Key
---@return RadioConst
function RadioNewBLL:GetState(roleID, radioID)
    assert(radioID)
    ---@type RadioConfig
    local radioConfig = LuaCfgMgr.Get("RadioInfo", radioID)
    if not radioConfig then
        return RadioConst.State.Locked
    end

    ---@type RadioStateData
    local radioData = self:GetRadioStateData(radioID)
    local isServerHasRadio = radioData --and radioData.Buy
    local isUnlocked = true--self:IsUnlockRadio(radioID) -- GM加卡，本地羁绊卡数据更新似乎不及时，这里没必要判

    if isServerHasRadio then
        --Debug.LogError(" isUnlocked ", isUnlocked, radioID)
        --assert(isUnlocked)
        --Debug.LogError("radioData.Time ", radioData.Time, " border ", radioConfig.RewardTime * CompanyConst.ServerTsAmplifyFactor)
        if (isUnlocked) then
            if (not radioData.GetReward) then
                if (radioData.Time <
                        radioConfig.RewardTime * _ServerTsAmplifyFactor) then
                    return RadioConst.State.UnlockedUnRead
                else
                    --Debug.LogWarning(radioID, "GetState radioData.Time ",radioData.Time, " configTime ", radioConfig.RewardTime)
                    return RadioConst.State.ReadedReward
                end
                ---没有领奖，时间不够
            else
                ---领奖 ： ReadedDrawed
                ---没有领奖，时间足够 ： ReadedReward
                return RadioConst.State.ReadedDrawed
                --return radioData.GetReward and RadioConst.State.ReadedDrawed
                --        or RadioConst.State.ReadedReward
            end
        end
    else
        ---本地判定是否可以购买
        --local isCanBuy = self:IsCanBuy(radioID)
        --if isCanBuy == true then
        --    return isUnlocked and RadioConst.State.UnBuy
        --            or RadioConst.State.Locked
        --elseif isCanBuy == false then
        --    return RadioConst.State.Locked
        --else
        --    ---默认:isCanBuy == nil, 不需要购买
        --    return isUnlocked and RadioConst.State.UnlockedUnRead
        --            or RadioConst.State.Locked
        --end
    end
    return RadioConst.State.Locked
end

local _radioBuyHitMark = "_RADIOBLL_BuyHit_%s_*_%s"
---@param roleID number
---@param state boolean
function RadioNewBLL:SetBuyHitState(roleID, state)
    assert(roleID)
    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    PlayerPrefs.SetInt(string.format(_radioBuyHitMark, userID, roleID),
            state and 1 or 0)
end

---@param roleID number
---@return boolean
function RadioNewBLL:GetBuyHitState(roleID)
    assert(roleID)
    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    return PlayerPrefs.GetInt(string.format(_radioBuyHitMark, userID, roleID), 1) == 1
end

---对于一次性红点，根节点隐藏
---@param roleID number
---@param radioID number RadioInfo-Key
---@param isSingle bool 是item自己所需
function RadioNewBLL:IsHasRedDot(roleID, radioID, isSingle)
    --local isHasRed = true
    --local radioStateData = self:GetRadioStateData(radioID)
    --if radioStateData then
    --    --isHasRed = not radioStateData.ActiveRedPoint
    --end
    local isHasRed = true
    local radioStateData = self:GetRadioStateData(radioID)
    if radioStateData then
        --if(not radioStateData.ActiveRedPoint) then
        --    isHasRed = self:GetFirstShowState(radioID)
        --end
        local noShowList = self:GetRadioListShowState(roleID)
        ---列表未展示过的时候，可以显示红点，列表展示过后，隐藏
        if (noShowList or isSingle) then
            isHasRed = self:GetFirstShowState(radioID)
        else
            return false
        end
    end
    return isHasRed
end

---后台播放时记录的播放奖励ID
local _radioRewardHitMark = "_RADIOBLL_BuyRadio_%s_*_%s"
---@param radioRewardID number
---@param state boolean 是否可以领奖
function RadioNewBLL:SetLocalRewardState(radioRewardID, state)
    if not radioRewardID or radioRewardID <= 0 then
        return
    end

    ---已经领过奖的, 本地不需要操作可领奖列表
    if self:GetSubRewardState(radioRewardID) then
        return
    end

    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    if state then
        PlayerPrefs.SetInt(string.format(_radioRewardHitMark, userID, radioRewardID), 1)
    else
        PlayerPrefs.DeleteKey(string.format(_radioRewardHitMark, userID, radioRewardID))
    end
end

---@param radioRewardID number
---@return boolean
function RadioNewBLL:GetLocalRewardState(radioRewardID)
    if not radioRewardID or radioRewardID <= 0 then
        return false
    end

    ---已经领过奖的，返回不可领奖
    if self:GetSubRewardState(radioRewardID) then
        return false
    end

    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    return PlayerPrefs.GetInt(string.format(_radioRewardHitMark, userID, radioRewardID), 0) == 1
end

---广播剧是否开启收藏
local _radioCollectSign = "_RADIOBLL_CollectRadio_%s"

function RadioNewBLL:SetCollectState(state)

    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    if state then
        PlayerPrefs.SetInt(string.format(_radioCollectSign, userID), 1)
    else
        PlayerPrefs.DeleteKey(string.format(_radioCollectSign, userID))
    end
end

function RadioNewBLL:GetCollectState()
    return SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_VOICECOLLECT)
    --return true
    --local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    --return PlayerPrefs.GetInt(string.format(_radioCollectSign, userID), 0) == 1
end

local _radioFirstShowSign = "_RADIOBLL_FirstShowRadio_%s_%s"
--首次解锁后有没有播放过
function RadioNewBLL:SetFirstShowState(state, radioId)
    if state then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_RADIOPLAY_NEWPLAY, radioId)
        self:UpdateRedDot(RadioConst.RedDotType.RadioItem, radioId)
    end
end

function RadioNewBLL:GetFirstShowState(radioId)
    local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAY, radioId)
    if value == nil then
        RedPointMgr.Save(0, X3_CFG_CONST.RED_RADIOPLAY_NEWPLAY, radioId)
        value = 0
    end

    return value == 0
end

local _radioListShowSign = "_RADIOBLL_RadioListShowRadio_%s_%s"
--是否查看过广播剧列表，当新获得广播剧或有奖励时重置该值
function RadioNewBLL:SetRadioListShowState(state, roleId)
    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    if state then
        --if(self:GetFirstShowState(radioId)) then
        PlayerPrefs.SetInt(string.format(_radioListShowSign, userID, roleId), 1)
        self:CheckEntryRedDot()
        --end
    else
        PlayerPrefs.DeleteKey(string.format(_radioListShowSign, userID, roleId))
    end
end

function RadioNewBLL:GetRadioListShowState(roleId)
    local userID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    return PlayerPrefs.GetInt(string.format(_radioListShowSign, userID, roleId), 0) == 0
end

---@param cacheRewardList number[] 缓存的奖励列表
function RadioNewBLL:TryGetLocalCacheReward(cacheRewardList)
    ---返回发送领奖 ---暂时屏蔽
    --local radioRewardCfgs = cacheRewardList or LuaCfgMgr.GetAll("RadioReward")
    --for rewardID, _ in pairs(radioRewardCfgs) do
    --    if self:GetLocalRewardState(rewardID) then
    --        self:SendMsg_SubRadioReward(rewardID)
    --    end
    --end
end

---@param radioRewardID number 奖励唯一ID
---@return boolean 是否领过奖
function RadioNewBLL:GetSubRewardState(radioRewardID)
    if not radioRewardID or radioRewardID <= 0 then
        return false
    end

    if self._serverRadioRewardDict then
        return self._serverRadioRewardDict[radioRewardID] or false
    end
    return false
end

---@param radioRewardID number 奖励唯一ID
---@param isDrawedReward boolean 是否已经领过奖了
function RadioNewBLL:SetSubRewardState(radioRewardID, isDrawedReward)
    if not radioRewardID or radioRewardID <= 0 then
        return false
    end

    isDrawedReward = isDrawedReward or false
    if not self._serverRadioRewardDict then
        self._serverRadioRewardDict = {}
    end
    self._serverRadioRewardDict[radioRewardID] = isDrawedReward
end

---获取native-img路径 ---将会在子线程调用
---@param cardID number radio-Card唯一ID
---@return string 返回缓存的CardImg
function RadioNewBLL:GetCardImgPath(cardID)
    local result = self:CheckCardImage(cardID)
    if(result) then
        return self._saveCardImgPaths and self._saveCardImgPaths[cardID]
    end
end

function RadioNewBLL:CheckCardImage(cardID)
    local iconName = self:_GetCardImageName(cardID)
    --Debug.LogError("CheckCardImage ", cardID, " iconName ", iconName)
    local result = false
    if(not string.isnilorempty(iconName)) then
        result = UrlImgMgr.CheckFile(iconName, UrlImgMgr.BizType.Radio)
    end
    return result
end

function RadioNewBLL:_GetCardImageName(cardID)
    local iconName = ""
    local radioConfig = LuaCfgMgr.Get("RadioInfo", cardID)
    if radioConfig then
        if(Application.IsIOSMobile()) then
            local iosVersion = self:GetIOSVersion()
            --IOS16以上版本使用大图
            if(iosVersion and type(iosVersion) == "number" and iosVersion >= 16) then
                iconName = radioConfig.ListPhoto
            else
                iconName = radioConfig.ListPhotoSmall
            end
        else
            iconName = radioConfig.ListPhotoSmall
        end
    end
    return iconName
end

---保存native-img
---@param cardID number radio-Card唯一ID
---@return boolean 返回是否保存成功
function RadioNewBLL:SaveCardImgPath(cardID)
    if not cardID or cardID <= 0 then
        return false
    end

    local iconName = self:_GetCardImageName(cardID)
    --end
    if not string.isnilorempty(iconName) then
        if(not UrlImgMgr.CheckFile(iconName, UrlImgMgr.BizType.Radio)) then
            if(not self.PlayerMedium:GetDryMode()) then
                ---只生成已解锁卡的
                local hasCard = BllMgr.GetRadioNewBLL():IsUnlockRadio(cardID)
                if(hasCard) then
                    local savePath = UrlImgMgr.SaveSpriteToPngFile(iconName, iconName, UrlImgMgr.BizType.Radio)
                    if not string.isnilorempty(savePath) then
                        self._saveCardImgPaths[cardID] = savePath
                        return true
                    end
                else
                    return false
                end
            end
        else
            self._saveCardImgPaths[cardID] = UrlImgMgr.GetFileRealPath(iconName, UrlImgMgr.BizType.Radio)
            return true
        end
    end
    return false
end

function RadioNewBLL:GetIOSVersion()
    ----通过Unity的SystemInfo.operatingSystem获取IOS版本号
    local version = CS.UnityEngine.SystemInfo.operatingSystem
    local addIndex = 3
    if not string.isnilorempty(version) then
        local iosIndex = string.find(version, "iOS")
        if(not iosIndex) then
            iosIndex = string.find(version, "iPadOS")
            addIndex = 6
        end
        if iosIndex then
            local versionStr = string.sub(version, iosIndex + addIndex)
            if not string.isnilorempty(versionStr) then
                local versionStrs = string.split(versionStr, ".")
                if versionStrs and #versionStrs > 0 then
                    return tonumber(versionStrs[1])
                end
            end
        end
    end
    return 0
end

---获取当前播放模式
---@return int playMode
function RadioNewBLL:GetPlayMode()
    return self.playMode
end

function RadioNewBLL:OnPlayModeChangeClick()
    local tempPlayMode = self.playMode + 1
    if tempPlayMode >= 3 then
        tempPlayMode = 0
    end
    self:SendMsgPlayMode(tempPlayMode)
end

------------------------------------------------------------------------------------------------------------------------
---recv msg
------------------------------------------------------------------------------------------------------------------------

function RadioNewBLL:GetBroadcastingPlayData(serverData)
    local list = {}
    if(serverData) then
        for roleId, playData in pairs(serverData) do
            local data = {}
            data.LastPlayTime = playData.LastPlayTime or 0
            data.LastQuitTime = playData.LastQuitTime or 0
            data.CurPlayID = playData.CurPlayID or 0
            data.CurSubtitleID = playData.CurSubtitleID or 0
            data.PlayedBroadcastMap = {}
            if (playData.PlayedBroadcastMap) then
                for index, value in pairs(playData.PlayedBroadcastMap) do
                    data.PlayedBroadcastMap[index] = value
                end
            end
            list[roleId] = data
        end
    end
    return list
end

function RadioNewBLL:GetBroadcastingData(serverData)
    local list = {}
    if(serverData) then
        for id, playData in pairs(serverData) do
            local data = {}
            data.Time = playData.Time or 0
            data.GetReward = playData.GetReward or false
            data.ActiveRedPoint = playData.ActiveRedPoint or 0
            list[id] = data
        end
    end
    return list
end

function RadioNewBLL:RecvMsg_InitRadio(serverBroadcastData)
    local isHasRadioData = serverBroadcastData ~= nil
    print("RadioBLL:", "===recvmsg initradio===", isHasRadioData)
    self._serverRoleRadioDict = {}
    self._serverRadioStateDict = {}
    if isHasRadioData then
        --self._serverRoleRadioDict = serverBroadcastData.RoleBroadcastingPlayMap or {}
        if (serverBroadcastData.RoleBroadcastingPlayMap) then
            self._serverRoleRadioDict = self:GetBroadcastingPlayData(serverBroadcastData.RoleBroadcastingPlayMap)
        end
        --if()
        --self._serverRadioStateDict = serverBroadcastData.BroadcastingMap or {}
        self._serverRadioStateDict = self:GetBroadcastingData(serverBroadcastData.BroadcastingMap)
        --Debug.LogError("RecvMsg_InitRadio ")
        --Debug.LogErrorTable(self._serverRadioStateDict)
        --self._serverRadioRewardDict = serverBroadcastData.RewardMap or {}
        if(serverBroadcastData.RewardMap) then
            for id, state in pairs(serverBroadcastData.RewardMap) do
                self._serverRadioRewardDict[id] = state
            end
        end
        if(serverBroadcastData.BroadcastingMap) then
            for id, playData in pairs(serverBroadcastData.BroadcastingMap) do
                self:UpdateRedDot(RadioConst.RedDotType.RadioItem, id)
            end
        end
        self.playMode = serverBroadcastData.PlayMode or 0
    end
    --手动解锁下
    self:CheckAllRadioUnlock()

    ---登录时直接补发广播剧相关
    self:CorrectPlayRecord()
    self:CheckSendSubReward()
end

---统计 ---上包请求的回应
function RadioNewBLL:RecvMsg_ReportBroadcastingPlayReply(serverData, cacheData)
    local errorData = serverData.Records
    local records = cacheData.Records
    for roleId, recordList in pairs(records) do
        local list = recordList.List
        for i = 1, #list do
            local record = list[i]
            if(record.SubtitleID) then
                self:SetCurSubtitleID(roleId, record.ID, record.SubtitleID)
            end
        end
    end

    EventMgr.Dispatch("EVT_RADIO_REPORT")
end

function RadioNewBLL:RecvMsg_EnterRadio(serverData)
    --print("RadioBLL:", "===recvmsg enterradio===")
    --if serverData then
    --    print("success, RecvMsg_EnterRadio:", serverData.RoleID,
    --            "==BroadcastingPlayID:", serverData.BroadcastingPlayID)
    --    EventMgr.Dispatch("EVT_ENTERRADIO", serverData.BroadcastingPlayID)
    --end
end

function RadioNewBLL:RecvMsg_QuitRadio(serverData)
    --print("RadioBLL:", "===recvmsg quitradio===")
    --if serverData then
    --    print("success, RecvMsg_QuitRadio:", serverData.RoleID,
    --            "==BroadcastingPlayID:", serverData.BroadcastingPlayID,
    --            "==SubtitleID:", serverData.SubtitleID)
    --    self:SetCurSubtitleID(serverData.RoleID, serverData.BroadcastingPlayID, serverData.SubtitleID)
    --end
end

function RadioNewBLL:RecvMsg_GetReward(rewardData, serverData)
    if serverData then
        print("success, RecvMsg_GetReward:", serverData.RoleID,
                "==BroadcastingPlayID:", serverData.BroadcastingPlayID)

        local stateRadioData = self:GetRadioStateData(serverData.BroadcastingPlayID)
        if stateRadioData then
            stateRadioData.GetReward = true ---领取
        end

        if rewardData.RewardList and #rewardData.RewardList > 0 then
            UICommonUtil.ShowRewardPopTips(rewardData.RewardList, 2)
        end
        EventMgr.Dispatch("DRAW_RADIOREWARD")
        EventMgr.Dispatch("UPDATE_RADIOVIEW", serverData.BroadcastingPlayID)
        self:UpdateRedDot(RadioConst.RedDotType.RadioReward, serverData.BroadcastingPlayID)
    end
end

function RadioNewBLL:RecvMsg_BuyRadio(serverData)
    --if serverData then
    --    local id = serverData.ID
    --    local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", id)
    --    if self:AddRadioData(_cardConfig.ManType, id, true) then
    --        local radioStateData = self:GetRadioStateData(id)
    --        radioStateData.ActiveRedPoint = false --- 原先没有New红点的逻辑，使用读过红点代替
    --        EventMgr.Dispatch("UPDATE_RADIOVIEW", id)
    --    end
    --    self:UpdateRedDot(RadioConst.RedDotType.RadioItem, id)
    --    self:SetRadioListShowState(false, _cardConfig.ManType)
    --end
end

---新获得card通知
function RadioNewBLL:RecvMsg_RadioCardGeted(serverData)
    --if serverData then
    --    assert(serverData.BroadcastingPlayID)
    --    local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", serverData.BroadcastingPlayID)
    --    if self:AddRadioData(_cardConfig.ManType, serverData.BroadcastingPlayID) then
    --        local radioStateData = self:GetRadioStateData(serverData.BroadcastingPlayID)
    --        radioStateData.ActiveRedPoint = false
    --        EventMgr.Dispatch("UPDATE_RADIOVIEW", serverData.BroadcastingPlayID)
    --    end
    --    self:UpdateRedDot(RadioConst.RedDotType.RadioItem, serverData.BroadcastingPlayID)
    --end
end

---登录时，根据检查所有广播剧是否解锁
function RadioNewBLL:CheckAllRadioUnlock()
    --遍历self._roleRadiosDict，检查是否有新的广播剧解锁
    local unlockRoleList = BllMgr.GetRoleBLL():GetUnlockedRole()
    for roleId, v in pairs(unlockRoleList) do
        self:CheckRoleRadioUnlock(roleId)
    end
end


---检查列表中的角色的广播剧是否解锁
function RadioNewBLL:CheckListRoleRadioUnlock(roleMap)
    if(roleMap) then
        for _, roleData in pairs(roleMap) do
            self:CheckRoleRadioUnlock(roleData.RoleID or roleData.Id)
        end
    end
end

---检查某个角色的广播剧是否解锁
function RadioNewBLL:CheckRoleRadioUnlock(manType)
    if(self._roleRadiosDict[manType]) then
        local newRadioId = nil
        for index, radioConfig in pairs(self._roleRadiosDict[manType]) do
            if(not self:GetRadioStateData(radioConfig.CardID)) then
                --判定对应广播剧是否解锁
                local radioId = self:CheckRadioUnlock(radioConfig, manType)
                if(radioId and not newRadioId) then
                    newRadioId = radioId
                end
            end
        end
        if(newRadioId) then
            self:CheckCardRedDot(newRadioId)
            --self:CheckSelectRoleRedDot(manType)
        end

    end
end

---检查单个广播剧是否解锁
---@return number 新的广播剧id
function RadioNewBLL:CheckRadioUnlock(radioConfig, manType)
    if(radioConfig) then
        local hasCard = self:IsUnlockRadio(radioConfig.CardID)
        local loveLevelComplete = self:GetLovePointState(manType, radioConfig)
        if(hasCard and loveLevelComplete) then
            self:AddRadioData(manType, radioConfig.CardID)
            return radioConfig.CardID
        end
    end
end

function RadioNewBLL:OnCardUnlock(cardList)
    local newRadioId = nil
    local manType = nil
    for i = 1, #cardList do
        local cardData = cardList[i]
        local cardConfig = LuaCfgMgr.Get("CardBaseInfo", cardData.Id)
        if(cardConfig) then
            local radioId = self:CheckRadioUnlock(LuaCfgMgr.Get("RadioInfo", cardData.Id), cardConfig.ManType)
            if(radioId and not newRadioId) then
                newRadioId = radioId
                manType = cardConfig.ManType
            end
        end
    end
    if(newRadioId) then
        self:CheckCardRedDot(newRadioId)
        --self:UpdateRedDot(RadioConst.RedDotType.SelectRole, manType)
    end
end

function RadioNewBLL:GetLovePointState(roleId, radioConfig)
    local roleData = BllMgr.GetRoleBLL():GetRole(roleId)
    local loveLevel = roleData and roleData.LoveLevel or 0
    return loveLevel >= radioConfig.LoveLevelCondition, radioConfig.LoveLevelCondition
end

function RadioNewBLL:RecvMsg_RadioRedDotReaded(serverData)
    if serverData then
        assert(serverData.RoleID)
        local idList = serverData.BroadcastingPlayIDList
        if idList and #idList > 0 then
            for _, radioID in ipairs(idList) do
                --local _radioStateData = self:GetRadioStateData(radioID)
                --_radioStateData.ActiveRedPoint = true
                EventMgr.Dispatch("UPDATE_RADIOVIEW", serverData.BroadcastingPlayID)
            end
        end
    end
end

function RadioNewBLL:RecvMsg_SubRadioReward(serverData, sendData)
    if serverData then
        if serverData.RewardList and #serverData.RewardList > 0 then
            UICommonUtil.ShowRewardPopTips(serverData.RewardList, 2)
        end

        self:SetLocalRewardState(sendData.RewardID, false)
        self:SetSubRewardState(sendData.RewardID, true)
    end
end

function RadioNewBLL:RecvMsgSetPlayMode(serverData)
    if serverData then
        self.playMode = serverData.PlayMode
        EventMgr.Dispatch("RadioPlayModeUpdate")
    end
end

------------------------------------------------------------------------------------------------------------------------
---send msg
------------------------------------------------------------------------------------------------------------------------
--local _record_msg = { }

---时间补齐
function RadioNewBLL:CorrectPlayRecord()
    ---防止用户换设备的情况，有播放记录的，创建本地数据
    if(self._serverRadioStateDict) then
        for radioId, radioData in pairs(self._serverRadioStateDict) do
            local data = self:AddLocalTimeRecordData(radioId)
            ---对应换设备的情况
            if(data and data:GetTotalTime() == 0) then
                data:SetTotalTime(radioData.Time / _ServerTsAmplifyFactor)
            end
        end
    end
    self:SendMsg_UpdatePlayRecord(nil, true)
end

---@param isCorrect bool 登录时纠正与服务器的差值。异常分为两种情况，1.后台时直接杀进程，2.长时间后台，返回前台后消息发不出去 3. 领了奖，但是上报时间不足时
function RadioNewBLL:SendMsg_UpdatePlayRecord(roleID, isCorrect)
    local _record_msg = { }
    _record_msg.Records = {}
    local _roleID = roleID
    local count = 0

    --if(GameHelper.GetD)
    --Debug.LogError("SendMsg_UpdatePlayRecord ", roleID, " isBackgroundData", isBackgroundData)

    local timeRecordList = {}
    local num = X3DataMgr.GetAll(X3DataConst.X3Data.RadioTimeRecord, timeRecordList, function(a)
        return a:GetRecordType() == X3DataConst.RadioRecordType.Radio
    end, function(a, b)
        return a:GetHandleOrder() < b:GetHandleOrder()
    end)
    for i = 1, num do
        ---@type X3Data.RadioTimeRecord
        local record = timeRecordList[i]
        local time = record:GetTime()

        ---登录时，需要补齐差值
        if(isCorrect) then
            local radioData = self:GetRadioStateData(record:GetPrimaryValue())
            if(radioData) then
                local recordTotalTime = record:GetTotalTime();
                local serverTotalTime = radioData.Time / 1000
                --Debug.LogError("radioID", record:GetPrimaryValue(), " serverTotalTime ", serverTotalTime, " recordTotalTime ", recordTotalTime, " Time ", time)
                if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
                    Debug.LogWarning("广播剧登录时计算差值，ID： ", record:GetPrimaryValue(), " 服务器记录时间为 ", serverTotalTime,  "本地记录为 ", recordTotalTime, " 待累加时间为： ", time)
                end
                --if(recordTotalTime - serverTotalTime > 0) then
                --    time = time + recordTotalTime - serverTotalTime
                --end
                ---进行一次时间补齐
                if(time < 0) then
                    time = 0
                end
                local offset = self:CheckRewardTimeLost(record:GetPrimaryValue(), record)
                ---当有误差时，将本地时间补齐
                if(offset > 1) then
                    record:SetTotalTime(record:GetTotalTime() + offset)
                end
                if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
                    Debug.LogWarning("广播剧登录时计算奖励已领取的纠正： ", record:GetPrimaryValue(), " 准备额外上报的时间为 ", offset)
                end
                ---这里会多发time的时长
                time = time + offset
            end

        end
        if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
            Debug.LogWarning("当前广播剧的ID为： ", record:GetPrimaryValue(), " 准备上报的时间为： ", time)
        end
        --Debug.LogError("SendMsg_UpdatePlayRecord ", record:GetPrimaryValue(), " time ", time)
        ---小于两秒的不统计
        if(time > 2) then
            ---这里做下处理，防止上传过大的数值
            if(time > RadioConst.ReportLimit) then
                Debug.LogError("Radio Report To Large ", time)
                time = RadioConst.ReportLimit;
            end
            --local radioConfig = BackgroundRadioConfigDB:GetRadioConfig(name)
            local radioConfig = LuaCfgMgr.Get("RadioInfo", record:GetPrimaryValue())
            if(radioConfig and radioConfig.CardID) then
                local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioConfig.CardID)
                ---指定男主上报时需要匹配，不指定时则全部上报
                local containsResult = (roleID == _cardConfig.ManType) or (not roleID)

                _roleID = _cardConfig.ManType
                ---一次遍历处理多个男主数据
                if(not _record_msg.Records[_roleID]) then
                    _record_msg.Records[_roleID] = {}
                    _record_msg.Records[_roleID].List = {}
                end
                local curRoleRecord = _record_msg.Records[_roleID]

                if(_cardConfig and containsResult) then
                    time = math.ceil(time)
                    local _time = math.floor(time * 1000)
                    table.insert(curRoleRecord.List, { ID = radioConfig.CardID, Duration = _time, SubtitleID = record:GetSubId()})
                    count = count + 1
                end
            end

            ---将要上报的时间纳入总播放时间
            local curTotalTime = record:GetTotalTime()
            --Debug.LogError(" ResetTime ", curTotalTime, " record:GetTime() ", record:GetTime())
            if(GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)) then
                Debug.LogWarning("广播剧本地时间刷新, ID: ", record:GetPrimaryValue(), " 当前本地总计 ", record:GetTotalTime(), " 准备增加： ", record:GetTime())
            end
            record:SetTotalTime(curTotalTime + record:GetTime())
            local radioData = self:GetRadioStateData(record:GetPrimaryValue())
            ---修改本地缓存的服务器时间，以供逻辑检查使用
            if(radioData) then
                radioData.Time = record:GetTotalTime() * _ServerTsAmplifyFactor
            end
        end
        ---每次操作完都需清空
        record:SetTime(0)
        record:SetLastRecordTime(0)
        record:SetHandleOrder(0)
    end

    local condition = {}
    condition[X3DataConst.X3DataField.RadioTimeRecord.RecordType] = X3DataConst.RadioRecordType.Radio

    --不再移除 XTBUG-31652
    --X3DataMgr.RemoveByCondition(X3DataConst.X3Data.RadioTimeRecord, condition)
    --Debug.LogError("RemoveByCondition")
    if(count > 0 and _roleID) then
        --Debug.LogError("SEND _record_msg")
        --Debug.LogErrorTable(_record_msg)
        GrpcMgr.SendRequest(RpcDefines.ReportBroadcastingPlayRequest, _record_msg, true)
    end
end

---出于玩家体验考虑，当获取广播剧阅读奖励时，不进行时长校验。当出现因为某种情况，奖励被提前获取时，将此首广播剧的阅读时间提升至可领奖的基准时间。
---@param radioId int 广播剧ID
---@param record X3Data.RadioTimeRecord x3data
---@return int
function RadioNewBLL:CheckRewardTimeLost(radioId, record)
    ---此值仅会在获取全量时同步服务器数据，其余时间本地更新
    local offset = 0
    local hasGetReward = false

    ---先看有无领过奖
    local radioData = self:GetRadioStateData(radioId)
    if radioData then
        hasGetReward = radioData.GetReward
    end
    if(not hasGetReward) then
        return 0
    end
    ---获取领奖所需最低时长
    local rewardTime = 0
    local curCfg = LuaCfgMgr.Get("RadioInfo", radioId)
    if(curCfg) then
        rewardTime = curCfg.RewardTime
    end
    if(record and record:GetTotalTime() <= radioData.Time) then
        record:SetTotalTime(radioData.Time / 1000)
    end

    ---已领奖，并且本地计时小于奖励时间限制时
    if(hasGetReward and record and record:GetTotalTime() < rewardTime) then
        offset = rewardTime - record:GetTotalTime() + 1 ---- +1防止边界问题;
    end
    --Debug.LogError("radioId ", radioId, " hasGetReward ", hasGetReward, " record:GetTotalTime() ", record:GetTotalTime(), " rewardTime ", rewardTime, " offset ", offset)
    return offset
end

local _enter_msg = { }
function RadioNewBLL:SendMsg_EnterRadio(roleID, radioID)
    local curCfg = LuaCfgMgr.Get("RadioInfo", radioID)
    if(curCfg) then
        EventMgr.Dispatch("EVT_ENTERRADIO", radioID)
    end
end

local _quit_msg = { }
function RadioNewBLL:SendMsg_QuitRadio(roleID, radioID, subtitleID)
    local curCfg = LuaCfgMgr.Get("RadioInfo", radioID)
    if(curCfg) then
        BllMgr.GetRadioNewBLL():SendMsg_UpdatePlayRecord(roleID)
    end
end

local _reward_msg = { }
---领取广播剧奖励
function RadioNewBLL:SendMsg_GetReward(roleID, radioID)
    _reward_msg.RoleID = roleID
    _reward_msg.BroadcastingPlayID = radioID
    GrpcMgr.SendRequest(RpcDefines.GetBroadcastingPlayRewardRequest, _reward_msg, true)
end

local _buy_msg = { }
function RadioNewBLL:SendMsg_BuyRadio(roleID, radioID)
    _buy_msg.BroadcastingPlayID = radioID
    GrpcMgr.SendRequest(RpcDefines.BuyBroadcastingPlayRequest, _buy_msg)
end

local _reddot_msg = { BroadcastingPlayIDList = { } }
function RadioNewBLL:SendMsg_RedDotReaded(roleID, radioID)
    --if self:IsHasRedDot(roleID, radioID) then
    --    _reddot_msg.RoleID = roleID
    --    _reddot_msg.BroadcastingPlayIDList[1] = radioID
    --    GrpcMgr.SendRequest(RpcDefines.BroadcastingActiveReadRedPointRequest, _reddot_msg, true)
    --else
    --    print("RadioBLL:SendMsg_RedDotReaded Failed:", roleID, radioID)
    --end
end
local playModeMsg = {}
function RadioNewBLL:SendMsgPlayMode(playMode)
    playModeMsg.PlayMode = playMode
    GrpcMgr.SendRequest(RpcDefines.SetBroadcastingPlayModeRequest, playModeMsg, true)
end

local _subReward_msg = { RewardID = 0 }
function RadioNewBLL:SendMsg_SubRadioReward(rewardID)
    if not rewardID or rewardID <= 0 then
        return
    end
    if self:GetSubRewardState(rewardID) then
        return false
    end
    _subReward_msg.RewardID = rewardID
    GrpcMgr.SendRequest(RpcDefines.GetBroadcastingRewardRequest, _subReward_msg, true)
    return true
end

------------------------------------------------------------------------------------------------------------------------
---红点问题
------------------------------------------------------------------------------------------------------------------------
---@private
function RadioNewBLL:GetRewardRedCount(radioCardId)
    assert(radioCardId)
    local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioCardId)
    local state = self:GetState(_cardConfig.ManType, radioCardId)
    --Debug.LogError("GetRewardRedCount ", radioCardId, " ----- ", state == RadioConst.State.ReadedReward and 1 or 0)
    return state == RadioConst.State.ReadedReward and 1 or 0
end

---@private
---@param isSingle bool 是item自己所需
function RadioNewBLL:GetCanNewItemRedCount(radioCardId, isOnceChecked, isSingle)
    assert(radioCardId)
    local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioCardId)

    local state = self:GetState(_cardConfig.ManType, radioCardId)
    if state < RadioConst.State.UnlockedUnRead then
        ---未解锁，返回0
        return 0
    end

    if isOnceChecked then
        ---一次性红点检查
        if not self:IsHasRedDot(_cardConfig.ManType, radioCardId, isSingle) then
            return 0
        else
            return 1
        end
    end

    --local isCanBuy = self:IsCanBuy(radioCardId)
    --if isCanBuy ~= nil then
    --    ---是否显示购买红点
    --    if not self:GetBuyHitState(_cardConfig.ManType) then
    --        return 0
    --    end
    --
    --    ---需要购买的
    --    return state == RadioConst.State.UnBuy and 1 or 0
    --else
    --    ---不需要购买
    --    --return state == RadioConst.State.UnlockedUnRead and 1 or 0
    --    ---6.22调整 没什么好New的
    --    return 0
    --end
end

---@private
---@param isSingle bool 是item自己所需
function RadioNewBLL:GetItemRedCount(radioCardId, isSingle)
    return self:GetCanNewItemRedCount(radioCardId, true, isSingle)
end

---@private
function RadioNewBLL:GetRoleRedCount(roleID)
    local count = 0
    local radioList = self:GetRoleRadioList(roleID)
    local rewardRedCount = 0
    local newRedCount = 0
    if radioList then
        for _, radioCfg in ipairs(radioList) do
            local tempRewardCount = self:GetRewardRedCount(radioCfg.CardID)
            local tempNewCount = self:GetItemRedCount(radioCfg.CardID, true)
            rewardRedCount = rewardRedCount + tempRewardCount
            newRedCount = newRedCount + tempNewCount
            count = count + tempNewCount + tempRewardCount
        end
    end
    return count, rewardRedCount, newRedCount
end

---@private
function RadioNewBLL:GetAllRedCount(noCheckId)
    local count = 0
    local roleList = LuaCfgMgr.GetAll("RoleInfo")
    for _, roleCfg in pairs(roleList) do
        local roleID = roleCfg.ID
        if ((not noCheckId) or noCheckId ~= roleCfg.ID) then
            count = count + self:GetRoleRedCount(roleID)
        end
    end
    return count
end

function RadioNewBLL:UpdateRedDot(redDotType, radioUniqueId)
    if redDotType == RadioConst.RedDotType.RadioItem then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFT,
                self:GetRewardRedCount(radioUniqueId), radioUniqueId)
        local itemNewRp = self:GetItemRedCount(radioUniqueId, true)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAY,
                itemNewRp, radioUniqueId)
        --local roleList = LuaCfgMgr.GetAll("RoleInfo")
        --for _, roleCfg in pairs(roleList) do
        --    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_SELECTROLE, self:GetRoleRedCount(roleCfg.ID), roleCfg.ID)
        --end
        local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioUniqueId)
        if(_cardConfig and _cardConfig.ManType) then
            self:UpdateRedDot(RadioConst.RedDotType.SelectRole, _cardConfig.ManType)
        end
    elseif redDotType == RadioConst.RedDotType.RadioReward then
        ---领奖
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFT,
                self:GetRewardRedCount(radioUniqueId), radioUniqueId)
        local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioUniqueId)
        if(_cardConfig and _cardConfig.ManType) then
            self:UpdateRedDot(RadioConst.RedDotType.SelectRole, _cardConfig.ManType)
        end


    elseif redDotType == RadioConst.RedDotType.CardRadioEntry then
        local roleID = radioUniqueId
        local count, rewardCount, newCount = self:GetRoleRedCount(roleID)
        --Debug.LogError("CardRadioEntry COUNT ", count, " roleId ", roleID)
        ---填充子节点红点数量
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFT, rewardCount, roleID)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_BUY, count, roleID)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAY, newCount, roleID)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_TAB, count, roleID)

        ---为什么要单独设置入口的，设置每个Item不就好了 --- 因为是多男主复用红点数据，不成树状 再研究下 肯定可以优化
    elseif redDotType == RadioConst.RedDotType.RadioEntry then
        --local count = self:GetAllRedCount()
        ---填充子节点红点数量
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFT, count)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_BUY, count)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAY, count)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_TAB, count)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_HOME, count)
    elseif redDotType == RadioConst.RedDotType.ChangeRole then
        ---换人入口，排除当前选人
        local count = 0
        local curRoleCount, curRewardCnt, curNewCnt = 0,0,0
        local otherRewardCnt, otherNewCnt = 0,0
        --local roleList = LuaCfgMgr.GetAll("RoleInfo")
        --for _, roleCfg in pairs(roleList) do
            --local roleID = roleCfg.ID
            --if (not radioUniqueId) or radioUniqueId ~= roleCfg.ID then
            --    local roleRedPointCount, tempRewardCnt, tempNewCnt = self:GetRoleRedCount(roleID)
            --    otherRewardCnt = otherRewardCnt + tempRewardCnt
            --    otherNewCnt = otherNewCnt + tempNewCnt
            --    --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAYROLE, tempNewCnt, roleCfg.ID)
            --    --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFTROLE, tempRewardCnt, roleCfg.ID)
            --    count = count + roleRedPointCount
            --end

            --if radioUniqueId == roleCfg.ID then
                local tempCnt, tempRewardCnt, tempNewCnt = self:GetRoleRedCount(radioUniqueId)
                curRewardCnt = tempRewardCnt
                curNewCnt = tempNewCnt
                curRoleCount = curRoleCount + tempCnt
            --end
        --end

        --Debug.LogError("RedPointMgr.GetCount(X3_CFG_CONST.RED_RADIOPLAY_CHANGEROLE) ", RedPointMgr.GetCount(X3_CFG_CONST.RED_RADIOPLAY_GIFTROLE))
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAYROLE, otherNewCnt)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFTROLE, otherRewardCnt)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_ENTRY, curRoleCount, radioUniqueId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAYMAN, curNewCnt, radioUniqueId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFTMAN, curRewardCnt, radioUniqueId)

        --不再手动修改
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_CHANGEROLE, count)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_SELECTROLE, curRoleCount, radioUniqueId)
    elseif redDotType == RadioConst.RedDotType.SelectRole then
        local curRoleCount, curRewardCnt, curNewCnt = 0
        local roleList = LuaCfgMgr.GetAll("RoleInfo")
        for _, roleCfg in pairs(roleList) do
            if radioUniqueId == roleCfg.ID then
                --curRoleCount = curRoleCount + self:GetRoleRedCount(radioUniqueId)
                curRoleCount, curRewardCnt, curNewCnt = self:GetRoleRedCount(radioUniqueId)
                break
            end
        end
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_NEWPLAYMAN, curNewCnt, radioUniqueId)
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_GIFTMAN, curRewardCnt, radioUniqueId)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_ENTRY, curRoleCount, radioUniqueId)
        --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_RADIOPLAY_SELECTROLE, curRoleCount, radioUniqueId)
    end
end

---更新换人按钮红点
---@field roleId int 当前选中的角色
function RadioNewBLL:CheckChangeRoleRedDot(roleId)
    self:UpdateRedDot(RadioConst.RedDotType.ChangeRole, roleId)
end

---更新换人按钮红点
---@field roleId int 当前选中的角色
function RadioNewBLL:CheckSelectRoleRedDot(roleId)
    self:UpdateRedDot(RadioConst.RedDotType.SelectRole, roleId)
end

function RadioNewBLL:CheckEntryRedDot()
    self:UpdateRedDot(RadioConst.RedDotType.RadioEntry)
    local roleList = LuaCfgMgr.GetAll("RoleInfo")
    for _, roleCfg in pairs(roleList) do
        local roleID = roleCfg.ID
        self:UpdateRedDot(RadioConst.RedDotType.CardRadioEntry, roleID)
    end
end

function RadioNewBLL:CheckCardRedDot(cardId)
    self:UpdateRedDot(RadioConst.RedDotType.RadioItem, cardId)
end

----逻辑控件

function RadioNewBLL:GetPlayerCtrl()
    if (not self.PlayerCtrl) then
        self.PlayerCtrl = RadioPlayerCtrl.new()
        self.PlayerMedium = RadioPlayerCtrlMedium.new()
    end
    return self.PlayerCtrl, self.PlayerMedium
end

---退出时关闭
function RadioNewBLL:ClosePlayerCtrl()
    self.PlayerCtrl:Exit()
    self.PlayerMedium:Exit()
end

------------------------------------------------------------------------------------------------------------------------
---跳转接口
------------------------------------------------------------------------------------------------------------------------
---(当前角色如果存在广播剧)默认跳转至当前角色的第一个有效广播剧
---@param roleID number
function RadioNewBLL:Jump2RadioViewByRoleID(roleID)
    UIMgr.Open(UIConf.RadioListWnd, roleID)
end

---目前cardID唯一对应roleID,所以只需要cardID
---@param cardID number
function RadioNewBLL:Jump2RadioViewByCardID(cardID)
    if cardID then
        local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", cardID)
        if _cardConfig then
            UIMgr.Open(UIConf.RadioListWnd, _cardConfig.ManType, cardID)
            return
        end
    end

    ---默认跳转第一个有效广播剧
    UIMgr.Open(UIConf.RadioListWnd)
end

---打开播放界面
function RadioNewBLL:JumpRadioPlayView(radioConfig)

    UIMgr.Open(UIConf.RadioMainWnd, radioConfig)
end

----commonCondition Check
---@param id int
---@param datas string[]
---@return bool
function RadioNewBLL:CheckCondition(id, datas)
    local result = false
    if id == X3_CFG_CONST.CONDITION_RADIO_READFINISHNUM then
        local radioID = tonumber(datas[1])
        local isFinished = tonumber(datas[2]) == 1
        local radioState = self:GetState(nil, radioID)
        local curFinished = radioState >= RadioConst.State.ReadedReward

        result = isFinished == curFinished
    end
    return result
end

--region GM接口
function RadioNewBLL:ReadRadio(radioId)
    if(not radioId) then
        Debug.LogError("没有传入广播剧ID")
        return
    end
    local _record_msg = { }
    _record_msg.Records = {}
    local roleRecord = {}
    roleRecord.List = {}
    local _roleID = nil
    local count = 0
    local radioConfig = LuaCfgMgr.Get("RadioInfo", tonumber(radioId))
    if(not radioConfig) then
        Debug.LogError("没有对应的广播剧配置，输入值为 ", radioId)
        return
    end

    local time = radioConfig.RewardTime
    ---小于两秒的不统计
    if(time > 2) then
        --local radioConfig = BackgroundRadioConfigDB:GetRadioConfig(name)
        if(radioConfig and radioConfig.CardID) then
            local _time = math.floor(time * 1000)
            table.insert(roleRecord.List, {ID = radioConfig.CardID, Duration = _time, SubtitleID = nil})
            count = count + 1

            if(not _roleID) then
                local _cardConfig = LuaCfgMgr.Get("CardBaseInfo", radioConfig.CardID)
                _roleID = _cardConfig.ManType
            end
        end

        --self:UpdateRadioReadedTime(_roleID, radioConfig.CardID, time, true)
    end

    if(count > 0 and _roleID) then
        _record_msg.Records[_roleID] = roleRecord

        --Debug.LogError("SEND _record_msg")
        --Debug.LogErrorTable(_record_msg)
        GrpcMgr.SendRequest(RpcDefines.ReportBroadcastingPlayRequest, _record_msg, true)
    end
end
--endregion


return RadioNewBLL
