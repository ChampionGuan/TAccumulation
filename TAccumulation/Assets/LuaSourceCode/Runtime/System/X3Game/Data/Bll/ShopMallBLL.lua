---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/12/14 16:57
---
---@class ShopMallBLL
local ShopMallBLL = class("ShopMallBLL", BaseBll)
local proxy = SelfProxyFactory.GetShopProxy()
local ShopMallConst = require("Runtime.System.X3Game.GameConst.ShopMallConst")
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
function ShopMallBLL:OnInit()
    proxy = SelfProxyFactory.GetShopProxy()
    ---@type table<int,cfg.ShopMall>
    self.shopMallCfgByShopId = {}
    ---@type table<int,table<int>> 商城中商品Condition埋点 主要用于红点刷新相关
    self.shopGroupIdListByConditionType = {}
    ---@type table<int,table<int>>  开放时间,商店id 商店开放时间戳
    self.shopOpenTimeDic = {}
    ---@type table<int,table<int>> 商店解锁的 解锁系统id和 商店id
    self.shopSystemUnlock = {}
    ---@type table<int,table<int>> 商店下次刷新  下次刷新时间戳和商店idList
    self.shopRefNextTimeDic = {}
    ---@type int 单个商品次数充值定时器
    self.restBuyNumTimer = nil
    ---@type table<int> 定时器触发时需要重置购买数量的商品id
    self.restBuyNumShopGoodsId = {}
    ---@type int 手动重置商店的商店id
    self.handResetShopId = 0
    ---@type int 商店刷新 定时器
    self.restShopDataTime = nil
    ---@type table<int> 商店下次刷新触发时需要刷新的商店idList
    self.nextRefShopIdTale = {}
    ---@type table<int>
    self.delaySendGetShopIdTable = {}
    self.delaySendGetShopTimer = nil
    self:InitShopMallCfgByShopId()
    self:InitShopGroupCfgByShowCondition()
    self:InitShopRpTrigger()
    self:StartShopRpTimer()
    self:InitShopNextRefTimeData()
    EventMgr.AddListener("UnLockSystem", self.OnUnLockSystemBack, self)
    EventMgr.AddListener(ShopMallConst.ShopEvent.SHOP_RED_POINT_CHECK, self.CheckRedPointByShopId, self)
    EventMgr.AddListener(ShopMallConst.ShopEvent.SHOP_START_RESET_NUM_TIME, self._ShopRestNumTimerInit, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_AI_SET_VIEW_ACTIVE, self.OnMainHomeIsShow, self)
    EventMgr.AddListener(GameConst.CommonConditionUpdate, self.OnConditionUpdate, self)
end

function ShopMallBLL:OnMainHomeIsShow()
    if self.delaySendGetShopTimer == nil then
        return
    end
    if self.delaySendGetShopTimer then
        TimerMgr.Discard(self.delaySendGetShopIdTable)
        self.delaySendGetShopIdTable = nil
    end
    self:SendGetShopDataByShopIdList(self.delaySendGetShopIdTable)
    self.delaySendGetShopIdTable = {}
end

function ShopMallBLL:_ShopRestNumTimerInit()
    if self.restBuyNumTimer then
        TimerMgr.Discard(self.restBuyNumTimer)
        self.restBuyNumTime = nil
    end
    self.restBuyNumShopGoodsId = {}
    self:StartShopBuyRestTimer()
end

function ShopMallBLL:StartShopBuyRestTimer()
    local allShopData = proxy:GetAllShop()
    local retDelayTime = 0
    local curTime = TimerMgr.GetCurTimeSeconds()
    local delayTimeDic = {}
    for i, v in ipairs(allShopData) do
        local reSets = v:GetReSets()
        if reSets then
            for k, v in pairs(reSets) do
                ---@type cfg.ShopGroup
                local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", k)
                if shopGroupCfg and shopGroupCfg.ItemRefreshType ~= Define.DateRefreshType.None then
                    local delayTime = v - curTime
                    if retDelayTime == 0 then
                        retDelayTime = delayTime
                    end
                    retDelayTime = math.min(retDelayTime, delayTime)
                    if not table.containskey(delayTimeDic, delayTime) then
                        delayTimeDic[delayTime] = {}
                    end
                    table.insert(delayTimeDic[delayTime], k)
                end
            end
        end
    end
    if retDelayTime > 0 then
        self.restBuyNumShopGoodsId = delayTimeDic[retDelayTime]
        self.restBuyNumTimer = TimerMgr.AddTimer(retDelayTime, self.ShopBuyNumRest, self)
    end
end

function ShopMallBLL:ShopBuyNumRest()
    proxy:ShopBuyNumRest(self.restBuyNumShopGoodsId)
end

---初始化商店所属一级页签
function ShopMallBLL:InitShopMallCfgByShopId()
    local allShopMall = LuaCfgMgr.GetAll("ShopMall")
    for k, v in pairs(allShopMall) do
        if v.ShopID then
            for i = 1, #v.ShopID do
                local shopId = v.ShopID[i]
                self.shopMallCfgByShopId[shopId] = v
            end
        end
    end
end

---初始化商品显示条件为系统解锁条件配置 红点用
function ShopMallBLL:InitShopGroupCfgByShowCondition()
    local allShopGroupCfg = LuaCfgMgr.GetAll("ShopGroup")
    for k, v in pairs(allShopGroupCfg) do
        if v.ShowCondition ~= nil and v.PurchaseCondition == nil then
            self:AddShopGroupIdListByParamList(v.ShowCondition, v.ID)
        end
        if v.PurchaseCondition ~= nil then
            self:AddShopGroupIdListByParamList(v.PurchaseCondition, v.ID)
        end
    end
end

function ShopMallBLL:AddShopGroupIdListByParamList(paramList, Id)
    local conditionType = paramList[1]
    if conditionType == X3_CFG_CONST.CONDITION_COMMONCONDITION then
        local conditionGroupId = paramList[2]
        local conditionCfgList = ConditionCheckUtil.GetCommonConditionListByGroupId(conditionGroupId)
        for i = 1, #conditionCfgList do
            local conditionType = conditionCfgList[i].ConditionType
            self:AddShopGroupIdListByConditionType(conditionType, Id)
        end
    else
        self:AddShopGroupIdListByConditionType(conditionType, Id)
    end
end

function ShopMallBLL:AddShopGroupIdListByConditionType(conditionType, Id)
    if not self.shopGroupIdListByConditionType[conditionType] then
        self.shopGroupIdListByConditionType[conditionType] = {}
    end
    if not table.containsvalue(self.shopGroupIdListByConditionType[conditionType], Id) then
        table.insert(self.shopGroupIdListByConditionType[conditionType], Id)
    end
end

---初始化商店开放的倒计时 红点触发用
function ShopMallBLL:InitShopRpTrigger()
    local allShopCfg = LuaCfgMgr.GetAll("ShopAll")
    local curTime = TimerMgr.GetCurTimeSeconds()
    for k, v in pairs(allShopCfg) do
        local shopIsOpen = self:CheckShopIsOpen(v.ID, false)
        if not string.isnilorempty(v.OpenTime) and not shopIsOpen then
            local openTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(v.OpenTime))
            local nextTime = openTime - curTime
            if nextTime > 0 then
                if self.shopOpenTimeDic[nextTime] == nil then
                    self.shopOpenTimeDic[nextTime] = {}
                end
                table.insert(self.shopOpenTimeDic[nextTime], v.ID)
            end
        end
        if not shopIsOpen and v.SystemUnlock ~= 0 then
            if self.shopSystemUnlock[v.SystemUnlock] == nil then
                self.shopSystemUnlock[v.SystemUnlock] = {}
            end
            table.insert(self.shopSystemUnlock[v.SystemUnlock], v.ID)
        end
    end
end

---初始化下次商店刷新的时间戳 时间到时需要主动向服务器请求商店数据
function ShopMallBLL:InitShopNextRefTimeData()
    local allShopCfg = LuaCfgMgr.GetAll("ShopAll")
    local curTime = TimerMgr.GetCurTimeSeconds()
    self.shopRefNextTimeDic = {}
    for k, v in pairs(allShopCfg) do
        if v.OpenOrClose == 1 and v.RefreshPeriod ~= Define.DateRefreshType.None then
            local nextTime = TimeRefreshUtil.GetNextRefreshTime(curTime, v.RefreshPeriod, v.RefreshTime)
            if not table.containskey(self.shopRefNextTimeDic, nextTime) then
                self.shopRefNextTimeDic[nextTime] = {}
            end
            table.insert(self.shopRefNextTimeDic[nextTime], k)
        end
    end
    self:StartShopResetTimer()
end

function ShopMallBLL:StartShopResetTimer()
    if self.restShopDataTime then
        TimerMgr.Discard(self.restShopDataTime)
        self.restShopDataTime = nil
    end
    self.nextRefShopIdTale = {}
    local retNextTime = 0
    local curTime = TimerMgr.GetCurTimeSeconds()
    for k, v in pairs(self.shopRefNextTimeDic) do
        local temNum = k
        if retNextTime == 0 then
            retNextTime = temNum
        end
        retNextTime = math.min(retNextTime, temNum)
    end
    local delayTime = retNextTime - curTime
    if delayTime > 0 then
        self.nextRefShopIdTale = self.shopRefNextTimeDic[retNextTime]
        self.restShopDataTime = TimerMgr.AddTimer(delayTime, self.OnShopRefTime, self)
    end
end

function ShopMallBLL:OnShopRefTime()
    if #self.nextRefShopIdTale > 0 then
        self:SendGetSomeShopData(self.nextRefShopIdTale)
        self:InitShopNextRefTimeData()
    end
end

---开启触发商店红点的倒计时
function ShopMallBLL:StartShopRpTimer()
    if table.nums(self.shopOpenTimeDic) <= 0 then
        return
    end
    local delayTime = 0
    for k, v in pairs(self.shopOpenTimeDic) do
        if delayTime == 0 or k < delayTime then
            delayTime = k
        end
    end
    if delayTime ~= 0 then
        TimerMgr.AddTimer(delayTime, function()
            local shopIdList = self.shopOpenTimeDic[delayTime]
            for i = 1, #shopIdList do
                local shopId = shopIdList[i]
                if shopId then
                    ---@type cfg.ShopAll
                    local shopCfg = LuaCfgMgr.Get("ShopAll", shopId)
                    if shopCfg.ShopType == ShopMallConst.ShopType.FIXED then
                        self:CheckRedPointByShopId(shopId)
                    else
                        self:SendGetSomeShopData(shopId)
                    end
                end
                self.shopOpenTimeDic[delayTime] = nil
                self:StartShopRpTimer()
            end
        end)
    end
end

---@return table<cfg.ShopMall>
function ShopMallBLL:GetAllShopMallCfg()
    local retTab = {}
    local allShopMall = LuaCfgMgr.GetAll("ShopMall")
    for k, v in pairs(allShopMall) do
        table.insert(retTab, v)
    end
    table.sort(retTab, function(a, b)
        return a.Sort < b.Sort
    end)
    return retTab
end

---获取当前页签下的商店列表
---@param shopMallCfg cfg.ShopMall
---@return table<cfg.ShopAll>
function ShopMallBLL:GetShopCfgList(shopMallCfg, isCheckOpen)
    if isCheckOpen == nil then
        isCheckOpen = true
    end
    local retTab = {}
    if shopMallCfg.ShopID then
        for i = 1, #shopMallCfg.ShopID do
            local shopId = shopMallCfg.ShopID[i]
            local shopCfg = LuaCfgMgr.Get("ShopAll", shopId)
            if shopCfg then
                if isCheckOpen then
                    if self:CheckShopIsOpen(shopId) then
                        table.insert(retTab, shopCfg)
                    end
                else
                    table.insert(retTab, shopCfg)
                end
            else
                Debug.LogWithTag(GameConst.LogTag.ShopMall, "shopCfg is nil shopId:", shopId, "shopMallId :", shopMallCfg.ID)
            end
        end
    end
    table.sort(retTab, function(a, b)
        return a.SerialNum > b.SerialNum
    end)
    return retTab
end

---根据商店Id获取当前商店的商品
---@param shopId int 商品id
---@return table<cfg.ShopGroup>
function ShopMallBLL:GetShopGoodsByShopId(shopId, roleId, isSort, itemType)
    if roleId == nil then
        roleId = 0
    end
    if isSort == nil then
        isSort = true
    end
    if itemType == nil then
        itemType = 0
    end
    local retTab = {}
    ---@type cfg.ShopAll
    local shopCfg = LuaCfgMgr.Get("ShopAll", shopId)
    if shopCfg.ShopType == ShopMallConst.ShopType.FIXED then
        local shopGroupsCfg = LuaCfgMgr.Get("ShopGroupByShopId", shopId)
        if shopGroupsCfg then
            for i, v in ipairs(shopGroupsCfg) do
                if self:CheckShopGoodsIsShow(v) then
                    table.insert(retTab, v)
                end
            end
        end
    else
        local shopData = proxy:GetShopData(shopId)
        if shopData ~= nil then
            local randGoods = shopData:GetRands()
            if randGoods then
                for i, v in ipairs(randGoods) do
                    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", v)
                    if self:CheckShopGoodsIsShow(shopGroupCfg) then
                        table.insert(retTab, shopGroupCfg)
                    end
                end
            end
        end
    end
    if roleId ~= 0 or itemType ~= 0 then
        retTab = table.filter(retTab, function(shopGroup)
            if shopGroup.IsPack == 0 then
                ---@type cfg.Item
                local itemCfg = LuaCfgMgr.Get("Item", shopGroup.ItemID[1].ID)
                if itemCfg ~= nil then
                    if roleId ~= 0 and itemCfg.Role ~= roleId then
                        return false
                    end
                    if itemType ~= 0 and itemCfg.Type ~= itemType then
                        return false
                    end
                    return true
                end
            end
            return false
        end)
    end
    if isSort then
        table.sort(retTab, handler(self, self.ShopGoodsSort))
    end
    return retTab
end

---@param a cfg.ShopGroup
---@param b cfg.ShopGroup
function ShopMallBLL:ShopGoodsSort(a, b)
    ---售罄商品
    local aIsSoldOut = self:IsSoldOut(a) and 1 or 0
    local bIsSoldOut = self:IsSoldOut(b) and 1 or 0
    if aIsSoldOut ~= bIsSoldOut then
        return aIsSoldOut < bIsSoldOut
    end
    if a.NoID ~= b.NoID then
        return a.NoID < b.NoID
    end
    return a.ID < b.ID
end

---商品是否售罄
---@param shopGroupCfg cfg.ShopGroup
---@return boolean
function ShopMallBLL:IsSoldOut(shopGroupCfg)
    if self.Limit == -1 then
        return false
    end
    local alreadyBuyNum = self:GetGoodsBuyNum(shopGroupCfg.ID)
    return shopGroupCfg.Limit - alreadyBuyNum == 0
end

---@param shopGroupCfg cfg.ShopGroup
---@param isCheckSoldOut boolean 是否检查售罄
---@return boolean
function ShopMallBLL:CheckShopGoodsIsShow(shopGroupCfg, isCheckSoldOut)
    if isCheckSoldOut == nil then
        isCheckSoldOut = true
    end
    if shopGroupCfg == nil then
        return false
    end
    if not self:CheckShopGoodsIsRotate(shopGroupCfg) then
        return false
    end
    if self:CheckShopGoodsIsCommodityOff(shopGroupCfg) then
        return false, ShopMallConst.ShopGroupShowLimitType.CommodityOff
    end
    ---SellOut==1 售罄后不显示
    if isCheckSoldOut and self:IsSoldOut(shopGroupCfg) then
        if shopGroupCfg.SellOut == 1 then
            return false, ShopMallConst.ShopGroupShowLimitType.SellOut
        else
            return true
        end
    end
    if shopGroupCfg.ShowCondition ~= nil and not ConditionCheckUtil.CheckConditionByIntList(shopGroupCfg.ShowCondition) then
        return false, ShopMallConst.ShopGroupShowLimitType.ShowCondition
    end
    if shopGroupCfg.PreID ~= nil then
        if not self:CheckShopGoodsPreIsBuy(shopGroupCfg) then
            return false, ShopMallConst.ShopGroupShowLimitType.PreShopGoods
        end
    end
    return true
end

---判断商品是否已下架
---@param shopGroupCfg cfg.ShopGroup
---@return boolean true为已下架 false 未下架
function ShopMallBLL:CheckShopGoodsIsCommodityOff(shopGroupCfg)
    if not string.isnilorempty(shopGroupCfg.CommodityOff) then
        local endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(shopGroupCfg.CommodityOff))
        local curTime = TimerMgr.GetCurTimeSeconds()
        if curTime >= endTime then
            return true
        end
    end
    return false
end

---判断商品前置道具是否满足条件
---@param shopGroupCfg  cfg.ShopGroup
---@return boolean
function ShopMallBLL:CheckShopGoodsPreIsBuy(shopGroupCfg)
    if shopGroupCfg.PreID == nil then
        return true
    end
    for i = 1, #shopGroupCfg.PreID do
        ---@type cfg.s2int
        local preS2Int = shopGroupCfg.PreID[i]
        ---@type cfg.ShopGroup
        local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", preS2Int.ID)
        local shopData = self:GetShopData(shopGroupCfg.ShopID)
        local historyBuys = nil
        if shopData then
            historyBuys = shopData:GetBuys()
        end
        if historyBuys == nil or historyBuys[preS2Int.ID] == nil then
            return false
        else
            if historyBuys[preS2Int.ID] < preS2Int.Num then
                return false
            end
        end
    end
    return true
end

---判断商店是否开放
---@param shopId int 商店Id
---@return boolean
function ShopMallBLL:CheckShopIsOpen(shopId, isCheckShopSystemUnlock)
    if isCheckShopSystemUnlock == nil then
        isCheckShopSystemUnlock = true
    end
    if isCheckShopSystemUnlock and not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_SHOP) then
        return false
    end
    ---@type cfg.ShopAll
    local shopCfg = LuaCfgMgr.Get("ShopAll", shopId)
    if shopCfg == nil then
        return false
    end
    if shopCfg.OpenOrClose == 0 then
        return false, ShopMallConst.ShopShowLimitType.IsClose
    end
    if shopCfg.ShopCondition ~= 0 then
        if not ConditionCheckUtil.CheckConditionByCommonConditionGroupId(shopCfg.ShopCondition) then
            return false, ShopMallConst.ShopShowLimitType.ShowCondition
        end
    end
    local openTime = nil
    local closeTime = nil
    if not string.isnilorempty(shopCfg.OpenTime) then
        openTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(shopCfg.OpenTime))
    end
    closeTime = self:GetShopCloseTime(shopCfg)
    local curTime = TimerMgr.GetCurTimeSeconds()
    if openTime and closeTime then
        return curTime >= openTime and curTime < closeTime, ShopMallConst.ShopShowLimitType.OpenTime
    elseif openTime then
        return curTime >= openTime, ShopMallConst.ShopShowLimitType.OpenTime
    elseif closeTime then
        return curTime < closeTime, ShopMallConst.ShopShowLimitType.OpenTime
    end
    return true
end

---获取商店关闭时间
---@param shopCfg cfg.ShopAll
---@return number
function ShopMallBLL:GetShopCloseTime(shopCfg)
    local closeTime = nil
    if not string.isnilorempty(shopCfg.CloseTime) then
        closeTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(shopCfg.CloseTime))
    else
        if shopCfg.DelayCloseTime ~= nil then
            if shopCfg.DelayCloseTime.Type == ShopMallConst.DelayCloseTime.ReturnActivity then
                local tempCloseTime = BllMgr.GetReturnActivityBll():GetEndTime()
                if tempCloseTime then
                    closeTime = tempCloseTime + shopCfg.DelayCloseTime.Num
                end
            end
        end
    end
    return closeTime
end

---获取当前商品已购买的数量
---@return number
function ShopMallBLL:GetGoodsBuyNum(shopGroupId)
    ---@type cfg.ShopGroup
    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
    ----todo LYDJS-53455 新增SoldOutCondition 如果满足直接认为已购完所有限购数量
    if shopGroupCfg and shopGroupCfg.Limit ~= -1 and shopGroupCfg.SoldOutCondition ~= nil and ConditionCheckUtil.CheckConditionByIntList(shopGroupCfg.SoldOutCondition) then
        return shopGroupCfg.Limit
    end
    local ret = 0
    local shopData = proxy:GetShopData(shopGroupCfg.ShopID)
    if shopData then
        local buyGoodsMap = shopData:GetBuys()
        if buyGoodsMap and table.containskey(buyGoodsMap, shopGroupId) then
            ret = buyGoodsMap[shopGroupId]
        end
    end
    return ret
end

---获取商店数据
---@param shopId int 商店id
---@return X3Data.Shop
function ShopMallBLL:GetShopData(shopId)
    return proxy:GetShopData(shopId)
end

---判断商店是否可刷新
---@param shopId int 商店id
---@return boolean
function ShopMallBLL:IsCanRefShop(shopId)
    local constS3Int = self:GetRefConstById(shopId)
    local itemData = BllMgr.Get("ItemBLL"):GetItem(constS3Int.ID)
    if itemData.Num < constS3Int.Num then
        return false
    end
    return true
end

---获取刷新商店消耗的item
---@param shopId int 商店id
---@return cfg.s3int
function ShopMallBLL:GetRefConstById(shopId)
    local curShopRefreshCfgTab = {}
    local allShopRefreshCfgTab = LuaCfgMgr.GetAll("ShopRefresh")
    local shopData = self:GetShopData(shopId)
    for k, v in pairs(allShopRefreshCfgTab) do
        if v.ShopID == shopId then
            table.insert(curShopRefreshCfgTab, v)
        end
    end
    local nowRefNum = shopData and shopData:GetHandReNum() + 1 or 1
    local curShopRefCfg = nil
    for i = 1, #curShopRefreshCfgTab do
        if curShopRefreshCfgTab[i].No == nowRefNum then
            curShopRefCfg = curShopRefreshCfgTab[i]
        end
    end
    if curShopRefCfg == nil then
        return curShopRefreshCfgTab[#curShopRefreshCfgTab].Cost[1]
    else
        return curShopRefCfg.Cost[1]
    end
end

---获取商店剩余刷新次数
---@param shopId int 商店id
---@return int
function ShopMallBLL:GetShopCanRefNum(shopId)
    local shopData = self:GetShopData(shopId)
    local shopCfg = LuaCfgMgr.Get("ShopAll", shopId)
    return shopCfg.RefreshLimit - shopData:GetHandReNum()
end

---获取商店商品消耗的ItemId
---@param shopGroupId int 商品id
---@return int
function ShopMallBLL:GetShopItemConstItemIdById(shopGroupId)
    local retConstId = 0
    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
    local itemCfg = LuaCfgMgr.Get("Item", shopGroupCfg.CostItem[1].Num)
    if itemCfg ~= nil then
        retConstId = itemCfg.ID
    end
    return retConstId
end

---获取商店商品可以购买的次数
---@param shopGroupCfg cfg.ShopGroup 商品id
---@return int,int   可购买的数量，    type=1 消耗货币不足  type2 已经售罄
function ShopMallBLL:GetShopItemCanBuyNum(shopGroupCfg)
    local retBuyNum = 999999
    local sundryCfg = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.SHOPBUYMAXLIMIT)
    if sundryCfg ~= nil then
        retBuyNum = sundryCfg
    end
    local constIsEnough = false
    local retType = ShopMallConst.BuyLimitType.DEFINE
    ---@type cfg.s2int
    local constItemS2Int = shopGroupCfg.CostItem[1]
    local isCash = constItemS2Int.ID == X3_CFG_CONST.ITEM_TYPE_CASH
    local nowConstMoney = shopGroupCfg.Price
    local constItemId = self:GetShopItemConstItemIdById(shopGroupCfg.ID)
    local alreadyBuyNum = self:GetGoodsBuyNum(shopGroupCfg.ID)
    local haveConstItemNum = 0
    local buyNum = 1
    if not isCash then
        local constItemData = BllMgr.GetItemBLL():GetItem(constItemId)
        if constItemData ~= nil then
            haveConstItemNum = constItemData.Num
        end
        local num1, num2 = math.modf(haveConstItemNum / nowConstMoney)
        buyNum = num1
        if num1 > 0 then
            constIsEnough = true
        end
    else
        constIsEnough = true
    end
    if shopGroupCfg.Limit == -1 then
        if isCash then
            retBuyNum = buyNum
        else
            if buyNum < retBuyNum then
                retBuyNum = buyNum
            end
        end
    else
        retBuyNum = shopGroupCfg.Limit - alreadyBuyNum
        retType = ShopMallConst.BuyLimitType.SELL_OUT
        if buyNum < retBuyNum then
            retBuyNum = buyNum
            retType = ShopMallConst.BuyLimitType.CONST
        end
    end
    return retBuyNum, retType, constIsEnough
end

---获取商品的刷新或下架时间戳
---@param shopGroupCfg cfg.ShopGroup
function ShopMallBLL:GetShopGoodsEndOrRefTime(shopGroupCfg)
    local retTime = nil
    local endTime = nil
    if not string.isnilorempty(shopGroupCfg.CommodityOff) then
        endTime = TimerMgr.GetUnixTimestamp(GameHelper.GetDateByStr(shopGroupCfg.CommodityOff))
    end
    if endTime then
        local curTime = TimerMgr.GetCurTimeSeconds()
        if curTime < endTime then
            retTime = endTime
        end
    end
    return retTime
end

---手动刷新
function ShopMallBLL:SendHandReset(shopId)
    local messageBody = PoolUtil.GetTable()
    messageBody.ShopId = shopId
    GrpcMgr.SendRequest(RpcDefines.HandResetRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
    self.handResetShopId = shopId
end

---购买商品
function ShopMallBLL:SendShopBuy(goodsId, goodsNum)
    BllMgr.GetShopMallBLL():ClearShopGroupNewByShopGroupId(goodsId, false)
    local messageBody = PoolUtil.GetTable()
    local goodsMap = PoolUtil.GetTable()
    goodsMap[goodsId] = goodsNum
    messageBody.GoodsMap = goodsMap
    GrpcMgr.SendRequest(RpcDefines.ShopBuyRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---批量购买商品
---@param goodsMap table<int,int>   物品id,购买数量
function ShopMallBLL:SendShopBuyByGoodsMap(goodsMap)
    for k, v in pairs(goodsMap) do
        BllMgr.GetShopMallBLL():ClearShopGroupNewByShopGroupId(k, false)
    end
    local messageBody = PoolUtil.GetTable()
    messageBody.GoodsMap = goodsMap
    GrpcMgr.SendRequest(RpcDefines.ShopBuyRequest, messageBody, true)
    PoolUtil.ReleaseTable(messageBody)
end

---获取全部商店数据
function ShopMallBLL:SendGetAllShop()
    local messageBody = PoolUtil.GetTable()
    GrpcMgr.SendRequest(RpcDefines.GetShopDataRequest, messageBody)
    PoolUtil.ReleaseTable(messageBody)
end

function ShopMallBLL:SendGetShopDataByShopIdList(shopIdList)
    local messageBody = PoolUtil.GetTable()
    messageBody.ShopIDs = shopIdList
    GrpcMgr.SendRequestAsync(RpcDefines.GetSomeShopDataRequest, messageBody)
    PoolUtil.ReleaseTable(messageBody)
end

---获取部分商店数据
---@param shopIdList table<int>
function ShopMallBLL:SendGetSomeShopData(shopIdList)
    if UIMgr.IsOpened(UIConf.ShopMainWnd) or UIMgr.IsVisible(UIConf.MainHomeWnd) then
        self:SendGetShopDataByShopIdList(shopIdList)
    else
        self.delaySendGetShopIdTable = shopIdList
        local delayTime = math.random(1, 10)
        self.delaySendGetShopTimer = TimerMgr.AddTimer(delayTime, function()
            self:SendGetShopDataByShopIdList(self.delaySendGetShopIdTable)
            self.delaySendGetShopIdTable = {}
            self.delaySendGetShopTimer = nil
        end, self)
    end
end

--region 红点相关逻辑
---商店红点检测
function ShopMallBLL:CheckRedPointByShopId(shopId)
    if shopId ~= nil then
        if self.handResetShopId ~= 0 and self.handResetShopId == shopId then
            return
        end
        local allShopGoods = self:GetShopGoodsByShopId(shopId)
        for i, v in ipairs(allShopGoods) do
            self:CheckRedPointByShopGoodsId(v)
        end
        self:CheckShopRpByShopId(shopId, allShopGoods)
        self:CheckShopMallRpByShopId(shopId)
    else
        local allShopAllCfg = LuaCfgMgr.GetAll("ShopAll")
        for k, v in pairs(allShopAllCfg) do
            if self:CheckShopIsOpen(v.ID, false) then
                self:CheckRedPointByShopId(v.ID)
            end
        end
    end
end

---根据商品id 计算商品红点
---@param shopGroupCfg cfg.ShopGroup
function ShopMallBLL:CheckRedPointByShopGoodsId(shopGroupCfg)
    if RedPointMgr.IsInit() then
        if self:CheckShopIsOpen(shopGroupCfg.ShopID, false) then
            self:InitShopGoodsNewRp(shopGroupCfg.ID)
        end
    end
    self:CheckShopGoodFreeRp(shopGroupCfg.ID)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_NEW, self:CheckShopGoodsIsNew(shopGroupCfg) and 1 or 0, shopGroupCfg.ID)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_RENEW, self:CheckShopGoodsIsNewByRef(shopGroupCfg) and 1 or 0, shopGroupCfg.ID)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, self:CheckShopGoodIsNewByBuyCondition(shopGroupCfg) and 1 or 0, shopGroupCfg.ID)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, self:CheckShopGoodIsNewByShowCondition(shopGroupCfg) and 1 or 0, shopGroupCfg.ID)
end

---@param shopGroupId int shopGroupId
function ShopMallBLL:CheckShopGoodFreeRp(shopGroupId)
    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
    if not self:IsSoldOut(shopGroupCfg) and shopGroupCfg.Price == 0 then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_REWARD, 1, shopGroupCfg.ID)
    else
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_REWARD, 0, shopGroupCfg.ID)
        RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_REWARD, shopGroupCfg.ID)
    end
end

---初始化商品new的红点
---@param shopGroupId int shopGroupId
function ShopMallBLL:InitShopGoodsNewRp(shopGroupId)
    RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_NEW, shopGroupId)
end

---商品新上架红点
---@return boolean
function ShopMallBLL:CheckShopGoodsIsNew(shopGroupCfg)
    return RedPointMgr.GetValue(X3_CFG_CONST.RED_SHOP_ITEM_NEW, shopGroupCfg.ID) == 0
end

---商品刷新后重新上架的红点
---@param shopGroupCfg cfg.ShopGroup
---@return boolean
function ShopMallBLL:CheckShopGoodsIsNewByRef(shopGroupCfg)
    ---不会刷新的商品
    if shopGroupCfg.ItemRefreshType == 0 or shopGroupCfg.Limit == -1 then
        return false
    end
    local lastBuyTime = nil
    local shopData = self:GetShopData(shopGroupCfg.ShopID)
    local reSetTimes = nil
    if shopData then
        reSetTimes = shopData:GetLastBuyTime()
    end
    if reSetTimes and reSetTimes[shopGroupCfg.ID] ~= nil then
        lastBuyTime = reSetTimes[shopGroupCfg.ID]
    end
    local redPointValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_SHOP_ITEM_RENEW, shopGroupCfg.ID)
    if redPointValue == 1 then
        return true
    end
    local curBuyNum = self:GetGoodsBuyNum(shopGroupCfg.ID)
    if redPointValue ~= 2 and lastBuyTime ~= nil and curBuyNum == 0 then
        local nextRefTime = TimeRefreshUtil.GetNextRefreshTime(TimerMgr.GetCurTimeSeconds(), shopGroupCfg.ItemRefreshType, shopGroupCfg.ItemRefreshTime)
        proxy:AddOrUpdateShopGoodsNextRefTime(shopGroupCfg.ID, nextRefTime)
        RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_RENEW, shopGroupCfg.ID)
        return true
    end
    if redPointValue == 2 then
        local nextRefTime = proxy:GetShopGoodsNextRefTime(shopGroupCfg.ID)
        local curTime = TimerMgr.GetCurTimeSeconds()
        if shopGroupCfg.ItemRefreshType == Define.DateRefreshType.Time and nextRefTime == 0 then
            return false
        end
        if (nextRefTime == 0 or curTime > nextRefTime) and lastBuyTime ~= nil and curBuyNum == 0 then
            local lastNextRefTime = TimeRefreshUtil.GetNextRefreshTime(lastBuyTime, shopGroupCfg.ItemRefreshType, shopGroupCfg.ItemRefreshTime)
            lastNextRefTime = TimeRefreshUtil.GetNextRefreshTime(lastNextRefTime, shopGroupCfg.ItemRefreshType, shopGroupCfg.ItemRefreshTime)
            if curTime > lastNextRefTime then
                return false
            end
            local nextRefTime = TimeRefreshUtil.GetNextRefreshTime(curTime, shopGroupCfg.ItemRefreshType, shopGroupCfg.ItemRefreshTime)
            proxy:AddOrUpdateShopGoodsNextRefTime(shopGroupCfg.ID, nextRefTime)
            RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_RENEW, shopGroupCfg.ID)
            return true
        end
    end
    return false
end

---商品满足购买条件
---@param shopGroupCfg cfg.ShopGroup
---@return boolean
function ShopMallBLL:CheckShopGoodIsNewByBuyCondition(shopGroupCfg)
    ---没有前置条件的商品
    if shopGroupCfg.PurchaseCondition == nil then
        return false
    end
    local redPointValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, shopGroupCfg.ID)
    if redPointValue == 1 then
        return true
    end
    if redPointValue ~= 2 and ConditionCheckUtil.CheckConditionByIntList(shopGroupCfg.PurchaseCondition) then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, shopGroupCfg.ID)
        return true
    end
    return false
end

---商品满足购买前置条件和显示条件时显示红点
---@param shopGroupCfg cfg.ShopGroup
---@return boolean
function ShopMallBLL:CheckShopGoodIsNewByShowCondition(shopGroupCfg)
    ---没有前置条件和显示条件的商品
    if shopGroupCfg.PreID == nil and shopGroupCfg.ShowCondition == nil and shopGroupCfg.RegularChangeGroup == 0 then
        return false
    end
    if not self:CheckShopGoodsIsShow(shopGroupCfg, false) then
        return false
    end
    local redPointValue = RedPointMgr.GetValue(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, shopGroupCfg.ID)
    if redPointValue == 2 then
        return false
    end
    if shopGroupCfg.PurchaseCondition ~= nil then
        if redPointValue ~= 2 then
            RedPointMgr.Save(2, X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, shopGroupCfg.ID)
        end
        return false
    end
    if redPointValue == 1 then
        return true
    end
    if redPointValue ~= 2 then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, shopGroupCfg.ID)
        return true
    end
    return false
end

---商店红点根据商店id
---@param shopId int 商店id
---@return boolean
function ShopMallBLL:CheckShopRpByShopId(shopId, allShopGoods)
    local isHaveFreeGoods = false
    local isNewGoods = false
    local isRefNewGoods = false
    local isBuyConditionNewGoods = false
    local isShowConditionNewGoods = false
    for i, v in ipairs(allShopGoods) do
        if not isHaveFreeGoods and RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_REWARD, v.ID) > 0 then
            isHaveFreeGoods = true
        end
        if not isNewGoods and RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_NEW, v.ID) > 0 then
            isNewGoods = true
        end
        if not isRefNewGoods and RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_RENEW, v.ID) > 0 then
            isRefNewGoods = true
        end
        if not isBuyConditionNewGoods and RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, v.ID) > 0 then
            isBuyConditionNewGoods = true
        end
        if not isShowConditionNewGoods and RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, v.ID) > 0 then
            isShowConditionNewGoods = true
        end
    end
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_TAB_REWARD, isHaveFreeGoods and 1 or 0, shopId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_TAB_NEW, isNewGoods and 1 or 0, shopId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_TAB_RENEW, isRefNewGoods and 1 or 0, shopId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_TAB_CONDITIONBUY, isBuyConditionNewGoods and 1 or 0, shopId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_TAB_CONDITIONSHOW, isShowConditionNewGoods and 1 or 0, shopId)
end

---商城一级页签红点相关
---@param shopId int 商店id
function ShopMallBLL:CheckShopMallRpByShopId(shopId)
    ---@type cfg.ShopMall
    local shopMallCfg = self.shopMallCfgByShopId[shopId]
    if shopMallCfg then
        local isHaveRp = false
        local shopIdList = shopMallCfg.ShopID
        for i = 1, #shopIdList do
            local shopId = shopIdList[i]
            if RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_TAB, shopId) > 0 then
                isHaveRp = true
                break
            end
        end
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_PRIMARYTAB, isHaveRp and 1 or 0, shopMallCfg.ID)
    end
end

---手动刷新清除商店所有商品的新上架红点
function ShopMallBLL:ClearShopNewItemsRpByShopId(shopId)
    self.handResetShopId = 0
    local allShopGoods = self:GetShopGoodsByShopId(shopId)
    self:ClearShopNewRpByShopId(shopId, allShopGoods, true)
end

---清除商店红点
---@param shopId int 商店id
---@param shopGroupDataList table<cfg.ShopGroup> 商品列表
function ShopMallBLL:ClearShopNewRpByShopId(shopId, shopGroupDataList, isForceClear)
    local retIsCheckShop = false
    for i = 1, #shopGroupDataList do
        local shopGroupCfg = shopGroupDataList[i]
        local isCheckShop = self:ClearShopGroupNewByShopGroupId(shopGroupCfg.ID, false, isForceClear)
        if not retIsCheckShop then
            retIsCheckShop = isCheckShop
        end
    end
    if retIsCheckShop then
        self:CheckRedPointByShopId(shopId)
    end
end

---清除单个商品红点
---param shopGroupId int 商品id
function ShopMallBLL:ClearShopGroupNewByShopGroupId(shopGroupId, isCheckShopRp, isForceClear)
    local ret = false
    if isCheckShopRp == nil then
        isCheckShopRp = true
    end
    if isForceClear == nil then
        isForceClear = false
    end
    if RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_NEW, shopGroupId) > 0 or isForceClear then
        RedPointMgr.Save(1, X3_CFG_CONST.RED_SHOP_ITEM_NEW, shopGroupId)
        ret = true
    end
    if RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_RENEW, shopGroupId) > 0 or isForceClear then
        RedPointMgr.Save(2, X3_CFG_CONST.RED_SHOP_ITEM_RENEW, shopGroupId)
        ret = true
    end
    if RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, shopGroupId) > 0 or isForceClear then
        RedPointMgr.Save(2, X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, shopGroupId)
        ret = true
    end
    if RedPointMgr.GetCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, shopGroupId) > 0 or isForceClear then
        RedPointMgr.Save(2, X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, shopGroupId)
        ret = true
    end
    if isCheckShopRp then
        local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
        self:CheckRedPointByShopId(shopGroupCfg.ShopID)
    end
    return ret
end

--endregion

---跳转商城一级页签下的指定二级页签
---@param shopMallId cfg.ShopMall id
---@param  tittleId int 二级页签id
---@param isAutoChange boolean 商店推荐页是否自动切页
function ShopMallBLL:JumpToShopMallByShopMallId(shopMallId, tittleId, isAutoChange)
    UIMgr.Open(UIConf.ShopMainWnd, shopMallId, tittleId, nil, nil, isAutoChange)
end

---跳转相关接口
---@param shopId int shopId
---@param targetItem cfg.s3int 想要购买的道具
---@param shopGoodsIdList table<int> shopGoodsIdList
---@param isAutoChange bool  商店推荐页是否自动切页
function ShopMallBLL:JumpToShop(shopId, targetItem, shopGoodsIdList, isAutoChange)
    local allShopMallCfg = LuaCfgMgr.GetAll("ShopMall")
    local shopMallId = ShopMallConst.TabType.RECOMMEND
    local isHaveShop = false
    for k, v in pairs(allShopMallCfg) do
        if v.ShopID then
            if table.containsvalue(v.ShopID, shopId) then
                shopMallId = k
                isHaveShop = true
                break
            end
        end
    end
    if isHaveShop then
        if shopGoodsIdList ~= nil or targetItem ~= nil then
            UIMgr.OpenWithAnim(UIConf.ShopMainWnd, false, shopMallId, shopId, shopGoodsIdList, targetItem, isAutoChange)
        else
            UIMgr.Open(UIConf.ShopMainWnd, shopMallId, shopId, shopGoodsIdList, targetItem, isAutoChange)
        end
    else
        UIMgr.Open(UIConf.ShopMainWnd, shopMallId)
    end
end

---@param shopGroupIdList table<int> 商品idList
---@return table<int>,table<int> 普通道具消耗购买商品id 现金消耗购买商品id
function ShopMallBLL:GetShopGoodsConstType(shopGroupIdList)
    local normalGoodsTab = {}
    local payGoodsTab = {}
    for i, v in ipairs(shopGroupIdList) do
        local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", v)
        if shopGroupCfg then
            local constS2Int = shopGroupCfg.CostItem[1]
            local isCash = constS2Int.ID == X3_CFG_CONST.ITEM_TYPE_CASH
            if isCash then
                table.insert(payGoodsTab, v)
            else
                table.insert(normalGoodsTab, v)
            end
        end
    end
    return normalGoodsTab, payGoodsTab
end

---获取限购商品得展示文本
---@param shopGroupId int shopGroupId
---@return string
function ShopMallBLL:GetShopGoodsRefreshText(shopGroupId)
    local retStr = nil
    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
    local canBuyNum = nil
    if shopGroupCfg.Limit ~= -1 then
        local textId = nil
        local curBuyNum = self:GetGoodsBuyNum(shopGroupId)
        canBuyNum = shopGroupCfg.Limit - curBuyNum
        if shopGroupCfg.ItemRefreshType == 0 then
            textId = UITextConst.UI_TEXT_9488
        elseif shopGroupCfg.ItemRefreshType == 1 then
            textId = UITextConst.UI_TEXT_9465
        elseif shopGroupCfg.ItemRefreshType == 2 then
            textId = UITextConst.UI_TEXT_9466
        elseif shopGroupCfg.ItemRefreshType == 3 then
            textId = UITextConst.UI_TEXT_9489
        elseif shopGroupCfg.ItemRefreshType == 4 then
            textId = UITextConst.UI_TEXT_9490
        elseif shopGroupCfg.ItemRefreshType == 5 then
            textId = UITextConst.UI_TEXT_9491
        elseif shopGroupCfg.ItemRefreshType == 6 then
            textId = UITextConst.UI_TEXT_9492
        else
            textId = UITextConst.UI_TEXT_9467
        end
        retStr = UITextHelper.GetUIText(textId)
    end
    return retStr, canBuyNum, shopGroupCfg.Limit
end

---是否是套装或者服饰
---@param shopGroupCfg cfg.ShopGroup
---@return boolean
function ShopMallBLL:IsShowFashionPreview(shopGroupCfg)
    if shopGroupCfg.IsPack ~= 0 or shopGroupCfg.ItemID == nil then
        return false
    end
    local itemS3Int = shopGroupCfg.ItemID[1]
    local itemId = itemS3Int.ID
    local itemCfg = LuaCfgMgr.Get("Item", itemId)
    if itemCfg then
        if itemCfg.Type == X3_CFG_CONST.ITEM_TYPE_FORMATIONSUIT then
            return true
        elseif itemCfg.Type == X3_CFG_CONST.ITEM_TYPE_SKININVOKE then
            local fashionDataCfg = LuaCfgMgr.Get("FashionData", itemCfg.ConnectID)
            if fashionDataCfg and fashionDataCfg.PartEnum == X3_CFG_CONST.FASHIONPART_CLOTH then
                return true
            end
        end
    end
    return false
end

---获取有外观预览的商品列表
---@param shopGroupList table<cfg.ShopGroup>
---@return table<cfg.ShopGroup>
function ShopMallBLL:GetHaveFashionPreviewList(shopGroupList)
    local ret = {}
    for i = 1, #shopGroupList do
        local shopGroupCfg = shopGroupList[i]
        if self:IsShowFashionPreview(shopGroupCfg) then
            table.insert(ret, shopGroupCfg)
        end
    end
    return ret
end

---查询随机商品是否已在商店中
---@param shopGroupId int
---@return boolean
function ShopMallBLL:ShopGoodsIsHave(shopGroupId)
    ---@type cfg.ShopGroup
    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
    if not shopGroupCfg then
        return false
    end
    ---@type cfg.ShopAll
    local shopCfg = LuaCfgMgr.Get("ShopAll", shopGroupCfg.ShopID)
    if not shopCfg then
        return false
    end
    if shopCfg.ShopType == ShopMallConst.ShopType.FIXED then
        return true
    else
        local shopData = proxy:GetShopData(shopGroupCfg.ShopID)
        local randGoods = shopData:GetRands()
        if randGoods then
            for i, v in ipairs(randGoods) do
                if v == shopGroupId then
                    return true
                end
            end
        end
    end
    return false
end

---根据商品id判断在当前商店列表的idx
---@param shopGroupDataList table<cfg.ShopGroup> 商店商品列表
---@param shopGroupId int 商品id
---@param targetItem cfg.s3int 目标道具(想要购买的道具)
---@return int idx
function ShopMallBLL:GetShopGoodsIdxByShopGoodsId(shopGroupDataList, targetShopGroupIdList, targetItem)
    local idx = nil
    local needNum = 1
    if targetShopGroupIdList == nil and targetItem == nil then
        return idx
    end
    local shopGroupId, tipsUITextId = self:FindJumpRealShopGoods(targetShopGroupIdList)
    if shopGroupId == nil and tipsUITextId ~= nil then
        UICommonUtil.ShowMessage(tipsUITextId)
    end
    if shopGroupId ~= nil and not self:ShopGoodsIsHave(shopGroupId) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9364)
        return idx
    end
    local targetItemShopGroup = nil
    for i = 1, #shopGroupDataList do
        ---@type cfg.ShopGroup
        local shopGroupCfg = shopGroupDataList[i]
        if shopGroupId == shopGroupCfg.ID then
            idx = i
            if targetItem then
                local isHave, needNum = self:ShopGoodsIsHaveItem(shopGroupCfg, targetItem)
                if isHave then
                    needNum = needNum
                end
            end
            break
        end
        if targetItem then
            if targetItem then
                local isHave, needNum = self:ShopGoodsIsHaveItem(shopGroupCfg, targetItem)
                if isHave then
                    idx = i
                    needNum = needNum
                    targetItemShopGroup = shopGroupCfg
                    break
                end
            end
        end
    end
    if targetItemShopGroup ~= nil then
        local isShow, showLimitType = self:CheckShopGoodsIsShow(targetItemShopGroup)
        if not isShow and showLimitType == ShopMallConst.ShopGroupShowLimitType.CommodityOff then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_9363)
        end
    end
    return idx, needNum
end

---@param shopGroupCfg cfg.ShopGroup 商品配置
---@param targetItem cfg.s3int 目标道具
function ShopMallBLL:ShopGoodsIsHaveItem(shopGroupCfg, targetItem)
    local retNeedNum = 1
    if shopGroupCfg.IsPack == 0 then
        ---普通商品
        if shopGroupCfg.ItemID then
            for i = 1, #shopGroupCfg.ItemID do
                ---@type cfg.s3int
                local itemS3Int = shopGroupCfg.ItemID[1]
                local itemId = itemS3Int.ID
                if itemId == targetItem.ID then
                    retNeedNum = math.ceil(targetItem.Num / itemS3Int.Num)
                    return true, retNeedNum
                end
            end
        end
    else
        ---礼包商品
        local shopPackCfg = LuaCfgMgr.Get("ShopPack", shopGroupCfg.IsPack)
        if shopPackCfg.PackItemID then
            for i = 1, #shopPackCfg.PackItemID do
                ---@type cfg.s3int
                local itemS3Int = shopPackCfg.PackItemID[1]
                local itemId = itemS3Int.ID
                if itemId == targetItem.ID then
                    retNeedNum = math.ceil(targetItem.Num / itemS3Int.Num)
                    return true, retNeedNum
                end
            end
        end
    end
    return false, retNeedNum
end

function ShopMallBLL:FindJumpRealShopGoods(shopGroupIdList)
    local retShopGroupId = nil
    local tipsUITextId = nil
    if shopGroupIdList == nil then
        return retShopGroupId, tipsUITextId
    end
    for i = 1, #shopGroupIdList do
        local shopGroupId = shopGroupIdList[i]
        ---@type cfg.ShopGroup
        local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
        local isShow, showLimitType = self:CheckShopGoodsIsShow(shopGroupCfg, false)
        local isSoldOut = self:IsSoldOut(shopGroupCfg)
        if isShow and not isSoldOut then
            retShopGroupId = shopGroupId
            break
        elseif showLimitType == ShopMallConst.ShopGroupShowLimitType.PreShopGoods then
            if retShopGroupId == nil then
                local retPreShopGroupIdList = {}
                for i = 1, #shopGroupCfg.PreID do
                    ---@type cfg.s2int
                    local s2Int = shopGroupCfg.PreID[i]
                    table.insert(retPreShopGroupIdList, s2Int.ID)
                end
                retShopGroupId = self:FindJumpRealShopGoods(retPreShopGroupIdList)
            end
            if tipsUITextId == nil then
                tipsUITextId = UITextConst.UI_TEXT_9361
            end
        else
            if tipsUITextId == nil then
                if not isShow then
                    if showLimitType == ShopMallConst.ShopGroupShowLimitType.CommodityOff then
                        tipsUITextId = UITextConst.UI_TEXT_9363
                    end
                end
            end
        end
    end
    return retShopGroupId, tipsUITextId
end

---打开商品购买弹窗
---@param shopGroupCfg cfg.ShopGroup
---@param needBuyNum int 需要购买数量
function ShopMallBLL:OpenBuyShopGoodsTips(shopGroupCfg, needBuyNum)
    if shopGroupCfg.SPType ~= nil and shopGroupCfg.SPType ~= ShopMallConst.ShopGroupSPType.NORMAL then
        ---特殊商品单独走逻辑
        if shopGroupCfg.SPType == ShopMallConst.ShopGroupSPType.MONTH_CARD then
            UIMgr.Open(UIConf.ShopMonthBuyWnd, shopGroupCfg.SPSystemID, shopGroupCfg)
        end
    else
        local isPack = shopGroupCfg.IsPack ~= 0
        if isPack then
            UIMgr.Open(UIConf.ShopGiftBuyWnd, shopGroupCfg.ID)
        else
            UIMgr.Open(UIConf.ShopExchangeBuyWnd, shopGroupCfg.ID, needBuyNum)
        end
    end
end

---获取商品价格
---@param shopGroupCfg cfg.ShopGroup
---@return int,int,string,int 原价,现价,货币icon图片名字,折扣百分比
function ShopMallBLL:GetShopGoodsPrice(shopGroupCfg)
    ---@type cfg.s2int
    local constS2Int = shopGroupCfg.CostItem[1]
    local curPrice = 0
    local oldPrice = 0
    local moneyTypeIcon = nil
    local discount = nil
    local isCash = constS2Int.ID == X3_CFG_CONST.ITEM_TYPE_CASH
    local payId = constS2Int.Num
    if isCash then
        curPrice = BllMgr.GetChargeBLL():GetCurrencyAmount(payId)
    else
        ---@type cfg.Item
        local constItem = LuaCfgMgr.Get("Item", constS2Int.Num)
        curPrice = shopGroupCfg.Price
        if constItem then
            moneyTypeIcon = constItem.Icon
        end
    end
    if shopGroupCfg.Discount ~= 0 then
        local price = nil
        local isSuccess = true
        if isCash then
            price, isSuccess = BllMgr.GetChargeBLL():GetMoneyByPayId(payId)
        else
            price = curPrice
        end
        if isSuccess then
            oldPrice = tonumber(price) / (shopGroupCfg.Discount / 1000)
            oldPrice = (math.floor(oldPrice * 100 + 0.5) / 100)
            local num1, num2 = math.modf(oldPrice)
            if num2 <= 0 then
                oldPrice = num1
            end
            if Locale.Region.ChinaMainland == Locale.GetRegion() then
                discount = shopGroupCfg.Discount / 100
                discount = math.floor(discount * 10 + 0.5) / 10
            else
                discount = shopGroupCfg.Discount / 10
                discount = math.floor(100 - discount)
            end
        end
    end
    if oldPrice ~= 0 and isCash then
        oldPrice = BllMgr.GetChargeBLL():GetCurrencyAmountByPrice(oldPrice, payId)
    end
    return oldPrice, curPrice, moneyTypeIcon, discount
end

---获取折扣价格文本描述
---@return string
function ShopMallBLL:GetDiscountText(discount)
    local str = nil
    if Locale.GetRegion() == Locale.Region.ChinaMainland then
        str = UITextHelper.GetUIText(UITextConst.UI_TEXT_9462, tostring(discount))
    else
        str = UITextHelper.GetUIText(UITextConst.UI_TEXT_9468, tostring(discount))
    end
    return str
end

---系统解锁回调
function ShopMallBLL:OnUnLockSystemBack(sysId)
    local refShopIdList = nil
    local systemUnlockShopIdList = self.shopSystemUnlock[sysId]
    if systemUnlockShopIdList then
        if refShopIdList == nil then
            refShopIdList = {}
        end
        for i = 1, #systemUnlockShopIdList do
            local systemUnlockShopId = systemUnlockShopIdList[i]
            if not table.containsvalue(refShopIdList, systemUnlockShopId) then
                table.insert(refShopIdList, systemUnlockShopId)
            end
        end
    end
    if refShopIdList then
        for i = 1, #refShopIdList do
            local shopId = refShopIdList[i]
            ---@type cfg.ShopAll
            local shopCfg = LuaCfgMgr.Get("ShopAll", shopId)
            if shopCfg.ShopType == ShopMallConst.ShopType.FIXED then
                self:CheckRedPointByShopId(shopId)
            else
                self:SendGetSomeShopData(shopId)
            end
        end
    end
end

function ShopMallBLL:OnConditionUpdate(conditionTypeList)
    local refShopIdList = nil
    for i = 1, #conditionTypeList do
        local conditionType = conditionTypeList[i]
        local shopGroupIdList = self.shopGroupIdListByConditionType[conditionType]
        if shopGroupIdList then
            refShopIdList = {}
            for j = 1, #shopGroupIdList do
                local shopGroupId = shopGroupIdList[j]
                local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONSHOW, self:CheckShopGoodIsNewByShowCondition(shopGroupCfg) and 1 or 0, shopGroupCfg.ID)
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SHOP_ITEM_CONDITIONBUY, self:CheckShopGoodIsNewByBuyCondition(shopGroupCfg) and 1 or 0, shopGroupCfg.ID)
                if not table.containsvalue(refShopIdList, shopGroupCfg.ShopID) then
                    table.insert(refShopIdList, shopGroupCfg.ShopID)
                end
            end
        end
    end
    if refShopIdList then
        for i = 1, #refShopIdList do
            local shopId = refShopIdList[i]
            if self:CheckShopIsOpen(shopId, false) then
                self:CheckRedPointByShopId(shopId)
            end
        end
    end
end

---显示商店下架的弹窗
function ShopMallBLL:ShowCloseShopMessageBox()
    UICommonUtil.ShowMessageBox(UITextConst.UI_TEXT_9500, { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
        EventMgr.Dispatch(ShopMallConst.ShopEvent.SHOP_CLOSE)
    end } }
    )
end

---判断商品中是否有现金商品
function ShopMallBLL:IsHaveCashShopGoods(shopGoodsList)
    for i = 1, #shopGoodsList do
        local shopGroupCfg = shopGoodsList[i]
        ---@type cfg.s2int
        local constS2Int = shopGroupCfg.CostItem[1]
        if constS2Int.ID == X3_CFG_CONST.ITEM_TYPE_CASH then
            return true
        end
    end
    return false
end

---获取商品第二件半价的描述
---@param shopGroupId
---@return bool 是否是半价商品
function ShopMallBLL:GetShopGoodsIsHalfPrice(shopGroupId)
    ---@type cfg.ShopGroup
    local shopGroupCfg = LuaCfgMgr.Get("ShopGroup", shopGroupId)
    if shopGroupCfg == nil then
        return false
    end
    if shopGroupCfg.HalfPrice ~= ShopMallConst.ShopHalfPriceType.None then
        return true
    end
    return false
end

--region 商品轮换相关内容
local function getStartOfDay(timestamp)
    local dateTable = TimerMgr.GetDateByServerTimestamp(timestamp)
    if dateTable.hour <= 4 then
        dateTable.day = dateTable.day - 1
    end
    dateTable.hour = 5
    dateTable.min = 0
    dateTable.sec = 0
    return TimerMgr.GetUnixTimestamp(dateTable)
end

local function getStartOfWeek(timestamp)
    local dateTable = TimerMgr.GetDateByServerTimestamp(timestamp)
    local weekday = dateTable.wday
    local daysToAdd = weekday - 2
    if daysToAdd < 0 then
        daysToAdd = daysToAdd + 7
    end
    dateTable.day = dateTable.day - daysToAdd
    dateTable.hour = 5
    dateTable.min = 0
    dateTable.sec = 0
    return TimerMgr.GetUnixTimestamp(dateTable)
end

local function getStartOfMonth(timestamp)
    local dateTable = TimerMgr.GetDateByServerTimestamp(timestamp)
    if dateTable.day == 1 and dateTable.hour <= 4 then
        dateTable.month = dateTable.month - 1
    end
    dateTable.day = 1
    dateTable.hour = 5
    dateTable.min = 0
    dateTable.sec = 0
    return TimerMgr.GetUnixTimestamp(dateTable), dateTable
end

---@param regularChangeType ShopMallConst.RegularChangeType
---@return number 轮换次数
function ShopMallBLL:GetShopGoodsRotateNum(regularChangeType)
    local curTime = TimerMgr.GetCurTimeSeconds()
    local serverOpenTime = TimerMgr.GetServerOpenTime()
    local retNum = 0
    if regularChangeType == ShopMallConst.RegularChangeType.Month then
        local startOfMonth1, timeData1 = getStartOfMonth(serverOpenTime)
        local startOfMonth2, timeData2 = getStartOfMonth(curTime)
        retNum = (timeData2.year - timeData1.year) * 12
        if timeData2.year == timeData1.year then
            retNum = retNum + (timeData2.month - timeData1.month)
        else
            retNum = retNum + timeData2.month - 1
        end
        if curTime < startOfMonth2 then
            retNum = retNum - 1
        end
    elseif regularChangeType == ShopMallConst.RegularChangeType.Week then
        local startOfWeek1 = getStartOfWeek(serverOpenTime)
        local startOfWeek2 = getStartOfWeek(curTime)
        retNum = math.floor((startOfWeek2 - startOfWeek1) / (7 * 24 * 3600))
        if curTime < startOfWeek2 then
            retNum = retNum - 1
        end
    elseif regularChangeType == ShopMallConst.RegularChangeType.Day then
        local startOfDay1 = getStartOfDay(serverOpenTime)
        local startOfDay2 = getStartOfDay(curTime)
        retNum = math.floor((startOfDay2 - startOfDay1) / (24 * 3600))
        if curTime < startOfDay2 then
            retNum = retNum - 1
        end
    end
    return retNum
end

---@param shopGroupCfg cfg.ShopGroup
---@return boolean
function ShopMallBLL:CheckShopGoodsIsRotate(shopGroupCfg)
    if shopGroupCfg.RegularChangeGroup == 0 then
        return true
    end
    ---@type cfg.ShopRegularChange
    local shopRegularChangeCfg = LuaCfgMgr.Get("ShopRegularChange", shopGroupCfg.ShopID)
    if shopRegularChangeCfg and shopRegularChangeCfg.Group ~= nil and table.containsvalue(shopRegularChangeCfg.Group, shopGroupCfg.RegularChangeGroup) then
        local rotateNum = self:GetShopGoodsRotateNum(shopRegularChangeCfg.RegularChangeType)
        local groupNum = #shopRegularChangeCfg.Group
        local idx = rotateNum
        if idx >= groupNum then
            idx = rotateNum % groupNum
        end
        idx = idx + 1
        local curGroupId = shopRegularChangeCfg.Group[idx]
        if shopGroupCfg.RegularChangeGroup ~= curGroupId then
            return false
        end
    end
    return true
end
--endregion

return ShopMallBLL