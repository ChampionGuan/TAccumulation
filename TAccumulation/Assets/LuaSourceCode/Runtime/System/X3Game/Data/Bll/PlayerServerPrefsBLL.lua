---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by qige.
--- DateTime: 2022/3/10 14:38
---

---
--- PlayerServerPrefsBLL
---使用方法接口维持和PlayerPrefs一致，做完操作后进行Save才会真正同步到服务器，所以可多次设置值再统一Save
---进行完Set或者Delete操作后可立即同步进行判断，是用本地数据先行来进行判断的
---22.1.4 by dl：调整为dirty更新，无需业务调用存储。PS, 上次更新已调整为需要枚举值来取，设值。
---

---@class PlayerServerPrefsBLL:BaseBll
local PlayerServerPrefsBLL = class("PlayerServerPrefsBLL", BaseBll)

----更新间隔
local UpdateInterval = 1

function PlayerServerPrefsBLL:OnInit()
    ---@type table<number, pbcmessage.CustomValue>
    self._serverPrefs = {}
    ---@type table<number, pbcmessage.CustomValue>
    self._waitForSetData = {}
    ---@type number[]
    self._waitForDeleteData = {}
    ---@type function
    --self._dataSetCallback = nil
    -----@type function
    --self._dataDeleteCallback = nil
    ---@type table
    self.valueCheckDic = nil

    ---@type bool 是否发生过更新
    self._updateDirty = false
    ---@type bool 是否进行过删除
    self._deleteDirty = false
    ---@type bool 是否初始化成功
    self._isInit = false
    ---@type number 定时器Id
    self._timerId = nil
end

function PlayerServerPrefsBLL:OnClear()
    self._serverPrefs = nil
    self._waitForSetData = nil
    self._waitForDeleteData = nil
    self._updateDirty = false
    self._deleteDirty = false
    self._isInit = false
    if (self._timerId) then
        TimerMgr.Discard(self._timerId)
        self._timerId = nil
    end

    --self._dataSetCallback = nil
    --self._dataDeleteCallback = nil
end

function PlayerServerPrefsBLL:Sync(reply)
    self._isInit = true
    if reply.DataMap then
        self._serverPrefs = reply.DataMap
    end
    self._timerId = TimerMgr.AddTimer(UpdateInterval, self._CheckSave, self, -1)
end

---外部没有理由调用
--function PlayerServerPrefsBLL:_DeleteAll()
--    for key, v in pairs(self._serverPrefs) do
--        table.insert(self._waitForDeleteData, key)
--    end
--    self._serverPrefs = {}
--end

---删除某个键值
---@param key GameConst.CustomDataIndex
function PlayerServerPrefsBLL:DeleteKey(key)
    self._serverPrefs[key] = nil
    table.insert(self._waitForDeleteData, key)
    self:SetDirty(true, true)
end

---@param key GameConst.CustomDataIndex
---@return boolean
function PlayerServerPrefsBLL:HasKey(key)
    return self._serverPrefs[key] ~= nil
end

---设指dirty状态
---@param state bool
function PlayerServerPrefsBLL:SetDirty(state, isDelete)
    if (not isDelete) then
        self._updateDirty = state
    else
        self._deleteDirty = state
    end
end

---检测值是否为预先定义好的
function PlayerServerPrefsBLL:_CheckValue(key)
    if (not self.valueCheckDic) then
        self.valueCheckDic = {}
        for index, v in pairs(GameConst.CustomDataIndex) do
            if (not self.valueCheckDic[v]) then
                self.valueCheckDic[v] = true
            else
                Debug.LogError("PlayerServerPrefsBLL CheckValue Repeat Key!")
            end
        end
    end
    local isHave = self.valueCheckDic[key]
    ---分包检查动态ID 无法注册，特殊判断
    if not isHave then
        return key > GameConst.CustomDataIndex.SUBPACKAGE_STAGE_CHECK_Start and key < GameConst.CustomDataIndex.SUBPACKAGE_STAGE_CHECK_End
    end
    return isHave
end

--region Get
---@param  key GameConst.CustomDataIndex
---@param defaultValue int
---@return int
function PlayerServerPrefsBLL:GetInt(key, defaultValue)
    if defaultValue == nil then
        defaultValue = 0
    end
    if self._serverPrefs[key] then
        return self._serverPrefs[key].int64Val
    end
    return defaultValue
end

---@param  key GameConst.CustomDataIndex
---@param defaultValue string
---@return string
function PlayerServerPrefsBLL:GetString(key, defaultValue)
    if defaultValue == nil then
        defaultValue = ""
    end
    if self._serverPrefs[key] then
        return self._serverPrefs[key].stringVal
    end
    return defaultValue
end

---@param key GameConst.CustomDataIndex
---@param defaultValue boolean
---@return boolean
function PlayerServerPrefsBLL:GetBool(key, defaultValue)
    if defaultValue == nil then
        defaultValue = false
    end
    if self._serverPrefs[key] then
        return self._serverPrefs[key].boolVal
    end
    return defaultValue
end

---@param key GameConst.CustomDataIndex
---@param defaultValue table<int>
---@return table<int>
function PlayerServerPrefsBLL:GetIntList(key, defaultValue)
    if defaultValue == nil then
        defaultValue = { }
    end
    if self._serverPrefs[key] then
        return self._serverPrefs[key].int32Array
    end
    return defaultValue
end
--endregion Get End

--region Set
---@param key GameConst.CustomDataIndex
---@return bool 检查保存的key合法性，true:合法，false:非法
function PlayerServerPrefsBLL:CheckKeyLegal(key)
    if type(key) ~= "number" then
        Debug.LogError("PlayerServerPrefsBLL Save Key Illegal format !!!type is not number")
        return false
    end
    if key < GameConst.CustomDataIndexRange.minValue or key > GameConst.CustomDataIndexRange.maxValue then
        Debug.LogError("PlayerServerPrefsBLL Save Key Range Illegal !!! Key is => ",key)
        return false
    end
    return true
end
---@param key GameConst.CustomDataIndex
---@param value int
function PlayerServerPrefsBLL:SetInt(key, value)
    if not self:CheckKeyLegal(key) then
        return
    end
    if (not self:_CheckValue(key)) then
        Debug.LogError("PlayerServerPrefsBLL SetInt ERROR")
    end
    self._serverPrefs[key] = { int64Val = value }
    self._waitForSetData[key] = { int64Val = value }
    self:SetDirty(true)
end

---@param key GameConst.CustomDataIndex
---@param value string
function PlayerServerPrefsBLL:SetString(key, value)
    if not self:CheckKeyLegal(key) then
        return
    end
    if (not self:_CheckValue(key)) then
        Debug.LogError("PlayerServerPrefsBLL SetString ERROR")
    end
    self._serverPrefs[key] = { stringVal = value }
    self._waitForSetData[key] = { stringVal = value }
    self:SetDirty(true)
end

---@param key GameConst.CustomDataIndex
---@param value boolean
function PlayerServerPrefsBLL:SetBool(key, value)
    if not self:CheckKeyLegal(key) then
        return
    end
    if (not self:_CheckValue(key)) then
        Debug.LogError("PlayerServerPrefsBLL SetBool ERROR")
    end
    self._serverPrefs[key] = { boolVal = value }
    self._waitForSetData[key] = { boolVal = value }
    self:SetDirty(true)
end

---@param key GameConst.CustomDataIndex
---@param value table<int>
function PlayerServerPrefsBLL:SetIntList(key, value)
    if not self:CheckKeyLegal(key) then
        return
    end
    if (not self:_CheckValue(key)) then
        Debug.LogError("PlayerServerPrefsBLL SetIntList ERROR")
    end
    self._serverPrefs[key] = { int32Array = value }
    self._waitForSetData[key] = { int32Array = value }
    self:SetDirty(true)
end

--endregion Set结束

----无需调用
---@param dataSetCallback function
---@param dataDeleteCallback function
function PlayerServerPrefsBLL:Save(dataSetCallback, dataDeleteCallback)
    ---当前使用的地方都已删除，加行打印以防万一
    Debug.LogError("无需调用，请删除")
    --if table.nums(self._waitForSetData) > 0 then
    --    GrpcMgr.SendRequest(RpcDefines.CustomDataSetRequest, { DataMap = self._waitForSetData })
    --    self._waitForSetData = {}
    --    self._dataSetCallback = dataSetCallback
    --end
    --if #self._waitForDeleteData > 0 then
    --    GrpcMgr.SendRequest(RpcDefines.CustomDataDeleteRequest, { DataMap = self._waitForDeleteData })
    --    self._waitForDeleteData = {}
    --    self._dataDeleteCallback = dataDeleteCallback
    --end
end

---按时间间隔触发，向服务器同步数据
function PlayerServerPrefsBLL:_CheckSave()
    ---成功初始化前无需同步
    if (not self._isInit) then
        return
    end

    if (self._updateDirty) then
        GrpcMgr.SendRequest(RpcDefines.CustomDataSetRequest, { DataMap = self._waitForSetData })
        table.clear(self._waitForSetData)
        self._updateDirty = false
    end
    if (self._deleteDirty) then
        GrpcMgr.SendRequest(RpcDefines.CustomDataDeleteRequest, { DataMap = self._waitForDeleteData })
        table.clear(self._waitForDeleteData)
        self._deleteDirty = false
    end
end

function PlayerServerPrefsBLL:UnitTest()
    self:SetInt(10000, 123)
    if (self:GetInt(10000) ~= 123) then
        Debug.LogError("UnitTest Failed")
    end
    self:SetString(10001, "123")
    if (self:GetString(10001) ~= "123") then
        Debug.LogError("UnitTest Failed")
    end
    self:SetBool(10002, true)
    if (self:GetBool(10002) ~= true) then
        Debug.LogError("UnitTest Failed")
    end
    self:SetIntList(10003, { 1, 2, 3 })
    if (self:GetBool(10003) ~= true) then
        Debug.LogError("UnitTest Failed")
    end
    self:Save(function()
        Debug.Log("Save Set Success")
    end)
    Debug.Log("UnitTest Passed")
end

function PlayerServerPrefsBLL:DataSetReply(reply)
    Debug.Log("PlayerServerPrefs Set Success")
    --if self._dataSetCallback then
    --    self._dataSetCallback()
    --    self._dataSetCallback = nil
    --end
end
function PlayerServerPrefsBLL:DataDeleteReply(reply)
    Debug.Log("PlayerServerPrefs Delete Success")
    --if self._dataDeleteCallback then
    --    self._dataDeleteCallback()
    --    self._dataDeleteCallback = nil
    --end
end
function PlayerServerPrefsBLL:DataGetReply(reply)
    Debug.Log("PlayerServerPrefs Get Success")
end
return PlayerServerPrefsBLL