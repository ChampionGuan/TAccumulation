---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/3/15 15:10
---

---@class ActivityCenterBLL:BaseBll
local ActivityCenterBLL = class("ActivityCenterBLL", BaseBll)
local ActivityCenterConst = require("Runtime.System.X3Game.GameConst.ActivityCenterConst")
local AnnouncementConst = require("Runtime.System.X3Game.GameConst.AnnouncementConst")

---用于监听对应condition的事件
local ListenConditionList = {
}

--未展示的红点记录
local _ACTIVITY_NEW_HEAD = "AC_NEW_RP"

--每天刷新的CMS红点
local _ACTIVITY_TIP_HEAD = "AC_TIP_RP"

--积分的day红点
local _ACTIVITY_DAY_HEAD = "AC_DAY_RP"
---@param activityData pbcmessage.ActivityData
---@param cmsData table{pbcmessage.ActivityTypeCMSConfig[],pbcmessage.ActivityCMSConfig[]}
function ActivityCenterBLL:Init(activityData, cmsData)
    self:UpdateActivityCMSData(cmsData)
    self:UpdateActivityCommonData(activityData)
    self:GetMHTipsData()
    self:CheckState()
end

function ActivityCenterBLL:OnInit()
    self.mhCheckKey = self:GetMHTipsCheckKey()

    --公告是否展示过
    self.tipsStateList = {}
    --弹脸公告数据
    self.tipsData = nil

    --刷新时间
    local resetString = string.split(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.COMMONDAILYRESETTIME), ":")
    self.dailyResetHour = tonumber(resetString[1])
    self.dailyResetMinute = tonumber(resetString[2])
    self.dailyResetSecond = tonumber(resetString[3])
    EventMgr.AddListener("CommonDailyReset", self._OnCommonDailyReset, self)
    EventMgr.AddListener(GameConst.TaskEvent.TaskStatusChange, self.OnTaskStatusChange, self)
    EventMgr.AddListener(GameConst.CommonConditionUpdate, self.OnConditionResultUpdate, self)
    EventMgr.AddListener("UnLockSystem", self.OnUnLockSystem, self)
    EventMgr.AddListener(Const.Event.ON_RED_DATA_CHANGED, self.OnAttachRpUpdate, self)

    ---两条都有意义，进入战斗前，活动会被触发一次OnShow
    EventMgr.AddListener(Const.Event.RECOVER_VIEW_SNAPSHOT_BEGIN, self.OnRecordUI, self)
    EventMgr.AddListener(Const.Event.BEGIN_TAKE_VIEW_SNAPSHOT, self.OnRecordUI, self)
    ---- 战斗返回处理
    EventMgr.AddListener(Const.Event.RECOVER_VIEW_SNAPSHOT_FINISH, self.OnRestoreUI, self)

    EventMgr.AddListener(ActivityCenterConst.EventType.RECOVER_VIEW, self.OnRestoreUI, self)

    ---构建监听的condition列表
    ListenConditionList[X3_CFG_CONST.CONDITION_ACCUMULATE_LOGIN] = true
    ListenConditionList[X3_CFG_CONST.CONDITION_LEVEL] = true
    ListenConditionList[X3_CFG_CONST.CONDITION_ACTIVITY_LOGIN] = true
    ListenConditionList[X3_CFG_CONST.CONDITION_STAGE_STATUS] = true

    ---活动中心数据类
    self.proxy = SelfProxyFactory.GetActivityCenterProxy()
    ---不在游戏配置内的活动
    self.noConfigList = {}

    ---定时任务计时器列表
    self.scheduleTimerList = {}
    ---监测开启定时器
    self.waitOpenTimerId = nil
    self.waitOpenActivityIdList = {}
    ---监测关闭定时器
    self.waitCloseTimerId = nil
    self.waitCloseActivityIdList = {}
    ---进入播放队列的PV活动
    self.playPVList = {}

    ---活动中心页签的选择，仅需记在内存中，进出战斗时需要
    self.lastSelectTabIndex = nil
    self.needRestoreTabIndex = nil
    self:InitChildBll()
end

---数据初始化完毕后，执行逻辑检查
function ActivityCenterBLL:CheckState()
    self:OnUpdateRedData()
    self:CheckScheduleActivity()
    self:ScheduleWaitOpenActivty()
    self:ScheduleWaitCloseActivty()

    self:ClearActivityCenterImage()
    EventMgr.Dispatch(ActivityCenterConst.EventType.CMS_REFRESH)
end

---活动相关子业务初始化放这
function ActivityCenterBLL:InitChildBll()
    BllMgr.GetActivityScoreTryBLL():Init()
end

--region 通用数据更新与埋点触发

function ActivityCenterBLL:OnRecordUI()
    --Debug.LogError("ActivityCenterBLL:OnRecordUI  OnRecordUI", self.lastSelectTabIndex)
    self.needRestoreTabIndex = self.lastSelectTabIndex

end

function ActivityCenterBLL:OnRestoreUI()
    --Debug.LogError("ActivityCenterBLL:OnRestoreUI ", self.lastSelectTabIndex)
    if (self.lastSelectTabIndex) then
        self.needRestoreTabIndex = self.lastSelectTabIndex
    end
    self.lastSelectTabIndex = nil
end

function ActivityCenterBLL:OnAttachRpUpdate(rpId)
    local cmsList = self.proxy:GetAttachActivityList(rpId)
    if (cmsList) then
        self:OnUpdateRedData()
    end
end

---系统解锁回调
function ActivityCenterBLL:OnUnLockSystem(sysId)
    if sysId == X3_CFG_CONST.SYSTEM_UNLOCK_ACTIVITY then
        self.proxy:UpdateAllActiveState()
    end
end

---每日刷新的处理 --处理签到红点，积分每日的new，还有cms的new
function ActivityCenterBLL:_OnCommonDailyReset()
    self:_UpdateTabRp()

    --弹脸公告
    self:CheckShowMHTips(true)
    --大富翁
    self:ResetGamePlayData()
    --签到
    self.proxy:UpdateSignDataWithDaily()

    --更新活动生效状态
    self.proxy:UpdateAllActiveState()
end

---活动关联的conditon变化时
function ActivityCenterBLL:OnConditionResultUpdate(conditionTypeList)
    --Debug.LogError( "OnConditionResultUpdate ", #conditionTypeList)
    --Debug.LogErrorTable(conditionTypeList)
    ---看下仅更新关联的活动
    for i = 1, #conditionTypeList do
        local conditionType = conditionTypeList[i]
        if ListenConditionList[conditionType] then
            self.proxy:RefreshActiveStateWithConditonType(conditionType)
        end
    end
end

---弹脸数据拉取成功
function ActivityCenterBLL:OnUpdateMHTipsDataSuccess(data)
    --Debug.LogError("OnUpdateMHTipsDataSuccess data ", data)
    --Debug.LogErrorTable(data)

    self.proxy:HandleAnnouncementData(data)
    self.tipsData = self.proxy:GetAnnouncementData();
    local whiteTable = {}
    for _, item in pairs(self.tipsData) do
        local id = item.id
        self.tipsStateList[id] = false  ---.url
        --Debug.LogError(UrlImgMgr.GetFileName(item.imageUrl), "------", item.imageUrl)
        table.insert(whiteTable, UrlImgMgr.GetBaseName(item.imageUrl))
    end

    UrlImgMgr.ClearFiles(UrlImgMgr.BizType.MHTips, whiteTable)
end

---弹脸数据拉取失败
function ActivityCenterBLL:OnUpdateMHTipsDataFail(arg)
    Debug.LogError("OnUpdateMHTipsDataFail ", arg)
end

--更新红点数据
function ActivityCenterBLL:OnUpdateRedData()
    self:_UpdateTabRp()
end

---更新活动基础数据
function ActivityCenterBLL:UpdateActivityCommonData(data)
    self.proxy:RefreshBaseData(data)
end

---更新活动相关CMS数据
function ActivityCenterBLL:UpdateActivityCMSData(data, forceUpdate)
    self.proxy:RefreshConfigData(data)
    ---对应服务器下发场景
    if(forceUpdate) then
        EventMgr.Dispatch(ActivityCenterConst.EventType.CMS_REFRESH)
    end
end

---清理无用的缓存图
function ActivityCenterBLL:ClearActivityCenterImage()
    local whiteTable = self.proxy:GetCurImageList()
    UrlImgMgr.ClearFiles(UrlImgMgr.BizType.ActivityCenter, whiteTable)
end

--endregion

--region 弹脸公告
---改变弹脸不再提醒状态
---@return bool 是否为不再提醒
function ActivityCenterBLL:ChangeShowMHTipsState()
    local lastRecordTime = PlayerPrefs.GetInt(self.mhCheckKey, 0)
    local isSameDay = TimeUtil.IsSameDay(lastRecordTime, TimerMgr.GetCurTimeSeconds())
    local result = isSameDay and 0 or TimerMgr.GetCurTimeSeconds()
    PlayerPrefs.SetInt(self.mhCheckKey, result)
    --Debug.LogError("ChangeShowMHTipsState ", result)
    return (not isSameDay) and true or false
end

---获取弹脸不再提醒状态
---@return bool 是否为不再提醒
function ActivityCenterBLL:GetHideMHTipsState()
    local lastRecordTime = PlayerPrefs.GetInt(self.mhCheckKey, 0)
    local isSameDay = TimeUtil.IsSameDay(lastRecordTime, TimerMgr.GetCurTimeSeconds())
    return isSameDay and true or false
end

---将活动公告置为已查看状态
function ActivityCenterBLL:ResetMHTips()
    if (self.tipsData) then
        for _, item in pairs(self.tipsData) do
            if ((not self.tipsStateList[item.id]) and item.isOpen) then
                self.tipsStateList[item.id] = true
            end
        end
    end
end

--检测是否有可以展示的公告
---@param reset int 是否需要重置本次弹出记录
function ActivityCenterBLL:CheckShowMHTips(reset)
    if (not SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_MAINHOMETIPS)) then
        return
    end

    ---每日重置时，视为新的一天
    if(reset) then
        table.clear(self.tipsStateList)
    end

    local canShow = not self:GetHideMHTipsState()

    if (self.tipsData and canShow) then
        for _, item in pairs(self.tipsData) do
            if ((not self.tipsStateList[item.id]) and item.isOpen)
                    and TimerMgr.GetCurTimeSeconds() < item.endTime
                    and TimerMgr.GetCurTimeSeconds() >= item.startTime then
                self.tipsStateList[item.id] = true
                ---拍脸业务接入condition判断，在弹出前判断是否有可触发的引导，若存在可触发的主界面引导则取消本次弹出。 -jianxin
                local guideConditionGroupID = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.GUIDEMAINHOMEMEETCONDITION)
                if not UIMgr.IsOpened(UIConf.ActivityMHTipsWnd) and not ConditionCheckUtil.CheckConditionByCommonConditionGroupId(guideConditionGroupID) then
                    ErrandMgr.Add(X3_CFG_CONST.POPUP_COMMON_NOTICE, item)
                end
            end
        end
    end
end

--endregion

--region 定时器相关逻辑（定时任务，Tick活动开启与否）

---检测并执行定时任务
function ActivityCenterBLL:CheckScheduleActivity()
    local allSchedule = self.proxy:GetAllScheduleActivity(true)
    local curTime = TimerMgr.GetCurTimeSeconds()
    --Debug.LogError("CheckScheduleActivity allSchedule ", #allSchedule)
    --遍历allSchedule，按照时间差值设置定时器
    for i = 1, #allSchedule do
        local item = allSchedule[i]
        local time = item.StartTime - curTime
        if (time > 0) then
            --避免同一时间请求
            time = time + math.random(0, 10)
            local timerId = TimerMgr.AddTimer(time, function()
                self:OnScheduleActivityListStart({ item.ID })
            end, self)
            if (self.scheduleTimerList[item.ID]) then
                TimerMgr.Discard(self.scheduleTimerList[item.ID])
            end
            self.scheduleTimerList[item.ID] = timerId
        end
    end
end

---Tick即将开始的活动
function ActivityCenterBLL:ScheduleWaitOpenActivty()
    self:ScheduleActivty(true)
end

---Tick即将关闭的活动
function ActivityCenterBLL:ScheduleWaitCloseActivty()
    self:ScheduleActivty(false)
end

---tick活动
function ActivityCenterBLL:ScheduleActivty(checkOpen)
    local allActivity = checkOpen and self.proxy:GetAllWaitActivity() or self.proxy:GetAllWaitCloseActivity()
    local curTime = TimerMgr.GetCurTimeSeconds()
    ----获取当前最近等待开启的活动列表
    ---@type table<int, table<int>>
    local waitList = checkOpen and self.waitOpenActivityIdList or self.waitCloseActivityIdList
    table.clear(waitList)
    local minOffset = math.maxinteger
    for i = 1, #allActivity do
        local item = allActivity[i]
        local offset = checkOpen and (item.StartTime - curTime) or (item.EndTime - curTime)
        if offset < minOffset then
            minOffset = offset
            table.clear(waitList)
            table.insert(waitList, item.ID)
        elseif offset == minOffset then
            table.insert(waitList, item.ID)
        end
    end

    local timerId = checkOpen and self.waitOpenTimerId or self.waitCloseTimerId
    if (timerId) then
        TimerMgr.Discard(timerId)
    end
    --Debug.LogError("ScheduleWaitOpenActivty start  offset ", minOffset, " waitList ", #waitList, " curTime ", curTime, "checkOpen ", checkOpen)
    --Debug.LogErrorTable(waitList)
    if (#waitList > 0) then
        --加一的原因为避免发生错误时会无限递归，实际逻辑判断无需
        minOffset = minOffset + 1
        local func = checkOpen and self.RefreshWaitOpenActivity or self.RefreshWaitCloseActivity
        timerId = TimerMgr.AddTimer(minOffset, func, self)
        if checkOpen then
            self.waitOpenTimerId = timerId
        else
            self.waitCloseTimerId = timerId
        end
    end
end

function ActivityCenterBLL:RefreshWaitOpenActivity()
    --Debug.LogError("RefreshWaitOpenActivity start  offset ", #self.waitOpenActivityIdList)
    self:RefreshActivityActiveState(self.waitOpenActivityIdList)
    table.clear(self.waitOpenActivityIdList)
    self.waitOpenTimerId = nil
    self:ScheduleActivty(true)
end

function ActivityCenterBLL:RefreshWaitCloseActivity()
    --Debug.LogError("RefreshWaitCloseActivity start  offset ", #self.waitCloseActivityIdList)
    self:RefreshActivityActiveState(self.waitCloseActivityIdList)
    table.clear(self.waitCloseActivityIdList)
    self.waitCloseTimerId = nil
    self:ScheduleActivty(false)
end

function ActivityCenterBLL:RefreshActivityActiveState(activtyIdList)
    if table.isnilorempty(activtyIdList) then
        return
    end
    for i = 1, #activtyIdList do
        self.proxy:RefreshActivityX3Data(activtyIdList[i])
    end
end

---当活动已生效，但未达成条件时，每次返回主界面，检查是否可以领奖
function ActivityCenterBLL:CheckAvailableScheduleActivity()
    local allSchedule = self.proxy:GetAllScheduleActivity()
    local curTime = TimerMgr.GetCurTimeSeconds()
    --Debug.LogError("CheckScheduleActivity allSchedule ", #allSchedule)
    local availableList = {}
    for i = 1, #allSchedule do
        local item = allSchedule[i]
        local time = item.StartTime - curTime
        if (time < 0) then
            table.insert(availableList, item.ID)
        end
    end
    self:OnScheduleActivityListStart(availableList)
end

---定时奖励队列触发
function ActivityCenterBLL:OnScheduleActivityListStart(activityIDList)
    local idList = {}
    for i = 1, #activityIDList do
        if (self:CheckScheduleActivityCondition(activityIDList[i])) then
            --Debug.LogError(" OnScheduleActivityListStart ", activityIDList[i])
            table.insert(idList, activityIDList[i])
        end
    end
    if (#idList > 0) then
        local req = {}
        req.ActivityID = idList
        GrpcMgr.SendRequest(RpcDefines.ActivityScheduledRewardClaimRequest, req, true)
    end

end
---定时任务开启时,向服务器请求数据
function ActivityCenterBLL:CheckScheduleActivityCondition(activityID)
    local cmsConfig = self:GetActivityCMSConfig(activityID)
    if (not cmsConfig) then
        return
    end
    --通过遍历cmsConfig的Conditions，ConditionCheckUtil.CheckConditionByIntList检查是否满足开启条件
    local conditions = cmsConfig.Conditions
    local allCheck = true
    for i = 1, #conditions do
        local condition = conditions[i]
        if (not ConditionCheckUtil.CheckConditionByIntList(condition)) then
            allCheck = false
            break
        end
    end
    return allCheck
end


--endregion

--region 跳转
---打开具体活动界面 --- 对应99类型。直接打开对应活动窗口
function ActivityCenterBLL:JumpToActivityView(activityId)
    ----todo 加个没开放的飘字
    local config = LuaCfgMgr.Get("ActivityCenter", activityId)
    if (not config) then
        Debug.LogError("活动中心表没有对应配置 id:", activityId)
        return
    end

    local cmsConfig = self:GetActivityCMSConfig(activityId)
    if (not cmsConfig) then
        Debug.LogError("没有CMS配置", activityId)
        return
    end
    if (TimerMgr.GetCurTimeSeconds() > cmsConfig.ShowEndTime) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_33017)
        return
    end

    if (config.ActivityPrefabPack == ActivityCenterConst.ActivityEntryViewType.Tip) then
        UIMgr.Open(UIConf.ActivityTipsPack, activityId)
    elseif (config.ActivityPrefabPack == ActivityCenterConst.ActivityEntryViewType.FullWindow) then
        UIMgr.Open(UIConf.ActivityPack, activityId)
    elseif (config.ActivityPrefabPack == ActivityCenterConst.ActivityEntryViewType.PV) then
        UIMgr.Open(UIConf.CommonVideoShowWnd, config.ActivityPV, nil, GameConst.VideoSourceType.URL, config.ActivityPVMode == 1, true, true)
    end
end

---打开活动主界面，对应跳转98类型，展现对应页签
---@param activityId int 活动ID
---@param roleId int 活动关联的roleId
---@param openActivityView bool 是否展开对应活动界面
function ActivityCenterBLL:JumpToMainActivityView(activityId, roleId, openActivityView)
    ---@type cfg.ActivityCenter
    local activityCenterCfg = LuaCfgMgr.Get("ActivityCenter", activityId)
    if activityCenterCfg == nil then
        Debug.LogErrorWithTag(GameConst.LogTag.Activity, "JumpToMainActivityView activityCenterCfg is nil")
        return
    end
    if activityCenterCfg.ActivityType == ActivityCenterConst.ActivityEntryType.GamePlay then
        if activityCenterCfg.ActivityShowType == ActivityCenterConst.ActivityGamePlayType.KnockMole then
            UIMgr.Open(UIConf.ActivityMoleWnd, roleId, activityId)
        end
    else
        UIMgr.Open(UIConf.ActivityMainWnd, activityId, openActivityView)
    end
end

---进入活动玩法
---@param activityId int 活动ID
function ActivityCenterBLL:EnterActivityGamePlay(activityId, roleId, difficultGroupId)
    if roleId == nil then
        roleId = -1
    end
    local activityGamePlayCfg = LuaCfgMgr.Get("ActivityGamePlay", activityId, roleId)
    if activityGamePlayCfg == nil then
        return
    end
    ---@type cfg.ActivityGameGroup
    local activityGameGroupCfg = LuaCfgMgr.GetDataByCondition("ActivityGameGroup", { GroupID = activityGamePlayCfg.GameGroup, DifficultGroupID = difficultGroupId })
    ---@type pbcmessage.ActivityGamePlayEnterRequest
    local req = PoolUtil.GetTable()
    req.ActivityID = activityId
    req.ManType = activityGamePlayCfg.ManType
    req.GameID = activityGameGroupCfg.ID
    req.Params = { activityGamePlayCfg.ManType }
    req.Version = LogicEntityUtil.GetGameVersion(activityGameGroupCfg.GameType)
    GrpcMgr.SendRequest(RpcDefines.ActivityGamePlayEnterRequest, req, true)
    PoolUtil.ReleaseTable(req)
end
--endregion

--region 与游戏server通信
---领取签到奖励
---@param activityId int
---@param ranks int[]
function ActivityCenterBLL:GetActivitySignReward(activityId, ranks)
    local req = {}
    req.Ranks = ranks
    req.ActivityID = activityId
    GrpcMgr.SendRequest(RpcDefines.ActivityTotalLoginClaimRequest, req, true)
end

---领取活动阶段奖励
function ActivityCenterBLL:GetActivityRankReward(activityId, rank)
    local req = {}
    req.Rank = rank
    req.ActivityID = activityId
    GrpcMgr.SendRequest(RpcDefines.ActivityRewardClaimRequest, req, true)
end

---领取活动奖励
function ActivityCenterBLL:GetActivityReward(taskArg, activityId)
    if not SelfProxyFactory.GetActivityCenterProxy():CheckActivityActive(activityId) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_33017)
        return
    end
    local req = {}
    if (type(taskArg) == "number") then
        req.QuestIDs = {}
        table.insert(req.QuestIDs, taskArg)
    elseif (type(taskArg) == "table") then
        req.QuestIDs = taskArg
    end
    req.ActivityID = activityId
    GrpcMgr.SendRequest(RpcDefines.ActivityQuestFinishRequest, req)
end

---拉取服务器转发的cms数据
function ActivityCenterBLL:GetServerCMSData()
    GrpcMgr.SendRequest(RpcDefines.ActivityCMSConfigGetRequest, {})
end

---拉取活动基础数据
function ActivityCenterBLL:GetActivityDataRequest()
    GrpcMgr.SendRequest(RpcDefines.GetActivityDataRequest, {})
end

---大富翁玩法加次数
function ActivityCenterBLL:SendActivityGamePlayBuyReq(id, manType)
    GrpcMgr.SendRequest(RpcDefines.ActivityGamePlayBuyCountRequest, { ActivityID = id, ManType = manType }, true)
end

---大富翁玩法次数更新
function ActivityCenterBLL:UpdateActivityGamePlayCount(activityId, playCount, buyCount, roleId)
    self.proxy:UpdateGamePlayData(activityId, playCount, buyCount, roleId)
end

function ActivityCenterBLL:UpdateScheduledRewardData(activityIdList)
    self.proxy:UpdateScheduledRewardData(activityIdList)
end

--endregion

--region 红点

function ActivityCenterBLL:_GetPlayerUid()
    return SelfProxyFactory.GetPlayerInfoProxy():GetUid()
end

---更新活动中心tab栏红点数据
function ActivityCenterBLL:_UpdateTabRp()
    local sortList = self.proxy:GetActivitySortConfig()
    for i = 1, #sortList do
        local sortConfig = sortList[i];

        local newRedNum, tipsRedNum, rewardNum = 0, 0, 0
        for index, cmsId in pairs(sortConfig.RelateID) do
            local _newRedNum, _tipsRedNum, _rewardNum = self:_UpdateActivityItemRp(cmsId)
            newRedNum = newRedNum + _newRedNum
            tipsRedNum = tipsRedNum + _tipsRedNum
            rewardNum = rewardNum + _rewardNum
        end
        --Debug.LogError("deling sortConfig.ID ", sortConfig.ID, " new ", newRedNum > 0 and 1 or 0, "  tips ", tipsRedNum > 0 and 1 or 0, " reward ", rewardNum > 0 and 1 or 0)
        self:UpdateActivityTabNewRpCount(newRedNum > 0 and 1 or 0, sortConfig.ID)
        self:_UpdateActivityTabTipsRpCount(tipsRedNum > 0 and 1 or 0, sortConfig.ID)
        self:_UpdateActivityTabRewardsRpCount(rewardNum > 0 and 1 or 0, sortConfig.ID)
    end

end

function ActivityCenterBLL:_UpdateActivityItemRp(cmsId)
    local cmsConfig = self.proxy:GetActivityCMSConfig(cmsId)
    local newRedNum, tipsRedNum, rewardNum = 0, 0, 0;
    if (cmsConfig) then
        --上新红点
        local num = self:GetActivityItemNewRpCount(cmsId)
        self:UpdateActivityItemRpCount(cmsId, num, ActivityCenterConst.ACTIVITY_RP_TYPE.NEW, true)
        newRedNum = newRedNum + num
        --每日的cms红点
        if (cmsConfig.RedPointType == 1) then
            num = self:GetActivityItemTipsRpCount(cmsId)
            tipsRedNum = tipsRedNum + num
            self:UpdateActivityItemRpCount(cmsId, num, ActivityCenterConst.ACTIVITY_RP_TYPE.TIPS, true)

        end
        --奖励红点
        num = self:GetActivityItemRewardRpCount(cmsId)
        self:UpdateActivityItemRpCount(cmsId, num, ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD, true)
        SelfProxyFactory.GetActivityScoreProxy():UpdateTaskRewardRed(cmsId)
        rewardNum = rewardNum + num
    end
    return newRedNum, tipsRedNum, rewardNum
end

---更新指定Tab 红点
---@field itemId int 触发的子活动Id
---@field rpType ActivityCenterConst.ACTIVITY_RP_TYPE 红点类型
function ActivityCenterBLL:UpdateActivityTabRpCount(itemId, rpType)

    local sortList = self.proxy:GetActivitySortConfig()
    for i = 1, #sortList do
        local sortConfig = sortList[i];
        if (table.containsvalue(sortConfig.RelateID, itemId)) then
            local num = 0;
            for index, cmsId in pairs(sortConfig.RelateID) do
                local cmsConfig = self.proxy:GetActivityCMSConfig(cmsId)
                if (cmsConfig) then
                    if (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.NEW) then
                        num = num + self:GetActivityItemNewRpCount(cmsId)
                        --Debug.LogError("NEW ", num, " cmsId ", cmsId)
                    elseif (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.TIPS and cmsConfig.RedPointType == 1) then
                        num = num + self:GetActivityItemTipsRpCount(cmsId)
                        --Debug.LogError("TIPS ", num, " cmsId ", cmsId)

                    elseif (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD) then
                        --Debug.LogError("REWARD ", num, " cmsId ", cmsId)

                        num = num + self:GetActivityItemRewardRpCount(cmsId)
                    end
                end
            end
            --更新对应tab，对应红点类型数量
            local result = num > 0 and 1 or 0;
            if (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.NEW) then
                self:UpdateActivityTabNewRpCount(result, sortConfig.ID)
            elseif (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.TIPS) then
                self:_UpdateActivityTabTipsRpCount(result, sortConfig.ID)
            elseif (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD) then
                self:_UpdateActivityTabRewardsRpCount(result, sortConfig.ID)
            end
            --Debug.LogError("deling UpdateActivityTabRpCount  tabId", sortConfig.ID, " type ", rpType, " result ", result)
            break
        end
    end
end

---更新活动tab栏的NEW红点数量
function ActivityCenterBLL:UpdateActivityTabNewRpCount(num, indentityId)
    --Debug.LogError("deling _UpdateActivityTabNewRp ", num, "---", indentityId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_TAB_NEW, num, indentityId)
end

---更新活动tab栏的TIPS红点数量
function ActivityCenterBLL:_UpdateActivityTabTipsRpCount(num, indentityId)
    --Debug.LogError("deling _UpdateActivityTabTipsRpCount ", num, "---", indentityId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_TAB_NOTICE, num, indentityId)
end

---更新活动tab栏的奖励红点数量
function ActivityCenterBLL:_UpdateActivityTabRewardsRpCount(num, indentityId)
    --Debug.LogError("deling _UpdateActivityTabRewardsRpCount ", num, "---", indentityId)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_TAB_DOT, num, indentityId)
end

---改变所有活动的new状态
function ActivityCenterBLL:ResetAllActivityNewRp()
    local sortList = self.proxy:GetActivitySortConfig()
    for i = 1, #sortList do
        local sortConfig = sortList[i];
        for index, cmsId in pairs(sortConfig.RelateID) do
            local cmsConfig = self.proxy:GetActivityCMSConfig(cmsId)
            self:ResetActivityNewRp(cmsConfig)
        end
        self:UpdateActivityTabNewRpCount(0, sortConfig.ID)
    end
end

---单个cmsNew红点重置
function ActivityCenterBLL:ResetActivityNewRp(cmsConfig)
    if (cmsConfig) then
        local cmsId = cmsConfig.ID
        --self:GetActivityItemNewRpCount(cmsId, true)
        self:RecordActivityItemNewRpCount(cmsId)
        self:UpdateActivityItemRpCount(cmsId, 0, ActivityCenterConst.ACTIVITY_RP_TYPE.NEW)
    end
end

---记录 TIPS 数据
---@field indentityId int 标识符
function ActivityCenterBLL:RecordActivityItemTipsRp(indentityId)
    local indexString = string.format("%s_%s_%s", self:_GetPlayerUid(), _ACTIVITY_TIP_HEAD, indentityId)
    PlayerPrefs.SetString(indexString, TimerMgr.GetCurTimeSeconds())
end

---获取配在CMS上的红点的数量，每天刷新
---@field indentityId int 标识符
function ActivityCenterBLL:GetActivityItemTipsRpCount(indentityId)
    local indexString = string.format("%s_%s_%s", self:_GetPlayerUid(), _ACTIVITY_TIP_HEAD, indentityId)
    local result = tonumber(PlayerPrefs.GetString(indexString, "0"))

    if (result == 0) then
        result = 1
    else
        --跨天时
        local day = TimeUtil.GetOpenDay(result)
        if (day > 1) then
            --Debug.LogError("deling Tips SUCCESS day", day, " indentityId ", indentityId)
            result = 1
        else
            result = 0
        end
    end
    result = result + self:GetActivityAttachCount(indentityId, X3_CFG_CONST.RED_ACTIVITY_ITEM_NOTICE)
    --Debug.LogError("deling Tips common ", result, " indentityId ", indentityId)
    return result
end

---更新item红点数量
---@field indentityId int 活动Id
---@field count int 红点数量
---@field rpType ActivityCenterConst.ACTIVITY_RP_TYPE 红点类型
---@field noFather boolean 不更新父节点
function ActivityCenterBLL:UpdateActivityItemRpCount(indentityId, count, rpType, noFather)
    local rpt = nil
    if (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.NEW) then
        --self:RecordActivityItemNewRpCount(indentityId)
        rpt = X3_CFG_CONST.RED_ACTIVITY_ITEM_NEW
    elseif (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.TIPS) then
        rpt = X3_CFG_CONST.RED_ACTIVITY_ITEM_NOTICE
        --self:RecordActivityItemTipsRp(indentityId)
    elseif (rpType == ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD) then
        rpt = X3_CFG_CONST.RED_ACTIVITY_ITEM_DOT
    end
    RedPointMgr.UpdateCount(rpt, count, indentityId)
    --Debug.LogError("deling UpdateActivityItemRpCount  ITEMiD", indentityId, " type ", rpType, " count ", count, " noFather ", noFather)

    --item更新时，更新其父节点
    if (not noFather) then
        self:UpdateActivityTabRpCount(indentityId, rpType)
    end
end

---全量更新活动item的奖励红点 --有点浪费。精准匹配优化下
function ActivityCenterBLL:UpdateAllActivityItemRewardRp(taskConfig)
    if ((taskConfig and taskConfig.TaskType == 9) or not taskConfig) then

        local sortList = self.proxy:GetActivitySortConfig()
        for i = 1, #sortList do
            local sortConfig = sortList[i];
            --local rewardNum = 0
            for index, cmsId in pairs(sortConfig.RelateID) do
                local cmsConfig = self.proxy:GetActivityCMSConfig(cmsId)
                if (cmsConfig) then
                    --rewardNum = rewardNum + self:GetActivityItemRewardRpCount(cmsId)
                    local result = self:GetActivityItemRewardRpCount(cmsId)
                    --Debug.LogError(" cmsId ", cmsId, " ", result)
                    self:UpdateActivityItemRpCount(cmsId, result > 0 and 1 or 0, ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD)

                end
            end
            --self:_UpdateActivityTabRewardsRpCount(rewardNum > 0 and 1 or 0, sortConfig.ID)
        end
    end
    --Debug.LogError("UpdateAllActivityItemRewardRp")
end

---更新指定活动的红点
function ActivityCenterBLL:UpdateSingleActivityItemRewardRp(cmsId)
    local cmsConfig = self.proxy:GetActivityCMSConfig(cmsId)
    if (cmsConfig) then
        --rewardNum = rewardNum + self:GetActivityItemRewardRpCount(cmsId)
        local result = self:GetActivityItemRewardRpCount(cmsId)
        self:UpdateActivityItemRpCount(cmsId, result > 0 and 1 or 0, ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD)
    end
end

---更新活动item的奖励红点
---@field indentityId int 标识符
---@return int 当前显示的积分 只显示当前拥有的积分 - 上衣档位的积分。 max的话取自身
---@return int 当前档位上限的积分
---@return bool 是否可领奖
---@return table 档位cfg数据
---@return bool 是否是最高档位
---@return int 上一档位需要的分数，主要拿来计算任务的进度条的
function ActivityCenterBLL:GetIntegralProgressData(indentityId)
    local cmsConfig = self.proxy:GetActivityCMSConfig(indentityId)
    if not cmsConfig then
        Debug.LogError("CMS未找到配置活动 活动ID => ", indentityId)
        return nil
    end
    local cfg = LuaCfgMgr.Get("ActivityCenter", cmsConfig.ID) or nil
    if not cfg then
        Debug.LogError("ActivityCenter未找到配置活动 活动ID => ", cmsConfig.ID)
        return nil
    end
    local isIntegral = cfg.ActivityType == ActivityCenterConst.ActivityEntryType.Task
    if not isIntegral then
        Debug.LogError("不是积分活动类型，当前类型 => ", cfg.ActivityType)
        return nil
    end
    local baseData = self.proxy:GetActivityBaseData(cfg.ActivityID)
    if not baseData then
        Debug.LogError("未找到配置活动数据 活动ID => ", cfg.ActivityID)
        return nil
    end

    local activityRewardConfig = LuaCfgMgr.Get("ActivityReward", cfg.ActivityID)
    if activityRewardConfig then
        local curPoint = baseData.Point
        local lastRankPoint = 0 ---上个档位需要的分数
        for j = 1, #activityRewardConfig do
            local rewardConfig = activityRewardConfig[j]
            if rewardConfig.ConditionCheck then
                local isMax = j == #activityRewardConfig
                local num = rewardConfig.ConditionCheck[3]
                if curPoint >= num then

                    if baseData.Reward.Rewarded[j] then
                        ---已经领奖
                        if isMax then
                            ---最高档位
                            return curPoint, num, false, rewardConfig, isMax, lastRankPoint
                        else
                            lastRankPoint = num
                        end
                    else
                        ---这个档位没有领奖
                        return curPoint - lastRankPoint, num, true, rewardConfig, isMax, lastRankPoint
                    end
                else
                    return curPoint - lastRankPoint, num, false, rewardConfig, isMax, lastRankPoint
                end
            end
        end
    end
end

---更新活动item的奖励红点
---@field indentityId int 标识符
---@return int 数量
function ActivityCenterBLL:GetActivityItemRewardRpCount(indentityId)
    local result = 0
    local cmsConfig = self.proxy:GetActivityCMSConfig(indentityId)
    if (cmsConfig) then
        --比对是否为活动中心的任务
        local centerConfig = (not self.noConfigList[cmsConfig.ID]) and LuaCfgMgr.Get("ActivityCenter", cmsConfig.ID) or nil
        if (centerConfig) then
            --积分活动的每天奖励在这里顺便更新
            local isIntegral = centerConfig.ActivityType == ActivityCenterConst.ActivityEntryType.Task
            --任务情况
            local taskList = centerConfig.ActivityTaskGroupID
            if (taskList) then
                for i = 1, #taskList do
                    local taskGroupIdId = taskList[i]
                    local openDay = (not isIntegral) and 0 or (SelfProxyFactory.GetPlayerInfoProxy():GetCreateRolePassResetDayNum() or 0)
                    local openState = self:GetOpenState(cmsConfig, true)
                    local isOpen = (not isIntegral) and openState or (openState and openDay >= i)--(not isIntegral) and true or openDay >= i

                    local groupConfig = LuaCfgMgr.Get("TaskTableByGroupId", taskGroupIdId)
                    local tempNum = 0
                    if (isOpen and groupConfig) then
                        for index, taskItem in pairs(groupConfig) do
                            local taskData = BllMgr.GetTaskBLL():GetTaskInfoById(taskItem.ID)
                            if (taskData) then
                                local taskCfg = BllMgr.GetTaskBLL():GetTaskCfgByTaskData(taskData)
                                if (taskData:GetStatus() == X3DataConst.TaskStatus.TaskCanFinish and taskCfg.AddReward and #taskCfg.AddReward > 0 and isOpen) then
                                    result = result + 1
                                    tempNum = tempNum + 1
                                end
                            end
                        end
                    end
                    --更新积分活动的每日红点
                    if (isIntegral) then
                        --未开放不要有
                        --local intergralOpen = self:GetOpenState(cmsConfig, true)
                        if (openState and openDay >= i) then
                            tempNum = tempNum + self:GetIntegralDayNewRp(taskGroupIdId)
                            --Debug.LogError(" NEW ", self:GetIntegralDayNewRp(taskGroupIdId), " tempNum ", tempNum)
                        else
                            tempNum = 0
                        end
                        result = result + tempNum
                        self:UpdateIntegralDayRp(taskGroupIdId, tempNum, true)
                    end
                end
            end

            --Debug.LogError("deling GetActivityItemRewardRpCount ", centerConfig.ActivityType)

            local baseData = self.proxy:GetActivityBaseData(centerConfig.ActivityID)
            --签到类型
            if (centerConfig.ActivityType == ActivityCenterConst.ActivityEntryType.Sign and baseData) then
                --Debug.LogError("deling baseData.TotalLogin.Progress ", baseData.TotalLogin.Progress, " # ", #baseData.TotalLogin.Rewarded)
                local totalLoginConfig = LuaCfgMgr.Get("ActivityTotalLogin", centerConfig.ActivityID)
                if (totalLoginConfig) then
                    local curRewardNum = table.nums(baseData.TotalLogin.Rewarded)
                    local passDay = TimeUtil.GetOpenDay(baseData.TotalLogin.LastUpdateTime or 0) or 0
                    if ((baseData.TotalLogin.Progress > curRewardNum or passDay > 1) and curRewardNum <= #totalLoginConfig) then
                        result = result + 1
                    end
                else
                    Debug.LogError("签到类型数据获取失败 ", centerConfig.ActivityID)
                end
            elseif (isIntegral and baseData) then

                --积分活动顶部奖励
                local activityRewardConfig = LuaCfgMgr.Get("ActivityReward", centerConfig.ActivityID)
                if (activityRewardConfig) then
                    for j = 1, #activityRewardConfig do
                        local rewardConfig = activityRewardConfig[j]
                        if (rewardConfig.ConditionCheck and rewardConfig.ConditionCheck[3]) then
                            if (baseData.Point >= rewardConfig.ConditionCheck[3] and (not baseData.Reward.Rewarded[j])) then
                                result = result + 1
                            end -- .baseData.Reward.Rewarded[i]
                        end
                    end
                end
            end

        else
            if (not self.noConfigList[cmsConfig.ID]) then
                self.noConfigList[cmsConfig.ID] = true
            end
        end
    end
    result = result + self:GetActivityAttachCount(indentityId, X3_CFG_CONST.RED_ACTIVITY_ITEM_DOT)

    --Debug.LogError("deling UpdateActivityItemRewardRp ", indentityId, " result ", result)
    --奖励应该是每次动态算的，似乎没必要存
    --RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_ITEM_DOT, result > 0 and 1 or 0, indentityId)

    return result;
end

---更新活动积分day的红点数量 --本地查看过更新，其余放在更新Item时
---@field indentityId int 活动Id
---@field count int 红点数量
---@field noFather boolean 不更新父节点
---@field itemId int itemId CMS上的id
function ActivityCenterBLL:UpdateIntegralDayRp(indentityId, count, noFather, itemId)
    --Debug.LogError("deling UpdateIntegralDayRp ", indentityId, " count ", count)
    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_ACTIVITY_INTEGRAL_DAY_ITEM, count, indentityId)
    if ((not noFather) and itemId) then
        self:UpdateActivityTabRpCount(itemId, ActivityCenterConst.ACTIVITY_RP_TYPE.REWARD)
    end
end
---积分活动day分为奖励和new，但是都用红点显示
---获取活动积分的day红点（本地new）
function ActivityCenterBLL:GetIntegralDayNewRp(indentityId)
    local indexString = string.format("%s_%s_%s", self:_GetPlayerUid(), _ACTIVITY_DAY_HEAD, indentityId)
    local num = PlayerPrefs.GetInt(indexString, 0) == 0 and 1 or 0
    return num
end
---记录活动积分day
---@field indentityId int 活动Id
---@field cmsId int cms上的id 即itemId
function ActivityCenterBLL:RecordIntegralDayNew(indentityId, cmsId)
    local indexString = string.format("%s_%s_%s", self:_GetPlayerUid(), _ACTIVITY_DAY_HEAD, indentityId)
    PlayerPrefs.SetInt(indexString, 1)
    --拿下任务组奖励数更新
    local groupConfig = LuaCfgMgr.Get("TaskTableByGroupId", indentityId)
    local result = 0
    if (groupConfig) then
        for index, taskItem in pairs(groupConfig) do
            local taskData = BllMgr.GetTaskBLL():GetTaskInfoById(taskItem.ID)
            if taskData then
                local taskCfg = BllMgr.GetTaskBLL():GetTaskCfgByTaskData(taskData)
                if (taskData and taskData:GetStatus() == X3DataConst.TaskStatus.TaskCanFinish and taskCfg.AddReward and #taskCfg.AddReward > 0) then
                    result = result + 1
                end
            end
        end
    else
        Debug.LogError("ActivityCenterBLL RecordIntegralDayNew ERROR ", indentityId)
    end
    --Debug.LogError("deling RecordIntegralDayNew ", indentityId, " RES ", result)
    self:UpdateIntegralDayRp(indentityId, result, false, cmsId)
end

---记录活动 NEW 状态
---@field indentityId int 标识符
---@field value int 要记录的数值
function ActivityCenterBLL:RecordActivityItemNewRpCount(indentityId)
    local indexString = string.format("%s_%s_%s", self:_GetPlayerUid(), _ACTIVITY_NEW_HEAD, indentityId)
    PlayerPrefs.SetInt(indexString, 1)
end

---获取活动item NEW 状态
---@field indentityId int 标识符
---@return int 数量
function ActivityCenterBLL:GetActivityItemNewRpCount(indentityId)

    local indexString = string.format("%s_%s_%s", self:_GetPlayerUid(), _ACTIVITY_NEW_HEAD, indentityId)
    local result = 0
    --Debug.LogError("deling _UpdateActivityItemNewRp ", isClose, "---", indentityId)

    if (PlayerPrefs.GetInt(indexString, 0) == 0) then
        result = 1
    end

    result = result + self:GetActivityAttachCount(indentityId, X3_CFG_CONST.RED_ACTIVITY_ITEM_NEW)
    return result
end

---获取cms配置中，与传入红点类型相同的红点数量
---@param cmsId int
function ActivityCenterBLL:GetActivityAttachCount(cmsId, redId)
    local cmsConfig = self.proxy:GetActivityCMSConfig(cmsId)
    if cmsConfig and ((cmsConfig.RedPointID ~= nil) or (cmsConfig.AcRedPointID ~= nil)) then
        local num = 0
        num = num + self:GetTypeRedCount(cmsConfig, redId)
        return num;
    end
    return 0
end

---获取对应类型的附加红点
---@param cmsConfig ActivityCMSConfig
function ActivityCenterBLL:GetTypeRedCount(cmsConfig, redId)
    local num = 0
    local staticType = RedPointMgr.GetStaticRedType(redId)
    if cmsConfig.RedPointID and next(cmsConfig.RedPointID) then
        for i = 1, #cmsConfig.RedPointID do
            local attachRp = cmsConfig.RedPointID[i]
            if (RedPointMgr.GetRedType(attachRp) == staticType) then
                num = num + RedPointMgr.GetCount(attachRp)
            end
        end
    end

    if cmsConfig.AcRedPointID and next(cmsConfig.AcRedPointID) then
        for i = 1, #cmsConfig.AcRedPointID do
            local attachRp = cmsConfig.AcRedPointID[i]
            if (RedPointMgr.GetRedType(attachRp) == staticType) then
                num = num + RedPointMgr.GetCount(attachRp, cmsConfig.RelateID)
            end
            ---父节点没有的，从子节点找
            if (num == 0) then
                num = num + self:CheckAttachAcRed(cmsConfig.RelateID, staticType, attachRp)
            end
        end
    end

    return num;
end

---当父活动没有红点时，继续查询子活动的红点
function ActivityCenterBLL:CheckAttachAcRed(acId, staticType, attachRp)
    ---@type cfg.ActivityMainUI
    local allChildList = LuaCfgMgr.GetListByCondition("ActivityMainUI", { ActivityID = acId })
    if (allChildList and #allChildList > 0) then
        for i = 1, #allChildList do
            local childId = allChildList[i].GoActivityID
            if (childId ~= 0) then
                local childRedType = RedPointMgr.GetRedType(attachRp, childId)
                if (childRedType == staticType) then
                    local childRedNum = RedPointMgr.GetCount(attachRp, childId)
                    if (childRedNum > 0) then
                        return childRedNum
                    end
                end
            end
        end
    end
    return 0
end

function ActivityCenterBLL:OnTaskStatusChange(taskId)
    local config = BllMgr.GetTaskBLL():GetTaskCfg(taskId)
    if config and config.TaskType == Define.EumTaskType.Activity then
        local task = BllMgr.GetTaskBLL():GetTaskInfoById(taskId)
        if task and task:GetStatus() == X3DataConst.TaskStatus.TaskCanFinish then
            self:_UpdateTabRp()
        end
    end
end

---检查重置活动玩法类数据
function ActivityCenterBLL:ResetGamePlayData()
    self.proxy:ResetGamePlayData()
end

---唤醒第三方应用
function ActivityCenterBLL:WakeUpApp(type, arg)
    if (type == ActivityCenterConst.JumpType.Bili) then
        SDKMgr.Follow(2, arg)
    elseif (type == ActivityCenterConst.JumpType.WeiBo) then
        local argList = string.split(arg, "|")
        SDKMgr.Follow(1, nil, argList[1] or "", argList[2] or "")
    elseif (type == ActivityCenterConst.JumpType.QQ) then
        local androidArg = nil
        local iosArg = nil
        local argList = string.split(arg, "|")
        local platform = Application.GetPlatform()
        if (platform == CS.UnityEngine.RuntimePlatform.IPhonePlayer) then
            iosArg = argList[1]
        elseif (platform == CS.UnityEngine.RuntimePlatform.Android) then
            androidArg = argList[2]
        end
        --Debug.LogError(" WakeUpApp  QQ ", "iosArg ", iosArg, " androidArg", androidArg, " arg ", arg)

        local function callback(result)
            if (result) then
                if (result.ret == -3) then
                    UICommonUtil.ShowMessage(UITextConst.UI_TEXT_33020)
                end
            end
        end
        SDKMgr.WakeUp(3, iosArg, androidArg, callback)
    end
end

--endregion

--region 获取数据与检查接口
---获取活动基础数据
---@field id int 活动ID
---@return pbcmessage.Activity  活动基础数据
function ActivityCenterBLL:GetActivityBaseData(id)
    return self.proxy:GetActivityBaseData(id)
end

---获取CMS指定的活动配置
---@param id int 活动ID
---@return ActivityCMSConfig
function ActivityCenterBLL:GetActivityCMSConfig(id)
    return self.proxy:GetActivityCMSConfig(id)
end

---确认入口数据可用
---@param item ActivityTypeCMSConfig
---@return bool
function ActivityCenterBLL:CheckSortDataAvailable(item)
    if (item and item.RelateID) then
        local allCheck = false
        for i = 1, #item.RelateID do
            local config = self:GetActivityCMSConfig(item.RelateID[i])
            if (config) then
                allCheck = true
            end
        end
        return allCheck
    end
    return false
end

---检查活动主入口是否可用
function ActivityCenterBLL:CheckEntryAvailable()
    local data = self:GetActivitySortConfig()
    local allCheck = false
    for i = 1, #data do
        ---@type ActivityTypeCMSConfig
        local item = data[i]
        if (self:CheckSortDataAvailable(item)) then
            allCheck = true
        end
    end
    if (#data == 0) then
        return false
    else
        return allCheck
    end
end

---获取弹脸公告的本地记录key
function ActivityCenterBLL:GetMHTipsCheckKey()
    return string.format("%s%s", "MHTipsCheckState", SelfProxyFactory.GetPlayerInfoProxy():GetUid())
end

---获取弹脸相关CMS数据
function ActivityCenterBLL:GetMHTipsData()
    self.mhCheckKey = self:GetMHTipsCheckKey()
    --Debug.LogError("deling plat ", BllMgr.Get("LoginBLL"):GetPlatId(), " zone ",  GrpcMgr.GetMetaData("ZoneID"))
    local params = {
        lang = AnnouncementConst.LangOfUrl.CN,
        platid = SDKMgr.GetPlatID(),
        type = AnnouncementConst.AnnouncementType.GAME_IN_SINGLE_IMAGE,
        zoneid = GrpcMgr.GetMetaData("ZoneID"),
    }
    GameHttpRequest:Get(ServerUrl.UrlType.CMS, ServerUrl.UrlOp.Announcement, params, nil, handler(self, self.OnUpdateMHTipsDataSuccess), handler(self, self.OnUpdateMHTipsDataFail), nil, false)
end

----弹脸检测
function ActivityCenterBLL:CheckActivityNewBie()
    --- 检查服务器数据有没有主界面弹出的活动
    if SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_ACTIVITY) then
        ---签到
        local signActivityCfgList = self.proxy:GetActivityCMSConfigByType(ActivityCenterConst.ActivityEntryType.Sign, ActivityCenterConst.ActivityEntrySignType.NewBie)
        for i = 1, #signActivityCfgList do
            local activityData_cfg = signActivityCfgList[i]
            if activityData_cfg then
                local serverData = self:GetActivityBaseData(activityData_cfg.ID)
                if serverData ~= nil then
                    local loginNum = serverData.TotalLogin.Progress
                    ---有需要领取的奖励才会弹出
                    local getCount = table.nums(serverData.TotalLogin.Rewarded)
                    if getCount < loginNum then
                        local totalCount = table.nums(table.dictoarray(LuaCfgMgr.GetListByCondition("ActivityTotalLogin", { ActivityID = self.activityID })))
                        if getCount < totalCount then
                            if not ErrandMgr.IsAdded(X3_CFG_CONST.POPUP_ACTIVITY_NEWBIELOGIN) then
                                ErrandMgr.AddWithCallBack(X3_CFG_CONST.POPUP_ACTIVITY_NEWBIELOGIN, function()
                                    self:JumpToActivityView(activityData_cfg.ID)
                                end)
                            end
                        end
                    end
                end
            end
        end
        local pvActivityCfgList = self.proxy:GetActivityCMSConfigByType(ActivityCenterConst.ActivityEntryType.Show, ActivityCenterConst.ActivityEntrySignType.NewBie)
        ---pv活动
        for i = 1, #pvActivityCfgList do
            local pvActivityData_cfg = pvActivityCfgList[i]
            local uid = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
            local key = string.format("%s_%s_%s", "PVActivity", uid, pvActivityData_cfg.ID)
            local hasShow = PlayerPrefs.GetBool(key, false)
            ---只播放一次
            if not hasShow and (not table.containsvalue(self.playPVList, pvActivityData_cfg.ID)) then
                ErrandMgr.AddWithCallBack(X3_CFG_CONST.POPUP_ACTIVITY_PV, function()
                    local config = LuaCfgMgr.Get("ActivityCenter", pvActivityData_cfg.ID)
                    WwiseMgr.PauseMusic()
                    UIMgr.Open(UIConf.CommonVideoShowWnd, config.ActivityPV, function()
                        ErrandMgr.End(X3_CFG_CONST.POPUP_ACTIVITY_PV)
                        PlayerPrefs.SetBool(key, true)
                        WwiseMgr.ResumeMusic()
                    end, GameConst.VideoSourceType.URL, config.ActivityPVMode == 1, true)
                end)
                table.insert(self.playPVList, pvActivityData_cfg.ID)
            end
        end
    end
end

---获取开启状态
function ActivityCenterBLL:GetOpenState(config, hideTip)
    if not config then
        return false, false
    end
    local nowTime = TimerMgr.GetCurTimeSeconds()
    local isClose = false

    if (nowTime >= config.StartTime and nowTime < config.EndTime) then
        return true, isClose
    elseif (nowTime < config.StartTime) then
        if (not hideTip) then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_33016)
        end
    elseif (nowTime >= config.EndTime) then
        isClose = true
        if (not hideTip) then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_33017)
        end
    end
    return false, isClose

end

---获取活动状态文本
function ActivityCenterBLL:GetStateText(config)
    local str = ""
    local isClose = false
    local nowTime = TimerMgr.GetCurTimeSeconds()
    if (nowTime >= config.StartTime and nowTime < config.EndTime) then
        str = self:GetLeftTimeText(config.EndTime);
        str = UITextHelper.GetUIText(UITextConst.UI_TEXT_33006, str)
    elseif (nowTime < config.StartTime) then
        str = UITextHelper.GetUIText(UITextConst.UI_TEXT_33025, os.date("%Y-%m-%d", config.StartTime), os.date("%Y-%m-%d", config.EndTime))
        isClose = true
    elseif (nowTime >= config.EndTime) then
        if config.ShowEndTime > config.EndTime and nowTime < config.ShowEndTime then
            str = UITextHelper.GetUIText(UITextConst.UI_TEXT_33026, self:GetLeftTimeText(config.ShowEndTime))
        else
            str = UITextHelper.GetUIText(UITextConst.UI_TEXT_33017)
        end
        isClose = true
    end
    return str, isClose
end

---给定时间，获取差值文本
---@field needTime int 需要与当前时间作对比的值
---@return string 组装好的文本 例如x天x时， x时x分
function ActivityCenterBLL:GetLeftTimeText(needTime)
    local str = GameHelper.GetLeftTimeDes(needTime, nil, nil, true)
    return str
end
---@public 这个函数传入开启时间和持续的天数，返回到期的时间戳，会考虑5点的跨天
---例如一个持续3天的活动，2号凌晨4点59分开启与1号凌晨5点开启的到期的时间都是4号凌晨5点
---@param startTime number 开启的时间戳
---@param durationDay number 持续的天数
---@return number 到期的时间戳
function ActivityCenterBLL:GetEndTimeByDurationDay(startTime, durationDay)
    local newDateTime = self:GetEndDateByDurationDay(startTime, durationDay)
    return newDateTime:ToUnixTimeSeconds()
end
---@public 这个函数传入开启时间和持续的天数，返回到期的时间戳，会考虑5点的跨天
---例如一个持续3天的活动，2号凌晨4点59分开启与1号凌晨5点开启的到期的时间都是4号凌晨5点
---@param startTime number 开启的时间戳
---@param durationDay number 持续的天数
---@return CS.System.DateTimeOffset 到期的时间
function ActivityCenterBLL:GetEndDateByDurationDay(startTime, durationDay)
    local dateTime = CS.System.DateTimeOffset.FromUnixTimeSeconds(startTime)
    dateTime = dateTime:ToLocalTime()
    if dateTime.Hour < self.dailyResetHour then
        durationDay = durationDay - 1
    end
    local newDateTime = dateTime:AddDays(durationDay)
    newDateTime = newDateTime.Date:AddHours(self.dailyResetHour);
    newDateTime = CS.System.DateTimeOffset(newDateTime)
    return newDateTime
end
---@public 给定两个时间戳返回他们的间隔天数（考虑跨天）
---@param newTime int 新的时间戳
---@param oldTime int 老的时间戳
---@return int 新老时间戳间隔的天数，负数说明oldTime更大
function ActivityCenterBLL:GetDaysInterval(newTime, oldTime)
    local oldDate = self:GetEndDateByDurationDay(oldTime, 0)
    local newDate = self:GetEndDateByDurationDay(newTime, 0)
    local timeSpan = newDate:Subtract(oldDate)
    return timeSpan.TotalDays
end

---获取活动分类数据
---@param activityId int 活动ID(可选，无则为全部)
---@return ActivityTypeCMSConfig[] || ActivityTypeCMSConfig
function ActivityCenterBLL:GetActivitySortConfig(activityId)
    return self.proxy:GetActivitySortConfig(activityId)
end

---获取对应活动的预制体路径
---@param sortConfig ActivityTypeCMSConfig
function ActivityCenterBLL:GetPrefabPath(sortConfig)
    local prefabPath = nil
    local item = sortConfig
    if (not (item and item.RelateID and #item.RelateID >= 1)) then
        Debug.LogErrorWithTag(GameConst.LogTag.Activity, " ActivityCenterBLL GetPrefabPath error")
        return
    end
    local function GetSinglePrefab(id)
        local cmsConfig = self.proxy:GetActivityCMSConfig(id)
        if not cmsConfig then
            Debug.LogErrorFormat("获取CMS配置失败：%s ，请检查！", tostring(id))
            return
        end
        local activityCenterCfg = LuaCfgMgr.Get("ActivityCenter", cmsConfig.ID)
        if not activityCenterCfg then
            Debug.LogErrorFormat("获取活动失败：%s ，请检查！", tostring(cmsConfig.ID))
            return
        end
        local basePrefab = activityCenterCfg.ActivityPrefab and activityCenterCfg.ActivityPrefab[1]
        if string.isnilorempty(basePrefab) or not basePrefab then
            Debug.LogErrorFormat("活动：%s 未配置预制，请检查！", tostring(activityCenterCfg.ActivityID))
            return
        end
        return basePrefab
    end

    if (#item.RelateID == 1) then
        return GetSinglePrefab(item.RelateID[1])
    else
        for i = 1, #item.RelateID do
            local path = GetSinglePrefab(item.RelateID[i])
            if not prefabPath then
                prefabPath = path
            elseif path and path ~= prefabPath then
                ---多个Activity预制不一样，报错，现在不支持
                Debug.LogErrorFormat("活动分类：%s 下的多个活动预制不一样，请检查！", tostring(item.TypeDes))
                return
            end
        end
    end
    return prefabPath
end

---检查活动入口是否有可用活动
---@param isSingle bool 是否为单一活动
function ActivityCenterBLL:CheckSortConfig(item, isSingle)
    local canOpen = false
    if (item and item.RelateID and #item.RelateID >= 1) then
        for i = 1, #item.RelateID do
            repeat
                local cmsConfig = self:GetActivityCMSConfig(item.RelateID[i])
                if not cmsConfig then
                    break
                else
                    if (isSingle) then
                        canOpen = i == 1
                    else
                        canOpen = true
                    end
                end
            until true
        end
    end
    return canOpen
end

----commonCondition Check
---@param id int
---@param datas string[]
---@return bool
function ActivityCenterBLL:CheckCondition(id, datas)
    local result = false
    if id == X3_CFG_CONST.CONDITION_ACTIVITY_LOGIN then
        ---是否尚未签完
        local activityID = tonumber(datas[1])
        local isNotFinish = tonumber(datas[2]) == 1
        local serverData = self:GetActivityBaseData(activityID) or {}
        local progressNum = 0
        if serverData.TotalLogin then
            progressNum = table.nums(serverData.TotalLogin.Rewarded)
        end
        local activeData_cfg = LuaCfgMgr.Get("ActivityTotalLogin", activityID)
        local totalLoginNum = table.nums(activeData_cfg)
        if isNotFinish then
            result = progressNum ~= totalLoginNum
        else
            result = progressNum == totalLoginNum
        end
    elseif id == X3_CFG_CONST.CONDITION_ACTIVITY_VALID then
        ---是否有效
        local activityID = tonumber(datas[1])
        local available = tonumber(datas[2]) == 1 --- 0-无效 1 有效

        return available == self.proxy:GetActivityActiveState(activityID)
    elseif id == X3_CFG_CONST.CONDITION_ACTIVITY_DIALOGUE_READ then
        local isCheckFinish = datas[1] ~= 0
        local activityDialogueID = datas[2]
        local isFinish = SelfProxyFactory.GetActivityDialogueProxy():IsDialogueFinish(activityDialogueID)
        if isCheckFinish then
            result = isFinish
        else
            result = not isFinish
        end
    elseif id == X3_CFG_CONST.CONDITION_ACTIVITY_DIALOGUE_READALL then
        --[[
        在ActivityDialogue中，判断剧情有无被阅读
        Para1：活动ID
        Para2：0否（未阅读），1是（已阅读）
        Para3：男主ID，不限则填-1
        Para4：活动剧情类型，索引到ActivityDialogue的Type列，不限则填-1
        ]]--
        local activityID = datas[1]
        local isCheckFinish = datas[2] == 1
        local roleID = datas[3]
        local activityDialogueType = datas[4]
        local conditionTab = {
            ActivityID = activityID,
        }
        if roleID ~= 0 then
            conditionTab["ManLimit"] = roleID
        end
        if activityDialogueType ~= 0 then
            conditionTab["Type"] = activityDialogueType
        end
        local allActivityDialogueDatas_cfg = LuaCfgMgr.GetListByCondition("ActivityDialogue", conditionTab)
        result = true
        for k, v in pairs(allActivityDialogueDatas_cfg) do
            if isCheckFinish then
                result = result and SelfProxyFactory.GetActivityDialogueProxy():IsDialogueFinish(v.ID)
            else
                result = result and (not SelfProxyFactory.GetActivityDialogueProxy():IsDialogueFinish(v.ID))
            end
        end
    end
    return result
end

---获取活动对应的逻辑路径
function ActivityCenterBLL:GetLogicPath(activityConfig)
    if (not activityConfig) then
        Debug.LogError("GetLogicPath activityConfig is nil")
        return
    end
    local typeIndex = activityConfig.ActivityType
    local showTypeIndex = activityConfig.ActivityShowType
    --通过typeIndex和showTypeIndex从ActivityCenterConst.LogicDic中取出路径
    local logicPath = nil
    local baseDic = ActivityCenterConst.LogicDic[typeIndex]
    if (baseDic) then
        logicPath = baseDic[showTypeIndex]
    end
    return logicPath
end

---通过jsonData和索引过滤有效数据
---@param index string CMS上各字段索引不一样，有空再BATTLE
function ActivityCenterBLL:GetValueByLang(jsonData, index)
    return CMSHelper.GetValueByLang(jsonData, index)
end

--endregion

--TODO 断线重连
function ActivityCenterBLL:CheckContinue()
    local continueData = SelfProxyFactory.GetGamePlayProxy():GetContinueData(Define.GamePlayEnterType.GamePlayEnterTypeActivity)
    if continueData then
        local continueGameType = continueData.GameType
        local continueSubId = continueData.SubID
        local continueVersion = continueData.Version
        local text_id = UITextConst.UI_TEXT_6036
        local checkVersion = LogicEntityUtil.IsEqualGameVersion(continueVersion, continueGameType)   --暂时不做版本校验
        ---@type _btn_param[]
        local btn_list
        if checkVersion then
            btn_list = {
                { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_5701, is_auto_close = false, btn_call = function()
                    --TLOG用
                    BllMgr.GetGameplayBLL():ContinueGamePlay(Define.GamePlayEnterType.GamePlayEnterTypeActivity)
                    return false
                end },
                { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_text = UITextConst.UI_TEXT_5702, btn_call = function()
                    self:GiveupDailyDate()
                end },
            }
        else
            text_id = UITextConst.UI_TEXT_6305
            btn_list = {
                { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_5701, btn_call = function()
                    self:GiveupDailyDate()
                end },
            }
        end
        if not ErrandMgr.IsAdded(X3_CFG_CONST.POPUP_SPECIALTYPE_ACTIVITY) then
            ErrandMgr.AddWithCallBack(X3_CFG_CONST.POPUP_SPECIALTYPE_ACTIVITY, function()
                UICommonUtil.ShowMessageBox(text_id, btn_list, AutoCloseMode.None)
            end)
        end
    end
end

function ActivityCenterBLL:GiveupDailyDate()
    ErrandMgr.SetDelay(true)
    BllMgr.GetGameplayBLL():GiveupGamePlay(Define.GamePlayEnterType.GamePlayEnterTypeActivity, function()
        ErrandMgr.End(X3_CFG_CONST.POPUP_SPECIALTYPE_ACTIVITY)
        ErrandMgr.SetDelay(false)
    end)
end
---@public 根据活动类型获取活动配置
---@param type ActivityCenterConst.ActivityEntryType
---@param sortType ActivityCenterConst.ActivityEntrySignType
---@return cfg.ActivityCenter
function ActivityCenterBLL:GetActivityCenterCfgByType(_type, _sortType)
    local cfg = LuaCfgMgr.GetAll("ActivityCenter")
    for k, v in pairs(cfg) do
        if v.ActivityType == _type and v.ActivityShowType == _sortType then
            return v
        end
    end
    return nil
end

function ActivityCenterBLL:SetTabIndex(index)
    --Debug.LogError("ActivityCenterBLL:SetTabIndex  ", index)
    self.lastSelectTabIndex = index
end

function ActivityCenterBLL:GetRestoreTabIndex()
    local temp = self.needRestoreTabIndex
    self.needRestoreTabIndex = nil
    return temp
end

function ActivityCenterBLL:GetActivityGamePlaySubIdIsFinish(activityId, subId)
    local finishSubId = self.proxy:GetActivityGamePlayFinishSubIdList(activityId)
    local activityGameGroupCfg = LuaCfgMgr.Get("ActivityGameGroup", subId)
    if finishSubId and activityGameGroupCfg then
        if activityGameGroupCfg.PreID == 0 or table.containsvalue(finishSubId, activityGameGroupCfg.PreID) then
            return true
        end
    end
    return false
end

function ActivityCenterBLL:GetActivityGamePlayLastSubId(activityId, roleId)
    local activityBaseData = self.proxy:GetActivityBaseData(activityId)
    if activityBaseData and activityBaseData.GamePlay and activityBaseData.GamePlay.Details then
        if activityBaseData.GamePlay.Details[roleId] then
            return activityBaseData.GamePlay.Details[roleId].LastSubID
        end
    end
    return nil
end

---打开购买活动玩法次数界面
---@param activityId int 活动Id
---@param roleId int 男主Id
function ActivityCenterBLL:OpenBuyActivityGamePlayMessageBox(activityId, roleId)
    local activityGamePlayCfg = LuaCfgMgr.Get("ActivityGamePlay", activityId, roleId)
    if activityGamePlayCfg then
        local curPlayCount = activityGamePlayCfg.Times
        local activityBaseData = BllMgr.GetActivityCenterBLL():GetActivityBaseData(activityId)
        local gamePlayDetails = activityBaseData.GamePlay.Details[roleId]
        if gamePlayDetails ~= nil then
            curPlayCount = gamePlayDetails.PlayCount
        end
        if curPlayCount >= activityGamePlayCfg.MaxTimesLimit then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_51020)
            return
        end
        UIMgr.Open(UIConf.BuyPowerWnd, Define.BuyPowerWndType.ActivityGamePlayTimes, activityId, roleId)
    end
end

function ActivityCenterBLL:GetPlayCountData(activityId, roleId)
    local activityBaseData = self.proxy:GetActivityBaseData(activityId)
    local activityGamePlayCfg = LuaCfgMgr.Get("ActivityGamePlay", activityId, roleId)
    local playCount = activityBaseData.GamePlay.Details[roleId].PlayCount
    local leftCount = playCount or 0
    local buyCount = activityBaseData.GamePlay.Details[roleId].BuyCount
    local serverBuyCount = buyCount or 0
    local leftBuyCount = activityGamePlayCfg.GameBuyTimesLimit - serverBuyCount
    return leftCount, leftBuyCount
end

---获取CMS指定的活动开启时间和截止时间展示用的字符串，例如2023.11.20-2024.11.18
---@param activityID int 活动ID
---@return string
function ActivityCenterBLL:GetActivityFormatTime(activityID)
    local cmsCfg = self:GetActivityCMSConfig(activityID)
    local beginDate = TimerMgr.GetDateByUnixTimestamp(cmsCfg.StartTime)
    local endDate = TimerMgr.GetDateByUnixTimestamp(cmsCfg.EndTime)
    return UITextHelper.GetUIText(UITextConst.UI_TEXT_33051, beginDate.year, beginDate.month, beginDate.day, endDate.year, endDate.month, endDate.day)
end

return ActivityCenterBLL
