---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2023/6/28 10:49
------利莫里亚活动BLL
---@class ActivityScoreBLL:BaseBll
local ActivityScoreBLL = class("ActivityScoreBLL", BaseBll)

function ActivityScoreBLL:OnInit()
    self.activityID = 0
    self.scoreTrialID = 5001
end

---@param activityId int 活动id
function ActivityScoreBLL:SetActivityID(activityId)
    self.activityID = activityId
end

function ActivityScoreBLL:GetActivityID()
    return self.activityID
end

---@param activityId
---@return ActivityCMSConfig
function ActivityScoreBLL:GetActivityData(activityId)
    return BllMgr.GetActivityCenterBLL():GetActivityCMSConfig(activityId)
end

---解锁碎片
---@param activityID
function ActivityScoreBLL:Send_ActivityJigsawOpenRequest(activityID, subID, pieceNum)
    local req = {}
    req.ActivityID = activityID
    req.SubID = subID
    req.PieceNumber = pieceNum
    GrpcMgr.SendRequest(RpcDefines.ActivityJigsawOpenRequest, req, true)
end

---完成拼图领取奖励
---@param activityID int 活动id
---@param subID int 拼图索引
function ActivityScoreBLL:Send_ActivityJigsawRewardRequest(activityID, subID)
    local req = {}
    req.ActivityID = activityID
    req.SubID = subID
    GrpcMgr.SendRequest(RpcDefines.ActivityJigsawRewardRequest, req, true)
end

---检测搭档试用是否通关（即领取过首次奖励）
---@return bool
function ActivityScoreBLL:CheckScoreTrialReward()
    local activityCms = BllMgr.GetActivityCenterBLL():GetActivityCMSConfig(self.scoreTrialID)
    if not activityCms then
        return false
    end
    local activityServerData = SelfProxyFactory.GetActivityCenterProxy():GetActivityBaseData(activityCms.ID)
    if not activityServerData then
        return false
    end
    return activityServerData.SCoreTrial and activityServerData.SCoreTrial.FirstRewarded or false
end

---@param dialogId int 剧情id
---@param conversationName string
---@param callBack fun()
function ActivityScoreBLL:PlayDialog(dialogId, conversationName, callBack)
    self.dialogCtrl = self:GetDialogCtrl()
    self.system = self.dialogCtrl:InitDialogue(dialogId, Mathf.Random(1, 10000), nil, function()
        self.dialogCtrl:StartDialogueByName(dialogId, conversationName, nil, nil, function()
            if callBack then
                callBack()
            end
        end)
    end)
    local settingData = self.system:GetSettingData()
    settingData:SetShowReviewButton(false)
    settingData:SetShowAutoButton(false)
end

---播放小游戏AVG
---@param dialogId int 剧情id
---@param conversationId int
function ActivityScoreBLL:PlayAVG(dialogId, conversationId,callBack)
    if not dialogId or not conversationId then
        return
    end
    UICommonUtil.SetLoadingEnableWithOpenParam({
        MoveInCallBack = function()
            GameStateMgr.Switch(GameState.PuzzleGameAvg,dialogId,conversationId, callBack)
        end,
        IsPlayMoveOut = true,
    }, GameConst.LoadingType.Common, true)
end

function ActivityScoreBLL:ExitAVG()
    self.system:ExitDialogue()
end

function ActivityScoreBLL:GetDialogCtrl()
    if not self.dialogCtrl then
        self.dialogCtrl = DialogueManager.InitByName("PuzzleGame")
    end
    return self.dialogCtrl
end

function ActivityScoreBLL:OnClear()
    DialogueManager.ClearByName("PuzzleGame")
end

---条件检测
---@param id int
function ActivityScoreBLL:CheckCondition(id, ...)
    local datas = select(1, ...)
    local result = false
    local retNum = 0
    if id == X3_CFG_CONST.CONDITION_ACTIVITY_DATENUM then
        --处于指定活动（para1）的第 [para2，para3] 日区间
        local activityID = tonumber(datas[1])
        local activityData = BllMgr.GetActivityCenterBLL():GetActivityCMSConfig(activityID)
        local startTime = activityData.StartTime
        local startDateTime = CS.System.DateTimeOffset.FromUnixTimeSeconds(startTime):AddSeconds(1)
        local svrTime = GrpcMgr.GetServerTime()
        local timeSpan = svrTime - startDateTime
        retNum = timeSpan.Days
        result = ConditionCheckUtil.IsInRange(retNum, tonumber(datas[2], tonumber(datas[3])))
    elseif id == X3_CFG_CONST.CONDITION_CARD_PHASE_STATE then
        --持有Card（para1），处于（para2，para3）进阶次数闭区间内
        local cardId = tonumber(datas[1])
        local cardData = SelfProxyFactory.GetCardDataProxy():GetData(cardId)
        if cardData then
            retNum = cardData:GetPhaseLevel()
            result = ConditionCheckUtil.IsInRange(retNum, tonumber(datas[2], tonumber(datas[3])))
        end
    end
    return result, retNum
end

return ActivityScoreBLL