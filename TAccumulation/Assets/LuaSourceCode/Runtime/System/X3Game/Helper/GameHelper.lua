---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2021/12/21 15:23
---
---和游戏业务逻辑相关的通用逻辑
---@class GameHelper
local GameHelper = {}
local SensitiveWordHelper = require("Runtime.System.X3Game.Modules.SensitiveWord.SensitiveWordHelper")
local ProgressTick = require("Runtime.System.X3Game.Modules.ProgressTick")

--region 时间相关
---根据配置表获取日期
---@param time_str string 格式配置 [20211221=05:00:00]
---@return _date
function GameHelper.GetDateByStr(time_str)
    if string.isnilorempty(time_str) then
        Debug.LogWarning("[GameHelper.GetDate]--failed time_str is nil")
        return
    end
    ---@type _date
    local date = {}
    local sp = string.split(time_str, "=")
    local year_month_day = sp[1]
    local hour_minute_second = sp[2]
    if not string.isnilorempty(year_month_day) and string.len(year_month_day) == 8 then
        date.year = tonumber(string.sub(year_month_day, 1, 4))
        date.month = tonumber(string.sub(year_month_day, 5, 6))
        date.day = tonumber(string.sub(year_month_day, 7, 8))
    end
    if not string.isnilorempty(hour_minute_second) then
        sp = string.split(hour_minute_second, ":")
        if #sp >= 3 then
            date.hour = tonumber(sp[1])
            date.min = tonumber(sp[2])
            date.sec = tonumber(sp[3])
        end
    end
    return date
end

---本地计算的秒数，最大单位是天
---@param seconds number 秒数
---@return number,number,number,number
function GameHelper.GetDateBySeconds(seconds)
    if not seconds or seconds <= 0 then
        Debug.LogWarning("[GameHelper.GetDateBySeconds--failed] seconds is nil ")
        return 0, 0, 0, 0
    end
    ---@type _date
    local left = seconds
    local day = left // 86400
    left = left - day * 86400
    local h = left // 3600
    left = left - h * 3600
    local m = left // 60
    left = left - m * 60
    local s = math.floor(left)
    return day, h, m, s
end

---使用方式
---eg1:包含时分秒：GameHelper.GetTimeFormat(10000,"H:M:S")
---eg2:只包含时分：GameHelper.GetTimeFormat(10000,"H:M")
---eg3:只包含分秒：GameHelper.GetTimeFormat(10000,"M:S")
---eg4:自动化：GameHelper.GetTimeFormat(10000,nil,true) 会根据情况显示 "H:M:S" 和 "M:S"
---@param seconds number 秒数
---@param format string "H:M:S"
function GameHelper.GetTimeFormat(seconds, format, is_auto)
    local d, h, m, s = GameHelper.GetDateBySeconds(seconds)
    local str_format = format
    is_auto = is_auto or string.isnilorempty(str_format)
    if is_auto then
        str_format = ""
        if h > 0 then
            str_format = "H:M:S"
        else
            str_format = "M:S"
        end
    end
    local is_h, is_m, is_s
    str_format, is_h = string.replace(str_format, "H", "%02d")
    str_format, is_m = string.replace(str_format, "M", "%02d")
    str_format, is_s = string.replace(str_format, "S", "%02d")
    if is_h then
        return string.format(str_format, h, m, s)
    else
        return string.format(str_format, m, s)
    end
end

function GameHelper.FormatLongTime(mouths, days, hours, minutes, seconds)
    local mMouths = string.format("%02d", mouths)
    local mDays = string.format("%02d", days)
    local mHours = string.format("%02d", hours)
    local mMinutes = string.format("%02d", minutes)
    local mSeconds = string.format("%02d", seconds)
    return mMouths, mDays, mHours, mMinutes, mSeconds
end

function GameHelper.FormatShortTime(hours, minutes, seconds)
    local mHours = string.format("%02d", hours)
    local mMinutes = string.format("%02d", minutes)
    local mSeconds = string.format("%02d", seconds)
    return mHours, mMinutes, mSeconds
end

function GameHelper.FormatMouthAndDay(mouths, days)
    local mMouths = string.format("%02d", mouths)
    local mDays = string.format("%02d", days)
    return mMouths, mDays
end

function GameHelper.FormatSingleTime(singleTime)
    local formatTime = string.format("%02d", singleTime)
    return formatTime
end

---根据服务器给的时间戳获取日期
---@param seconds number 秒数
---@return _date
function GameHelper.GetDateByTimestamp(timestamp)
    return TimerMgr.GetDateByServerTimestamp(timestamp)
end
--endregion

--region vector3相关
---配置表xmltovector3
---@class Vector3XML
---@field X number
---@field Y number
---@field Z number
---@param vectorxml Vector3XML
---@return Vector3
function GameHelper.GetVector3FromVector3XML(vectorxml)
    return GameUtil.GetVector(vectorxml.X, vectorxml.Y, vectorxml.Z) / 1000
end
--endregion

--region 文本相关

--获取周几的文字 0=周日，1=周一。。。6=周六
function GameHelper.GetDayText(day)
    local index = UITextConst.UI_TEXT_6006
    if type(day) == 'string' then
        if day == "Sunday" then
            index = UITextConst.UI_TEXT_6006
        elseif day == "Monday" then
            index = UITextConst.UI_TEXT_6007
        elseif day == "Tuesday" then
            index = UITextConst.UI_TEXT_6008
        elseif day == "Wednesday" then
            index = UITextConst.UI_TEXT_6009
        elseif day == "Thursday" then
            index = UITextConst.UI_TEXT_6010
        elseif day == "Friday" then
            index = UITextConst.UI_TEXT_6011
        elseif day == "Saturday" then
            index = UITextConst.UI_TEXT_6012
        end
    else
        index = UITextConst.UI_TEXT_6006 + day
    end
    return UITextHelper.GetUIText(index)
end

---检测是否有敏感词
---@param word string
---@return boolean
function GameHelper.ContainSensitiveWord(word)
    local contain = SensitiveWordHelper.ContainSensitiveWord(word)
    return contain
end

---获取填充了filterString的文字(filterString默认为"*")
---@param word string
---@param filterString string
---@return string
function GameHelper.FilterSensitiveWord(word, filterString)
    local value = SensitiveWordHelper.FilterSensitiveWord(word, filterString)
    return value
end

---是否包含中文，数字，字母
---@param source string
---@return boolean
function GameHelper.IsChineseOrNumberOrWord(source)
    local length = string.utf8len(source)
    for k = 1, length do
        local v = string.utf8sub(source, k, k)
        if not (string.containchinese(v) or string.containnumorword(v)) then
            return false
        end
    end
    return true
end



--endregion

--region 全局点击相关

---@type MultiConditionCtrl
local BlockCtrl = require("Runtime.System.X3Game.Modules.Common.MultiConditionCtrl").new()
local BlockCtrlForMultiTouch = require("Runtime.System.X3Game.Modules.Common.MultiConditionCtrl").new()
local is_global_enabled = CS.UnityEngine.EventSystems.X3InputModule.IsTouchEnable
local is_global_multi_enabled = CS.UnityEngine.Input.multiTouchEnabled

---全局是否可以点击
---@return boolean
function GameHelper.IsGlobalTouchEnabled()
    return is_global_enabled
end

---当前多点触控是否打开
---@return boolean
function GameHelper.IsMultiTouchEnable()
    return is_global_multi_enabled
end

---设置全局点击开关
---@param isEnable boolean
---@param blockType int GameObjClickUtil.BlockType
function GameHelper.SetGlobalTouchEnable(isEnable, blockType)
    if not GameObjClickUtil then
        is_global_enabled = isEnable
        CS.UnityEngine.EventSystems.X3InputModule.IsTouchEnable = is_global_enabled
        return
    end
    blockType = blockType or GameObjClickUtil.BlockType.COMMON
    GameObjClickUtil.SetTouchEnable(isEnable, blockType)
    BlockCtrl:SetIsRunning(blockType, not isEnable)
    local is_enable = not BlockCtrl:IsRunning()
    if is_enable ~= is_global_enabled then
        is_global_enabled = is_enable
        CS.UnityEngine.EventSystems.X3InputModule.IsTouchEnable = is_global_enabled
    end
end

--- 设置Input锁帧
---@param isBlocking boolean 是否锁住
---@param duringFrames number 锁住持续的帧数(-1则表示一直锁)
function GameHelper.SetTouchBlockingForFrames(isBlocking, duringFrames)
    duringFrames = duringFrames == nil and -1 or duringFrames
    CS.UnityEngine.EventSystems.X3InputModule.SetBlockingForFrames(isBlocking, duringFrames)
end

---设置多点触控开关
---@param isEnable boolean
---@param blockType GameConst.MultiTouchLockType
function GameHelper.SetMultiTouchEnable(isEnable, blockType, ignoreBlockType)
    isEnable = isEnable or false
    local is_enabled = isEnable
    if not ignoreBlockType then
        blockType = blockType or GameConst.MultiTouchLockType.Common
        BlockCtrlForMultiTouch:SetIsRunning(blockType, isEnable)
        is_enabled = BlockCtrlForMultiTouch:IsRunning()
    end
    if is_global_multi_enabled ~= is_enabled then
        is_global_multi_enabled = is_enabled
        CS.UnityEngine.Input.multiTouchEnabled = is_global_multi_enabled
    end
end

--region for editor
---@param id int
---@return string
function GameHelper._GetBlockTypeDesForEditor(id)
    local des = ""
    if id == 0 then
        if BlockCtrl:IsRunning() then
            local running = BlockCtrl:GetRunningType()
            if running then
                for k, v in pairs(GameObjClickUtil.BlockType) do
                    if v == running then
                        des = k
                        break
                    end
                end
            end
        end
    else
        if BlockCtrlForMultiTouch:IsRunning() then
            local running = BlockCtrlForMultiTouch:GetRunningType()
            if running then
                for k, v in pairs(GameConst.MultiTouchLockType) do
                    if v == running then
                        des = k
                        break
                    end
                end
            end
        end
    end
    return des
end
--endregion

--endregion

-- 把List或Array转换为table
function GameHelper.ToTable(list_array)
    if (type(list_array) == "table") then
        return list_array
    end

    local result = {}
    local size = list_array and (list_array.Length or list_array.Count)
    if (size == nil) then
        Debug.Log("传入参数既不是list也不是数组")
        return result
    end

    for idx = 0, size - 1 do
        table.insert(result, list_array[idx])
    end
    return result
end

---复制内容到剪切板
---@param copyText string 复制内容
function GameHelper.CopyToClipBoard(copyText)
    local textEditor = CS.UnityEngine.TextEditor()
    textEditor.text = copyText
    textEditor:SelectAll()
    textEditor:Copy()
end

---通用千分位显示
---用于超大数字，万开始配K
---用于超大数字，千万开始配M
---@param num number
---@return string
function GameHelper.GetFormatNum(num)
    if num < 100000 then
        return tostring(math.floor(num))
    elseif num < 10000000 then
        local kNum = math.floor(num / 100 + 0.5)
        if kNum % 10 == 0 then
            return UITextHelper.GetUIText(UITextConst.UI_TEXT_5780, string.format("%d", kNum / 10))
        else
            return UITextHelper.GetUIText(UITextConst.UI_TEXT_5780, string.format("%.1f", kNum / 10))
        end
    else
        local mNum = math.floor(num / 100000 + 0.5)
        if mNum % 10 == 0 then
            return UITextHelper.GetUIText(UITextConst.UI_TEXT_5781, string.format("%d", mNum / 10))
        else
            return UITextHelper.GetUIText(UITextConst.UI_TEXT_5781, string.format("%.1f", mNum / 10))
        end
    end
end

--region streaming mipmaps
---开启TextureStreaming
---@param budget int 内存预算 default 200
function GameHelper.EnableTextureStreaming(budget)
    local memSize = CS.UnityEngine.SystemInfo.systemMemorySize
    if budget == nil and memSize and memSize > 0 then
        if memSize >= GameConst.StreamingMipmapsMemoryHigh then
            budget = GameConst.StreamingMipmapsMemoryBudgetHigh
        elseif memSize >= GameConst.StreamingMipmapsMemoryMiddle and memSize < GameConst.StreamingMipmapsMemoryHigh then
            budget = GameConst.StreamingMipmapsMemoryBudgetMiddle
        end
    end
    budget = budget or GameConst.StreamingMipmapsMemoryBudget
    local qualitySettings = CS.UnityEngine.QualitySettings
    local texture = CS.UnityEngine.Texture
    qualitySettings.streamingMipmapsAddAllCameras = true
    qualitySettings.streamingMipmapsMemoryBudget = budget  ---单位是M
    texture.streamingTextureDiscardUnusedMips = false
    qualitySettings.streamingMipmapsActive = true
    print("TextureStreaming: On")
end

---关闭TextureStreaming
function GameHelper.DisableTextureStreaming()
    local qualitySettings = CS.UnityEngine.QualitySettings
    qualitySettings.streamingMipmapsActive = false
    print("TextureStreaming: Off")
end

---设置TextureStreaming预算
function GameHelper.SetTextureStreamingBudget(budget)
    GameHelper.EnableTextureStreaming(budget)
end
--endregion

--region DG.TO for lua
---开启
---@param from number
---@param to number
---@param duration number
---@param easy_type PapeGames.X3.EasingFunction.Ease
---@param on_finish function
---@param on_update fun(type:number)
---@return int
function GameHelper.StartProgress(from, to, duration, easy_type, on_finish, on_update)
    return ProgressTick.Start(from, to, duration, easy_type, on_finish, on_update)
end

---开启
---@param from number
---@param to number
---@param duration number
---@param easy_type PapeGames.X3.EasingFunction.Ease
---@param on_finish function
---@param on_update fun(type:number)
---@return int
function GameHelper.StartProgressWithDelay(delay, from, to, duration, easy_type, on_finish, on_update)
    return ProgressTick.StartWithDelay(delay, from, to, duration, easy_type, on_finish, on_update)
end

---关闭
---@param id int
function GameHelper.StopProgress(id)
    ProgressTick.Stop(id)
end
--endregion

--region 播放视频相关接口

---获取video的路径
---@param videoName string 视频名称
---@return string 路径
function GameHelper.GetPlayVideoPath(videoName)
    return CS.X3Game.GameHelper.VideoHelper.GetVideoPathByVideoName(videoName)
end

--endregion

---上传log
---@param key string
---@param info string|table
function GameHelper.StoreLog(key, info)
    if DEBUG_GM == false then
        return
    end
    local retStr = nil
    if type(info) == "table" then
        retStr = JsonUtil.Encode(info)
    else
        retStr = info
    end
    CS.X3Game.GameMgr.StoreLog(key, retStr)
end

---检查对应DEBU模式是否开启
---@param mode GameConst.DebugMode
function GameHelper.CheckDebugMode(mode)
    if (mode == GameConst.DebugMode.GM_MODE) then
        return DEBUG_GM
    end
end

---CMS 返回时间转化时间戳
---@param time string ("2021-07-01T17:00:00+08:00")
---@return number,TimeData
function GameHelper.GetTimeStamp(time)
    local _, _, year, month, day, hour, min, sec = string.find(time, "(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+)")
    local timeDate = { year = year, month = month, day = day, hour = hour, min = min, sec = sec }
    --转化为时间戳
    local timeStamp = os.time(timeDate)
    return timeStamp, timeDate
end

---通用恭喜获得奖励检查是否显示
---@param rewardList  table<pbcmessage.S3Int>
---@return table<pbcmessage.S3Int>
function GameHelper.CheckRewardListIsShow(rewardList)
    local retTab = {}
    local removeItemIdList = nil
    for i, v in ipairs(rewardList) do
        if v.Type == 0 then
            table.insert(retTab, v)
        else
            local itemTypeCfg = LuaCfgMgr.Get("ItemType", v.Type)
            if itemTypeCfg ~= nil then
                if itemTypeCfg.Display == 1 then
                    table.insert(retTab, v)
                else
                    if v.Type == X3_CFG_CONST.ITEM_TYPE_FORMATIONSUIT then
                        local fashionIdList = BllMgr.GetFashionBLL():GetItemIDTabBySuitID(v.Id)
                        for j = 1, #fashionIdList do
                            if removeItemIdList == nil then
                                removeItemIdList = {}
                            end
                            local itemId = fashionIdList[j]
                            table.insert(removeItemIdList, itemId)
                        end
                    end
                end
            end
        end
    end
    if removeItemIdList then
        local retRemove = {}
        for i = 1, #retTab do
            local id = retTab[i].Id
            if table.containsvalue(removeItemIdList, id) then
                table.insert(retRemove, retTab[i])
            end
        end
        for i = 1, #retRemove do
            table.removebyvalue(retTab, retRemove[i], true)
        end
    end
    return retTab
end

---@public 获取格式化时间
---@param endTime number 结束时间需要转化成文本的时间(秒数为单位)
---@param self table 需要cache时传入
---@param isReset bool 强制重置cache 数据 item数据更新使用
---@param isComplete bool 是否显示完整 ture 显示完整版 如：1天1时，1时1分，1分1秒  false 显示简版 如：1天 1时 1分 1秒
---@param timeTextFormatId int 文本中对时间特殊处理的UITextId  一般是需要时间的文字和Prefab中的文本文字大小不一样时使用
---@return string or bool  为false 证明不需要更新 可以不做UI操作
function GameHelper.GetLeftTimeDes(endTime, self, isReset, isComplete, timeTextFormatId)
    if (not endTime) or endTime < 0 then
        Debug.LogError("GetLeftTimeDes: endTime is nil or less 0.")
        return false
    end
    if isComplete == nil then
        isComplete = false
    end
    local LocalTime = TimerMgr.GetCurTimeSeconds()
    local passTimeS = endTime - LocalTime
    local desc = nil
    local time1 = nil
    local time2 = nil
    local descUITextId1 = nil
    local descUITextId2 = nil
    local timeRemainder = 0
    if self and self.next_time ~= nil and not isReset then
        if self.next_time >= LocalTime and self.last_time_type ~= 1 then
            return false
        end
    end
    if 0 <= passTimeS and passTimeS < 60 then
        ---秒
        time1 = math.floor(passTimeS)
        descUITextId1 = UITextConst.UI_TEXT_5507
        if self then
            self.last_time_type = 1
        end
    elseif 60 <= passTimeS and passTimeS < 3600 then
        ---分钟
        time1 = math.floor(passTimeS / 60)
        if isComplete then
            timeRemainder = passTimeS % 60
        end
        descUITextId1 = UITextConst.UI_TEXT_5506
        if timeRemainder > 0 then
            time2 = timeRemainder
            descUITextId2 = UITextConst.UI_TEXT_5507
        end
        if self then
            if timeRemainder > 0 then
                self.last_time_type = 1
            else
                self.last_time_type = 2
            end
        end
    elseif 3600 <= passTimeS and passTimeS < 86400 then
        ---小时
        time1 = math.floor(passTimeS / 3600)
        if isComplete then
            timeRemainder = passTimeS % 3600
            timeRemainder = math.floor(timeRemainder / 60)
        end
        descUITextId1 = UITextConst.UI_TEXT_5505
        if timeRemainder > 0 then
            time2 = timeRemainder
            descUITextId2 = UITextConst.UI_TEXT_5506
        end
        if self then
            if timeRemainder > 0 then
                self.last_time_type = 2
            else
                self.last_time_type = 3
            end
        end
    else
        ---天数
        time1 = math.floor(passTimeS / 86400)
        if isComplete then
            timeRemainder = passTimeS % 86400
            timeRemainder = math.floor(timeRemainder / 3600)
        end
        descUITextId1 = UITextConst.UI_TEXT_5504
        if timeRemainder > 0 then
            time2 = timeRemainder
            descUITextId2 = UITextConst.UI_TEXT_5505
        end
        if self then
            if timeRemainder > 0 then
                self.last_time_type = 3
            else
                self.last_time_type = 4
            end
        end
    end
    if self then
        if self.last_time_type ~= 1 then
            local data = TimerMgr.GetDateByUnixTimestamp(LocalTime)
            local nextTime = nil
            local nextAddSecond = passTimeS % 86400
            nextAddSecond = nextAddSecond % 3600
            local nextAddMin = math.floor(nextAddSecond / 60)
            nextAddSecond = (nextAddSecond % 60)
            data.sec = data.sec + nextAddSecond
            if self.last_time_type ~= 2 then
                data.min = data.min + nextAddMin
            end
            nextTime = os.time(data)
            self.next_time = nextTime
        end
    end

    if timeTextFormatId then
        time1 = UITextHelper.GetUIText(timeTextFormatId, time1)
        if time2 ~= nil then
            time2 = UITextHelper.GetUIText(timeTextFormatId, time2)
        end
    end
    desc = UITextHelper.GetUIText(descUITextId1, time1)
    if time2 ~= nil then
        desc = string.concat(desc, UITextHelper.GetUIText(descUITextId2, time2))
    end
    return desc
end

function GameHelper.GetOssChannel(channel)
    local region = Locale.GetRegion()
    ---@class cfg.CMSInfo
    local baseKey = string.format("%s|%s", region, tonumber(BllMgr.GetLoginBLL():GetServerId()) or 0)
    local cfg = LuaCfgMgr.Get("CMSInfo", baseKey, channel)
    if (cfg) then
        return cfg.SceneID
    end
    return channel
end

return GameHelper
