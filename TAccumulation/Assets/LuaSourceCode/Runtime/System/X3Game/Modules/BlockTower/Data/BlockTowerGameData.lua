---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/6/22 17:14
---
---@class BlockTowerGameData
local BlockTowerGameData = class("BlockTowerGameData")
---@type BlockTowerConst
local Const = require("Runtime.System.X3Game.Modules.BlockTower.BlockTowerConst")

---
function BlockTowerGameData:ctor()
    ---@type BlockTowerConst.ControlMode 当前操作模式
    self.blockTowerControlMode = Const.ControlMode.None
    ---@type GameObject 根据RayCast得到选中的Cube
    self.clickedBlock = nil
    ---@type GameObject 当前选中的Cube
    self.selectedBlock = nil
    ---@type GameObject 外发光显示Cube
    self.outlineBlock = nil
    ---@type Vector3 当前的BlockSize
    self.blockSize = Vector3.zero
    ---@type int 当前已检测到的掉落块数
    self.dropCount = 0
    ---@type boolean 块是否被抽出了塔
    self.blockIsolated = false
    ---@type Vector3 箭头起始坐标
    self.arrowStartPos = Vector3.zero
    ---@type Vector3 箭头终点坐标
    self.arrowEndPos = Vector3.zero
    ---@type boolean 当前是否需要显示箭头
    self.showArrow = false
    ---@type Quaternion 块的放置角度
    self.putRotation = nil
    ---@type Vector3 块的放置位置
    self.putPosition = Vector3.zero
    ---@type table<int, BlockTowerBlockData[]> 块逻辑分层
    self.logicLayerDict = {}
    ---@type table<int, BlockTowerBlockData[]> 块物理分层
    self.physicsLayerDict = {}
    ---@type table<int, BlockTowerSafeAreaData>
    self.safeAreaDict = {}
    ---@type BlockTowerBlockData[]
    self.safeBlockList = {}
    ---@type int
    self.manType = 0
    ---@type int
    self.continualPlayerSuccessedTimes = 0
    ---@type int
    self.continualAIWinTimes = 0
    ---@type int
    self.rollResult = 0
    ---@type int
    self.whoseTurn = 0
    ---@type int
    self.winCount = 0
    ---@type int
    self.loseCount = 0
    ---@type int
    self.aiChoosedLayer = 0
    ---@type float
    self.durationTime = 0
    ---@type boolean
    self.blockTowerMoved = false
    ---@type boolean
    self.blockTowerChoosed = false
    ---@type boolean
    self.isTimeLimit = false
    ---@type boolean
    self.showingAlert = false
    ---@type int
    self.layerForbidden = 0
    ---@type int 每层补偿力
    self.layerAddForce = 0
    ---@type boolean
    self.timeLimitFailed = false
    ---@type int
    self.curLayer = 0
    ---@type int
    self.curPhysicsLayer = -1
end

---
---@param msg pbcmessage.ReduceBlockTowerCountReply
function BlockTowerGameData:ReduceBlockTowerCountReply(msg)
    self.whoseTurn = GamePlayConst.GameMode.Player
end

---
---@param msg pbcmessage.GetBlockTowerDataReply
function BlockTowerGameData:OnGetBlockTowerDataReply(msg)
    self.rollResult = msg.RollResult
    self:UpdateResultList(msg.ResultList)
    self:UpdateBlockTowerData(msg.RecordList)
end

---
---@param msg pbcmessage.MoveBlockTowerBlockReply
function BlockTowerGameData:MoveBlockTowerBlockReply(msg)
    self.whoseTurn = GamePlayConst.GameMode.Player
    self:UpdateResultList(msg.ResultList)
    self:UpdateBlockTowerData(msg.RecordList)
end

---
---@param resultList number[]
function BlockTowerGameData:UpdateResultList(resultList)
    self.resultList = resultList
    local winCount = 0
    local loseCount = 0
    for i = 1, #resultList do
        if resultList[i] == 1 then
            winCount = winCount + 1
        else
            loseCount = loseCount + 1
        end
    end
    self.winCount = winCount
    self.loseCount = loseCount
end

---
---@param recordList pbcmessage.S2Int[]
function BlockTowerGameData:UpdateBlockTowerData(recordList)
    for i = 1, #recordList do
        if recordList[i].Id == 1 then
            self.continualPlayerSuccessedTimes = recordList[i].Num
        elseif recordList[i].Id == 2 then
            self.continualAIWinTimes = recordList[i].Num
        end
    end
end

---
---@param layerIndex int
---@param blockData BlockTowerBlockData
function BlockTowerGameData:ChangeLayer(layerIndex, blockData)
    if layerIndex ~= blockData:GetLayerIndex() then
        local preLayerIndex = blockData:GetLayerIndex()
        local preLayer = self:GetLayer(preLayerIndex)
        local curLayer = self:GetLayer(layerIndex)
        table.removebyvalue(preLayer, blockData)
        for i = 1, #preLayer do
            preLayer[i].blockIndex = preLayerIndex * 100 + i - 1
        end
        table.insert(curLayer, blockData)
        blockData.blockIndex = layerIndex * 100 + #curLayer - 1
    end
end

---
---@param layerIndex int
---@return BlockTowerBlockData[]
function BlockTowerGameData:GetLayer(layerIndex)
    if self.logicLayerDict[layerIndex] == nil then
        self.logicLayerDict[layerIndex] = {}
    end
    return self.logicLayerDict[layerIndex]
end

---
---@param layerIndex int
---@return BlockTowerBlockData[]
function BlockTowerGameData:GetPhysicsLayer(layerIndex)
    if self.physicsLayerDict[layerIndex] == nil then
        self.physicsLayerDict[layerIndex] = {}
    end
    return self.physicsLayerDict[layerIndex]
end

---@param layerIndex int
---@return BlockTowerSafeAreaData
function BlockTowerGameData:GetSafeArea(layerIndex)
    if self.safeAreaDict[layerIndex] == nil then
        self.safeAreaDict[layerIndex] = require("Runtime.System.X3Game.Modules.BlockTower.Data.BlockTowerSafeAreaData").new(self.blockSize.z, self.blockSize.x)
        self.safeAreaDict[layerIndex]:Update(self:GetPhysicsLayer(layerIndex))
    end
    return self.safeAreaDict[layerIndex]
end

---
---@return BlockTowerBlockData[]
function BlockTowerGameData:GetTopBlocks()
    return self:GetPhysicsLayer(self.curPhysicsLayer)
end

---
---@return boolean
function BlockTowerGameData:IsPlayerMode()
    return self.whoseTurn == GamePlayConst.GameMode.Player
end

---@return BlockTowerGameData
function BlockTowerGameData:GetCurSelectBlockData()
    if self.selectedBlock ~= nil then
        return self:GetBlockData(self.selectedBlock)
    end
    return nil
end

---@param blockGO GameObject
---@return BlockTowerBlockData
function BlockTowerGameData:GetBlockData(blockGO)
    return GameObjectCtrl.GetCtrl(blockGO, "Runtime.System.X3Game.Modules.BlockTower.Data.BlockTowerBlockData")
end

---返回某个块的物理层
---@param blockGO GameObject
---@return int
function BlockTowerGameData:GetPhysicsLayerIndex(blockGO)
    local blockData = self:GetBlockData(blockGO)
    return blockData and blockData.physicsLayer or -1
end

---设置AI选中的层及安全块
---@param layer int
---@param safeBlockList BlockTowerBlockData[]
function BlockTowerGameData:ChangeAIChoosed(layer, safeBlockList)
    self.aiChoosedLayer = layer
    self.safeBlockList = safeBlockList
end

---@return Vector3
function BlockTowerGameData:GetBlockSize()
    return self.blockSize
end

---
function BlockTowerGameData:ClearBlocks()
    table.clear(self.logicLayerDict)
    table.clear(self.physicsLayerDict)
end

return BlockTowerGameData