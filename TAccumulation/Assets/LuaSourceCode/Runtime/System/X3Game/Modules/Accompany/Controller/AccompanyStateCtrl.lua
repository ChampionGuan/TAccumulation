---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fusu.
--- DateTime: 2023/4/4 19:58
---

--                                                              <--------------------------------<                         
--                                                              v                                ^
------>AccompanyInitState------>AccompanyModeSelect------>AccompanyInteractState------>AccompanyWillEndState------>AccompanyEndState
---                                                             v                                                       ^
---                                                             --------------------------->-----------------------------
---
local AccompanyConst = require("Runtime.System.X3Game.Modules.Accompany.Data.AccompanyConst")
local AccompanyInitState = require("Runtime.System.X3Game.Modules.Accompany.State.AccompanyInitState")
local AccompanyModeSelectState = require("Runtime.System.X3Game.Modules.Accompany.State.AccompanyModeSelectState")
local AccompanyInteractState = require("Runtime.System.X3Game.Modules.Accompany.State.AccompanyInteractState")
local AccompanyWillEndState = require("Runtime.System.X3Game.Modules.Accompany.State.AccompanyWillEndState")
local AccompanyEndState = require("Runtime.System.X3Game.Modules.Accompany.State.AccompanyEndState")
local AccompanyBaseCtrl = require("Runtime.System.X3Game.Modules.Accompany.Controller.AccompanyBaseCtrl")

---@class AccompanyStateCtrl:AccompanyBaseCtrl 管理所有的状态
local AccompanyStateCtrl = class("AccompanyStateCtrl" , AccompanyBaseCtrl)

function AccompanyStateCtrl:Init()
    ---@type AccompanyBaseState
    self._curState = nil
    ---@type table<AccompanyConst.StateType , AccompanyBaseState>
    self._stateDict = {}
    
    self:_AddState(AccompanyConst.StateType.InitState, AccompanyInitState)
    self:_AddState(AccompanyConst.StateType.ModeSelect, AccompanyModeSelectState)
    self:_AddState(AccompanyConst.StateType.InteractState, AccompanyInteractState)
    self:_AddState(AccompanyConst.StateType.WillEndState, AccompanyWillEndState)
    self:_AddState(AccompanyConst.StateType.EndState, AccompanyEndState)

    EventMgr.AddListener(AccompanyConst.Event.ON_ACCOMPANY_TIME_OVER, self._OnAccompanyTimeOver, self)
end

function AccompanyStateCtrl:OnDestroy()
    AccompanyStateCtrl.super.OnDestroy(self)
end

---@param stateType AccompanyConst.StateType
---@param stateCls AccompanyBaseState
function AccompanyStateCtrl:_AddState(stateType , stateCls)
    if not self._stateDict[stateType] then
        self._stateDict[stateType] = stateCls.new(stateType , self.accMgr)
    end
end

---@param stageType AccompanyConst.StateType
function AccompanyStateCtrl:ChangeState(stageType)
    if self._curState ~= nil then
        self._curState:OnLeave()
        self._curState = nil
    end
    self._curState = self._stateDict[stageType]
    if self._curState == nil then
        Debug.LogErrorFormat("Accompany ChangeState Failed. StateName: %s", stageType)
        return
    end
    self._curState:OnEnter()
end

---获取当前State类型
---@return AccompanyConst.StateType
function AccompanyStateCtrl:GetCurStateType()
    if self._curState ~= nil then
        return self._curState:GetStateType()
    end
    return nil
end

---陪伴时间结束, 判断能否继续
function AccompanyStateCtrl:_OnAccompanyTimeOver()
    local canContinue = self.accMgr.accBll:GetAccompanyCanContinue()
    if canContinue then
        self:ChangeState(AccompanyConst.StateType.WillEndState)
    else
        self:ChangeState(AccompanyConst.StateType.EndState)
    end
end

return AccompanyStateCtrl