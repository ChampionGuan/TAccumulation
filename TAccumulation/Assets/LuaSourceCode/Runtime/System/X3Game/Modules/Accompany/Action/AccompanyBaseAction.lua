---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fusu.
--- DateTime: 2023/4/6 14:07
---
local AccompanyConst = require("Runtime.System.X3Game.Modules.Accompany.Data.AccompanyConst")
local AccompanyCondition = require("Runtime.System.X3Game.Modules.Accompany.Condition.AccompanyCondition")
---@class AccompanyBaseAction
local AccompanyBaseAction = class("AccompanyBaseAction")
function AccompanyBaseAction:ctor(actionType , accMgr)
    ---@type AccompanyMgr
    self.accMgr = accMgr
    ---@type AccompanyActionCtrl
    self.actionCtrl = self.accMgr:GetCtrl(AccompanyConst.CtrlType.ActionCtrl)
    
    self._conditionId = nil
    self._actionType = actionType
    self._nextWaitFinish = true
    self._jumpCondition = nil
    self._actionIndex = -1
end

function AccompanyBaseAction:Init(actionParam)

end

---执行Action
function AccompanyBaseAction:Execute()
    if self:_CheckCondition(self._conditionId) then
        self:OnConditionPass()
    else
        self:OnConditionNoPass()
    end
end

---条件通过执行
function AccompanyBaseAction:OnConditionPass()
    
end

---条件未通过执行,默认直接完成
function AccompanyBaseAction:OnConditionNoPass()
    self:OnFinish()
end

---获取Action
---@return AccompanyConst.ActionType
function AccompanyBaseAction:GetActionType()
    return self._actionType
end

---设置Action条件
---@param conditionId int
function AccompanyBaseAction:SetActionCondition(conditionId)
    self._conditionId = conditionId
end

---设置是否需要等待完成
---@param wait boolean
function AccompanyBaseAction:SetNextWaitFinish(wait)
    self._nextWaitFinish = wait
end

---获取是否需要等待
---@return boolean
function AccompanyBaseAction:GetNextWaitFinish()
    return self._nextWaitFinish
end

---设置跳转下一个Action条件
---@param jumpCondition int
function AccompanyBaseAction:SetJumpCondition(jumpCondition)
    self._jumpCondition = jumpCondition
end

---设置ActionIndex
---@param index int
function AccompanyBaseAction:SetActionIndex(index)
    self._actionIndex = index
end

---获取下一个Action的Index
---@return int
function AccompanyBaseAction:GetNextActionIndex()
    if self._jumpCondition == nil then
        return self._actionIndex + 1
    end
    local conditionId = self._jumpCondition.Condition
    local canPass = self:_CheckCondition(conditionId)
    local nextActionIndexList = self._jumpCondition.ActionList

    if nextActionIndexList == nil or #nextActionIndexList < 2 then
        return self._actionIndex + 1
    end
    
    local nextActionIndex = canPass and nextActionIndexList[1] or nextActionIndexList[2]
    return nextActionIndex
end


---Action完成
function AccompanyBaseAction:OnFinish()
    EventMgr.Dispatch(AccompanyConst.Event.ON_ACTION_FINISH , self._actionType , self._actionIndex)
end

---检查条件
function AccompanyBaseAction:_CheckCondition(conditionId)
    if conditionId == nil then
        return true
    end
    
    local canPass = true
    local conditionConfig = AccompanyConst.ConditionConfig[conditionId]
    if conditionConfig == nil then
        return false
    end
    
    local conditionList = conditionConfig.Condition
    local conditionParamList = conditionConfig.Param
    for i, conditionType in ipairs(conditionList) do
        local param = conditionParamList and conditionParamList[i] or nil
        if not AccompanyCondition.CheckCondition(conditionType ,  param) then
            canPass = false
            break
        end
    end
    
    return canPass
end

function AccompanyBaseAction:OnDestroy()
    EventMgr.RemoveListenerByTarget(self)
end

return AccompanyBaseAction