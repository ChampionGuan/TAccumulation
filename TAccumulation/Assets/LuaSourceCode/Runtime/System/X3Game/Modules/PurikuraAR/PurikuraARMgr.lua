---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiantao.
--- DateTime: 2022/11/3 17:51
---
---@class PurikuraARMgr
local PurikuraARMgr = class("PurikuraARMgr")
local CSARPhotoProcess = CS.X3Game.ARPhoto.ARPhotoProcess
--local CSFaceDetectTool = CS.X3Game.AILab.FaceDetectTool
--local AILabHelper = CS.X3Game.AILab.AILabHelper
local LUTPath = "Assets/Build/Art/Lightings/Lut/Beautycam/"
local baseLUTName = "lut_beautycam.png"
---@type GraphicsSettingConst
local GraphicsSettingConst = require("Runtime.System.X3Game.GameConst.GraphicsSettingConst")
PurikuraARMgr.ARModelCfgID = 102
function PurikuraARMgr:ctor()
    self.isInARPhoto = false
    self.LUTTexture = nil
    self.camImageRoot = nil
    self.isHumanFront = true
    self.curBeautyValue = 0
    self.GammaMode = 0
    self.modelCamera = nil
    self.sceneCamera = nil
    self.sceneRT = nil
    self.modelRT = nil
end

function PurikuraARMgr:SetCamera()
    self.modelCamera = GameObjectUtil.GetComponent(self.camImageRoot, "CameraForModel", "Camera")
    self.sceneCamera = GameObjectUtil.GetComponent(self.camImageRoot, "CameraForScene", "Camera")
end

function PurikuraARMgr:ChangeSceneLayer(layer)
    self.sceneObj = SceneMgr.GetSceneObj("Camera").transform:GetChild(1)
    if self.sceneObj then
        GameObjectUtil.SetLayer(self.sceneObj, layer, true)
    end
end

function PurikuraARMgr:SetModelImage(rawImage)
    if self.modelRT then
        RenderTextureUtil.ReleaseRt(self.modelRT)
    end
    local x, y = GameObjectUtil.GetSizeDeltaXY(rawImage.gameObject)
    self.modelRT = RenderTextureUtil.GetRt(x, y)
    rawImage.texture = self.modelRT
    if self.modelCamera then
        self.modelCamera.targetTexture = self.modelRT
    end
end

function PurikuraARMgr:UpdateModelCamera()
    GameObjectUtil.SetEnable(self.modelCamera, "Camera",true)
    TimerMgr.AddTimerByFrame(1, function()
        GameObjectUtil.SetEnable(self.modelCamera, "Camera",false)
    end)
end

function PurikuraARMgr:SetSceneImage(rawImage)
    if self.sceneRT then
        RenderTextureUtil.ReleaseRt(self.sceneRT)
    end
    local x, y = GameObjectUtil.GetSizeDeltaXY(rawImage.gameObject)
    self.sceneRT = RenderTextureUtil.GetRt(x, y)
    rawImage.texture = self.sceneRT
    if self.sceneCamera then
        self.sceneCamera.targetTexture = self.sceneRT
    end
end

function PurikuraARMgr:UpdateSceneCamera()
    GameObjectUtil.SetEnable(self.sceneCamera, "Camera",true)
    TimerMgr.AddTimerByFrame(1, function()
        GameObjectUtil.SetEnable(self.sceneCamera, "Camera",false)
    end)
end

function PurikuraARMgr:SetGammaMode(num)
    if num ~= 0 and num ~= 1 and num ~= 2 then
        return
    end
    if self.isInARPhoto then
        CSARPhotoProcess.Instance:SetIsFixGamma(num)
    end
end

function PurikuraARMgr:StartARPhoto(targetWight, targetHeight)
    --if not Application.IsEditor() then
    --    local file = CS.System.IO.Path.Combine(AILabHelper.RootPath, AILabHelper.FolderPath, AILabHelper.ModelPath);
    --    if not CS.System.IO.File.Exists(file) then
    --        Debug.LogError("AR: NetModel File not exists")
    --        return
    --    end
    --end
    --X3DataMgr.Subscribe(X3DataConst.X3Data.ARPhotoData, self.UpdateModelCamera, self)
    X3DataMgr.Subscribe(X3DataConst.X3Data.ARPhotoData, self.UpdateSceneCamera, self, X3DataConst.X3DataField.ARPhotoData.backgroundID)
    local isCameraFront = self:GetRecordCameraDir()
    --CSARPhotoProcess.Instance:SetIsFaceDetect(false)
    --local GQLevel = BllMgr.GetSystemSettingBLL():GetRecommendGQLevel()
    local canStartARPhoto
    --CSARPhotoProcess.Instance:SetForbidAutoColor(true)
    --CSFaceDetectTool.SetThreadNum(1,1,1)
    if not Application.IsEditor() then
        ---低端机型优化
        --CSARPhotoProcess.Instance:SetDetectAsync(true)
        canStartARPhoto = CSARPhotoProcess.Instance:PrepareARPhoto(isCameraFront, targetWight, targetHeight, 0.5, true)
    else
        --CSARPhotoProcess.Instance:SetDetectAsync(false)
        canStartARPhoto = CSARPhotoProcess.Instance:PrepareARPhoto(isCameraFront, targetWight, targetHeight)
    end
    if canStartARPhoto then
        self.isInARPhoto = true
        self:SetLUTTextureByName(baseLUTName)
        self.isHumanFront = true
        self:LoadCamImage()
        self:ChangeSceneLayer(Const.LayerMask.RT)
    end
    if (not canStartARPhoto) and Application.IsEditor() then
        self:LoadCamImage()
    end
    CutSceneBlackBoardMgr.SetVisible(1, false)
    self.energySavingValue = BllMgr.GetSystemSettingBLL():GetCurEnergySavingSetting()
    if self.energySavingValue == GraphicsSettingConst.EnergySavingGrade.On then
        BllMgr.GetSystemSettingBLL():SetEnergySavingSetting(GraphicsSettingConst.EnergySavingGrade.Off)
    end
    return canStartARPhoto
end
---设置美颜参数
---@param delta number 美颜参数，0——1
function PurikuraARMgr:SetBeautyDelta(delta)
    if not self.isInARPhoto then
        return
    end
    local filterSigmaRange = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHOTOHEADSHOTARBEAUTYCAMSKIN)
    local eyeDeltaRange = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHOTOHEADSHOTARBEAUTYCAMEYE)
    local faceDeltaRange = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHOTOHEADSHOTARBEAUTYCAMFACE)
    local filterSigma = self:CalculateDelta(filterSigmaRange, delta)
    local eyeDelta = self:CalculateDelta(eyeDeltaRange, delta)
    local faceDelta = self:CalculateDelta(faceDeltaRange, delta)
    CSARPhotoProcess.Instance:SetBeautyDelta(filterSigma, eyeDelta, faceDelta)
    self.curBeautyValue = delta
end

function PurikuraARMgr:CalculateDelta(range, delta)
    local result  = (range[2] - range[1]) * delta + range[1]
    return result
end
---设置前后图片
function PurikuraARMgr:SetImage(frontImage, backImage)
    if not self.isInARPhoto then
        return
    end
    self.frontImage = frontImage
    self.backImage = backImage
    CSARPhotoProcess.Instance:SetImage(frontImage, backImage)
    self:SetImageRotation()
end
---结束AR拍照
function PurikuraARMgr:EndARPhoto()
    if not self.isInARPhoto then
        return
    end
    CSARPhotoProcess.Instance:EndARPhoto()
    self.isInARPhoto = false
    self.sceneCamera.targetTexture = nil
    self.modelCamera.targetTexture = nil
    self.sceneCamera = nil
    self.modelCamera = nil
    self:ChangeSceneLayer(Const.LayerMask.DEFAULT)
    Res.Unload(self.LUTTexture)
    Res.DiscardGameObject(self.camImageRoot)
    if self.modelRT then
        RenderTextureUtil.ReleaseRt(self.modelRT)
        self.modelRT = nil
    end
    if self.sceneRT then
        RenderTextureUtil.ReleaseRt(self.sceneRT)
        self.sceneRT = nil
    end
    CutSceneBlackBoardMgr.Reset()

    BllMgr.GetSystemSettingBLL():SetEnergySavingSetting(self.energySavingValue)
end

function PurikuraARMgr:SwitchCamera(isFront)
    if not self.isInARPhoto then
        return
    end
    CSARPhotoProcess.Instance:SwitchCamera(isFront)
    EventMgr.AddListenerOnce("OnARPhotoCamChanged", function()
        self:SetImageRotation()
    end)
    self:SetRecordCameraDir(isFront)
    --TimerMgr.AddTimer(5,function() CSARSessionMgr.GetCameraDir()  end)
end
---设置玩家是否在男主模型前面
---@param isFront bool
function PurikuraARMgr:SetHumanFront(isFront)
    if not self.isInARPhoto then
        return
    end
    self.isHumanFront = isFront
    CSARPhotoProcess.Instance:SetHumanFront(isFront)
end

---设置是否显示实景背景
---@param isShow bool
function PurikuraARMgr:SetShowBackImage(isShow)
    if not self.isInARPhoto then
        return
    end
    GameObjectUtil.SetActive(self.sceneCamera, not isShow)
    CSARPhotoProcess.Instance:SetShowBackImage(isShow)
end

---设置拍照滤镜
---@param texture Texture2D
function PurikuraARMgr:SetLUTTexture(texture)
    if not self.isInARPhoto then
        return
    end
    if texture == nil then
        return
    end
    CSARPhotoProcess.Instance:SetLUTTexture(texture)
end
---加载拍照滤镜纹理
---@param textureName string 滤镜名称
function PurikuraARMgr:LoadLUTTexture(textureName)
    local LUTTexture = Res.LoadWithAssetPath(string.concat(LUTPath, textureName), AutoReleaseMode.Scene, typeof(CS.UnityEngine.Texture))
    return LUTTexture
end
---设置拍照滤镜纹理
---@param textureName string 滤镜名称
function PurikuraARMgr:SetLUTTextureByName(textureName)
    self.LUTTexture = PurikuraARMgr:LoadLUTTexture(textureName)
    self:SetLUTTexture(self.LUTTexture)
end
---加载显示实景的画布
function PurikuraARMgr:LoadCamImage()
    self.camImageRoot = UIMgr.LoadDynamicUIPrefab(PrefabConst.ARCamImageRoot)
    GameObjectUtil.SetParent(self.camImageRoot.transform, SceneMgr.GetSceneObj("Camera").transform)
    GameObjectUtil.SetLocalPosition(self.camImageRoot, 0, 0, 0)
    GameObjectUtil.SetLocalRotation(self.camImageRoot, 0, -180, 0)
    GameObjectUtil.SetActive(self.camImageRoot, true)
    self:SetCamera()
    if Application.IsIOSMobile() then
        CSARPhotoProcess.Instance:SetIsFixGamma(0)
    elseif Application.IsMobile() then
        CSARPhotoProcess.Instance:SetIsFixGamma(1)
    else
        CSARPhotoProcess.Instance:SetIsFixGamma(1)
    end

    if not self.isInARPhoto then
        GameObjectUtil.SetActive(self.camImageRoot, false)
    end
end

---根据平台和前后置摄像头设置图片的翻转
function PurikuraARMgr:SetImageRotation()
    ---不同平台获取相机获取数据翻转不同
    local isFront = self:GetRecordCameraDir()
    if Application.IsIOSMobile() then
        if isFront then
            GameObjectUtil.SetLocalEulerAngles(self.backImage, 180, 180, 90)
            GameObjectUtil.SetLocalEulerAngles(self.frontImage, 180, 180, 90)
        else
            GameObjectUtil.SetLocalEulerAngles(self.backImage, 180, 0, 90)
            GameObjectUtil.SetLocalEulerAngles(self.frontImage, 180, 0, 90)
        end
    elseif Application.IsMobile() then
        if isFront then
            GameObjectUtil.SetLocalEulerAngles(self.backImage, 0, 180, 90)
            GameObjectUtil.SetLocalEulerAngles(self.frontImage, 0, 180, 90)
        else
            GameObjectUtil.SetLocalEulerAngles(self.backImage, 180, 180, 90)
            GameObjectUtil.SetLocalEulerAngles(self.frontImage, 180, 180, 90)
        end
    end
    local camResolution = CSARPhotoProcess.Instance:GetCamResolution()
    local targetSize = camResolution.x / camResolution.y
    local baseX, baseY = GameObjectUtil.GetSizeDeltaXY(self.backImage.gameObject) --竖屏
    local baseSize = baseX / baseY
    local scale = targetSize / baseSize
    if scale > 1 then
        GameObjectUtil.SetLocalScale(self.backImage.gameObject, scale, 1, 1)
        GameObjectUtil.SetLocalScale(self.frontImage.gameObject, scale, 1, 1)
    else
        GameObjectUtil.SetLocalScale(self.backImage.gameObject, 1, 1 / scale, 1)
        GameObjectUtil.SetLocalScale(self.frontImage.gameObject, 1, 1 / scale, 1)
    end
end

function PurikuraARMgr:GetEnvColor()
    if not self.isInARPhoto then
        return Color.white
    end
    return CSARPhotoProcess.Instance:GetLightColor()
end

function PurikuraARMgr:GetEnvLightIntensity()
    if not self.isInARPhoto then
        return 0
    end
    return CSARPhotoProcess.Instance:GetLightIntensity()
end

function PurikuraARMgr:CheckRealLight()
    if self.isInARPhoto then
        CSARPhotoProcess.Instance:CheckLightColor()
    end
end

function PurikuraARMgr:Pause()
    if not self.isInARPhoto then
        return
    end
    CSARPhotoProcess.Instance:Pause()
    GameObjectUtil.SetActive(self.camImageRoot, false)
end

function PurikuraARMgr:Restart()
    if not self.isInARPhoto then
        return
    end
    CSARPhotoProcess.Instance:Restart()
    GameObjectUtil.SetActive(self.camImageRoot, true)
end

function PurikuraARMgr:GetRecordCameraDir()
    local uid = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    local key = string.format("%s_%s", "ARPhotoCameraDir" , uid)
    return PlayerPrefs.GetBool(key, false)
end

function PurikuraARMgr:SetRecordCameraDir(value)
    local uid = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    local key = string.format("%s_%s", "ARPhotoCameraDir" , uid)
    PlayerPrefs.SetBool(key, value)
end

function PurikuraARMgr:UpdateLightColor(lightAsset, factor, maxColor)
    if not self.isInARPhoto then
        return
    end
    CSARPhotoProcess.Instance:UpdateLightColor(lightAsset, factor, maxColor)
end

function  PurikuraARMgr:SetLightColor(lightAsset, r, g, b)
    if not self.isInARPhoto then
        return
    end
    CSARPhotoProcess.Instance:SetLightColor(lightAsset, r, g, b)
end

return PurikuraARMgr