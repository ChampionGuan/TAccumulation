---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/7/13 16:07
---
---@class TimeUtil
local TimeUtil = {}

---@type int 每日刷新时间(时）
local dailyResetHour = 5
---@type int 每日刷新时间(分）
local dailyResetMinute = 0
---@type int 每日刷新时间(秒）
local dailyResetSecond = 0

function TimeUtil.Init()
    local resetString = string.split(LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.COMMONDAILYRESETTIME), ":")
    dailyResetHour = tonumber(resetString[1])
    dailyResetMinute = tonumber(resetString[2])
    dailyResetSecond = tonumber(resetString[3])
end

---根据起始时间戳与当前时间戳判断跨了多少天
---@param startTime int 需要与当前时间作对比的值
---@param endTime int 结束时间戳 如果没传入则默认为当前时间
---@param resetHour int 几点跨天 默认为5
---@return int 跨的天数，同一天为1
function TimeUtil.GetOpenDay(startTime, endTime, resetHour)
    local dayTime = 86400

    ---这个方法会-时区, 不过cms上的本来就是带时区的时间
    local curTimestamp = endTime or TimerMgr.GetCurTimeSeconds()
    if startTime == nil or (curTimestamp < startTime) then
        return 0
    end

    local knewDateTime = CS.System.DateTimeOffset.FromUnixTimeSeconds(startTime)
    local svrTime = CS.System.DateTimeOffset.FromUnixTimeSeconds(curTimestamp)--TimerMgr.GetCurDate()--GrpcMgr.GetServerTime()
    local timeSpan = svrTime - knewDateTime
    local result = 1

    local startDate = TimerMgr.GetDateByUnixTimestamp(startTime)
    --赋值为刷新点时间戳
    --Debug.LogError("startDate ", startDate, " -- ", self.dailyResetHour, " -- ", self.dailyResetMinute, "---",  self.dailyResetSecond, " startDate ", startDate.year)
    if (startDate.year >= 2038) then
        startDate.year = 2037
    elseif (startDate.year <= 1970) then
        startDate.year = 1971
    end
    startDate.hour = resetHour or dailyResetHour
    startDate.min = dailyResetMinute
    startDate.sec = dailyResetSecond
    
    local refreshTimestamp = TimerMgr.GetUnixTimestamp(startDate)
    if (timeSpan.Days < 1) then
        local nextFreshTimestamp = refreshTimestamp + dayTime
        --if ((startTime < refreshTimestamp and curTimestamp > refreshTimestamp) or (startTime > refreshTimestamp and curTimestamp > nextFreshTimestamp)) then
        if ((startTime < refreshTimestamp and curTimestamp >= refreshTimestamp) or (startTime > refreshTimestamp and curTimestamp >= nextFreshTimestamp)) then
            result = result + 1
        end
    else
        if (startTime < refreshTimestamp) then
            startTime = refreshTimestamp
        else
            startTime = refreshTimestamp + dayTime
        end

        for i = 1, timeSpan.Days + 1 do
            if (startTime <= curTimestamp) then
                result = result + 1
                startTime = startTime + dayTime
            end
        end
    end

    return result
end

-- 检查两个时间戳是否在同一天 (基于刷新时间是每日5点) (后续也可拓展接口支持传入刷新时间)
---@param time_a number 开始时间戳
---@param time_b number 结束时间戳
function TimeUtil.IsSameDay(time_a, time_b)
    if (not time_a) or (not time_b) or (time_a <= 0) or (time_b <= 0) then return false end
    if time_a == time_b then return true end
    local openDay = time_a < time_b and TimeUtil.GetOpenDay(time_a, time_b) or TimeUtil.GetOpenDay(time_b, time_a)
    return openDay == 1
end

--需要清理函数
function TimeUtil.Clear()

end

return TimeUtil
