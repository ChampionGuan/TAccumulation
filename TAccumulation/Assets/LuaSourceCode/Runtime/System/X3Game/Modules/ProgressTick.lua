---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/1/10 14:11
---CS.PapeGames.X3.EasingFunction.GetEasingFunction(CS.PapeGames.X3.EasingFunction.Ease.Linear)
---进度驱动逻辑
---@class ProgressTick
local ProgressTick = class("ProgressTick")
---@type Pool
local pool = nil
---@type table<int,ProgressTick>
local tick_map = {}
---@type int
local id = 0
---计时器id
local timer = nil
---同步平滑时间
local smooth_time = 0.06
---检测计时器
---@type function
local CheckTimer

local EasingFunction = CS.PapeGames.X3.EasingFunction

function ProgressTick:ctor()
    ---起始值
    ---@type number
    self.from = 0
    ---终结值
    ---@type number
    self.to = 1
    ---持续时间
    ---@type number
    self.duration = 1
    ---进度变化类型
    ---@type PapeGames.X3.EasingFunction.Ease
    self.easy_type = CS.PapeGames.X3.EasingFunction.Ease.Linear
    ---完成回调
    ---@type function
    self.finish_call = nil
    ---更新进度值
    ---@type fun(type:number)
    self.update_call = nil
    ---唯一标识符
    ---@type int
    self.id = 0
    ---当前进度
    ---@type number
    self.progress = 0
    ---当前时间
    self.cur_tick = 0
    ---实际进度
    ---@type number
    self.target_progress = 0
    ---跟进进度
    ---@type number
    self.current_velocity = 0
    ---@type fun(type:number):number
    self.ease_func = nil
    ---延时执行时间
    ---@type number
    self.delay = 0
    ---是否有效
    self.is_valid = true
end

---当前是否有效
---@return boolean
function ProgressTick:IsValid()
    return self.is_valid
end

---设置valid
---@param is_valid boolean
function ProgressTick:SetValid(is_valid)
    self.is_valid = is_valid
end

---设置唯一id
---@param id int
function ProgressTick:SetId(id)
    self.id = id
end

function ProgressTick:SetDelay(delay)
    self.delay = delay
end

---结束回调
function ProgressTick:OnFinish()
    local finish_call = self.finish_call
    ProgressTick.Stop(self.id)
    if finish_call then
        finish_call()
    end
end

---每帧tick
---@param delta number
function ProgressTick:OnUpdate(delta)
    if self.delay > 0 then
        self.delay = self.delay - delta
        return
    end
    self.cur_tick = self.cur_tick + delta
    self.progress, self.current_velocity = Mathf.SmoothDamp(self.progress, self.cur_tick / self.duration, self.current_velocity, smooth_time, nil, delta)
    if self.update_call then
        self.update_call(self.ease_func(self.from, self.to, self.progress))
    end
    if self.progress >= 1 then
        self:OnFinish()
    end
end

---清理数据
function ProgressTick:Clear()
    self.from = 0
    self.to = 1
    self.duration = 1
    self.easy_type = CS.PapeGames.X3.EasingFunction.Ease.Linear
    self.finish_call = nil
    self.update_call = nil
    self.id = 0
    self.progress = 0
    self.current_velocity = 0
    self.ease_func = nil
    self.cur_tick = 0
    self.delay = 0
    self.is_valid = true
end

---开始执行
---@param from number
---@param to number
---@param easy_type PapeGames.X3.EasingFunction.Ease
function ProgressTick:Set(from, to, duration, easy_type)
    self.from = from or 0
    self.to = to or 1
    self.duration = duration or 0
    self.easy_type = easy_type and easy_type or EasingFunction.Ease.Linear
    self.ease_func = EasingFunction.GetEasingFunction(self.easy_type)
end

---设置更新update
---@param on_update fun(type:number)
function ProgressTick:SetUpdateCall(on_update)
    self.update_call = on_update
end

---设置结束回调
---@param on_finish function
function ProgressTick:SetFinishCall(on_finish)
    self.finish_call = on_finish
end

---返回唯一id
---@return int
function ProgressTick:GetId()
    return self.id
end

---动态生成id
---@return int
local function GenId()
    id = id + 1
    return id
end

---@param progress_tick ProgressTick
local function Add(progress_tick)
    local id = progress_tick:GetId()
    tick_map[id] = progress_tick
    CheckTimer()
end

---@param id int
---@param force boolean
local function Remove(id, force)
    local t = tick_map[id]
    if t then
        t:SetValid(false)
        if force then
            tick_map[id] = nil
            pool:Release(t)
        end
    end
    if force then
        CheckTimer()
    end
end

---每帧tick
local delete_list = {}
local last
local function Tick()
    local delta = TimerMgr.GetCurTickDelta()
    if delta == 0 then
        if not last then
            last = TimerMgr.RealtimeSinceStartup(true)
        end
        delta = TimerMgr.RealtimeSinceStartup(true) - last
        last = TimerMgr.RealtimeSinceStartup(true)
    end
    for k, v in pairs(tick_map) do
        if v:IsValid() then
            v:OnUpdate(delta)
        else
            table.insert(delete_list, k)
        end
    end
    if #delete_list > 0 then
        for k, v in ipairs(delete_list) do
            Remove(v, true)
        end
        table.clear(delete_list)
    end
end

---检测计时器
CheckTimer = function()
    if not timer then
        if table.nums(tick_map) > 0 then
            last = nil
            timer = TimerMgr.AddTimer(0, Tick, nil, -1)
        end
    else
        if table.nums(tick_map) == 0 then
            TimerMgr.Discard(timer)
            timer = nil
        end
    end
end

---@param from number
---@param to number
---@param duration number
---@param easy_type PapeGames.X3.EasingFunction.Ease
---@param on_finish function
---@param on_update fun(type:number)
---@return ProgressTick
local function GenTick(from, to, duration, easy_type, on_finish, on_update)
    if not pool then
        pool = PoolUtil.Get(function()
            return ProgressTick.new()
        end, function(t)
            t:Clear()
        end)
    end
    ---@type ProgressTick
    local tick = pool:Get()
    tick:Set(from, to, duration, easy_type)
    if on_finish then
        tick:SetFinishCall(on_finish)
    end
    if on_update then
        tick:SetUpdateCall(on_update)
    end
    local id = GenId()
    tick:SetId(id)
    return tick
end

---开始
---@param from number
---@param to number
---@param duration number
---@param easy_type PapeGames.X3.EasingFunction.Ease
---@param on_finish function
---@param on_update fun(type:number)
function ProgressTick.Start(from, to, duration, easy_type, on_finish, on_update)
    local tick = GenTick(from, to, duration, easy_type, on_finish, on_update)
    Add(tick)
    return id
end

---@param from number
---@param to number
---@param duration number
---@param easy_type PapeGames.X3.EasingFunction.Ease
---@param on_finish function
---@param on_update fun(type:number)
function ProgressTick.StartWithDelay(delay, from, to, duration, easy_type, on_finish, on_update)
    if not delay then
        return ProgressTick.Start(delay, from, to, duration, easy_type, on_finish, on_update)
    end
    local tick = GenTick(from, to, duration, easy_type, on_finish, on_update)
    tick:SetDelay(delay)
    Add(tick)
    return id
end

---关闭
---@param id int
function ProgressTick.Stop(id)
    Remove(id)
end

return ProgressTick