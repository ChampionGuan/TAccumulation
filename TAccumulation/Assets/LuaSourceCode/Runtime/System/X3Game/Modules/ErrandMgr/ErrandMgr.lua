---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2023/3/22 11:27
---@class ErrandMgr
local ErrandMgr = {}
local ErrandSystem = require("Runtime.System.X3Game.Modules.ErrandMgr.ErrandSystem").new()

function ErrandMgr.Init()
    ErrandSystem:Init()
end

---@public
---检测是事务是否已事务或在等待触发的队列中
---@param typeId number 事务类型的ID或Key
function ErrandMgr.IsAdded(typeId)
    return ErrandSystem:IsAdded(typeId)
end

---@public
---增加新待触发事务 触发时直接打开配置中给的界面
---@param typeID number 事务类型的ID或Key
---@param data table 打开UI时的参数列表
function ErrandMgr.Add(typeID, data)
    ErrandSystem:Add(typeID, data)
end

---@public
---增加新待触发事务 界面可通过回调触发。按规则调用回调
---@param typeID number 事务类型的ID或Key
---@param startFunc function 开启用函数
---@param endFunc function 关闭用函数
function ErrandMgr.AddWithCallBack(typeID, startFunc, endFunc)
    ErrandSystem:AddWithCallBack(typeID, startFunc, endFunc)
end

---@public
---特殊事务结束时通知管理器
---@param typeID number 事务类型的ID或Key
function ErrandMgr.End(typeID)
    ErrandSystem:End(typeID)
end

---@public
---客户端延迟开启及关闭。暂停或者开启，事务队列
---@param open boolean 是否打开客户端延迟
function ErrandMgr.SetDelay(open)
    ErrandSystem:SetDelay(open)
end


---@public
---清理某一类型事务（仅清除等待触发的，已经触发的不关闭）
---@param typeID number 事务类型的ID或Key
function ErrandMgr.ClearByType(typeID)
    ErrandSystem:ClearByType(typeID)
end

---@public
---模拟加入事务，返回能否立即触发
---@param typeID number 事务类型的ID或Key
---@return bool 模拟加入后，本次是否触发
function ErrandMgr.SimulationAddCanPop(typeID)
    return ErrandSystem:SimulationAddCanPop(typeID)
end
--endregion

function ErrandMgr.LateUpdate()
    ErrandSystem:LateUpdate()
end

function ErrandMgr.Clear()
    ErrandSystem:Clear()
end

function ErrandMgr.Destroy()
    ErrandSystem:Destroy()
end
return ErrandMgr