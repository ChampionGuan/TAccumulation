---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/3/5 19:45
---
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
---@type MainHomeBaseCtrl
local BaseCtrl = require(MainHomeConst.BASE_CTRL)

---@class MainHomeDialogueCtrl:MainHomeBaseCtrl
local MainHomeDialogueCtrl = class("MainHomeDialogueCtrl", BaseCtrl)

function MainHomeDialogueCtrl:ctor()
    BaseCtrl.ctor(self)
    ---@type DialogueController
    self.dialogueCtrl = DialogueManager.InitByName(MainHomeConst.DIALOGUE)
    self.dialogueCtrl:GetSettingData():SetShowReviewButton(false)
    self.dialogueCtrl:GetSettingData():SetShowAutoButton(false)
    self.dialogueCtrl:SetDialogueUseDefaultSetting(true)
    self.dialogueId = 0
    self.conversationName = ""
    self.assetId = 0
    self.timeScaleName = "MainHomeDialogue"
    self.dialoguePauseReason = "MainHomeDialoguePauseReason"
end

---进入
function MainHomeDialogueCtrl:Enter()
    BaseCtrl.Enter(self)
    self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DialogueIdle, true)
    self:RegisterEvent()
    self.bll:SetDialogueCtrl(self.dialogueCtrl)
end

---退出
function MainHomeDialogueCtrl:Exit()
    BaseCtrl.Exit(self)
    self.bll:Resume()
    self:UnRegisterEvent()
    self:ClearDialogue(true)
    self:OnEventSetDialogueActor(true)
    self.dialogueId = 0
    self.conversationName = ""
end

---清理所有剧情
function MainHomeDialogueCtrl:ClearDialogue(unloadDataBase)
    self.dialogueCtrl:EndDialogueAll()
    self.dialogueCtrl:ClearDialogueAll()
    if unloadDataBase then
        DialogueManager.UnloadUnusedDatabase(true)
    end
    self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DialogueIdle, true)
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_STOP_ACTOR_ANI , true)
end

---检测剧情是否变化
---@param dialogueId int
---@param conversation string
---@return boolean
function MainHomeDialogueCtrl:IsDialogueChanged(dialogueId, conversation)
    local res = dialogueId ~= self.dialogueId or conversation ~= self.conversationName
    if res then
        self.dialogueId = dialogueId
        self.conversationName = conversation
    end
    return res
end

function MainHomeDialogueCtrl:OnEventCheckDialogueChanged(call)
    local data = self.bll:GetData()
    local stateConf = data:GetStateConf()
    local res = false
    if stateConf then
        res = self:IsDialogueChanged(stateConf.StateDialogueID, stateConf.StateConversation)
    end
    if call then
        call(res)
    end
end

---男主加载完成之后注入男主
function MainHomeDialogueCtrl:OnEventLoadActorSuccess()
    if self.bll:GetActor() ~= nil then
        self:OnEventSetDialogueActor(true)
        self:OnEventSetDialogueActor()
        self.bll:SetHandlerRunning(MainHomeConst.HandlerType.ActorRegisterFinish, true)
    end
end

function MainHomeDialogueCtrl:OnActorStateChanged(st)
    local isIgnore = st == MainHomeConst.ActorState.IGNORE
    self.dialogueCtrl:ChangeVariableState(MainHomeConst.DialogueVar.ActorState, isIgnore and 1 or 0)
end

function MainHomeDialogueCtrl:OnClickActor(partType)
    self.dialogueCtrl:ChangeVariableState(MainHomeConst.DialogueVar.ActorPart, partType)
end

function MainHomeDialogueCtrl:OnEventCaressActor(partType)
    self.dialogueCtrl:ChangeVariableState(MainHomeConst.DialogueVar.ActorPart, partType)
end

function MainHomeDialogueCtrl:OnEventLongPressActor(partType)
    self.dialogueCtrl:ChangeVariableState(MainHomeConst.DialogueVar.ActorPart, partType)
end

function MainHomeDialogueCtrl:OnEventTriggerActionByType(args)
    if args.params then
        if not table.isnilorempty(args.params) then
            self.bll:StartActionByType(args.params[1])
        end
    end
end

---检测剧情注入男主
---@param isRemove boolean
function MainHomeDialogueCtrl:OnEventSetDialogueActor(isRemove)
    if isRemove then
        self.dialogueCtrl:RemoveGameObject(self.assetId, self.bll:GetActor())
    else
        local stateData = self.bll:GetData()
        self.assetId = stateData:GetAssetId()
        self.dialogueCtrl:InjectGameObject(stateData:GetAssetId(), self.bll:GetActor())
    end
end

---修改剧情seed
---@param dialogueId int
---@param seed int
function MainHomeDialogueCtrl:OnEventChangeDialogueSeed(dialogueId, seed)
    self.dialogueCtrl:ChangeRandomSeed(dialogueId, seed)
end

function MainHomeDialogueCtrl:OnEventClearProgressNode()
    self.dialogueCtrl:ClearProcessNode()
end

function MainHomeDialogueCtrl:OnEventPauseChanged(isPause)
    if isPause then
        self.dialogueCtrl:PauseDialogue(self.dialoguePauseReason)
    else
        self.dialogueCtrl:ResumeDialogue(self.dialoguePauseReason)
    end
    --更换新的暂停方式，不需要暂停TimeScale
    --TimescaleMgr.SetTimescale(TimescaleMgr.TimescaleLayer.Business,self.timeScaleName,isPause and 0 or 1)
end

function MainHomeDialogueCtrl:RegisterEvent()
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_CLOSE_DIALOGUE, self.ClearDialogue, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_SET_DIALOGUE_ACTOR, self.OnEventSetDialogueActor, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_CHECK_DIALOGUE_CHANGED, self.OnEventCheckDialogueChanged, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_ACTOR_LOAD_SUCCESS, self.OnEventLoadActorSuccess, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_AI_ACTOR_STATE_CHANGED, self.OnActorStateChanged, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_ON_CLICK_ACTOR, self.OnClickActor, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_DIALOGUE_TRIGGER_ACTION_BY_TYPE, self.OnEventTriggerActionByType, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_CARESS_ACTOR, self.OnEventCaressActor, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_ON_LONG_PRESS_CLICK_ACTOR, self.OnEventLongPressActor, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_CHANGE_DIALOGUE_SEED, self.OnEventChangeDialogueSeed, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_CLEAR_DIALOGUE_NODE_LIST, self.OnEventClearProgressNode, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_PAUSE_CHANGED, self.OnEventPauseChanged, self)
end

return MainHomeDialogueCtrl