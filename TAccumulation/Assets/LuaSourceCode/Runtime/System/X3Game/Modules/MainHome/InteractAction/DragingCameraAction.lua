---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liyan.
--- DateTime: 2023/11/7 16:48
---

local MainHomeConst =  require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")

local BaseAction = require(MainHomeConst.BASE_INTERACT_ACTION)

local DragingCameraAction = class("DragingCameraAction", BaseAction)
local Rad2Deg = CS.UnityEngine.Mathf.Rad2Deg

function DragingCameraAction:Begin()
    BaseAction.Begin(self)

    self.bll:SetCameraMode(MainHomeConst.CameraMode.Drag)

    if not self.dragCameraPosInited then
        local actionData = self:GetActionData()
        local range = {actionData.Para1, actionData.Para2}
        local rebound = {-actionData.Para3, actionData.Para3}
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_INIT_DRAG_CAMERA, range, rebound)
        self.dragCameraPosInited = true
    end

    local actor = self.bll:GetActor()
    if actor and not self.actorInitDir then
        local chrFwd = actor.transform.forward
        self.actorInitDir = Vector3.Normalize(Vector3.new(chrFwd.x, 0, chrFwd.z))
    end

    local mainCamera = GlobalCameraMgr.GetUnityMainCamera()
    if mainCamera and not self.camInitDir then
        local dir = mainCamera.transform.forward
        self.camInitDir = Vector3.Normalize(Vector3.new(dir.x, 0, dir.z))
    end

    if self:IsActionPlayDialogue() then
        self:ClearActorLookAtDragCamera()
    else
        self:SetActorLookAtDragCamera()
    end

    self.camRange = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.MAINUICHANGECAMERAANGLE)
    self.charRange = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.MAINUITURNROUNDANGLE)
end

function DragingCameraAction:End()
    BaseAction.End(self)
    local mainCamera = GlobalCameraMgr.GetUnityMainCamera()
    if mainCamera and self.camInitDir then
        local camDir = mainCamera.transform.forward
        camDir = Vector3.Normalize(Vector3.new(camDir.x, 0, camDir.z))
        local camTurnDegree = self:GetDegree(self.camInitDir, camDir)

        if math.abs(camTurnDegree) > math.abs(self.camRange.ID) then
            if not self.bll:IsActionRunningByActionType(MainHomeConst.ActionType.ChangeCamera) then
                self.bll:StartActionByType(MainHomeConst.ActionType.ChangeCamera)
            end
        else
            if self.bll:IsActionRunningByActionType(MainHomeConst.ActionType.ChangeCamera) then
                self.bll:StopActionByType(MainHomeConst.ActionType.ChangeCamera)
            end
        end
    end

    self:CheckChangeCamera()
end

function DragingCameraAction:OnModeChanged(mode)
    if mode == MainHomeConst.ModeType.INTERACT then
        self:ClearState(true)
    end
end

-- 获取 lhs 和 rhs 的夹角，如果 rhs 在 lhs 的右边，返回值大于 0；如果 rhs 在 lhs 的左边，返回值小于 0
function DragingCameraAction:GetDegree(lhs, rhs)
    local cosTheta = Vector3.Dot(lhs, rhs)
    local rotateAxis = Vector3.Cross(lhs, rhs)
    local right = Vector3.Dot(rotateAxis, Vector3.new(0,1,0)) > 0
    local degree = math.abs(math.acos(math.clamp(cosTheta, -1, 1))) * Rad2Deg
    if not right then
        degree = -degree
    end
    return degree
end

function DragingCameraAction:CheckChangeCamera()
    local actor = self.bll:GetActor()
    local mainCamera = GlobalCameraMgr.GetUnityMainCamera()
    if actor and mainCamera and self.actorInitDir and self.camInitDir then
        local chrFwd = actor.transform.forward
        chrFwd = Vector3.Normalize(Vector3.new(chrFwd.x, 0, chrFwd.z))
        local turnDegree = self:GetDegree(self.actorInitDir, chrFwd)

        local camDir = mainCamera.transform.forward
        camDir = Vector3.Normalize(Vector3.new(camDir.x, 0, camDir.z))
        local camTurnDegree = self:GetDegree(self.camInitDir, camDir)

        if math.abs(turnDegree) > math.abs(self.charRange.ID) or math.abs(camTurnDegree) > math.abs(self.camRange.ID) then
            self.bll:SetChangeCameraFlag(true)
            return true
        end
    end
    self.bll:SetChangeCameraFlag(false)
    return false
end

function DragingCameraAction:ClearState(modeChange)
    if self:CheckChangeCamera() then
        if self.bll:GetChangeCameraFlag() then
            self.bll:SetChangeCameraFlag(false)
            if modeChange then
                self.bll:StartActionByType(MainHomeConst.ActionType.ChangeCameraResume)
                EventMgr.AddListenerOnce(MainHomeConst.Event.MAIN_HOME_RESET_MAIN_CAMERA,self.OnClearStateFinish,self)
            else
                EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_RESET_MAIN_CAMERA)
                self:OnClearStateFinish(true)
            end
        end
    else
        self:OnClearStateFinish(false)
        self:OnClearActorRotation()
    end
end

function DragingCameraAction:OnClearStateFinish(noCheckBlend)
    if noCheckBlend == nil then
        noCheckBlend = true
    end
    self:ClearActorLookAtDragCamera()
    self.bll:StopActionByType(MainHomeConst.ActionType.ChangeCamera)
    self.bll:StopActionByType(MainHomeConst.ActionType.SideCamera)

    self.bll:SetCameraMode(MainHomeConst.CameraMode.Normal, nil, noCheckBlend)
    self.dragCameraPosInited = false
end

function DragingCameraAction:OnClearActorRotation()
    local data = self.bll:GetData()
    local stateConf = data:GetStateConf()
    if not stateConf then
        return
    end
    local position = stateConf.ActorPos
    local rotation = stateConf.ActorRot
    local actor = self.bll:GetActor()
    if actor then
        GameObjectUtil.ResetTransform(actor)
    end
    local x3Animator = GameObjectUtil.GetComponent(actor, "", "X3Animator", false, true)
    if x3Animator then
        X3AnimatorUtil.SetPosition(actor,position)
        X3AnimatorUtil.SetRotation(actor,rotation)
    end
end

function DragingCameraAction:Enter()
    BaseAction.Enter(self)
    local root = self.bll:GetViewRoot()
    self.touch = GameObjClickUtil.Get(GameObjectUtil.GetComponent(root,"OCX_Root"))
    self.touch:SetDelegate(self)
    self.touch:SetCtrlType(GameObjClickUtil.CtrlType.DRAG)
    self.touch:SetClickType(GameObjClickUtil.ClickType.POS)
    self.touch:SetMoveThresholdDis(10)

    self.dragCameraPosInited = false

    X3DataMgr.Subscribe(X3DataConst.X3Data.CommonGestureOperatedModeData, self.OnDragStateChange, self,
            X3DataConst.X3DataField.CommonGestureOperatedModeData.dragState)
end

function DragingCameraAction:Exit()
    BaseAction.Exit(self)
    self:ClearState(false)
    X3DataMgr.UnsubscribeWithTarget(self)
    self.actorInitDir = nil
    self.camInitDir = nil
end

function DragingCameraAction:OnBeginDrag()
    self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DraggingCamera , true)
    if self.bll:GetActor() and not self:IsRunning() then
        self:Trigger()
    end
end

function DragingCameraAction:OnEndDrag()
    self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DraggingCamera , false)
end

function DragingCameraAction:OnWndFocusChanged(focus)
    if not focus then
        self:ClearActorLookAtDragCamera()
    end
end

---@param data X3Data.CommonGestureOperatedModeData
function DragingCameraAction:OnDragStateChange(data)
    if data:GetDragState() == X3DataConst.CommonGestureOperatedModeDragState.DragEnd then
        if self:IsRunning() then
            self:End()
            local actionData = self:GetActionData()
            EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_TURN_ROUND_CAMERA, {
                Para1 = actionData.Para1, Para2 = actionData.Para2
            })
        end
    end
end

function DragingCameraAction:SetActorLookAtDragCamera()
    local actor = self.bll:GetActor()
    if not actor then
        return
    end
    local cam = GlobalCameraMgr.GetUnityMainCamera()
    local lookAtComp = CharacterMgr.GetSubSystem(actor, CS.X3.Character.ISubsystem.Type.LookAt)
    if lookAtComp then
        lookAtComp:LookAtTarget(cam.transform)
        Debug.Log("[MainHome] action[DragingCameraAction] LookAt Main Camera")
    end
end

function DragingCameraAction:ClearActorLookAtDragCamera()
    local actor = self.bll:GetActor()
    if not actor then
        return
    end

    local lookAtComp = CharacterMgr.GetSubSystem(actor, CS.X3.Character.ISubsystem.Type.LookAt)
    if lookAtComp then
        lookAtComp:LookAtTarget(nil)
        Debug.Log("[MainHome] action[DragingCameraAction] LookAt Null")
    end
end

function DragingCameraAction:OnAddListener()
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_RELEASE_ACTOR,self.OnActorRelease,self)
end

function DragingCameraAction:OnActorRelease()

end

return DragingCameraAction