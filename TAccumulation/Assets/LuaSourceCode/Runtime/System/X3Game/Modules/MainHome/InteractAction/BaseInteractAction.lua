---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/2/23 12:01
---
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
---@type MainHomeBaseCtrl
local BaseCtrl = require(MainHomeConst.BASE_CTRL)
---@class MainHome.BaseInteractAction:MainHomeBaseCtrl
local BaseInteractAction = class("BaseInteractAction", BaseCtrl)
function BaseInteractAction:ctor()
    BaseCtrl.ctor(self)
    ---@type int action 类型
    self.actionType = 0
    ---@type int action的id
    self.actionId = 0
    ---@type cfg.MainUIAction
    self.actionData = nil
    ---@type MainHomeInteractCtrl
    self.owner = nil
    ---是否是忽略状态的
    self.isIgnoreState = false
    ---开启action的相关设置参数
    self.actionParam = nil
    ---结束类型
    self.endType = MainHomeConst.ActionClearType.Exit
    ---储存本地数据使用
    ---@type int
    self.playerId = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    ---@type table<string,string>
    self.saveKeyMap = {}
    ---@type boolean
    self.isWaiting = false
end

--region 表演开始/结束
---表现开始
function BaseInteractAction:Begin()
    self:SetClearType(MainHomeConst.ActionClearType.Exit)
    self:SetIsRunning(true)
end

---表现结束
function BaseInteractAction:End()
    self:ClearBodyState()
    self:SetIsRunning(false)
    self:SetWaiting(false)
end
--endregion

--region 逻辑进入/退出
---逻辑进入
function BaseInteractAction:Enter()
    if self.bll:IsDebugMode() then
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_ACTION_ENTER,self:GetId())
    end
    BaseCtrl.Enter(self)
    self:OnAddListener()
end

---逻辑退出
function BaseInteractAction:Exit()
    if self.bll:IsDebugMode() then
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_ACTION_EXIT,self:GetId())
    end
    self:OnRemoveListener()
    EventMgr.RemoveListenerByTarget(self)
    self.actionData = nil
    self:SetWaiting(false)
    BaseCtrl.Exit(self)
end

--endregion

--region 事件监听/删除
---添加事件
function BaseInteractAction:OnAddListener()

end

---清理事件
function BaseInteractAction:OnRemoveListener()

end
--endregion

--region 互动触发相关/播放剧情
---是否可以触发
function BaseInteractAction:IsCanTrigger()
    return true
end

---触发类型
function BaseInteractAction:Trigger()
    if not self:IsCanTrigger() then
        return
    end
    self.bll:StartAction(self:GetId())
end

---播放剧情
---@param dialogueId int
---@param conversation string
---@param nodeId int
function BaseInteractAction:PlayDialogue(dialogueId, conversation, nodeId)
    if not dialogueId then
        local actionData = self:GetActionData()
        if actionData then
            dialogueId = actionData.ActionDrama
            conversation = actionData.ActionConversation
        end
    end
    if dialogueId and dialogueId ~= 0 then
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_AI_PLAY_ACTION_DIALOGUE, self:GetId(), dialogueId, conversation, nodeId)
    end
end
--endregion

--region 互动相关委托

---暂停
function BaseInteractAction:OnPause()
    
end

--继续
function BaseInteractAction:OnResume()
    
end

---点击男主部位
function BaseInteractAction:OnClickActor(partType)

end

---男主状态刷新
function BaseInteractAction:OnActorStateChanged()
end

---男主切换成功
function BaseInteractAction:OnActorLoadSuccess()
end

---@param mode int
---@param isStateChange boolean 是否是状态刷新了
function BaseInteractAction:OnModeChanged(mode, isStateChange)

end

---@param dialogueId int
---@param conversion string
---@param pipelineKey string
function BaseInteractAction:OnDialogueEnd(dialogueId, conversion, pipelineKey)
    if not self:IsRunning() then
        return
    end
    self:SetClearType(MainHomeConst.ActionClearType.Exit)
    self:End()
end

---主界面focus变化
---@param focus boolean
function BaseInteractAction:OnWndFocusChanged(focus)

end

function BaseInteractAction:OnViewFocusChanged(focus)

end
--endregion

---获取参数
---根据启动action的时候设置的参数，自行获取
function BaseInteractAction:GetActionParam()
    if self.actionParam then
        return table.unpack(self.actionParam)
    end
    return nil
end

---设置参数
---@vararg any
function BaseInteractAction:SetActionParam(...)
    if self.actionParam then
        PoolUtil.ReleaseTable(self.actionParam)
    end
    self.actionParam = { ... }
end

---设置退出类型
---@param clearType ActionClearType
function BaseInteractAction:SetClearType(clearType)
    self.endType = clearType
end

---@return ActionClearType
function BaseInteractAction:GetEndType()
    return self.endType
end

---@param owner MainHomeInteractCtrl
function BaseInteractAction:SetOwner(owner)
    self.owner = owner
end

---设置是否正在执行状态
---@param isRunning boolean
function BaseInteractAction:SetIsRunning(isRunning)
    if self:IsRunning() ~= isRunning then
        self.isRunning = isRunning
        self.owner:SetActionRunning(self:GetId(), isRunning,self:GetEndType())
    else
        if not isRunning then
            self.bll:StopAction(self:GetId())
        end
    end
end

--region 数据相关
---@return cfg.MainUIAction
function BaseInteractAction:GetActionData()
    if not self.actionData then
        self.actionData = self.owner:GetActionCfg(self:GetId())
    end
    return self.actionData
end

---获取存储的key
---@param key string
function BaseInteractAction:GetSaveKey(key)
    if not self.saveKeyMap[key] then
        self.saveKeyMap[key] = string.concat(key,MainHomeConst.SPLIT,self.playerId,MainHomeConst.SPLIT,self:GetId())
    end
    return self.saveKeyMap[key]
end

---设置类型
---@param actionType int
function BaseInteractAction:SetType(actionType)
    self.actionType = actionType
end

---获取当前类型
---@return string
function BaseInteractAction:GetType()
    return self.actionType
end

---获取当前action的id
---@return int
function BaseInteractAction:GetId()
    return self.actionId
end

---设置action id
---@param actionId int
function BaseInteractAction:SetId(actionId)
    self.actionId = actionId
end

---获取男主id
---@return int
function BaseInteractAction:GetActorId()
    return self.bll:GetData():GetActorId()
end

---获取当前剧情id
---@return int
function BaseInteractAction:GetDialogueId()
    local actionData = self:GetActionData()
    if actionData then
        return actionData.ActionDrama
    end
    return 0
end

--endregion

---检测是否running
---@return boolean
function BaseInteractAction:IsRunning()
    local isRunning = BaseCtrl.IsRunning(self)
    if isRunning then
        return isRunning
    end
    return self.bll:IsActionShowRunning(self:GetId())
end

---@return boolean
function BaseInteractAction:IsWaiting()
    return self.isWaiting
end

---@param isWaiting boolean
function BaseInteractAction:SetWaiting(isWaiting)
    if self.isWaiting~=isWaiting then
        self.isWaiting = isWaiting
        if self:GetId() then
            EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_AI_SET_WAITING_SHOW,self:GetId(),isWaiting)
        end
    end
end

---@return boolean
function BaseInteractAction:IsAIRunning()
    return self.bll:IsActionRunning(self:GetId())
end

---是否可以被清理
---@param clearType ActionClearType
---@return boolean
function BaseInteractAction:IsCanClear(clearType)
    if not clearType then
        return false
    end
    if not self:GetActionData() then
        return true
    end
    return self.owner:IsActionCanClear(self:GetId(),clearType)
end

---是否有任意Action正在播放剧情
---@return boolean
function BaseInteractAction:IsActionPlayDialogue()
    return self.bll:IsHandlerRunning(MainHomeConst.HandlerType.ActionDialoguePlaying)
end

---清理男主身上的脸红等特效
function BaseInteractAction:ClearBodyState()
    if not self.isEnter then
        return
    end
    local actionData = self:GetActionData()
    if actionData and actionData.BlushClear == MainHomeConst.ActionBlushClearType.Clear then
        local actor = self.bll:GetActor()
        CharacterCtrlMgr.DestroyByGameObject(actor)
    end
end

return BaseInteractAction