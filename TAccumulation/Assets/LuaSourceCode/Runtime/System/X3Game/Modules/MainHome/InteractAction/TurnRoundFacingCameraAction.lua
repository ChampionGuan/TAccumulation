---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liyan.
--- DateTime: 2023/11/7 16:49
---

local MainHomeConst =  require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")

local BaseAction = require(MainHomeConst.BASE_INTERACT_ACTION)

---@class TurnRoundFacingCameraAction:BaseInteractAction
local TurnRoundFacingCameraAction = class("TurnRoundFacingCameraAction", BaseAction)
local Rad2Deg = CS.UnityEngine.Mathf.Rad2Deg

---相当于 init
function TurnRoundFacingCameraAction:Enter()
    BaseAction.Enter(self)
    self.turnDegree = nil
    self.turnRoundTime = nil

    local roleID = self.bll:GetData():GetRoleId()
    local actorInfo = LuaCfgMgr.Get("MainUIActorInfo", roleID)

    self.turnRoundCD =  actorInfo.TouchRoundCD-- 转身的 CD 时长
    self.turnRoundTotal = actorInfo.TouchRoundNum -- 转身若干次后进入 CD
    self.turnRoundTime = actorInfo.TouchRoundTime -- 转身计数时长

    self.turnRoundBeginCntTime = -1
    self.turnRoundCnt = 0 -- 当前转身的次数
    self.actorInitDir = nil -- 角色初始朝向

    self.isCooling = false -- 是否在转身冷却中

    self.addTurnRoundCnt = true
    self.characterDegree = 0 -- 当前角色的角度
    self.characterDegreeMin = -50
    self.characterDegreeMax = 50

    -- 为了能通过 cts 给注册蓝图回调，需要传一个 Action<string> 的委托
    self.turnRoundCallback = CS.XLuaHelper.CreateActionDelegate(function(evtName)
        if evtName == "ResetTurn" then
            self.isTurnRoundAnimFinished = true
            --CutSceneMgr.Resume()
            self:TurnRoundCtsStop()
            if UNITY_EDITOR then
                local actor = self.bll:GetActor()
                local mainCamera = GlobalCameraMgr.GetUnityMainCamera()
                local chrFwd = actor.transform.forward
                chrFwd = Vector3.Normalize(Vector3.new(chrFwd.x, 0, chrFwd.z))
                local dir = Vector3.Normalize(mainCamera.transform.position - actor.transform.position)
                dir = Vector3.Normalize(Vector3.new(dir.x, 0, dir.z))
                local turnDegree = self:GetDegree(chrFwd, dir)

                Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转身结束，角色与相机之间的夹角：", turnDegree)
            end
        end
    end)
end

function TurnRoundFacingCameraAction:Exit()
    BaseAction.Exit(self)
    if self.timer then
        TimerMgr.Discard(self.timer)
        self.timer = nil
    end
end

function TurnRoundFacingCameraAction:Begin()
    BaseAction.Begin(self)

    local actor = self.bll:GetActor()
    local mainCamera = GlobalCameraMgr.GetUnityMainCamera()

    if actor and mainCamera then
        if not self.x3Animator then
            self.x3Animator = actor:GetComponent(typeof(CS.X3Game.X3Animator))
        end

        local actorPos = actor.transform.position
        local camPos = mainCamera.transform.position
        local chrFwd = actor.transform.forward

        chrFwd = Vector3.Normalize(Vector3.new(chrFwd.x, 0, chrFwd.z))
        local vectorTmp = Vector3.new(camPos.x - actorPos.x, 0, camPos.z - actorPos.z)
        local dir = Vector3.Normalize(vectorTmp)
        local leftPos = self.bll:GetDragCameraLeftPos()
        local rightPos = self.bll:GetDragCameraRightPos()
        vectorTmp = leftPos - actorPos
        vectorTmp.y = 0
        local leftDir = Vector3.Normalize(vectorTmp)
        vectorTmp = rightPos - actorPos
        vectorTmp.y = 0
        local rightDir = Vector3.Normalize(vectorTmp)

        if Vector3.Cross(dir, leftDir).y > 0 then
            self.turnDegree = self:GetDegree(chrFwd, leftDir)
            Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转身超过最大阈值")
        elseif  Vector3.Cross(dir, rightDir).y < 0 then
            self.turnDegree = self:GetDegree(chrFwd, rightDir)
            Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转身超过最大阈值")
        else
            self.turnDegree = self:GetDegree(chrFwd, dir)
        end

        self.turnDegree = math.clamp(self.turnDegree, self.characterDegreeMin - self.characterDegreeMax,self.characterDegreeMax - self.characterDegreeMin)

        local range = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.MAINUITURNROUNDANGLE)

        if self.turnDegree < range.Num and self.turnDegree > range.ID then
            Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转角为 0, 没有没有触发转身")
            self:End()
        else
            self:PlayDialogue()

            if self.addTurnRoundCnt then
                if self.turnRoundBeginCntTime > 0 and TimerMgr.GetCurTimeSeconds() - self.turnRoundBeginCntTime < self.turnRoundTime then
                    self.turnRoundCnt = self.turnRoundCnt + 1
                else
                    self.turnRoundCnt = 1
                    self.turnRoundBeginCntTime = TimerMgr.GetCurTimeSeconds()
                end
            else
                self.addTurnRoundCnt = true
            end

            Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转身次数: ", self.turnRoundCnt)
        end
    else
        self:End()
    end
end

function TurnRoundFacingCameraAction:ClearTurnRoundCnt()
    self.turnRoundCnt = 0
    self.turnRoundBeginCntTime = -1
end

function TurnRoundFacingCameraAction:End()
    BaseAction.End(self)
    local actor = self.bll:GetActor()
    if not actor then
        return
    end

    local lookAtComp = CharacterMgr.GetSubSystem(actor, CS.X3.Character.ISubsystem.Type.LookAt)
    if lookAtComp then
        lookAtComp:LookAtTarget(nil)
        Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] LookAt Null")
    end
end

function TurnRoundFacingCameraAction:OnDialogueEnd()
    self.isDialogueFinished = true
    self:TurnRoundCtsStop()
end

function TurnRoundFacingCameraAction:OnAddListener()
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_TURN_ROUND_CAMERA, self.OnTurnRoundFacingCamera, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_TURN_ROUND_START, self.OnTurnRoundCtsStart, self)
end


function TurnRoundFacingCameraAction:OnTurnRoundCtsStart()
    TimerMgr.AddTimerByFrame(1, self.BeginTurnRound, self, 1)
    self.bll:StopActionByType(MainHomeConst.ActionType.SideCamera)
    self.bll:StopActionByType(MainHomeConst.ActionType.SideCameraDialogue)
end

function TurnRoundFacingCameraAction:BeginTurnRound()
    if not self then
        return
    end

    self.isPlaying = true
    self.isDialogueFinished = false
    self.isTurnRoundAnimFinished = false

    CutSceneMgr.SendEventWithParam("Turn", "TurnDegree", self.turnDegree)
    CutSceneMgr.SendEventWithParam("Turn", "TurnDegree", self.turnRoundCallback) -- 注册蓝图回调

    if self.turnDegree < 0 then
        Debug.LogFormat("[MainHome] action[TurnRoundFacingCameraAction] 左转, 角度: %s", self.turnDegree)
    else
        Debug.LogFormat("[MainHome] action[TurnRoundFacingCameraAction] 右转, 角度: %s", self.turnDegree)
    end
end

--- 对话播完且转身完成，结束当前 Action
function TurnRoundFacingCameraAction:TurnRoundCtsStop()
    --if self.isDialogueFinished and self.isTurnRoundAnimFinished and self.isPlaying then
    if self.isDialogueFinished and self.isPlaying then
        Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] Turn Round Action End")
        self.isPlaying = false
        self.turnRoundTime = TimerMgr.GetCurTimeSeconds()

        if self.turnRoundCnt >= self.turnRoundTotal then
            self.isCooling = true
            self.timer = TimerMgr.AddTimer(self.turnRoundCD, self.TurnRoundCDFinished, self, 1)
            Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 进入转身 CD")
        end

        self:End()
    end
end

function TurnRoundFacingCameraAction:TurnRoundCDFinished()
    if self then
        self.isCooling = false
        self:ClearTurnRoundCnt()
        self:OnTurnRoundFacingCamera()
        TimerMgr.Discard(self.timer)
        self.timer = nil
        self.addTurnRoundCnt = false
        Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转身 CD 结束")
    end
end

function TurnRoundFacingCameraAction:OnTurnRoundFacingCamera(params)

    if self.turnRoundTime then
        local deltaTime = TimerMgr.GetCurTimeSeconds() - self.turnRoundTime

        if params then
            self.characterDegreeMin = params.Para1
            self.characterDegreeMax = params.Para2
        end

        if self.isCooling then
            if deltaTime < self.turnRoundCD then
                self.bll:StartActionByType(MainHomeConst.ActionType.SideCamera)
                self.bll:StartActionByType(MainHomeConst.ActionType.SideCameraDialogue)
                Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] 转身 CD 中")
                return
            end
        end
    end

    self:Trigger()
    Debug.Log("[MainHome] action[TurnRoundFacingCameraAction] Trigger")
end

-- 获取 lhs 和 rhs 的夹角，如果 rhs 在 lhs 的右边，返回值大于 0；如果 rhs 在 lhs 的左边，返回值小于 0
function TurnRoundFacingCameraAction:GetDegree(lhs, rhs)
    local cosTheta = Vector3.Dot(lhs, rhs)
    --if math.abs(cosTheta) > 0.999999 then -- 小于 3 度就返回 0
    --    return 0
    --end
    local rotateAxis = Vector3.Cross(lhs, rhs)
    local right = Vector3.Dot(rotateAxis, Vector3.new(0,1,0)) > 0
    local degree = math.abs(math.acos(math.clamp(cosTheta, -1, 1))) * Rad2Deg
    if not right then
        degree = -degree
    end
    return degree
end

return TurnRoundFacingCameraAction