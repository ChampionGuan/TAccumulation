---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/3/29 17:12
---
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
---@type MainHome.BaseInteractAction
local BaseAction = require(MainHomeConst.BASE_INTERACT_ACTION)
---@class MainHome.DoubleTouchAction:MainHome.BaseInteractAction
local DoubleTouchAction = class("DoubleTouchAction", BaseAction)
function DoubleTouchAction:ctor()
    BaseAction.ctor(self)
    ---@type InputComponent
    self.touchCtrl = nil
    self.maxPercent = 1
    self.minPercent = 0
    self.currentVelocity = 0
    self.smoothTime = 0.06
    self.isMoving = false
    self.percent = 0
    self.targetPercent = 0
    self.timeline=MainHomeConst.CAMERA_FOV_TIME_LINE
    self.thresholdPercent = LuaCfgMgr.Get("SundryConfig",X3_CFG_CONST.MAINUIINTERACTIVENEARTHRESHOLD)
    self.touchType = MainHomeConst.DoubleTouchType.Far
    self.curTouchType = MainHomeConst.DoubleTouchType.None
    self.isMoved = false
end


function DoubleTouchAction:Enter()
    BaseAction.Enter(self)
    self:InitTouch()
end

function DoubleTouchAction:Exit()
    self:ClearTouch()
    BaseAction.Exit(self)
end

function DoubleTouchAction:Begin()
    BaseAction.Begin(self)
end

function DoubleTouchAction:End()
    BaseAction.End(self)
    
    self:Reset()
end

---移动镜头timeline
---@param percent number
function DoubleTouchAction:MoveTimeline(percent)
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_MOVE_TIMELINE,percent,self.timeline)
end

function DoubleTouchAction:OnUpdate()
    if not self:IsRunning() then
        return
    end
    self.percent ,self.currentVelocity= Mathf.SmoothDamp(self.percent,self.targetPercent,self.currentVelocity,self.smoothTime,nil,TimerMgr.GetCurTickDelta())
    if not Mathf.Approximately(self.percent,self.targetPercent) then
        self:MoveTimeline(self.percent)
        self:ChangeCurTouchType(self:CalculateTouchType())
    end
end

---@param touchType MainHomeConst.DoubleTouchType
function DoubleTouchAction:ChangeCurTouchType(touchType)
    if self.curTouchType~=touchType then
        self.curTouchType = touchType
        self.bll:SetCurDoubleTouchType(self.curTouchType)
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_DOUBLE_TOUCH_TYPE_CHANGED,touchType)
    end
end

---计算当前类型
---@return MainHomeConst.DoubleTouchType
function DoubleTouchAction:CalculateTouchType()
    return self.percent<= self.thresholdPercent and MainHomeConst.DoubleTouchType.Far or MainHomeConst.DoubleTouchType.Near
end

function DoubleTouchAction:StartMove()
    if not self:IsRunning() then
        self:Trigger()
    end
end

---@param percent number
function DoubleTouchAction:Move(percent)
    if self:IsRunning() then
        self.isMoved = true
        self.isMoving = true
        self:SetPercent(percent)
        self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DoubleTouchMoving,true)
    end
end

function DoubleTouchAction:EndMove()
    self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DoubleTouchMoving,false)
    self.isMoving = false
    self:SetPercent(0,true)
    self:CheckResType()
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_DOUBLE_TOUCH_END)
end

---双指操作结束，检测最终类型
function DoubleTouchAction:CheckResType()
    local touchType = self.curTouchType
    if touchType~=self.touchType then
        self.touchType = touchType
        if self.touchType == MainHomeConst.DoubleTouchType.Near then
            self.bll:StartActionByType(MainHomeConst.ActionType.TwoFingersNearDialogue)
        else
            self.bll:StartActionByType(MainHomeConst.ActionType.TwoFingersFarDialogue)
        end
    end
end

---设置百分比
---@param delta number 变化量
---@param isForce boolean
function DoubleTouchAction:SetPercent(delta,isForce)
    self.targetPercent = math.clamp( self.targetPercent+delta,self.minPercent,self.maxPercent)
    if isForce then
        self:MoveTimeline(self.targetPercent)
    end
end

function DoubleTouchAction:OnBeginScrollWheel(scrollWheel,delta)
    self:StartMove()
end

---@param scrollWheel number
---@param delta
function DoubleTouchAction:OnScrollWheel(scrollWheel,delta)
    self:Move(scrollWheel)
end

function DoubleTouchAction:OnEndScrollWheel(scrollWheel,delta)
    self:EndMove()
end

---开始双指缩放
---@param delta number 变化量
---@param scale number 相对于按下时的缩放量
function DoubleTouchAction:OnBeginDoubleTouchScale(delta,scale)
    self:StartMove()
end

function DoubleTouchAction:OnDoubleTouchScale(delta,scale)
    self:Move(delta)
end

function DoubleTouchAction:OnEndDoubleTouchScale(delta,scale)
    self:EndMove()
end

---初始化点击
function DoubleTouchAction:InitTouch()
    if not self.touchCtrl then
        local root = self.bll:GetViewRoot()
        local interact = GameObjectUtil.GetComponent(root,"OCX_Interact")
        self.touchCtrl = GameObjClickUtil.Get(interact)
        self.touchCtrl:SetCtrlType(GameObjClickUtil.CtrlType.MULTI_TOUCH | GameObjClickUtil.CtrlType.MOUSE_SCROLL)
        self.touchCtrl:SetClickType(GameObjClickUtil.ClickType.POS)
    end
    self.touchCtrl:SetTouchEnable(true)
    self.touchCtrl:SetDelegate(self)
end

---清理点击
function DoubleTouchAction:ClearTouch()
    if self.touchCtrl then
        self.touchCtrl:SetDelegate(nil)
        self.touchCtrl:SetTouchEnable(false)
    end
    self:Reset()
end

---重置移动参数
function DoubleTouchAction:Reset()
    self.touchType = MainHomeConst.DoubleTouchType.Far
    self.bll:SetCurDoubleTouchType(self.touchType)
    self.percent = 0
    self.targetPercent = 0
    self.currentVelocity = 0
    if self.isMoved then
        self:MoveTimeline(self.percent)
    end
    self.isMoved = false
    self.isMoving = false
    self.bll:SetHandlerRunning(MainHomeConst.HandlerType.DoubleTouchMoving,false)
end

return DoubleTouchAction