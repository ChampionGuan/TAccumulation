---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/3/5 10:54
---
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
---@type MainHome.BaseInteractAction
local BaseAction = require(MainHomeConst.BASE_INTERACT_ACTION)
---@class MainHome.InteractUIAction:MainHome.BaseInteractAction
local InteractUIAction = class("InteractUIAction", BaseAction)

function InteractUIAction:Begin()
    BaseAction.Begin(self)
    if self:GetType() == MainHomeConst.ActionType.ShowInteractiveUI then
        if not self.bll:GetInterActive() then
            EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_AI_SEND_REQUEST,MainHomeConst.NetworkType.SET_INTERACTIVE_ENABLE , true)
        end
        self.bll:SetMode(MainHomeConst.ModeType.INTERACT)
    end

    self.bll:SendMsgToGuide(MainHomeConst.CHECK_GUIDE)
    EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_AI_CHANGE_VIEW, 0, self.bll:GetMode() == MainHomeConst.ModeType.NORMAL and MainHomeConst.ViewType.MainHome or MainHomeConst.ViewType.Interact)
    
    if self:GetType() == MainHomeConst.ActionType.HideInteractiveUI then
        if self.bll:GetInterActive() then
            EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_AI_SEND_REQUEST,MainHomeConst.NetworkType.SET_INTERACTIVE_ENABLE , false)
        else
            TimerMgr.AddTimerByFrame(1, function()
                EventMgr.Dispatch("MainUISetActiveReply")
            end, self, 1, TimerMgr.UpdateType.LATE_UPDATE)
        end
        local roleId = self.bll:GetData():GetRoleId()
        BllMgr.GetMainInteractBLL():RefreshInteractRedState(roleId)
        BllMgr.GetMainInteractBLL():RefreshRed(roleId)
        self:End()
    end
end

function InteractUIAction:End()
    BaseAction.End(self)
end

function InteractUIAction:OnModeChanged(mode)
    local actionType = self:GetType()
    if mode == MainHomeConst.ModeType.INTERACT then
        if actionType == MainHomeConst.ActionType.ShowInteractiveUI then
            if not self:IsRunning() then
                self:Trigger()
            end
        else
            self:End()
        end
    elseif mode == MainHomeConst.ModeType.NORMAL then
        if actionType == MainHomeConst.ActionType.HideInteractiveUI then
            self:Trigger()
        else
            self:End()
        end
    end
end

function InteractUIAction:IsCanTrigger()
    if self:GetType() == MainHomeConst.ActionType.ShowInteractiveUI then
        if not self.bll:IsActorExist() then
            UICommonUtil.ShowMessage(MainHomeConst.MAN_OUT_TIPS)
            return false
        end
    end
    return true
end

function InteractUIAction:IsCanClear(clearType)
    return clearType == MainHomeConst.ActionClearType.ALL or clearType == MainHomeConst.ActionClearType.Exit
end
return InteractUIAction