---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianxin.
--- DateTime: 2022/7/6 16:48
---

--[[
  用于处理Message的多长时间不再提示功能
]]--
---@class CheckMessageBox
local CheckMessageBox = class("CheckMessageBox")

local prefsKey = "CHECKMESSAGEBOX"

function CheckMessageBox:Init()
    self.messageBoxID = 0
    ---设置登录选项的储存值
    local checkCfgData = LuaCfgMgr.GetAll("Confirmation")
    for k, v in pairs(checkCfgData) do
        local timeTypeData = LuaCfgMgr.Get("TimeType", v.TimeType)
        local prefsKey = string.concat(prefsKey, tostring(v.ID), tostring(timeTypeData.ID))
        if timeTypeData.Time == -1 then
            PlayerPrefs.SetBool(prefsKey, false)
        end
    end
end

---@param checkConst int ConfirmationID
---@param content string|number 文本id或者文本内容 默认空字符串
---@param data _btn_param [] 数据列表 {{btn_type,btn_call,btn_text,is_auto_close}}
---@param auto_close_mode AutoCloseMode 是否允许点击空白关闭界面（默认是不处理）:（根据策划潜规则：1 没有按钮列表的默认是点击空白关闭，2 针对单个按钮的也是默认关闭并相应对应回调 ）
---@param auto_close_click_type GameConst.MessageBoxBtnType 点击空白关闭界面之后回调类型
---@param is_replace boolean (true:替换当前栈,界面关闭之后不再恢复当前栈,false:不替换当前栈,直接入栈,等界面关闭之后恢复当前栈)
---@return int
function CheckMessageBox:OpenCheckMessageBox(checkConst, content, data, auto_close_mode, auto_close_click_type, is_replace, ...)
    local finishCallBack = nil
    for i, v in ipairs(data) do
        if v.btn_type == GameConst.MessageBoxBtnType.CONFIRM then
            finishCallBack = v.btn_call
            break
        end
    end
    local checkCfgData = LuaCfgMgr.Get("Confirmation", checkConst)
    local timeTypeData = LuaCfgMgr.Get("TimeType", checkCfgData.TimeType)
    local prefsKey = string.concat(prefsKey, tostring(checkCfgData.ID), tostring(timeTypeData.ID))
    local isJump = nil
    if timeTypeData.Time == -1 then
        ---本次登录不提醒
        isJump = PlayerPrefs.GetBool(prefsKey, false)
    elseif timeTypeData.Time == 0 then
        ---永久不提醒
        isJump = PlayerPrefs.GetBool(prefsKey, false)
    else
        ---对应天数提醒
        local value = PlayerPrefs.GetInt(prefsKey, 0)
        isJump = value ~= 0 and TimerMgr.GetCurTimeSeconds() - (timeTypeData.Time * (3600 * 24)) > value
    end
    if isJump then
        if finishCallBack ~= nil then
            finishCallBack()
        end
    else
        local checkData = {
            btn_type = GameConst.MessageBoxBtnType.CHECKBOX,
            btn_call = handler(self, self.ToggleValueChange),
            btn_const = checkConst,
            btn_text = UITextHelper.GetUIText(timeTypeData.Desc),
            toggle_value = isJump
        }
        data[#data + 1] = checkData
        self.messageBoxID = UICommonUtil.ShowMessageBox(content, data, auto_close_mode, auto_close_click_type, is_replace, ...)
    end
    return self.messageBoxID
end

function CheckMessageBox:ToggleValueChange(checkConst, value)
    if value then
        local checkCfgData = LuaCfgMgr.Get("Confirmation", checkConst)
        local timeTypeData = LuaCfgMgr.Get("TimeType", checkCfgData.TimeType)
        local prefsKey = string.concat(prefsKey, tostring(checkCfgData.ID), tostring(timeTypeData.ID))
        if timeTypeData.Time == -1 then
            PlayerPrefs.SetBool(prefsKey, true)
        elseif timeTypeData.Time == 0 then
            PlayerPrefs.SetBool(prefsKey, true)
        else
            PlayerPrefs.SetBool(prefsKey, TimerMgr.GetCurTimeSeconds())
        end
    end
end

CheckMessageBox:Init()

return CheckMessageBox