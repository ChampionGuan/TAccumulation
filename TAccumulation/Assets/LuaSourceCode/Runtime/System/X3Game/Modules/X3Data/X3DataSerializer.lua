---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2022/11/23 10:41
---

---@class X3DataSerializer
local X3DataSerializer = {}
---- Local 常量 ----
local X3DataBytesPath = "Assets/Build/Res/GameObjectRes/BasicWidget/X3Data.bytes"
local X3DataSerializeFolderPath = string.concat(CS.UnityEngine.Application.persistentDataPath, "/X3Data/")
---- Local 变量 ----
---@type X3DataSet
local X3DataSet
---@type X3DataPool
local X3DataPool
local X3DataPbc
---- Local 方法 ----
local GetPbc
local SaveProtoStrToData
local LoadDataFromPath
if not JsonUtil then
    require("Runtime.Common.Utils.JsonUtil")
end

---@param x3DataSet X3DataSet
function X3DataSerializer.InjectX3DataSetModule(x3DataSet)
    X3DataSet = x3DataSet
end

---@param x3DataPool X3DataPool
function X3DataSerializer.InjectX3DataPoolModule(x3DataPool)
    X3DataPool = x3DataPool
end

---导出目前X3DataSet的proto的bytes
---@param fileName string 文件名称，默认是 'X3DataSet'
function X3DataSerializer.EncodeX3DataSet(fileName)
    if string.isnilorempty(fileName) then
        fileName = nil
    end

    local timeStamp = string.format("%s-Frame(%s)", os.date("%Y-%m-%d-%H-%M-%S", os.time()),
            TimerMgr.GetFrameCount())
    fileName = fileName or timeStamp
    --local pbc = GetPbc()
    local result = PoolUtil.GetTable()
    X3DataSet:Encode(result)
    --local protoStr = pbc.encode('X3Data.X3DataSet', result)
    local protoStr = JsonUtil.Encode(result)
    SaveProtoStrToData(protoStr.concat(X3DataSerializeFolderPath, string.format("%s.data", fileName)), protoStr)

    --清理result
    for _, typeResult in pairs(result) do
        for _, dataResult in ipairs(typeResult) do
            PoolUtil.ReleaseTable(dataResult)
        end
        PoolUtil.ReleaseTable(typeResult)
    end
    PoolUtil.ReleaseTable(result)
    Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr.EncodeX3DataSet 成功！！！")
    return fileName
end

function X3DataSerializer.GetX3DataSetEncodeStr()
    --local pbc = GetPbc()
    local result = PoolUtil.GetTable()
    X3DataSet:Encode(result)
    --local protoStr = pbc.encode('X3Data.X3DataSet', result)
    local protoStr = JsonUtil.Encode(result)
    --清理result
    for _, typeResult in pairs(result) do
        for _, dataResult in ipairs(typeResult) do
            PoolUtil.ReleaseTable(dataResult)
        end
        PoolUtil.ReleaseTable(typeResult)
    end
    PoolUtil.ReleaseTable(result)
    Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr.GetX3DataSetEncodeStr 成功！！！")
    return protoStr
end

---导出目前X3DataSet的proto的bytes并允许筛选
---@param fileName string 文件名称，默认是 时间+帧号
---@vararg string
function X3DataSerializer.EncodeX3DataSetWithTypeArray(fileName, ...)
    if string.isnilorempty(fileName) then
        fileName = nil
    end
    
    local typeArray = { ... }
    local timeStamp = string.format("%s-Frame(%s)", os.date("%Y-%m-%d-%H-%M-%S", os.time()),
            TimerMgr.GetFrameCount())
    fileName = fileName or timeStamp
    --local pbc = GetPbc()
    local result = PoolUtil.GetTable()
    --当没有指定类型的时候就进行全量导出
    if not table.isnilorempty(typeArray) then
        X3DataSet:EncodeWithTypeArray(result, typeArray)
    else
        X3DataSet:Encode(result)
    end

    --local protoStr = pbc.encode('X3Data.X3DataSet', result)
    local protoStr = JsonUtil.Encode(result)
    SaveProtoStrToData(protoStr.concat(X3DataSerializeFolderPath, string.format("%s.data", fileName)), protoStr)

    --清理result
    for _, typeResult in pairs(result) do
        for _, dataResult in ipairs(typeResult) do
            PoolUtil.ReleaseTable(dataResult)
        end
        PoolUtil.ReleaseTable(typeResult)
    end
    PoolUtil.ReleaseTable(result)
    Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr.EncodeX3DataSetWithTypeArray 成功！！！")
    return protoStr
end

function X3DataSerializer.GetX3DataSetEncodeStrWithTypeArray(...)
    local typeArray = { ... }
    --local pbc = GetPbc()
    local result = PoolUtil.GetTable()
    --当没有指定类型的时候就进行全量导出
    if not table.isnilorempty(typeArray) then
        X3DataSet:EncodeWithTypeArray(result, typeArray)
    else
        X3DataSet:Encode(result)
    end
    
    --local protoStr = pbc.encode('X3Data.X3DataSet', result)
    local protoStr = JsonUtil.Encode(result)
    --清理result
    for _, typeResult in pairs(result) do
        for _, dataResult in ipairs(typeResult) do
            PoolUtil.ReleaseTable(dataResult)
        end
        PoolUtil.ReleaseTable(typeResult)
    end
    
    PoolUtil.ReleaseTable(result)
    Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr.GetX3DataSetEncodeStr 成功！！！")
    return protoStr
end

---@param fileName string 文件名称，默认是 'X3DataSet'
function X3DataSerializer.DecodeIntoX3DataSet(fileName)
    if string.isnilorempty(fileName) then
        return
    end

    local protoStr = LoadDataFromPath(string.concat(X3DataSerializeFolderPath, string.format("%s.data", fileName)))
    if string.isnilorempty(protoStr) then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr.DecodeIntoX3DataSet 失败，找不到%s.data！！！", fileName)
        return
    end

    --local pbc = GetPbc()
    --local x3DataSetSource = pbc.decode('X3Data.X3DataSet', protoStr, {})
    local x3DataSetSource = JsonUtil.Decode(protoStr)
    local releaseArray = PoolUtil.GetTable()
    X3DataSet:Decode(x3DataSetSource, releaseArray)
    for _, x3Data in ipairs(releaseArray) do
        X3DataPool.Release(x3Data)
    end
    PoolUtil.ReleaseTable(releaseArray)
    Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3DataMgr.DecodeIntoX3DataSet 成功！！！")
end

---用于初始化和获取pbc，延迟初始化的时间，防止GrpcMgr的pbc clear了X3Data的格式文本
---@return userdata pbc
GetPbc = function()
    if X3DataPbc == nil then
        X3DataPbc = require "pb"
        local buffer = CS.PapeGames.X3.Res.LoadBytes(X3DataBytesPath)
        if X3DataPbc.load(buffer) then
            Debug.LogWithTag(GameConst.LogTag.X3DataSys, "X3Data.data Load 成功！！！")
        else
            Debug.LogErrorWithTag(GameConst.LogTag.X3DataSys, "X3Data.data Load 失败！！！")
        end
    end
    return X3DataPbc
end

---将proto导出成本地.data文件
---@param path string
---@param protoStr string
SaveProtoStrToData = function(path, protoStr)
    -- 创建文件夹
    if CS.PapeGames.X3.FileUtility.MakePathDir(X3DataSerializeFolderPath) then
        CS.PapeGames.X3.FileUtility.WriteText(path, protoStr)
    end
end

---从本地读取导出的.data文件
---@param path string
---@return string
LoadDataFromPath = function(path)
    local protoStr = CS.PapeGames.X3.FileUtility.ReadText(path)
    return protoStr
end

function X3DataSerializer:Clear()
end

return X3DataSerializer