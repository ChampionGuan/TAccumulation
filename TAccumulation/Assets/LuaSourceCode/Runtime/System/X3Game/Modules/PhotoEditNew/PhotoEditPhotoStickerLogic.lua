---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/7/12 11:27
---

---单张贴纸的逻辑 ----------- 贴纸和照片目前存在部分差异，使用同个logic叠加需求容易混淆，先分开
local PurikuraConstNew = require "Runtime.System.X3Game.Modules.PurikuraNew.PurikuraConstNew"

---@class PhotoEditPhotoStickerLogic
local PhotoEditPhotoStickerLogic = class("PhotoEditPhotoStickerLogic")

function PhotoEditPhotoStickerLogic:ctor()
    self.inRotateState = false
    self.rotateStateCenter = nil
    self.scale = 1
    self.rotation = nil
    self.isFlip = false
    self.stickerId = nil
    -----------用于按住缩放按钮的形变计算
    self.halfDiagonal = nil
    self.isSelect = false
    self.pos = nil
    self.parentId = nil
    self.id = nil

    self.maxScale = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHOTOSTICKERSCALEMAX) / 100
    self.minScale = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHOTOSTICKERSCALEMIN) / 100

    --self.screenSize = CS.X3Game.CameraUtility.GetScreenSize()

    --self.nativeSize = nil
end

---按照快照数据恢复状态
function PhotoEditPhotoStickerLogic:SetMementoData(data)
    if(data.scale ~= self.scale) then
        self.scale = data.scale
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemScale, self.parentId, self.id, self.scale)
    end

    if(not self.pos) or (data.pos.x ~= self.pos.x) and (data.pos.y ~= self.pos.y) then
        self.pos = {x = data.pos.x, y = data.pos.y}
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMove, self.parentId, self.id, self.pos)
    end

    if(data.rotation ~= self.rotation) then
        self.rotation = data.rotation
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemRotate, self.parentId, self.id, self.rotation)
    end
    if(data.isFlip ~= self.isFlip) then
        self.isFlip = data.isFlip
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemFlip, self.parentId, self.id, self.isFlip)
    end
    self.stickerId = data.stickerId

    self.halfDiagonal = data.halfDiagonal
end

---初始化
---@param stickerId int 贴纸配置ID
---@param parentId int 归属的逻辑类ID
---@param stickerIndex int 贴纸逻辑ID
function PhotoEditPhotoStickerLogic:Init(stickerId, parentId, stickerIndex, moveMin, moveMax)
    --self.pos = { x = 0, y = 0 }
    self.id = stickerIndex
    self.parentId = parentId
    self.moveMin = moveMin
    self.moveMax = moveMax
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoStickerCreate, parentId, stickerIndex, stickerId)
end

---根据已有数据初始化
---@param stickerId int 贴纸配置ID
---@param parentId int 归属的逻辑类ID
---@param stickerIndex int 贴纸逻辑ID
function PhotoEditPhotoStickerLogic:InitWithExData(parentId, stickerIndex, exData, moveMin, moveMax)
    self.id = stickerIndex
    self.parentId = parentId
    self.moveMin = moveMin
    self.moveMax = moveMax
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoStickerCopy, parentId, stickerIndex, exData)
    self:SetMementoData(exData)
end

---这里不能直接按配置设置数据，还是需要UI传递
function PhotoEditPhotoStickerLogic:InitWithConfig(parentId, stickerIndex, config, moveMin, moveMax)
    self.id = stickerIndex
    self.parentId = parentId
    self.moveMin = moveMin
    self.moveMax = moveMax
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoStickerCreate, parentId, stickerIndex, config.StickerID, config)

end

---设置数据
function PhotoEditPhotoStickerLogic:InitData(data)
    self.pos = { x = data.pos.x, y = data.pos.y }
    --self.nativeSize = { x = data.nativeSize.x, y = data.nativeSize.y }
    self.rotation = data.rotation
    self.halfDiagonal = data.halfDiagonal
    self.isFlip = data.isFlip
    self.stickerId = data.stickerId or self.stickerId
end

---需要一个设置属性接口--因为部分数据仅存在表格里，且为局部坐标系
function PhotoEditPhotoStickerLogic:SetStickerItemData(data)
    if (data.pos) then
        self.pos = { x = data.pos.x, y = data.pos.y }
    end
    if (data.rotation) then
        self.rotation = data.rotation
    end
    if (data.scale) then
        self.scale = data.scale
    end
end

---获取快照数据
function PhotoEditPhotoStickerLogic:GetData()
    local data = {}
    data.pos = {x = self.pos.x, y = self.pos.y}
    data.isSelect = self.isSelect
    data.scale = self.scale
    data.rotation = self.rotation
    data.halfDiagonal = self.halfDiagonal
    data.isFlip = self.isFlip
    data.stickerId = self.stickerId
    data.id = self.id
    data.parentId = self.parentId
    return data
end

---拖动接口
function PhotoEditPhotoStickerLogic:OnDrag(deltaPos, pos)
    if (self.inRotateState) then
        if (not self.rotateStateCenter) then
            self.rotateStateCenter = self.pos
        end
        self:OnScaleByDistance(pos)
        self:OnRotationByDistance(deltaPos, pos)
    else
        local resultX = self.pos.x + deltaPos.x
        local resultY = self.pos.y + deltaPos.y
        if((resultX > self.moveMin.x and resultY > self.moveMin.y )and (resultX < self.moveMax.x and resultY < self.moveMax.y)) then
            self.pos.x = resultX
            self.pos.y = resultY
            EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMove, self.parentId, self.id, self.pos)
        end
    end
end

---设置初始位置
---@param pos table 位置数据
function PhotoEditPhotoStickerLogic:SetStartPos(pos)
    self.pos.x = pos.x
    self.pos.y = pos.y
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMove, self.parentId, self.id, self.pos)
end

---按住缩放按钮的缩放
---@param pos table 位置数据
function PhotoEditPhotoStickerLogic:OnScaleByDistance(pos)
    local curDis = Vector2.Distance(pos, self.rotateStateCenter)
    local curScale = curDis / self.halfDiagonal

    if curScale < self.minScale or curScale > self.maxScale then
        return
    end

    self.scale = curScale
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemScale, self.parentId, self.id, self.scale)
end

---按住缩放按钮进行的旋转
---@param deltaPos
---@param pos table 当前屏幕坐标
function PhotoEditPhotoStickerLogic:OnRotationByDistance(deltaPos, pos)
    local directionToX = self.pos.x - pos.x
    local directionToY = self.pos.y - pos.y
    --local dirFromX = directionToX - deltaPos.x
    --local dirFromY = directionToY - deltaPos.y

    local from_v3 = Vector3.new(directionToX - deltaPos.x, directionToY - deltaPos.y, 0)
    local to_v3 = Vector3.new(directionToX * 2, directionToY * 2, 0)
    local rotationQua = CS.UnityEngine.Quaternion.FromToRotation(to_v3, from_v3)
    local result = self.rotation * rotationQua
    self.rotation = result
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemRotate, self.parentId, self.id, result)

end
function PhotoEditPhotoStickerLogic:SwitchFlipState()
    self.isFlip = not self.isFlip
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemFlip, self.parentId, self.id, self.isFlip)

end

---选中时
function PhotoEditPhotoStickerLogic:OnSelect()
    self.isSelect = true
end

--取消选中时
function PhotoEditPhotoStickerLogic:UnSelect()
    self.isSelect = false
end

---形变
---@param delta int 形变值
function PhotoEditPhotoStickerLogic:OnScale(delta)
    local result = self.scale + delta
    if result < self.minScale or result > self.maxScale then
        return
    end
    self.scale = result
    EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemScale, self.parentId, self.id, self.scale)
end

---获取当前旋转值
---@return Quaternion
function PhotoEditPhotoStickerLogic:GetRotation()
    return self.rotation
end

---获取贴纸配置ID
function PhotoEditPhotoStickerLogic:GetConfigId()
    return self.stickerId
end

---切换贴纸是否在按住旋转状态
---@param state bool 是否在按住状态
function PhotoEditPhotoStickerLogic:SwitchRotateState(state)
    self.inRotateState = state
    if (not state) then
        self.rotateStateCenter = nil
    end
end

return PhotoEditPhotoStickerLogic