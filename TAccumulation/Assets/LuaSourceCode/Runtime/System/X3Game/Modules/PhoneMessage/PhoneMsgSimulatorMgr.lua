---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/11/28 16:39
---@class PhoneMsgSimulatorMgr
local PhoneMsgSimulatorMgr = class("PhoneMsgSimulatorMgr")
---@type PhoneMsgContactSimulator
local PhoneMsgContactSimulator = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgContactSimulator")
local PhoneMsgConst = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgConst")
---@type PhoneLocalMsgDetailSimulator
local PhoneLocalMsgDetailSimulator = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneLocalMsgDetailSimulator")

function PhoneMsgSimulatorMgr:ctor()
    self.isInit = false
    ---@type table<int, PhoneMsgContactSimulator>
    self.contactDict = {}
    ---@type PhoneMsgContactSimulator[]
    self.contactList = {}
    ---@type table<int, PhoneLocalMsgDetailSimulator>
    self.localSimDict = {}
    self.updateTimer = nil
    EventMgr.AddListener("RoleUpdateReply", self.OnRoleUpdate, self)
    EventMgr.AddListener("UpdateRoleLoveDataReply", self.OnRoleUpdate, self)
    EventMgr.AddListener("UnLockSystem", self.OnUnLockSystem, self)
end

function PhoneMsgSimulatorMgr:Start()
    if not self.isInit then
        self.isInit = true

        local contactList = BllMgr.GetMobileContactBLL():GetAllContact()
        if contactList == nil then
            return
        end

        for _, v in pairs(contactList) do
            self:AddContact(v:GetPrimaryValue())
        end
        if SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_MESSAGE) and SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_PHONE) then
            self.updateTimer = TimerMgr.AddTimer(0, self.Update, self, true)
        end
    end
end

function PhoneMsgSimulatorMgr:OnUnLockSystem(id)
    if id == X3_CFG_CONST.SYSTEM_UNLOCK_MESSAGE or id == X3_CFG_CONST.SYSTEM_UNLOCK_PHONE then
        if self.updateTimer == nil and SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_MESSAGE) and SysUnLock.IsUnLock(X3_CFG_CONST.SYSTEM_UNLOCK_PHONE) then
            self.updateTimer = TimerMgr.AddTimer(0, self.Update, self, true)
        end
    end
end

function PhoneMsgSimulatorMgr:AddContact(contactId)
    local cfg = LuaCfgMgr.Get("PhoneContact", contactId)
    if cfg == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.PhoneMsg, "非法联系Id = %d", contactId)
        return
    end

    if not self.isInit or self.contactDict[contactId] ~= nil then
        return
    end

    self.contactDict[contactId] = PhoneMsgContactSimulator.new()
    self.contactDict[contactId]:InitContact(contactId)

    table.insert(self.contactList, self.contactDict[contactId])
    self:_Sort()
end

function PhoneMsgSimulatorMgr:CheckActive(newId)
    for i = 1, #self.contactList do
        self.contactList[i]:CheckActive(newId)
    end
end

function PhoneMsgSimulatorMgr:ActiveMsg(contactId, msgGUID)
    if self.contactDict[contactId] ~= nil then
        self.contactDict[contactId]:ActiveMsg(msgGUID)
    else
        Debug.LogErrorFormat("联系人未解锁")
    end
end

function PhoneMsgSimulatorMgr:FinishMsg(contactId)
    if self.contactDict[contactId] ~= nil then
        self.contactDict[contactId]:FinishMsg()
    else
        Debug.LogErrorFormat("联系人未解锁")
    end
end

function PhoneMsgSimulatorMgr:IsWaitingForFinish(contactId)
    if self.contactDict[contactId] ~= nil then
        return self.contactDict[contactId]:IsWaitingForFinish()
    end
end

function PhoneMsgSimulatorMgr:ReceiveHeadUpdate(contactId)
    contactId = contactId or self:GetContactId()
    if self.contactDict[contactId] ~= nil then
        self.contactDict[contactId]:ReceiveHeadUpdate()
    else
        Debug.LogErrorFormat("联系人未解锁")
    end
end

function PhoneMsgSimulatorMgr:UpdateMsg(contactId, msgGUId, convId)
    contactId = contactId or self:GetContactId(msgGUId)
    if self.contactDict[contactId] ~= nil then
        self.contactDict[contactId]:UpdateMsg(msgGUId, convId)
    else
        Debug.LogErrorFormat("联系人未解锁")
    end
end

function PhoneMsgSimulatorMgr:OnRoleUpdate()
    self:_Sort()
    for i = 1, #self.contactList do
        self.contactList[i]:CheckNextNudge()
    end
end

function PhoneMsgSimulatorMgr:Update()
    local curTime = TimerMgr.RealtimeSinceStartup()
    for i = 1, #self.contactList do
        self.contactList[i]:Update(curTime)
    end
    for _,v in pairs(self.localSimDict) do
        v:Update(curTime)
    end
end

---@return X3Data.PhoneMsgConversationData[]
function PhoneMsgSimulatorMgr:GetConversationList(contactId)
    if self.contactDict[contactId] then
        return self.contactDict[contactId]:GetConversationList()
    end
end

function PhoneMsgSimulatorMgr:ReadAll(contactId)
    if self.contactDict[contactId] then
        return self.contactDict[contactId]:ReadAll(PhoneMsgConst.PlayerTellerId)
    end
end

function PhoneMsgSimulatorMgr:ReadConversation(contactId, uid)
    if self.contactDict[contactId] then
        return self.contactDict[contactId]:ReadConversation(uid, PhoneMsgConst.PlayerTellerId)
    end
end

function PhoneMsgSimulatorMgr:CheckNextNudge(contactId)
    if self.contactDict[contactId] then
        return self.contactDict[contactId]:CheckNextNudge()
    end
end

function PhoneMsgSimulatorMgr:SetIsWaitingForReply(contactId, isWaiting)
    if self.contactDict[contactId] then
        self.contactDict[contactId]:SetIsWaitingForReply(isWaiting)
    end
end

function PhoneMsgSimulatorMgr:IsWaitingForReply(contactId)
    if self.contactDict[contactId] then
        return self.contactDict[contactId]:IsWaitingForReply()
    end
end
--region local msg


function PhoneMsgSimulatorMgr:StartLocalMsg(contactId, cfgId)
    if self.localSimDict[contactId] == nil then
        self.localSimDict[contactId] = PhoneLocalMsgDetailSimulator.new()
        self.localSimDict[contactId]:SetContactId(contactId)
    end
    self.localSimDict[contactId]:StartMsg(cfgId)
end

function PhoneMsgSimulatorMgr:FinishLocalMsg(contactId)
    if self.localSimDict[contactId] ~= nil then
        self.localSimDict[contactId]:FinishMsg()
    else
        Debug.LogErrorFormat("无初始化本地短信模拟器")
    end
end

function PhoneMsgSimulatorMgr:UpdateLocalMsg(contactId, convId)
    if self.localSimDict[contactId] ~= nil then
        self.localSimDict[contactId]:UpdateMsg(convId)
    else
        Debug.LogErrorFormat("无初始化本地短信模拟器")
    end
end

---@return X3Data.PhoneMsgConversationData[]
function PhoneMsgSimulatorMgr:GetLocalConversationList(contactId)
    if self.localSimDict[contactId] ~= nil then
        return self.localSimDict[contactId]:GetConversationList()
    else
        Debug.LogErrorFormat("无初始化本地短信模拟器")
        return nil
    end
end

function PhoneMsgSimulatorMgr:LocalReadAll(contactId)
    if self.localSimDict[contactId] ~= nil then
        return self.localSimDict[contactId]:ReadAll(PhoneMsgConst.PlayerTellerId)
    else
        Debug.LogErrorFormat("无初始化本地短信模拟器")
    end
end

function PhoneMsgSimulatorMgr:LocalReadConversation(contactId, uid)
    if self.localSimDict[contactId] ~= nil then
        return self.localSimDict[contactId]:ReadConversation(uid, PhoneMsgConst.PlayerTellerId)
    else
        Debug.LogErrorFormat("无初始化本地短信模拟器")
    end
end

function PhoneMsgSimulatorMgr:LocalMsgIsWaitingForFinish(contactId)
    if self.localSimDict[contactId] ~= nil then
        return self.localSimDict[contactId]:IsWaitingForFinish()
    else
        Debug.LogErrorFormat("无初始化本地短信模拟器")
    end
end
--endregion

function PhoneMsgSimulatorMgr:_Sort()
    table.sort(self.contactList, function(a, b)
        ---@type cfg.PhoneContact
        local cfgA = LuaCfgMgr.Get("PhoneContact", a:GetContactId())
        ---@type cfg.PhoneContact
        local cfgB = LuaCfgMgr.Get("PhoneContact", b:GetContactId())
        local roleInfoA = BllMgr.GetRoleBLL():GetRole(cfgA.Mantype)
        local roleInfoB = BllMgr.GetRoleBLL():GetRole(cfgB.Mantype)

        local lovePointA = roleInfoA and roleInfoA.LovePoint or -1
        local lovePointB = roleInfoB and roleInfoB.LovePoint or -1
        if lovePointA == lovePointB then
            return cfgA.ID < cfgB.ID
        else
            return lovePointA > lovePointB
        end
    end)
end

function PhoneMsgSimulatorMgr:OnClear()
    if self.contactList then
        for i = 1, #self.contactList do
            self.contactList[i]:OnClear()
        end
    end

    self.isInit = false
    ---@type table<int, PhoneMsgContactSimulator>
    self.contactDict = {}
    ---@type PhoneMsgContactSimulator[]
    self.contactList = {}
    self.localSimDict = {}
    if self.updateTimer then
        TimerMgr.Discard(self.updateTimer)
    end
    self.updateTimer = nil
    EventMgr.RemoveListener("RoleUpdateReply", self.OnRoleUpdate, self)
    EventMgr.RemoveListener("UpdateRoleLoveDataReply", self.OnRoleUpdate, self)
end

return PhoneMsgSimulatorMgr