---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/11/28 15:00
---@class PhoneMsgContactSimulator
local PhoneMsgContactSimulator = class("PhoneMsgContactSimulator")
---@type PhoneMsgDetailSimulator
local PhoneMsgDetailSimulator = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgDetailSimulator")
local PhoneMsgConst = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgConst")

function PhoneMsgContactSimulator:ctor()
    self.contactId = nil
    self.waitingForActive = false
    self.waitingForReply = false
    self.waitingMsg = 0
    self.activeTime = 0
    self.msgSimulator = PhoneMsgDetailSimulator.new()
    self.needCheckActive = false
end

function PhoneMsgContactSimulator:InitContact(contactId)
    self.contactId = contactId
    self.msgSimulator:SetContactId(contactId)
    local contactData = SelfProxyFactory.GetPhoneMsgProxy():GetContactData(contactId)

    if contactData and contactData:GetCurMsgID() ~= 0 then
        self.msgSimulator:StartMsg(contactData:GetCurMsgID(), true)
        SelfProxyFactory.GetPhoneMsgProxy():SetNewTopicRedState(self.contactId, false)
    end
    self:CheckActive()
end

function PhoneMsgContactSimulator:GetContactId()
    return self.contactId
end

function PhoneMsgContactSimulator:GetCurrentMsgGuid()
    return self.msgSimulator:GetCurrentMsgId()
end

function PhoneMsgContactSimulator:CheckActive(id)
    if id and not self.waitingForReply then
        local msg = LuaCfgMgr.Get("PhoneMsg", id)
        if msg.Contact == self.contactId then
            BllMgr.GetPhoneMsgBLL():StartNormalMsg(id, msg.Contact, true)
        end
    else
        self.needCheckActive = true
    end
end

function PhoneMsgContactSimulator:_CheckActive()
    if self.waitingForReply then
        return
    end

    if BllMgr.GetMobileContactBLL():IsUnlockContact(self.contactId) then
        local cfgId = BllMgr.GetPhoneMsgBLL():_GetActiveMsgID(self.contactId)
        if cfgId then
            local msgCfg = LuaCfgMgr.Get("PhoneMsg", cfgId)
            if cfgId ~= self.waitingMsg and self:_CanInterrupt(msgCfg) then
                self:_SetNextActiveMsg(msgCfg)
                return
            end
        end
    end

    self.waitingForActive = false
    self.waitingMsg = 0
    self.activeTime = 0
end

---@param nextCfg cfg.PhoneMsg
function PhoneMsgContactSimulator:_CanInterrupt(nextCfg)
    local curMsgGuid = self.msgSimulator:GetCurrentMsgId()
    if curMsgGuid == 0 then
        return true
    end

    local msgData = BllMgr.GetPhoneMsgBLL():GetServerChatData(curMsgGuid)
    if msgData == nil then
        return true
    end

    local curCfg = LuaCfgMgr.Get("PhoneMsg", msgData:GetID())
    return nextCfg.InterruptMsg == 1 and nextCfg.Priority >= curCfg.Priority
end

function PhoneMsgContactSimulator:ActiveMsg(msgGUID)
    self.waitingForReply = false
    self.waitingForActive = false
    self.waitingMsg = 0
    self.activeTime = 0
    if msgGUID then
        self.msgSimulator:StartMsg(msgGUID)
        SelfProxyFactory.GetPhoneMsgProxy():SetNewTopicRedState(self.contactId, false)
    else
        self:CheckActive()
    end
end

function PhoneMsgContactSimulator:FinishMsg()
    self.msgSimulator:FinishMsg()
    SelfProxyFactory.GetPhoneMsgProxy():SetNewTopicRedState(self.contactId, true)
end

function PhoneMsgContactSimulator:IsWaitingForFinish()
    return self.msgSimulator:IsWaitingForFinish()
end

function PhoneMsgContactSimulator:ReceiveHeadUpdate()
    if self.msgSimulator:GetCurrentMsgId() ~= nil then
        self.msgSimulator:ChangeHeadIconMoveToNext()
    end
end

function PhoneMsgContactSimulator:UpdateMsg(msgGUId, convId)
    if self.msgSimulator:GetCurrentMsgId() == msgGUId then
        self.msgSimulator:UpdateMsg(convId)
    end
end

function PhoneMsgContactSimulator:Update(curTime)
    if self.needCheckActive then
        self:_CheckActive()
        self.needCheckActive = false
    end
    self.msgSimulator:Update(curTime)

    if self.waitingForActive and curTime > self.activeTime then
        self:_TryActiveMsg()
    end
end

---@return X3Data.PhoneMsgConversationData[]
function PhoneMsgContactSimulator:GetConversationList()
    return self.msgSimulator:GetConversationList()
end

function PhoneMsgContactSimulator:ReadAll(teller)
    self.msgSimulator:ReadAll(teller)
end

function PhoneMsgContactSimulator:ReadConversation(uid, teller)
    self.msgSimulator:ReadConversation(uid, teller)
end

function PhoneMsgContactSimulator:CheckNextNudge()
    self.msgSimulator:CheckNextNudge()
end

function PhoneMsgContactSimulator:SetIsWaitingForReply(isWaiting)
    self.waitingForReply = isWaiting
    if self.waitingForReply then
        self.needCheckActive = false
        self.waitingForActive = false
        self.waitingMsg = 0
        self.activeTime = 0
    else
        self.needCheckActive = true
    end
end
function PhoneMsgContactSimulator:IsWaitingForReply()
    return self.waitingForReply
end

---@param msgCfg cfg.PhoneMsg
function PhoneMsgContactSimulator:_SetNextActiveMsg(msgCfg)
    local awakeTime = msgCfg.AwakeTime == -1 and math.random(0, PhoneMsgConst.PhoneMsgActiveTime) or msgCfg.AwakeTime

    local guideId = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONEMESSAGEGUIDEID)
    local guideCfg = LuaCfgMgr.Get("Guide", guideId)
    local guideOpen
    if guideCfg then
        guideOpen = NoviceGuideUtil.CheckGuideEnable(guideCfg.TriggerType)
    end
    local isSpecialGuideMsg = guideOpen and msgCfg.ID == LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PHONEGUIDECONVERSATIONID)

    if awakeTime == 0 and isSpecialGuideMsg then
        self.waitingMsg = msgCfg.ID
        self:_TryActiveMsg()
    else
        self.waitingMsg = msgCfg.ID
        self.activeTime = TimerMgr.RealtimeSinceStartup() + awakeTime
        self.waitingForActive = true
    end
end

function PhoneMsgContactSimulator:_TryActiveMsg()
    ---@type cfg.PhoneMsg
    local cfg = LuaCfgMgr.Get("PhoneMsg", self.waitingMsg)
    if cfg.Type == X3_CFG_CONST.MESSAGE_TYPE_RETURN then
        BllMgr.GetPhoneMsgBLL():StartRecallMsg(self.waitingMsg, self.contactId)
    else
        BllMgr.GetPhoneMsgBLL():StartNormalMsg(self.waitingMsg, self.contactId)
    end
end

function PhoneMsgContactSimulator:OnClear()
    self.msgSimulator:OnClear()
    self.contactId = nil
    self.waitingForActive = false
    self.waitingForReply = false
    self.waitingMsg = 0
    self.activeTime = 0
end

return PhoneMsgContactSimulator