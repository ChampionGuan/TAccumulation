---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/11/28 15:01
local PhoneMsgDetailSimulatorBase = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgDetailSimulatorBase")
---@class PhoneMsgDetailSimulator:PhoneMsgDetailSimulatorBase
local PhoneMsgDetailSimulator = class("PhoneMsgDetailSimulator", PhoneMsgDetailSimulatorBase)
local PhoneMsgHelper = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgHelper")
local PhoneMsgConst = require("Runtime.System.X3Game.Modules.PhoneMessage.PhoneMsgConst")

function PhoneMsgDetailSimulator:ctor()
    self.super.ctor(self)
    self.unlockConverId = 0

    ---@type X3Data.PhoneMsgDetailData
    self.severData = nil
    ---@type cfg.PhoneMsgConversation
    self.curCfg = nil
    ---@type cfg.PhonePat[]
    self.nudgeInfo = {}
    ---@type cfg.PhonePat
    self.curNudgeStage = {}

    self.canNudge = false
    self.nextNudgeTime = -1
    self.currentChoice = nil
    self.changeHeadTimer = nil

    self._specialExecuteFunc = {
        [X3_CFG_CONST.CONVERSATION_TYPE_RECALL] = handler(self, self._Recall),
        [X3_CFG_CONST.CONVERSATION_TYPE_CHOICE] = handler(self, self._WaitForInput),
        [X3_CFG_CONST.CONVERSATION_TYPE_MANCHOICE] = handler(self, self._RandomManChoice),
        [X3_CFG_CONST.CONVERSATION_TYPE_CHANGE] = handler(self, self._ChangeContactInfo),
        [X3_CFG_CONST.CONVERSATION_TYPE_COMMON_REPLY] = handler(self, self._RandomCommonReply),
        [X3_CFG_CONST.CONVERSATION_TYPE_CHOICE_AUTO] = handler(self, self._WaitForInputAuto),
    }

    self._specialOnExecuteFunc = {
        [X3_CFG_CONST.CONVERSATION_TYPE_CHOICE] = handler(self, self._CheckNudge),
    }

    self._specialEndExecuteFunc = {
        [X3_CFG_CONST.CONVERSATION_TYPE_CHOICE] = handler(self, self._EndNudge),
        [X3_CFG_CONST.CONVERSATION_TYPE_AVATAR] = handler(self, self._EndChangeHeadIcon),
    }

    self.simUidOffset = 1
end

function PhoneMsgDetailSimulator:SetContactId(contactId)
    self.super.SetContactId(self, contactId)
    local cfg = LuaCfgMgr.Get("PhoneContact", contactId)
    self.unlockConverId = cfg.ConversationConditon

    if cfg.Mantype ~= 0 and cfg.PatSetting ~= 0 then
        self.nudgeInfo = LuaCfgMgr.GetListByCondition("PhonePat", { PatGroup = cfg.PatSetting })
        table.sort(self.nudgeInfo, function(a, b)
            return a.LovePointLevel > b.LovePointLevel
        end)
        self.canNudge = #self.nudgeInfo > 0
    end
end

function PhoneMsgDetailSimulator:StartMsg(msgId, oldMsg)
    if self:_InitSeverData(msgId) then
        if oldMsg then
            self:_InitHistory()
            SelfProxyFactory.GetPhoneContactProxy():SetContactNameUnlock(self.contactId)
        end

        self:_StartMsg()
    end
end


function PhoneMsgDetailSimulator:_InitSeverData(msgId)
    self:_Clear()
    self.severData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgDetailData, msgId)
    if self.severData then
        self:_InitSimData(msgId, self.severData:GetID())
        return true
    else
        return false
    end
end

function PhoneMsgDetailSimulator:_InitHistory()
    local histories = PhoneMsgHelper.GetHistory(self.simData:GetGUID())
    if #histories == nil then
        return
    end

    for i = 1, #histories do
        local convData = histories[i]
        local uid = convData:GetPrimaryValue()
        self.simData:AddHistoryValue(uid)
        self:_CheckExtra(convData)
        self:_CheckRP(convData)
    end
end

function PhoneMsgDetailSimulator:ChangeHeadIconMoveToNext()
    if self:_TrySwitchHead() then
        self:_MoveToNextState()
    end
end

function PhoneMsgDetailSimulator:UpdateMsg(convId)
    if self.curConvData and self.curConvData:GetState() == X3DataConst.PhoneMsgConversationStateType.Execute then
        if self.currentChoice then
            local choiceCfg = LuaCfgMgr.Get("PhoneMsgConversationCondition", self.currentChoice)
            BllMgr.GetPhoneMsgBLL():AddUniqueChoice(choiceCfg.GroupId, self.currentChoice)
            self.currentChoice = nil
        end
        self.curConvData:SetNextCfgId(convId)
        self:_MoveToNextState()
    end
end

function PhoneMsgDetailSimulator:ReadAll(teller)
    if not self.simData then
        return
    end
    local unreadList = self.simData:GetUnreadList()
    local clearedList = PoolUtil.GetTable()
    if unreadList then
        for i = 1, #unreadList do
            if self:ReadConversation(unreadList[i], teller) then
                table.insert(clearedList, i)
            end
        end
    end

    for i = #clearedList, 1. -1 do
        self.simData:RemoveUnreadListValue(i)
    end
    PoolUtil.ReleaseTable(clearedList)
end

function PhoneMsgDetailSimulator:ReadConversation(uid, teller)
    ---@type X3Data.PhoneMsgConversationData
    local convData = X3DataMgr.Get(X3DataConst.X3Data.PhoneMsgConversationData, uid)
    if convData then
        local cfgId = convData:GetCfgId()
        ---@type cfg.PhoneMsgConversation
        local cfg = LuaCfgMgr.Get("PhoneMsgConversation", cfgId)
        if cfg.Teller ~= teller then
            convData:SetReadState(X3DataConst.PhoneMsgConversationReadType.Read)
            EventMgr.Dispatch(PhoneMsgConst.MessageReadUpdateEvent, cfgId)
            self.simData:SetLastReadId(cfg.ID)
            PhoneMsgHelper.SaveProgress(self.contactId, self:GetCurrentMsgId(), nil, self.simData:GetLastReadId())

            if cfg.Teller ~= PhoneMsgConst.PlayerTellerId then
                local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, uid)
                if not value or value == 0 then
                    RedPointMgr.Save(2, X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, uid)
                    local preCount = RedPointMgr.GetCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, self.contactId)
                    RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, preCount - 1, self.contactId)
                end
            end
            if self.unlockConverId == cfgId then
                EventMgr.Dispatch(PhoneMsgConst.ContactNameUnlockEvent)
            end
            
            return true
        end
    end
end

function PhoneMsgDetailSimulator:CheckNextNudge()
    if self.curConvData and self.curConvData:GetState() == X3DataConst.PhoneMsgConversationStateType.Execute and self.nextNudgeTime == -1 then
        self:_WaitForInput(true)
    end
end

--region execute
--region 状态机
function PhoneMsgDetailSimulator:_OnConvFinish()
    PhoneMsgHelper.SaveProgress(self.contactId, self:GetCurrentMsgId(), self.curCfg.ID, self.simData:GetLastReadId())
    BllMgr.GetPhoneMsgBLL():ShowMiniTip(self.severData:GetID(), self.curConvData:GetCfgId(), self.contactId)
    self:_CheckExtra(self.curConvData)
    self:_CheckRP(self.curConvData)
end
--endregion

--region execute
function PhoneMsgDetailSimulator:_ChangeContactInfo()
    local msgCfg = LuaCfgMgr.Get("PhoneMsg", self.simData:GetCfgId())
    if msgCfg.Type == X3_CFG_CONST.MESSAGE_TYPE_BUBBLE then
        if self.severData and self.severData:GetExtra() and self.severData:GetExtra():GetBubbleID() then
            BllMgr.GetMobileContactBLL():SendSetContactBubble(self.contactId, { ID = self.severData:GetExtra():GetBubbleID() })
            return true
        end
    elseif msgCfg.Type == X3_CFG_CONST.MESSAGE_TYPE_SUFFIX then
        local nudgeInfo = self.severData and self.severData:GetExtra() and self.severData:GetExtra():GetNudgeSign()
        if nudgeInfo then
            ---@type pbcmessage.ContactNudge
            local param = {}
            nudgeInfo:Encode(param)
            param.ContactId = nil
            BllMgr.GetMobileContactBLL():SetContactNudgeInfo(self.contactId, param)
            return true
        end
    elseif msgCfg.Type == X3_CFG_CONST.MESSAGE_TYPE_AVATAR then
        local enterTime = BllMgr.GetPlayerServerPrefsBLL():GetInt(PhoneMsgConst.ChangeHeadWaitStartTime[self.contactId], 0)
        if enterTime == 0 then
            BllMgr.GetPlayerServerPrefsBLL():SetInt(PhoneMsgConst.ChangeHeadWaitStartTime[self.contactId], GrpcMgr.GetServerTimeToUnixTimeSeconds())
        end

        local headIcon = self.severData and self.severData:GetExtra() and self.severData:GetExtra():GetHeadIcon()
        if headIcon then
            if headIcon:GetType() == X3DataConst.PhoneContactHeadType.ImgHead then
                if self:_TrySwitchHead() then
                    self:_MoveToNextState()
                else
                    local expireTime = BllMgr.GetPlayerServerPrefsBLL():GetInt(PhoneMsgConst.ChangeHeadWaitStartTime[self.contactId], 0) + PhoneMsgConst.ChangeHeadWaitTime + 1
                    self.changeHeadTimer = TimerMgr.AddTimer(expireTime - GrpcMgr.GetServerTimeToUnixTimeSeconds(), handler(self, self.ChangeHeadIconMoveToNext))
                end
            else
                self:_SendChangeHeadMsg(headIcon)
                return true
            end
        end
    end
end

---@param headIcon X3Data.PhoneContactHead
function PhoneMsgDetailSimulator:_SendChangeHeadMsg(headIcon)
    ---@type pbcmessage.ContactHead
    local headData = {}
    headIcon:Encode(headData)
    headData.ContactId = nil
    headData.LastSetTime = nil
    BllMgr.GetMobileContactBLL():SendSetContactHead(self.contactId, headData)
end

function PhoneMsgDetailSimulator:_TrySwitchHead()
    local headIcon = self.severData and self.severData:GetExtra() and self.severData:GetExtra():GetHeadIcon()
    local canMoveToNext, success = self:_CheckHeadIcon(headIcon)
    if success then
        self:_SendChangeHeadMsg(headIcon)
    end

    return canMoveToNext
end

function PhoneMsgDetailSimulator:_CheckHeadIcon(headIcon)
    if self.simData == nil or self.curConvData == nil then
        return
    end
    local msgCfg = LuaCfgMgr.Get("PhoneMsg", self.simData:GetCfgId())
    if msgCfg.Type == X3_CFG_CONST.MESSAGE_TYPE_AVATAR and self.curConvData:GetState() == X3DataConst.PhoneMsgConversationStateType.Execute then
        if headIcon and headIcon:GetType() == X3DataConst.PhoneContactHeadType.ImgHead then
            local state, outOffTime = BllMgr.GetPhoneMsgBLL():GetHeadImgState(self.contactId)
            return state == X3DataConst.PhoneContactHeadState.ChangeSuccess or outOffTime, state == X3DataConst.PhoneContactHeadState.ChangeSuccess
        else
            return true, false
        end
    end
end

function PhoneMsgDetailSimulator:_EndChangeHeadIcon()
    BllMgr.GetPlayerServerPrefsBLL():SetInt(PhoneMsgConst.ChangeHeadWaitStartTime[self.contactId], 0)
    if self.changeHeadTimer ~= nil then
        TimerMgr.Discard(self.changeHeadTimer)
        self.changeHeadTimer = nil
    end
end


function PhoneMsgDetailSimulatorBase:_RandomManChoice()
    self:_Random()
end

function PhoneMsgDetailSimulatorBase:_RandomCommonReply()
    self:_Random()
end

--region random
function PhoneMsgDetailSimulatorBase:_Random()
    ---@type cfg.PhoneMsgConversationCondition[]
    local choiceList = PoolUtil.GetTable()
    ---@type int[]
    local allConditonGroup = PoolUtil.GetTable()

    if self.curCfg.ConditionNextID ~= nil then
        self:_GetChoices(self.curCfg.ConditionNextID, choiceList, allConditonGroup)
        if #choiceList == 0 then
            for _, v in pairs(allConditonGroup) do
                BllMgr.GetPhoneMsgBLL():ClearUniqueChoice(v)
            end
            self:_GetChoices(self.curCfg.ConditionNextID, choiceList)
        end
    end

    if #choiceList == 0 then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.PhoneMsg, "不存在符合条件的选项，当前节点：%d，条件", self.curCfg.ID, self.curCfg.ConditionNextID[1].Num)
    else
        local weights = PoolUtil.GetTable()
        for i = 1, #choiceList do
            table.insert(weights, choiceList[i].Weight)
        end
        local result = math.randombyweights(weights)
        self.currentChoice = choiceList[result].Id
        BllMgr.GetPhoneMsgBLL():UpdateMsgRequest(self.simData:GetGUID(), choiceList[result].NextID)
        Debug.LogWithTag(GameConst.LogTag.PhoneMsg, "Random Success, Result：%d", choiceList[result].NextID)
        PoolUtil.ReleaseTable(weights)
    end

    PoolUtil.ReleaseTable(choiceList)
    PoolUtil.ReleaseTable(allConditonGroup)
end

---@param choiceGroup cfg.s2int[]
function PhoneMsgDetailSimulatorBase:_GetChoices(choiceGroup, choiceList, allConditonGroup)
    for i = 1, #choiceGroup do
        ---@type cfg.s2int
        local info = choiceGroup[i]
        local conditionGroup = info.Num
        ---@type cfg.PhoneMsgConversationCondition[]
        local conditions = LuaCfgMgr.GetListByCondition("PhoneMsgConversationCondition", { GroupId = conditionGroup })
        local uniqueMap = SelfProxyFactory.GetPhoneMsgProxy():GetUniqueChoiceMap(conditionGroup)
        if allConditonGroup then
            table.insert(allConditonGroup, conditionGroup)
        end
        for i = 1, #conditions do
            local condition = conditions[i]
            if condition.Weight > 0 and (info.ID == 1 or not uniqueMap[condition.Id]) and self:_CheckCondition(condition) then
                table.insert(choiceList, condition)
            end
        end
    end
end

---获取当日固定时分秒的时间戳
---@param hourMinuteSecond int
---@return CS.System.DateTimeOffset
function PhoneMsgDetailSimulatorBase:_GetDateTimeOffsetCurrentDay(hourMinuteSecond)
    if hourMinuteSecond == -1 then
        hourMinuteSecond = 235959
    end
    local timeNow = GrpcMgr.GetServerTime()
    local hour = math.modf(hourMinuteSecond / 10000)
    local minute = math.modf(hourMinuteSecond / 100 % 100)
    local second = math.modf(hourMinuteSecond % 100)
    local date = CS.System.DateTimeOffset(timeNow.Year, timeNow.Month, timeNow.Day, hour, minute, second, timeNow.Offset)
    return date
end

---@param cfg cfg.PhoneMsgConversationCondition
function PhoneMsgDetailSimulatorBase:_CheckCondition(cfg)
    local roleInfo = BllMgr.GetRoleBLL():GetRole(self.roleId)
    local loveLevel = roleInfo and roleInfo.LoveLevel or 0
    local loveCheck = loveLevel >= cfg.LovePointLevel

    local timeCheck = true
    if cfg.TimeCondition ~= nil then
        local nowTime = GrpcMgr.GetServerTime()
        local startTime = self:_GetDateTimeOffsetCurrentDay(cfg.TimeCondition.ID)
        local endTime = self:_GetDateTimeOffsetCurrentDay(cfg.TimeCondition.Num)
        timeCheck = nowTime:CompareTo(startTime) >= 0 and nowTime:CompareTo(endTime) <= 0
    end

    local numCheck = true

    if cfg.DailyTimes then
        local msgCfg = LuaCfgMgr.Get("PhoneMsg", self.simData:GetCfgId())
        local time = PhoneMsgHelper.GetDailyTime(self.contactId, msgCfg.Type, msgCfg.ID)
        numCheck = time >= cfg.DailyTimes.ID and time <= cfg.DailyTimes.Num
    end

    local conditionCheck = true
    if cfg.ConditionCheck and #cfg.ConditionCheck > 0 then
        conditionCheck = ConditionCheckUtil.CheckConditionByIntList(cfg.ConditionCheck)
    end

    return loveCheck and timeCheck and numCheck and conditionCheck
end
--endregion

function PhoneMsgDetailSimulator:_WaitForInput(fromNow)
    self.curNudgeStage = self:_GetNudgeState()
    if self.canNudge and self.curNudgeStage.WaitTime and self.curNudgeStage.PatProbability > 0 and  self.nextNudgeTime == -1 then
        self:_GetNextNudgeTime(fromNow)
    else
        self.nextNudgeTime = -1
    end
end

function PhoneMsgDetailSimulator:_WaitForInputAuto()
    local choice = BllMgr.GetPhoneMsgBLL():GetAllNextOption(self.curCfg.ID, self.conversationCfgName)
    if choice == nil or #choice == 0 then
        self.curConvData:SetNextCfgId(self.curCfg.NextID and self.curCfg.NextID[0] or 0)
        self:_MoveToNextState()
    end
end

function PhoneMsgDetailSimulator:_GetNextNudgeTime(fromNow)
    local lastNudgeTime = GrpcMgr.GetServerTimeToUnixTimeSeconds()
    ---@type table<int, X3Data.NudgeInfo>
    local nudgeMap = self.severData:GetNudgeNumMap()
    local nudgeInfo = nudgeMap and nudgeMap[self.curCfg.ID]
    local nudgeNum = nudgeInfo and nudgeInfo:GetNum() or 0

    if nudgeNum >= self.curNudgeStage.PatTimes then
        self.nextNudgeTime = -1
        return
    elseif not fromNow and nudgeInfo then
        lastNudgeTime = nudgeInfo:GetLastTime()
    end

    local waitTime = self.curNudgeStage.WaitTime
    self.nextNudgeTime = lastNudgeTime + math.random(waitTime.ID, waitTime.Num)
end

function PhoneMsgDetailSimulator:_CheckNudge()
    local curTime = GrpcMgr.GetServerTimeToUnixTimeSeconds()
    if self.nextNudgeTime >= 0 and self.nextNudgeTime <= curTime then
        local random = math.random(1, 10000)
        if random <= self.curNudgeStage.PatProbability and BllMgr.GetPhoneMsgBLL():GetNudgeEnable() then
            BllMgr.GetPhoneMsgBLL():ManNudgePlayer(self.contactId, self.simData:GetGUID(), self.curCfg.ID)
            self.nextNudgeTime = -1
        else
            local waitTime = self.curNudgeStage.WaitTime
            if waitTime then
                self.nextNudgeTime = curTime + math.random(waitTime.ID, waitTime.Num)
            end
        end
    end
end

function PhoneMsgDetailSimulator:_EndNudge()
    self.nextNudgeTime = -1
end

function PhoneMsgDetailSimulator:_GetNudgeState()
    local roleInfo = BllMgr.GetRoleBLL():GetRole(self.roleId)
    local loveLevel = roleInfo and roleInfo.LoveLevel or 0
    for i = 1, #self.nudgeInfo do
        if loveLevel >= self.nudgeInfo[i].LovePointLevel then
            return self.nudgeInfo[i]
        end
    end
end
--endregion

---@param convData X3Data.PhoneMsgConversationData
function PhoneMsgDetailSimulator:_CheckExtra(convData)
    local uid = convData:GetPrimaryValue()
    local type = convData:GetType()
    local rwdState = convData:GetRewardState()
    if convData:GetReadState() == X3DataConst.PhoneMsgConversationReadType.Unread then
        self.simData:AddUnreadListValue(uid)
    end

    if type == X3_CFG_CONST.CONVERSATION_TYPE_REWARD and rwdState == X3DataConst.PhoneMsgConversationRewardType.UnRewarded then
        self.simData:AddOrUpdateRewardMapValue(uid, true)
    end

    if type == X3_CFG_CONST.CONVERSATION_TYPE_REDPACKET and rwdState == X3DataConst.PhoneMsgConversationRewardType.UnRewarded then
        self.simData:AddOrUpdateRedPacketMapValue(uid, true)
    end
end

---@param convData X3Data.PhoneMsgConversationData
function PhoneMsgDetailSimulator:_CheckRP(convData)
    local uid = convData:GetPrimaryValue()
    local cfgId = convData:GetCfgId()
    ---@type cfg.PhoneMsgConversation
    local cfg = LuaCfgMgr.Get("PhoneMsgConversation", cfgId)
    local type = convData:GetType()
    local rwdState = convData:GetRewardState()

    if not PhoneMsgConst.ContentConversationType[type] then
        return
    end

    if convData:GetReadState() == X3DataConst.PhoneMsgConversationReadType.Unread then
        if cfg.Teller ~= PhoneMsgConst.PlayerTellerId then
            local value = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, uid)
            if not value or value == 0 then
                local preCount = RedPointMgr.GetCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, self.contactId)
                RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_UNREAD, preCount + 1, self.contactId)
            end
        end
    end

    if type == X3_CFG_CONST.CONVERSATION_TYPE_VOICE then
        local state = RedPointMgr.GetValue(X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, uid)
        if state == 0 then
            RedPointMgr.Save(1, X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, uid)
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, 1, uid)
        elseif state == 1 then
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, 1, uid)
        else
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_VOICE, 0, uid)
        end
    end

    if type == X3_CFG_CONST.CONVERSATION_TYPE_REDPACKET then
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_PHONE_MESSAGE_REDPACKAGE, rwdState == X3DataConst.PhoneMsgConversationRewardType.UnRewarded and 1 or 0, cfgId)
    end
end

function PhoneMsgDetailSimulator:OnClear()
    X3DataMgr.Release(self.severData)

    ---@type X3Data.PhoneMsgDetailData
    self.severData = nil
    ---@type cfg.PhonePat[]
    self.nudgeInfo = nil
    ---@type cfg.PhonePat
    self.curNudgeStage = nil

    self.canNudge = false
    self.nextNudgeTime = -1
    self.currentChoice = nil
    self.changeHeadTimer = nil

    self.unlockConverId = 0

    self.super.OnClear(self)
end

return PhoneMsgDetailSimulator