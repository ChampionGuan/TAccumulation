---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by changkong.
--- DateTime: 2021/12/15 19:58

---@class SafeHandler
---@field func function
---@field Destroy function

---@class SafeHandlerMgr
local SafeHandlerMgr = class("SafeHandlerMgr")

function SafeHandlerMgr:ctor()
    self._handlers = {}
end

function SafeHandlerMgr:_GenerateHandler(invokeFuncParam)
        local handler = {
            __invokeFunc = invokeFuncParam
        }
     handler.func = function(...)
        if handler.__invokeFunc then
            return handler.__invokeFunc(...)
        end
    end
    handler.Destroy = function()
        handler.__invokeFunc = nil
        handler.func = nil
    end
    table.insert(self._handlers, handler)
    return handler
end

-- 战斗中有使用handler、或者function() self:xxx end传到外部模块（特别是表现层）的代码，都应该使用这个函数
-- 使用例子1：
-- self.button:AddListener(safeHandler(self, self._OnClickButton))
-- 使用例子2：
-- self.button:AddListener(safeHandler(function()
--    self:_OnClickButton()
--end))
---@param param1 any|function
---@param param2 any|function
---@return SafeHandler
function SafeHandlerMgr:Handler(param1, param2)
    local invokeFunction = nil
    if type(param1) == "function" then
        invokeFunction = function(...)
            return param1(...)
        end
    elseif type(param2) == "function" then
        invokeFunction = function(...)
            return param2(param1, ...)
        end
    else
        Debug.LogError("GenerateSafeHandler传入的参数类型不对，没有function！注册的地方需要检查！")
    end
    local handler = self:_GenerateHandler(invokeFunction)
    return handler.func
end

-- 例子：
--local printNumbers = function(a, b, c, d)
--    print(a, b, c, d)
--end
-- 绑定一个参数的偏函数
--local func = safePartical1(printNumbers, 1)
--func(7, 8, 9)
--打印结果：1, 7, 8, 9
---@param objFunc function
---@param param1 any
---@return function
function SafeHandlerMgr:GeneratePartial1(objFunc, param1)
    local invokeFunction = function(...)
        return objFunc(param1, ...)
    end
    local handler = self:_GenerateHandler(invokeFunction)
    return handler.func
end

-- 绑定两个参数的偏函数
--local func = safePartical1(printNumbers, 1, 2)
--func(8, 9)
--打印结果：1, 2, 8, 9
---@param objFunc function
---@param param1 any
---@param param2 any
---@return function
function SafeHandlerMgr:GeneratePartial2(objFunc, param1, param2)
    local invokeFunction = function(...)
        return objFunc(param1, param2, ...)
    end
    local handler = self:_GenerateHandler(invokeFunction)
    return handler.func
end

-- 绑定三个参数的偏函数
--local func = safePartical1(printNumbers, 1, 2, 3)
--func(9)
--打印结果：1, 2, 3, 9
---@param objFunc function
---@param param1 any
---@param param2 any
---@param param3 any
---@return function
function SafeHandlerMgr:GeneratePartial3(objFunc, param1, param2, param3)
    local invokeFunction = function(...)
        return objFunc(param1, param2, param3, ...)
    end
    local handler = self:_GenerateHandler(invokeFunction)
    return handler.func
end

-- 绑定四个参数的偏函数
--local func = safePartical1(printNumbers, 1, 2, 3, 4)
--func()
--打印结果：1, 2, 3, 4
---@param objFunc function
---@param param1 any
---@param param2 any
---@param param3 any
---@param param4 any
---@return function
function SafeHandlerMgr:GeneratePartial4(objFunc, param1, param2, param3, param4)
    local invokeFunction = function(...)
        return objFunc(param1, param2, param3, param4, ...)
    end
    local handler = self:_GenerateHandler(invokeFunction)
    return handler.func
end

-- 清理
function SafeHandlerMgr:Clear()
    for _, v in ipairs(self._handlers) do
        v.Destroy()
    end
    self._handlers = {}
end

-- 销毁
function SafeHandlerMgr:Destroy()
    self:Clear()
end

return SafeHandlerMgr
