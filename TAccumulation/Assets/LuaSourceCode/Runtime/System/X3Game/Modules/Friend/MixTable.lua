---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/5/13 11:36
---
---@class MixTable
local MixTable = class("MixTable")
function MixTable:ctor(indexKeyName, sortFunc)
    self._indexKeyName = indexKeyName

    self._dataSourceList = nil ---item, item, ...
    self._dataSourceDict = nil ---indexKey, item

    self._sortFunc = sortFunc
end

function MixTable:ClearData()
    self._dataSourceList = nil
    self._dataSourceDict = nil
end

---@设置db-module的参数环境 1、数据源 (来自字典或是数组)
function MixTable:SetDataListSource(dataList)
    self._dataSourceList = dataList
    if dataList then
        self._dataSourceDict = {}
        for _, item in ipairs(dataList) do
            local indexKey = item[self._indexKeyName]
            self._dataSourceDict[indexKey] = item
        end
    else
        self._dataSourceDict = nil
    end

    if self:GetCount() > 0 then
        self:Sort()
    end
end

function MixTable:SetDataDictSource(dataDict)
    self._dataSourceDict = dataDict
    if dataDict then
        self._dataSourceList = {}
        local posIndex = 1
        for _, item in pairs(dataDict) do
            table.insert(self._dataSourceList, item)
            posIndex = posIndex + 1
        end
    else
        self._dataSourceList = nil
    end

    if self:GetCount() > 0 then
        self:Sort()
    end
end

---@public 获取数据源（正常不可获取）
function MixTable:GetDataList() return self._dataSourceList or {} end
function MixTable:GetDataDict() return self._dataSourceDict or {} end

---@private
function MixTable:__InitDataSource()
    self:SetDataListSource( {} )
end

------------------------------------------------------------------------------------------------------------------------
---@Add 添加指定item, 添加唯一性的item
function MixTable:Add(item)
    if item then
        if not self._dataSourceList then self:__InitDataSource() end
        local posIndex = 1
        if self._sortFunc then
            for i = #self._dataSourceList, 1, -1 do
                if self._sortFunc(self._dataSourceList[i], item) then
                    posIndex = i + 1
                    break
                end
            end
        end

        table.insert(self._dataSourceList, posIndex, item)

        local indexKey = item[self._indexKeyName]
        if indexKey then self._dataSourceDict[indexKey] = item end
        return true
    end
end

---添加键值对
function MixTable:AddByKey(item, indexKey)
    if item then
        indexKey = indexKey or item[self._indexKeyName]
        if not indexKey then return end
        ---首次添加初始化
        if not self._dataSourceList then self:__InitDataSource() end
        local posIndex = 1
        if self._sortFunc then
            for i = #self._dataSourceList, 1, -1 do
                if self._sortFunc(self._dataSourceList[i], item) then
                    posIndex = i + 1
                    break
                end
            end
        end

        table.insert(self._dataSourceList, posIndex, item)
        self._dataSourceDict[indexKey] = item
        return true
    end
end

---如果没有才添加, 保证Item唯一
function MixTable:TryAdd(item, posIndex)
    if not self:ContainsItem(item) then return self:Add(item, posIndex) end
end

function MixTable:TryAddByKey(item, indexKey)
    if not self:ContainsItem(item) then return self:AddByKey(item, indexKey) end
end

---更新或添加键值对
function MixTable:Set(item, indexKey)
    self:AddByKey(item, indexKey)
end

------------------------------------------------------------------------------------------------------------------------
---@Remove 删除指定索引的对象， 移除指定Item

---@return:返回移除的对象
function MixTable:Remove(posIndex)
    ---默认为最后一个元素
    posIndex = posIndex or self:GetCount()
    if posIndex > 0 and self:GetCount() >= posIndex then
        local item = table.remove(self._dataSourceList, posIndex)
        if item then
            local indexKey = item[self._indexKeyName]
            self._dataSourceDict[indexKey] = nil
        end
        return item
    end
end

function MixTable:RemoveKey(indexKey)
    local item = self:GetByKey(indexKey)
    if item then
        local posIndex = self:IndexOfByKey(indexKey)
        table.remove(self._dataSourceList, posIndex)
        self._dataSourceDict[indexKey] = nil
        return item, posIndex
    end
end

---@return:返回移除item索引:posIndex
function MixTable:RemoveItem(item)
    local posIndex = -1
    if item then
        local indexKey = item[self._indexKeyName]
        local _, _posIndex = self:RemoveKey(indexKey)
        posIndex = _posIndex
    end
    return posIndex
end

------------------------------------------------------------------------------------------------------------------------
---@刷新 refreshFunc刷新指定索引, 刷新指定item, 刷新key-value
function MixTable:Refresh(posIndex, refreshFunc, newItem)
    refreshFunc = refreshFunc or self._refreshFunc
    if posIndex and posIndex > 0 and refreshFunc then
        local item = self:Get(posIndex)
        ---返回刷新是否成功
        if item then return refreshFunc(item, posIndex, newItem) end
    end
end

---@warning:刷新一律以原数据字段为主，有的才设置更新
function MixTable:RefreshItem(posIndex, newItem)
    if posIndex and posIndex > 0 and newItem then
        local item = self:Get(posIndex)
        if item then
            ---嵌套的不考虑
            for key, _ in ipairs(item) do
                item[key] = newItem[key]
            end
        end
    end
end

function MixTable:RefreshKVPair(posIndex, key, value)
    if posIndex and posIndex > 0 and key then
        local item = self:Get(posIndex)
        if item then item[key] = value end
    end
end

function MixTable:RefreshByKey(indexKey, refreshFunc, newItem)
    refreshFunc = refreshFunc or self._refreshFunc
    if indexKey and refreshFunc then
        local item = self:GetByKey(indexKey)
        ---这里就不获取posIndex了，正常没必要
        if item then return refreshFunc(item, indexKey, newItem) end
    end
end

function MixTable:RefreshItemByKey(indexKey, newItem)
    if indexKey and newItem then
        local item = self:GetByKey(indexKey)
        if item then
            ---嵌套的不考虑
            for key, value in ipairs(newItem) do
                item[key] = value
            end
        end
    end
end

function MixTable:RefreshKVPairByKey(indexKey, key, value)
    if indexKey and key then
        local item = self:GetByKey(indexKey)
        if item then item[key] = value end
    end
end

------------------------------------------------------------------------------------------------------------------------
----@Find 通过索引获取、获取Item所在索引、通过函数获取、是否包含
function MixTable:Get(posIndex)
    if self._dataSourceList and posIndex and posIndex > 0 then
        return self._dataSourceList[posIndex]
    end
end

function MixTable:GetByKey(indexKey)
    if self._dataSourceDict and indexKey then
        return self._dataSourceDict[indexKey]
    end
end

----使用默认指定主键搜索
function MixTable:IndexOfByKey(indexKey)
    return self:FindIndexByKey(indexKey, self._indexKeyName)
end

function MixTable:IndexOf(item)
    local posIndex = -1
    if item then
        posIndex = self:IndexOfByKey(item[self._indexKeyName])
    end
    return posIndex
end

---通过其他key值查找item, 返回第一个有效元素
function MixTable:FindByKey(indexKey, keyName)
    keyName = keyName or self._indexKeyName
    if self._dataSourceList and indexKey and keyName then
        for _, item in ipairs(self._dataSourceList) do
            if item[keyName] == indexKey then return item end
        end
    end
end

---查找第一个key-value满足条件的对象（按照自定义主键搜索）
function MixTable:FindIndexByKey(indexKey, keyName)
    keyName = keyName or self._indexKeyName
    if self._dataSourceList and indexKey and keyName then
        for posIndex, _item in ipairs(self._dataSourceList) do
            if _item[keyName] == indexKey then return posIndex end
        end
    end
    return -1
end

function MixTable:FindItem(findFunc)
    findFunc = findFunc
    if self._dataSourceList and findFunc then
        for posIndex, item in ipairs(self._dataSourceList) do
            if findFunc(item, posIndex) then return item end
        end
    end
end

function MixTable:MatchAll(findFunc, cbFunc)
    findFunc = findFunc
    if self._dataSourceList and findFunc and cbFunc then
        for posIndex, item in ipairs(self._dataSourceList) do
            if findFunc(item, posIndex) then cbFunc(item, posIndex) end
        end
    end
end

function MixTable:Contains(indexKey)
    return self:GetByKey(indexKey) ~= nil
end

function MixTable:ContainsItem(item)
    if item then
        local indexKey = item[self._indexKeyName]
        return self:Contains(indexKey)
    end
end

function MixTable:Sort()
    if self._sortFunc and self:GetCount() > 1 then
        table.sort(self._dataSourceList, self._sortFunc)
    end
end

function MixTable:IsEmpty()
    if self._dataSourceList then return self:GetCount() <= 0 end
    return true
end

function MixTable:GetCount()
    return self._dataSourceList and #self._dataSourceList or 0
end

function MixTable:GetKeyList(keyList, listNum)
    keyList = keyList or {}
    if listNum and listNum > 0 then
        for posIndex = 1, listNum do
            table.insert(keyList, self._dataSourceList[posIndex][self._indexKeyName])
        end
    end
    return keyList
end

------------------------------------------------------------------------------------------------------------------------
---调试函数
function MixTable:ToString()
    local dataSourceInfo = nil
    if self:IsEmpty() then
        dataSourceInfo = "none"
    else
        dataSourceInfo = ""
        for posIndex, item in ipairs(self._dataSourceList) do
            dataSourceInfo = dataSourceInfo .. "posIndex:" .. posIndex .. tostring(item)
        end

        for indexKey, item in pairs(self._dataSourceDict) do
            dataSourceInfo = dataSourceInfo .. "indexKey:" .. indexKey .. tostring(item)
        end
    end
    return string.format("%s-----", self:_ToString(), dataSourceInfo)
end

function MixTable:_ToString()
    return string.format("[LOGINFO] className:%s, _indexKeyName: %s", self.__cname, tostring(self._indexKeyName))
end
return MixTable
