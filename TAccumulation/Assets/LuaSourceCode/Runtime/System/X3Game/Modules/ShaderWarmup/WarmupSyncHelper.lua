---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/6/27 14:54
---

---@class WarmupSyncHelper
local WarmupSyncHelper = class("WarmupSyncHelper")

local ResUpdateConst = require("Runtime.System.X3Game.Modules.ResUpdate.ResUpdateConst")
local XResources = CS.XAssetsManager.XResources
local Time = CS.UnityEngine.Time

---同步预热器
function WarmupSyncHelper:ctor()
    ---@type int
    self.timerId = 0
    ---@type string[] 待加载的SVC路径
    self.loadQueue = {}
    ---@type CS.UnityEngine.ShaderVariantCollection[]
    self.svcCache = {}
    ---@type string[]
    self.svcPathCache = {}
    ---@type float 总共需要预热的数量
    self.totalWarmupCount = 0
    ---@type fun(float)
    self.onProgress = nil
    ---@type fun()
    self.onCpl = nil

    ---@type int 同步中已预热的变体数量
    self.warmupedVariantCnt = 0
    ---@type string 当前正在加载的SVC路径
    self.curLoadSVCPath = nil
    ---@type CS.UnityEngine.ShaderVariantCollection
    self.warmupSVC = nil
    ---@type CS.UnityEngine.ShaderVariantCollection
    self.curSVC = nil
    ---@type string 当前整在预热的SVC路径
    self.curSVCPath = nil
    ---@type float 当前正在预热的Index
    self.cplWarmupCount = 0
    ---@type int 进度条总权重
    self.totalWeight = 0

    --region Debug
    ---@type float 已预热的时间
    self.warmupedTime = 0
    ---@type table Debug数据
    self.warmupRecord = nil
    ---@type float 单变体最高耗时
    self.highestSVCTime = 0
    ---@type string 最高耗时所属SVC
    self.highestOwnerSVC = nil
    ---@type int 每个SVC单独的预热时间
    self.curSVCWarmupedTime = 0
    --endregion
end

---开始预热
---@param progressHandler fun<float>
---@param cplHandler fun
function WarmupSyncHelper:StartWarmup(progressHandler, cplHandler)
    self.onProgress = progressHandler
    self.onCpl = cplHandler
    if DEBUG_GM and self.warmupRecord == nil then
        self.warmupRecord = {}
        self.warmupRecord["deviceModel"] = tostring(CS.UnityEngine.SystemInfo.deviceModel)
        self.warmupRecord["graphicsDeviceName"] = tostring(CS.UnityEngine.SystemInfo.graphicsDeviceName)
        self.warmupRecord["graphicsDeviceType"] = tostring(CS.UnityEngine.SystemInfo.graphicsDeviceType)

        self.warmupRecord["asyncMode"] = tostring(self.isAsyncMode)
        self.warmupRecord["warmupTime"] = {}
    end
    if self.warmupSVC == nil then
        self.warmupSVC = CS.UnityEngine.ShaderVariantCollection()
    end
    InputEffectMgr.SetEnable(false)
    self:CheckWarmupList()
    self:InternalWarmup()
end

---
function WarmupSyncHelper:InternalWarmup()
    if self.timerId == 0 then
        Debug.LogFormat("【ShaderWarmup】预热开始")
        if self.totalWarmupCount > 0 then
            self.timerId = TimerMgr.AddTimerByFrame(1, self.WarmupUpdate, self, true)
        else
            self:WarmupCpl()
        end
    end
end

---检测Shader变更
---@return boolean
function WarmupSyncHelper:CheckShaderAssetModified()
    local modifiedFiles = ResUpdateManager.GetModifiedFiles(ResUpdateConst.NotificationResType.SVC)
    if modifiedFiles and #modifiedFiles > 0 then
        --没有加载才能Destroy掉
        if #self.loadQueue == 0 then
            Debug.LogFormat("【ShaderWarmup】检测到Shader变更，停止当前预热并重新开始")
            ShaderWarmupMgr.StopWarmup()
            for _, path in pairs(modifiedFiles) do
                Debug.LogFormat("【ShaderWarmup】检测到Shader变更-%s", path)
                ShaderWarmupMgr.ChangeWarmupState(path, false)
            end
            return true
        else
            Debug.LogFormat("【ShaderWarmup】正在加载SVC，不可重新开始预热")
        end
    end
    return false
end

---同步预热
function WarmupSyncHelper:WarmupUpdate()
    if #self.loadQueue > 0 and self.curLoadSVCPath == nil then
        self.curLoadSVCPath = table.remove(self.loadQueue, 1)
        Debug.LogFormat("【ShaderWarmup】SVC加载开始%s", self.curLoadSVCPath)
        Res.LoadWithAssetPathAsync(self.curLoadSVCPath, AutoReleaseMode.Scene, typeof(CS.UnityEngine.ShaderVariantCollection), nil, handler(self, self.OnAssetLoadCpl))
    end
    if not ShaderWarmupMgr.GetOpenWarmup() then
        Debug.LogFormat("【ShaderWarmup】检测到预热开关关闭，放弃预热。")
        ShaderWarmupMgr.GiveupWarmup()
        return
    end
    local updateStartTime = Time.realtimeSinceStartup
    local updateEndTime = updateStartTime
    local warmupedCnt = 0
    local averageWarmupTimePerFrame = 0
    while updateEndTime - updateStartTime + averageWarmupTimePerFrame < 1 / 30 and self.cplWarmupCount <= self.totalWarmupCount do
        if self.curSVC == nil then
            if #self.svcCache > 0 then
                self.curSVC = table.remove(self.svcCache, 1)
                self.curSVCPath = table.remove(self.svcPathCache, 1)
                self.curSVCWarmupedTime = 0
            else
                --跳出循环
                break
            end
        end
        if self.curSVC then
            if self.curSVC.variantCount > 0 then
                self.curSVC:PopVariantTo(self.warmupSVC)
                self.warmupSVC:WarmUp()
                self.warmupSVC:Clear()
                warmupedCnt = warmupedCnt + 1
                self.warmupedVariantCnt = self.warmupedVariantCnt + 1
                local endTime = Time.realtimeSinceStartup
                if DEBUG_GM then
                    if endTime - updateEndTime > self.highestSVCTime then
                        self.highestSVCTime = endTime - updateEndTime
                        self.highestOwnerSVC = self.curSVC.name
                    end
                end
                local deltaTime = endTime - updateEndTime
                self.warmupedTime = self.warmupedTime + deltaTime
                if deltaTime > 5 then
                    Debug.LogFormat("【ShaderWarmup】单变体预热超时，放弃预热。")
                    ShaderWarmupMgr.GiveupWarmup()
                    return
                end
                if self.warmupedTime > 600 then
                    Debug.LogFormat("【ShaderWarmup】变体预热总时长超时，放弃预热。")
                    ShaderWarmupMgr.GiveupWarmup()()
                    return
                end
                self.curSVCWarmupedTime = self.curSVCWarmupedTime + deltaTime
                updateEndTime = endTime
                averageWarmupTimePerFrame = (updateEndTime - updateStartTime) / warmupedCnt
            else
                ShaderWarmupMgr.ChangeWarmupState(self.curSVCPath, true)
                self.cplWarmupCount = self.cplWarmupCount + 1
                if DEBUG_GM then
                    self.warmupRecord["warmupTime"][self.curSVC.name] = self.curSVCWarmupedTime
                end
                Debug.LogFormat("【ShaderWarmup】%s预热成功,总耗时%s,  进度%s/%s", self.curSVCPath, self.curSVCWarmupedTime, self.cplWarmupCount, self.totalWarmupCount)
                self.curSVC = nil
                self.curSVCPath = nil
            end
        end
    end
    local curProgress = 0
    if self.totalWeight > 0 then
        curProgress = self.warmupedVariantCnt / self.totalWeight
    else
        curProgress = 1
    end
    pcall(self.onProgress, curProgress)
    if #self.svcCache == 0 and self.curSVC == nil and #self.loadQueue == 0 and self.curLoadSVCPath == nil then
        if DEBUG_GM and self.warmupRecord ~= nil then
            self.warmupRecord["totalTime"] = self.warmupedTime
            self.warmupRecord["highestSVCTime"] = self.highestSVCTime
            self.warmupRecord["highestOwnerSVC"] = self.highestOwnerSVC
            GameHelper.StoreLog("ShaderWarmup", JsonUtil.Encode(self.warmupRecord))
            self.warmupRecord = nil
        end
        self:WarmupCpl()
    end
end

---@param asset
function WarmupSyncHelper:OnAssetLoadCpl(asset)
    if self.curLoadSVCPath then
        Debug.LogFormat("【ShaderWarmup】SVC加载结束%s-变体数量%s", self.curLoadSVCPath, asset.variantCount)
        table.insert(self.svcCache, asset)
        table.insert(self.svcPathCache, self.curLoadSVCPath)
        self.curLoadSVCPath = nil
    end
end

---预热结束
function WarmupSyncHelper:WarmupCpl()
    TimerMgr.Discard(self.timerId)
    self.timerId = 0
    InputEffectMgr.SetEnable(true)
    Debug.LogFormat("【ShaderWarmup】预热完成-耗时%s秒", tostring(self.warmupedTime))
    pcall(self.onProgress, 1)
    pcall(self.onCpl) --回调一定要在最后，更新界面那里会销毁lua虚拟机，导致不可控的问题
end

---检查需要预热的列表
function WarmupSyncHelper:CheckWarmupList()
    local shaderInfo = XResources.GetShaderInfo()
    if shaderInfo ~= nil and shaderInfo.ShaderItemInfos ~= nil then
        for i = 0, shaderInfo.ShaderItemInfos.Length - 1 do
            local itemInfo = shaderInfo.ShaderItemInfos[i]
            local path = itemInfo.AssetPath
            if itemInfo.VariantCount > 0 and not ShaderWarmupMgr.CheckWarmupState(path) then
                local tempStr = string.split(itemInfo.AssetPath, "/")
                if not string.startswith(tempStr[#tempStr], "UI_") and not string.startswith(tempStr[#tempStr], "TextMeshPro_") then
                    table.insert(self.loadQueue, itemInfo.AssetPath)
                    self.totalWarmupCount = self.totalWarmupCount + 1
                    local svcWeight = itemInfo.VariantCount
                    self.totalWeight = self.totalWeight + svcWeight
                    Debug.LogFormat("【ShaderWarmup】添加预热队列%s-%s-%s", path, svcWeight, self.totalWeight)
                end
            end
        end
    end
    Debug.LogFormat("【ShaderWarmup】预热队列完成%s", #self.loadQueue)
end

---特殊情况放弃预热
function WarmupSyncHelper:OnGiveupWarmup()
    if self.svcPathCache then
        for _, v in pairs(self.svcPathCache) do
            ShaderWarmupMgr.ChangeWarmupState(v, true)
        end
    end
    if self.loadQueue then
        for _, v in pairs(self.loadQueue) do
            ShaderWarmupMgr.ChangeWarmupState(v, true)
        end
    end
    if self.curLoadSVCPath then
        ShaderWarmupMgr.ChangeWarmupState(self.curLoadSVCPath, true)
    end
    if self.curSVCPath then
        ShaderWarmupMgr.ChangeWarmupState(self.curSVCPath, true)
    end
    self:WarmupCpl()
end

---
function WarmupSyncHelper:OnStopWarmup()
    TimerMgr.Discard(self.timerId)
    self.timerId = 0
end

---清理预热数据
function WarmupSyncHelper:ClearWarmupData()
    table.clear(self.loadQueue)
    table.clear(self.svcCache)
    table.clear(self.svcPathCache)
    self.onProgress = nil
    self.onCpl = nil
end

return WarmupSyncHelper