---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/5/6 17:28
---

---喵喵牌
local CatCardProcedureController = require("Runtime.System.X3Game.Modules.CatCard.Controller.CatCardProcedureController")
---叠叠乐
local BlockTowerProcedureCtrl = require "Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.BlockTower.BlockTowerProcedureCtrl"
---单人娃娃机
local UFOCatcherProcedureCtrl = require "Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.UFOCatcher.UFOCatcherProcedureCtrl"
---双人娃娃机
local CoupleUFOCatcherProcedureCtrl = require "Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.CoupleUFOCatcher.CoupleUFOCatcherProcedureCtrl"
---娃娃机新手引导
local UFOCatcherProcedureGuideCtrl = require "Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.UFOCatcher.UFOCatcherProcedureGuideCtrl"
---打地鼠
local KnockMoleProcedureCtrl = require "Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.KnockMole.KnockMoleProcedureCtrl"

---@class GamePlayMgr
local GamePlayMgr = class("GamePlayMgr")

---@class GamePlayStartData
---@field enterType Define.GamePlayEnterType 玩法入口类型-出游、活动、约会计划等等等等
---@field gameType Define.GamePlayType 玩法类型-娃娃机、喵喵牌、叠叠乐、打地鼠
---@field subId int 关卡Id
---@field callback fun 玩法结束回调
---@field overrideDialogueId int 复写剧情用的DialogueId
---@field overrideConversations string[] 需要复写的ConversationName
---@field roleClothSuit string

---当前控制器
---@type GamePlayProcedureCtrl
local _controller = nil

---当前正在运行的类型
---@type Define.GamePlayType
local _type = Define.GamePlayType.GamePlayTypeNope
---@type GamePlayStartData
local _data = nil
---@type fun
local _startCallback

---@type LogicEntityType
local _entityType

---@type int
local roleId = nil

---@type any 缓存下游戏结果
local resultData = nil

---流程控制器
---@return GamePlayProcedureCtrl
function GamePlayMgr.GetController()
    return _controller
end

---是否在中
---@return boolean
function GamePlayMgr.IsPlaying()
    return _type ~= Define.GamePlayType.GamePlayTypeNope
end

---开始
---@param type Define.GamePlayType 类型
---@param data GamePlayStartData 开始传入的额外数据
---@param startCallback fun() 开始传入的额外数据
function GamePlayMgr.Start(type, data, startCallback)
    if GamePlayMgr.IsPlaying() then
        Debug.Log("有玩法正在进行中")
        return
    end
    _type = type
    _data = data
    _startCallback = startCallback
    local loadingType = GameConst.LoadingType.EnterDate
    local cfg = nil
    if type == Define.GamePlayType.GamePlayTypeUfoCatcher then
        cfg = LuaCfgMgr.Get("UFOCatcherDifficulty", data.subId)
        roleId = cfg and cfg.ManType
    elseif type == Define.GamePlayType.GamePlayTypeMiao then
        cfg = LuaCfgMgr.Get("MiaoCardDifficulty", data.subId)
        roleId = cfg and cfg.ManType
    elseif type == Define.GamePlayType.GamePlayTypeBlockTower then
        cfg = LuaCfgMgr.Get("BlockTowerDifficulty", data.subId)
        roleId = cfg and cfg.ManType
    elseif type == Define.GamePlayType.GamePlayTypeKnockMole then
        cfg = LuaCfgMgr.Get("KnockMoleDifficulty", data.subId)
        roleId = cfg and cfg.ManType
    end
    ---@type X3Data.GameplayCommonData
    local commonData = X3DataMgr.AddByPrimary(X3DataConst.X3Data.GameplayCommonData, nil, data.subId)
    commonData:SetGameType(type)
    commonData:SetEnterType(data.enterType)
    if type ~= Define.GamePlayType.GamePlayTypeKnockMole then
        local difficultyTypeCfg = BllMgr.GetGameplayBLL():GetDifficultyType(type, cfg)
        loadingType = difficultyTypeCfg.LoadingTipsGroupID
        _data.loadingType = loadingType
        UICommonUtil.SetLoadingEnableWithOpenParam({ MoveInCallBack = GamePlayMgr.OnMoveinCpl,
                                                     MoveOutCallBack = GamePlayMgr.OnMoveoutCpl }, loadingType, true)
    else
        GamePlayMgr.OnMoveinCpl()
    end
end

function GamePlayMgr.GetRoleID()
    return roleId
end

---Loading开启完毕
function GamePlayMgr.OnMoveinCpl()
    if LogicEntityUtil.IsOffline() then
        GamePlayMgr.InterStart()
    else
        if UNITY_EDITOR then
            ServerConst.SaveFileId = TimerMgr.GetCurTimeSeconds()
        end
        --[[        -- 2023年3月24日 20点30分 临时处理，大富翁是没有data数据的，这里直接调用入口(教主说就这样)
                if _type == Define.GamePlayType.GamePlayTypeCircleChess then
                    --GamePlayMgr.InterStart()
                    return
                end]]

        LogicEntityUtil.Open(_data.gameType, _data.subId, nil, nil, function()
            GamePlayMgr.InterStart()
        end, _data.enterType)
    end
end

---玩法流程正式开始
function GamePlayMgr.InterStart()
    if _startCallback then
        _startCallback()
        _startCallback = nil
    end
    if _type == Define.GamePlayType.GamePlayTypeUfoCatcher then
        GameStateMgr.Switch(GameState.UFOCatcher)
        --娃娃机新手引导控制器
        if _data.subId == 10101 then
            _controller = UFOCatcherProcedureGuideCtrl.new()
        else
            local static_data = LuaCfgMgr.Get("UFOCatcherDifficulty", _data.subId)
            if static_data.PlayerNumType == 1 then
                _controller = UFOCatcherProcedureCtrl.new()
            else
                _controller = CoupleUFOCatcherProcedureCtrl.new()
            end
        end
    elseif _type == Define.GamePlayType.GamePlayTypeBlockTower then
        GameStateMgr.Switch(GameState.BlockTower)
        _controller = BlockTowerProcedureCtrl.new()
    elseif _type == Define.GamePlayType.GamePlayTypeMiao then
        GameStateMgr.Switch(GameState.CatCard)
        _controller = CatCardProcedureController.new()
    elseif _type == Define.GamePlayType.GamePlayTypeKnockMole then
        _controller = KnockMoleProcedureCtrl.new()
    end
    GamePlayMgr.BeginPerformanceLog(_type, _data)
    _controller:Init(_data, GamePlayMgr.FinishCallback)
    _controller:Start()
end

function GamePlayMgr.OnMoveoutCpl()
    if _controller then
        _controller:OnMoveoutCpl()
    end
end

---Update
function GamePlayMgr.Update()
    if _controller then
        _controller:Update()
    end
end

function GamePlayMgr.FixedUpdate()
    if _controller then
        _controller:FixedUpdate()
    end
end

---暂停
function GamePlayMgr.GamePlayPause()
    if _controller then
        _controller:GamePlayPause(true)
    end
end

---继续
function GamePlayMgr.GamePlayResume()
    if _controller then
        _controller:GamePlayResume(true)
    end
end

---时间暂停
function GamePlayMgr.PauseTime()
    if _controller then
        _controller:PauseTime()
    end
end

---事件继续
function GamePlayMgr.ResumeTime()
    if _controller then
        _controller:ResumeTime()
    end
end

---记录下玩法的结果，供其他模块使用
---@param data any
function GamePlayMgr.SaveResult(data)
    resultData = data
end

---结束
---@param data any
function GamePlayMgr.Finish(data)
    if _controller then
        _controller:Finish(data)
    end
    if _entityType then
        LogicEntityUtil.Destroy(_entityType)
        _entityType = nil
    end
end

---结束回调
function GamePlayMgr.FinishCallback()
    GamePlayMgr.Clear()
    ---约会计划预留
    if _data.enterType == Define.GamePlayEnterType.GamePlayEnterTypeDatePlan then
        BllMgr.GetDatePlanBLL():OnGamePlayComplete(resultData)
        resultData = nil
    elseif _data.gameType == Define.GamePlayType.GamePlayTypeKnockMole then

    else
        GameStateMgr.Switch(GameState.MainHome)
        ErrandMgr.SetDelay(false)
    end
end

--清理，用于状态退出时使用，仅做清理，无后续逻辑
function GamePlayMgr.Clear()
    if _controller then
        GamePlayMgr.EndPerformanceLog(_type, _controller.staticData)
        _controller:Clear()
        BllMgr.GetGameplayBLL():Clear()
        _type = Define.GamePlayType.GamePlayTypeNope
        GameUtil.ClearTarget(_controller)
        _controller = nil
    end
end

---喵喵牌需要一个清理剧情队列并且状态置为None的接口
function GamePlayMgr.ClearDialogue()
    if _controller then
        _controller:ClearDelayConversationList()
        DialogueManager.Get("GamePlay"):ExitDialogueAll()
        _controller:ChangeState("None")
    end
end

---开启性能Log
---@param type Define.GamePlayType
---@param data
function GamePlayMgr.BeginPerformanceLog(type, data)
    if type == Define.GamePlayType.GamePlayTypeUfoCatcher then
        PerformanceLog.Begin(PerformanceLog.Tag.UFOCatcher, data.subId)
    elseif type == Define.GamePlayType.GamePlayTypeBlockTower then
        PerformanceLog.Begin(PerformanceLog.Tag.BlockTower, data.subId)
    elseif type == Define.GamePlayType.GamePlayTypeMiao then
        PerformanceLog.Begin(PerformanceLog.Tag.MiaoMiaoCard, data.subId)
    end
end

---停止性能Log
---@param type Define.GamePlayType
---@param data
function GamePlayMgr.EndPerformanceLog(type, data)
    if type == Define.GamePlayType.GamePlayTypeUfoCatcher then
        PerformanceLog.End(PerformanceLog.Tag.UFOCatcher, data.subId)
    elseif type == Define.GamePlayType.GamePlayTypeBlockTower then
        PerformanceLog.End(PerformanceLog.Tag.BlockTower, data.subId)
    elseif type == Define.GamePlayType.GamePlayTypeMiao then
        PerformanceLog.End(PerformanceLog.Tag.MiaoMiaoCard, data.subId)
    end
end

return GamePlayMgr