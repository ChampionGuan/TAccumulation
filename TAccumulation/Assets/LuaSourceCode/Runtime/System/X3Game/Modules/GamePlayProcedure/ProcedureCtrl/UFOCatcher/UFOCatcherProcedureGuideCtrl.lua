---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianxin.
--- DateTime: 2021/8/26 14:34
---

---@class UFOCatcherProcedureGuideCtrl

---@type UFOCatcherProcedureCtrl
local Base = require "Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.UFOCatcher.UFOCatcherProcedureCtrl"
local UFOCatcherProcedureGuideCtrl = class("UFOCatcherProcedureGuideCtrl", Base)

---@type UFOCatcherBLL
local BLL = BllMgr.GetUFOCatcherBLL()
local UFOCatcherConst = require("Runtime.System.X3Game.Modules.GamePlayProcedure.ProcedureCtrl.UFOCatcher.UFOCatcherConst")

---进入游戏
function UFOCatcherProcedureGuideCtrl:StateStart()
    UIMgr.Open(UIConf.UFOCatcher, UFOCatcherGameType.Guide)
    EventMgr.Dispatch("HideJoystick", nil)
    if #BLL.manCaughtDollList > 0 or #BLL.plCaughtDollList > 0 then
        self:InitDollGameObject()
        local doll = BLL.manCaughtDollList[1] or BLL.plCaughtDollList[1]
        local dollID = doll.Id
        local cutSceneDoll = self:GetTargetByID(dollID)
        self:HideDoll(cutSceneDoll)
        BLL:AddCatchedDollPerRound(cutSceneDoll)
        self:SetReconnectionTarget(BLL.dollRestID)
        self.goSucceedState = true
        EventMgr.AddListenerOnce("CameraTimelinePlayed", self.CameraTimelinePlayed, self)
        self:ChangeState(UFOCatcherGameState.Prepare)
        self:SetReconnectionTarget(BLL.dollRestID)
    else
        EventMgr.AddListenerOnce("CameraTimelinePlayed", self.CameraTimelinePlayed, self)
        self:ChangeState(UFOCatcherGameState.Prepare)
        self:SetReconnectionTarget(BLL.dollRestID)
    end
    ---新手引导跳过直接结算
    self.GuidGiveUp = false
    EventMgr.AddListener("SkipUFOCatcherGuide", self.OnSkipDailyDateGuide, self)
end

---跳过引导
---@param subId int
function UFOCatcherProcedureGuideCtrl:OnSkipDailyDateGuide(subId)
    local dailyDateEntrySubId = self.staticData.subId
    if dailyDateEntrySubId == subId then
        self:GamePlayPause(false, "SkipGuide")
        self.GuidGiveUp = true
        self:GetReward(true)
    end
end

---override
function UFOCatcherProcedureGuideCtrl:RegisterGameState()
    --复写Base的，新手引导娃娃机暂时不使用新机制
end

---结束
function UFOCatcherProcedureGuideCtrl:Finish()
    if not self.GuidGiveUp then
        EventMgr.AddListenerOnce("GetUFOCatcherRewardReply", self.OnCatcherRewardReply, self)
        GrpcMgr.SendRequest(RpcDefines.GetUFOCatcherRewardRequest, { EnterType = self.staticData.enterType })
    else
        self:OnCatcherRewardReply()
    end
end

---
function UFOCatcherProcedureGuideCtrl:OnCatcherRewardReply()
    BllMgr.GetDailyDateBLL():CheckDollCollectionTips(BLL.static_UFOCatcherDifficulty.ManType,
            handler(self, self.OpenLoadingAfterTips), false)
end

---娃娃弹窗后起Loading
function UFOCatcherProcedureGuideCtrl:OpenLoadingAfterTips()
    UICommonUtil.SetLoadingEnableWithOpenParam({ MoveInCallBack = function()
        UIMgr.Close(UIConf.UFOShowResultWnd)
        Base.super.Finish(self)
    end }, GameConst.LoadingType.MainHome, true)
end

---切换状态
---@param stateString string
function UFOCatcherProcedureGuideCtrl:ChangeState(stateString)
    ---只执行GamePlayProcedureCtrl的ChangeState
    Base.super.ChangeState(self, stateString)
    if self.delayChangeState == nil then
        local lastState = self.state
        self.state = stateString
        if self.state == UFOCatcherGameState.ChangePlayer then
            self:CheckEventToPlay(handler(self, self.GotoNextState), false)
        elseif self.state == UFOCatcherGameState.Prepare then
            ---新手引导特殊检测
            if self.goSucceedState then
                self:ChangeState(UFOCatcherGameState.Successed)
            end
            ---新手引导特殊检测
            if self.giveDollID ~= nil and self.giveDollID ~= 0 then
                self:ReduceCount()
                self:SendResultToServer(function()
                    self:ChangeState(UFOCatcherGameState.Successed)
                end)
                return
            end
            self:ClearBetweenState()
            self.resultSended = false
            EventMgr.Dispatch("RefreshCatchTimeLimit", 0)
            self:InitDollGameObject()
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_ENTERPREPARE", nil)
            self:ChangeDialogueSetting(true)
            self:CheckEventToPlay(handler(self, self.GotoNextState), false)
        elseif self.state == UFOCatcherGameState.Choose then
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_ENTERCHOOSE", nil)
            self:ClearBetweenState()
            self:CheckEventToPlay(handler(self, self.GotoNextState), false)
        elseif self.state == UFOCatcherGameState.Moving then
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            if self.gameMode == GamePlayConst.GameMode.AI then
                EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_MANENTERMOVING", nil)
            end
            BLL.ufoCatcherController:ShowAimEffect()
            EventMgr.AddListener(Const.Event.GUIDE_TO_CLIENT, self.OnGuideEvent, self)
            EventMgr.Dispatch(Const.Event.CLIENT_TO_GUIDE, X3_CFG_CONST.UFOCATCHER_GUIDE, tostring(self.staticData.subId), tostring(SelfProxyFactory.GetGamePlayProxy():GetCurrentRoundIndex() + 1), tostring(self.gameMode == GamePlayConst.GameMode.AI and 1 or 0), "Moving")
            EventMgr.Dispatch("UFOCATCHEREVENT_GUID_OPEN")
            self:GamePlayPause()
        elseif self.state == UFOCatcherGameState.Catching then
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            EventMgr.Dispatch("RefreshCatchTimeLimit", 0)
            BLL.ufoCatcherController:SwitchCatchButtonEffect(false)
            self:ChangeCatchPara()
            self:DisableGameControl()
            self:ClearBetweenState()
            self:CheckEventToPlay(nil, false)
        elseif self.state == UFOCatcherGameState.DollDrop then
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            self:CheckEventToPlay(nil, false)
            self.state = lastState
        elseif self.state == UFOCatcherGameState.PlayerCommand then
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            self:ClearBetweenState()
            self:CheckEventToPlay(handler(self, self.PlayerCommandOver), false)
        elseif self.state == UFOCatcherGameState.Successed then
            EventMgr.Dispatch("UFOCATCHEREVENT_CLOSECHANGEPLAYER", nil)
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            EventMgr.Dispatch("HideJoystick", nil)
            self:ClearBetweenState()
            self:CloseControlRig()
            self.touchCtrl.canControl = false
            self:CheckFirstGetDollDialogue()
        elseif self.state == UFOCatcherGameState.Failed then
            EventMgr.Dispatch("UFOCATCHEREVENT_CLOSECHANGEPLAYER", nil)
            EventMgr.Dispatch("UFOCatcherPanel_Show")
            self:ClearBetweenState()
            self:CheckEventToPlay(handler(self, self.GotoNextState), false)
            self:CloseControlRig()
            self.touchCtrl.canControl = false
        elseif self.state == UFOCatcherGameState.FreeSuccessed then
            EventMgr.Dispatch("UFOCATCHEREVENT_CLOSECHANGEPLAYER", nil)
            --↓↓这个代码在这里不合理，需要封装State的OnEnter和OnExit，然后再OnExit里调用
            if self.gameMode == GamePlayConst.GameMode.Player then
                EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_PLQUITEMOVING", nil)
            else
                EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_MANQUITEMOVING", nil)
            end
            EventMgr.Dispatch("HideJoystickEffect", nil)
            EventMgr.Dispatch("RefreshCatchTimeLimit", 0)
            self:DisableGameControl()
            BLL.ufoCatcherController:HideEffect()
            self:ClearBetweenState()
            self:CheckUFOCatcherDialogue(function()
                self:SendResultToServer(handler(self, self.CatchDollCallback))
            end)
            self:CloseControlRig()
            self.touchCtrl.canControl = false
        elseif self.state == UFOCatcherGameState.Ending then
            --新手引导没有Ending阶段，会直接去Finish阶段
            self.isPlaying = false
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_ENTERENDING", nil)
            self:CheckUFOCatcherDialogue(handler(self, self.GetReward))
        elseif self.state == UFOCatcherGameState.Finish then
            self.isPlaying = false
            self:ClearBetweenState()
            self:Finish()
            self:CheckEventToPlay(nil, false)
        else
            self:ClearBetweenState()
            self:CheckEventToPlay(nil, false)
        end

        self:ChangeMotion()
    end
end

---下一个状态
function UFOCatcherProcedureGuideCtrl:GotoNextState()
    if self.isPlaying == false then
        return
    end
    if self.state == UFOCatcherGameState.Prepare then
        self:ChangeDialogueSetting(false)
        --单人标准二爪机、单人平移二爪机如果上一轮结算完有娃娃掉落，需要走一个额外Success
        if #BLL.catchedDollCache > 0 and BLL:IsTwoClaw(BLL.static_UFOCatcherDifficulty.CatchType) then
            self.isFreeSuccess = true
            self:CatchCachedDoll()
            BLL.ufoCatcherController:HideEffect()
        else
            local nextState = self.state
            nextState = self:PrepareGame()
            self:ChangeState(nextState)
        end
    elseif self.state == UFOCatcherGameState.Choose then
        EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_QUITCHOOSE", nil)
        if self.gameMode == GamePlayConst.GameMode.AI then
            local data = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.UFOCATCHERSINGLETYPETHREECLAWGUIDEDOLL)[1]
            if data.ID == self.staticData.subId then
                self:GetGuideAITarget(data.Num)
            else
                self:DecideCatchTarget()
            end
            --self:DecideCatchTarget()
            ---男主新手引导抓娃娃根据配置抓固定位置的娃娃
        end
        self:ChangeState(UFOCatcherGameState.Moving)
    elseif self.state == UFOCatcherGameState.Moving then
        if self.gameMode == GamePlayConst.GameMode.Player then
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_PLQUITEMOVING", nil)
            self:ChangeState(UFOCatcherGameState.Catching)
        else
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_MANQUITEMOVING", nil)
            self:ChangeState(UFOCatcherGameState.PlayerCommand)
        end
        BLL.ufoCatcherController:HideAimEffect()
    elseif self.state == UFOCatcherGameState.PlayerCommand then
        self:ChangeState(UFOCatcherGameState.Catching)
    elseif self.state == UFOCatcherGameState.Catching then
        self:ChangeState(UFOCatcherGameState.CatchingUp)
    elseif self.state == UFOCatcherGameState.CatchingUp then
        self:ChangeState(UFOCatcherGameState.Moveback)
    elseif self.state == UFOCatcherGameState.Moveback then
        self:CatchCachedDoll()
        BLL.ufoCatcherController:HideEffect()
        self:CheckUFOCatcherDialogue(function()
            self:SendResultToServer(handler(self, self.CatchDollCallback))
        end)
    elseif self.state == UFOCatcherGameState.FreeSuccessed then
        if self.isFromMoving then
            self.isFromMoving = false
            self:NextGame()
        else
            local nextState = self:PrepareGame()
            self:ChangeState(nextState)
        end
    elseif self.state == UFOCatcherGameState.Successed then
        self:CheckUFOCatcherDialogue(function()
            self:ChangeState(UFOCatcherGameState.Finish)
        end)
    elseif self.state == UFOCatcherGameState.Failed then
        --娃娃来源（新手引导，同意接受店员赠送的娃娃）
        self:GiveDollItem()
        self:NextGame()
    elseif self.state == UFOCatcherGameState.Ending then
        EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_QUITENDING", nil)
    elseif self.state == UFOCatcherGameState.Finish then
    elseif self.state == UFOCatcherGameState.ChangePlayer then
        self.isOpenChangePlayer = false
        self:CurrentDialogueSystem():ChangeVariableState(UFOCatcherConst.Variable_ChangePlayer, 0)
        self:ChangeState(UFOCatcherGameState.Prepare)
    end
end

---
function UFOCatcherProcedureGuideCtrl:PrepareGame()
    local nextState
    if SelfProxyFactory.GetGamePlayProxy():GetMaxRoundCount() - SelfProxyFactory.GetGamePlayProxy():GetCurrentRoundIndex() <= 0 then
        nextState = UFOCatcherGameState.Ending
    else
        self:CurrentDialogueSystem():ChangeVariableState(1002, -1)
        BLL.isOpenMoveTimeLimit = false
        if self:CurrentDialogueSystem():CheckVariableState(UFOCatcherConst.Variable_CatchType, 1) then
            self.gameMode = GamePlayConst.GameMode.AI
            self.playerGO = self:CurrentDialogueSystem():GetActor(self.maleKey, nil)
            if BLL:IsThreeClaw(BLL.static_UFOCatcherDifficulty.CatchType) then
                nextState = UFOCatcherGameState.Choose
            else
                BLL:SetPlayerChooseTarget(self.twoClawTarget)
                self.aiBehaviorTree:SetVariable("catchTarget", BLL:GetAITarget())
                nextState = UFOCatcherGameState.Moving
            end
        else
            self.gameMode = GamePlayConst.GameMode.Player
            self.playerGO = self:CurrentDialogueSystem():GetActor(self.femaleKey, nil)
            nextState = UFOCatcherGameState.Moving
        end
        if BLL:IsThreeClaw(BLL.static_UFOCatcherDifficulty.CatchType) then
            self:RejectDollFromPool()
        end
        self.gameStarted = true
        BLL.ufoCatcherController:ShowEffectWithEffectStringKey("SuccessCatch", false)
        BLL.ufoCatcherController:HideAimEffect()
    end
    return nextState
end

---娃娃来源（新手引导，同意接受店员赠送的娃娃）
function UFOCatcherProcedureGuideCtrl:GiveDollItem()
    local giveDollID = self:CurrentDialogueSystem():GetVariableState(2000)
    self.giveDollID = giveDollID
    if self.giveDollID ~= nil and self.giveDollID ~= 0 then
        local cutSceneDoll = self:GetTargetByID(self.giveDollID)
        self:HideDoll(cutSceneDoll)
        --传给CutScene的娃娃模型和玩家抓的不是同一个模型，需要替换！！！
        BLL:AddCatchedDollPerRound(cutSceneDoll)
    end
end

---引导事件
function UFOCatcherProcedureGuideCtrl:OnGuideEvent()
    EventMgr.Dispatch("UFOCATCHEREVENT_GUID_CLOSE")
    self.resultSended = false
    BLL.durationTime = 0
    if self.gameMode == GamePlayConst.GameMode.AI and GameObjectUtil.IsNull(BLL.ufoCatcherController.clawController.joystick) == false then
        local x3Animator = self.maleGameObject:GetComponent(typeof(CS.X3Game.X3Animator))
        x3Animator.controlRigTarget = BLL.ufoCatcherController.clawController.joystick.transform:Find("attachment")
    end
    self:OpenControlRig()
    self:GamePlayPause()
    self:InitDollGameObject()
    self:CheckUFOCatcherDialogue(handler(self, self.ReduceCount))
    self:CheckEventToPlay(nil, false)
    EventMgr.RemoveListener(Const.Event.GUIDE_TO_CLIENT, self.OnGuideEvent, self)
end

---引导结束
function UFOCatcherProcedureGuideCtrl:FinishGuide()
    self:ChangeState(UFOCatcherGameState.Finish)
end

---override，添加DollPOSTab记录位置供新手引导使用
function UFOCatcherProcedureGuideCtrl:CreateDollGameObjectPool()
    self.DollPosTab = {}
    local tempList = BLL.dollList
    local dollList = {}
    for i = 1, #tempList do
        for j = 1, tempList[i].Count do
            table.insert(dollList, #dollList + 1, tempList[i])
        end
    end
    local list = self:RandomSort(dollList)
    for i = 1, #list do
        --创建一个娃娃
        local doll, dollData = self:CreateDollGameObject(list[i].Id, list[i].ColorDollID)
        local pos, index = BLL.ufoCatcherController:GetNextPosition()
        GameObjectUtil.SetParent(doll.transform, BLL.dollParent.transform)
        GameObjectUtil.SetLocalPosition(doll, pos)
        if dollData:GetDollDropCfg().PutType == 2 then
            GameObjectUtil.SetLocalEulerAngles(doll, math.random(0, 180), math.random(0, 180), math.random(0, 180))
        end
        doll:SetActive(true)
        self.DollPosTab[string.format("%d", index)] = doll
    end
end

---获取引导关的AI目标
---@param index int
function UFOCatcherProcedureGuideCtrl:GetGuideAITarget(index)
    local target = self.DollPosTab[string.format("%d", index)]
    if target == nil then
        self:DecideCatchTarget()
    else
        BLL:SetRandomTarget(target)
        BLL:SetPlayerChooseTarget(nil)
        self.aiBehaviorTree:SetVariable("catchTarget", BLL:GetAITarget())
    end
end

--Service
function UFOCatcherProcedureGuideCtrl:SendResultToServer(handler)
    if self.isEnded then
        return
    end
    self.resultSended = true
    self.sendHandler = handler
    EventMgr.AddListener("CatchDollReply", self.CatchDollReply, self)
    local req = {}
    req.CatchDolls = {}
    ---选择店员送的娃娃给服务器上报
    if self.giveDollID == nil or self.giveDollID == 0 then
        for i, doll in pairs(BLL.currentCatchedDollList) do
            local dollData = BLL:GetDollData(doll)
            local catchDoll = {}
            catchDoll.DollPollID = dollData:GetDollDropId()
            catchDoll.ColorDollID = dollData:GetDollColorId()
            table.insert(req.CatchDolls, #req.CatchDolls + 1, catchDoll)
            BLL:RemoveFromDollPool(doll)
        end
        BLL.lastCatchedDollIdMan = {}
        BLL.lastCatchedDollIdPL = {}
        for _, v in pairs(BLL.currentCatchedDollList) do
            if self.gameMode == GamePlayConst.GameMode.Player then
                table.insert(BLL.lastCatchedDollIdPL, #BLL.lastCatchedDollIdPL + 1, BLL:GetDollData(v):GetDollDropId())
            else
                table.insert(BLL.lastCatchedDollIdMan, #BLL.lastCatchedDollIdMan + 1, BLL:GetDollData(v):GetDollDropId())
            end
            local dollData = BLL:GetDollData(v)
            local dollItem = dollData:GetDollItemCfg()
            if dollItem.ModelInMachine ~= dollItem.ModelInGetShow then
                self:RemoveDestroyWhenFinish(v)
                CS.UnityEngine.Object.Destroy(v)
            end
        end
    else
        local catchDoll = {}
        catchDoll.DollPollID = self.giveDollID
        req.CatchDolls[#req.CatchDolls + 1] = catchDoll
    end
    GrpcMgr.SendRequest(RpcDefines.CatchDollRequest, req)
    BLL.currentCatchedDollList = {}
end

---因为没有使用新的State机制，所以需要在这里发个事件出去
function UFOCatcherProcedureGuideCtrl:OnReduceCountCallback()
    Base.OnReduceCountCallback(self)
    if self.state == UFOCatcherGameState.Moving then
        if self.gameMode == GamePlayConst.GameMode.AI then
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_MANENTERMOVING", nil)
        else
            EventMgr.Dispatch("UFOCATCHEREVENT_UFOCATCHERSTATE_PLENTERMOVING", nil)
        end
    end
end

return UFOCatcherProcedureGuideCtrl