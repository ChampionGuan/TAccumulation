---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhanbo.
--- DateTime: 2022/3/19 14:26
---
---@class DevelopPropertyCtrl
---@field playerLevelProperty DevelopProperty
---
local DevelopPropertyCtrl = class("PropertyMgr")

---CreateProperty
---@return DevelopProperty
function DevelopPropertyCtrl:CreateProperty()
    ---@type DevelopProperty
    local property = require("Runtime.System.X3Game.Modules.DevelopProperty.DevelopProperty").new()
    return property
end

---@param propertyMap table<int,int>
---@return DevelopProperty
function DevelopPropertyCtrl:CreatePropertyByMap(propertyMap)
    ---@type DevelopProperty
    local property = require("Runtime.System.X3Game.Modules.DevelopProperty.DevelopProperty").new()
    property:InitByPropertyMap(propertyMap)
    return property
end

---ResetProperty
---@param property DevelopProperty
function DevelopPropertyCtrl:CreateOrResetProperty(property)
    if not property then
        property = self:CreateProperty()
    end
    self:ResetProperty(property)
    return property
end

---@param property DevelopProperty
function DevelopPropertyCtrl:ResetProperty(property)
    if property then
        property:ClearProperties()
    end
end

---GetCardBaseProperty羁绊卡基础属性
---@param cardId int
---@param cardLevel int
---@param cardStarLevel int
---@param cardPhaseLevel int
---@param cardAwakeLevel int
---@return DevelopProperty
function DevelopPropertyCtrl:GetCardBaseProperty(cardId, cardLevel, cardStarLevel, cardPhaseLevel, cardAwakeLevel)
    self.cfgCardBaseInfoProperty = self:CreateOrResetProperty(self.cfgCardBaseInfoProperty)
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cfg_CardBaseInfo then
        return self.cfgCardBaseInfoProperty
    end
    if not cardLevel or not cardStarLevel or not cardPhaseLevel or not cardAwakeLevel then
        Debug.LogError("必须要传等级、星级、觉醒状态、品阶等级！")
        return self.cfgCardBaseInfoProperty
    end
    ---等级属性加成
    local cardLevelProperty = self:GetCardLevelProperty(cardId, cardLevel)
    self.cfgCardBaseInfoProperty:AddPropertys(cardLevelProperty)
    ---星级属性加成
    local cfgCardStarProperty = self:GetCfgCardStarProperty(cardId, cardStarLevel)
    self.cfgCardBaseInfoProperty:AddPropertys(cfgCardStarProperty)
    ---星级属性加成
    local cfgCardAwakeProperty = self:GetCfgCardAwakeProperty(cardId, cardAwakeLevel)
    self.cfgCardBaseInfoProperty:AddPropertys(cfgCardAwakeProperty)
    ---深化属性加成
    ---@type cfg.CardPhase
    local cfg_CardPhase = BllMgr.GetCardBLL():GetPhaseCfgData(cfg_CardBaseInfo.PhaseMode, cardPhaseLevel)
    if cfg_CardPhase then
        local propertyType, propertyValue = self.cfgCardBaseInfoProperty:GetPropertyValueWithPercent(X3_CFG_CONST.PROPERTY_MAXHPSCALE, cfg_CardPhase.MaxHPUp)
        self.cfgCardBaseInfoProperty:AddProperty(propertyType, propertyValue)
        propertyType, propertyValue = self.cfgCardBaseInfoProperty:GetPropertyValueWithPercent(X3_CFG_CONST.PROPERTY_PHYATTACKSCALE, cfg_CardPhase.PhyAtkUp)
        self.cfgCardBaseInfoProperty:AddProperty(propertyType, propertyValue)
        propertyType, propertyValue = self.cfgCardBaseInfoProperty:GetPropertyValueWithPercent(X3_CFG_CONST.PROPERTY_PHYDEFENCESCALE, cfg_CardPhase.PhyDefUp)
        self.cfgCardBaseInfoProperty:AddProperty(propertyType, propertyValue)
        propertyType, propertyValue = self.cfgCardBaseInfoProperty:GetPropertyValueWithPercent(X3_CFG_CONST.PROPERTY_CRITVAL, cfg_CardPhase.CritValUp)
        self.cfgCardBaseInfoProperty:AddProperty(propertyType, propertyValue)
        propertyType, propertyValue = self.cfgCardBaseInfoProperty:GetPropertyValueWithPercent(X3_CFG_CONST.PROPERTY_CRITHURTADD, cfg_CardPhase.CritHurtUp)
        self.cfgCardBaseInfoProperty:AddProperty(propertyType, propertyValue)
    end
    self.cfgCardBaseInfoProperty:FloorProperty()
    return self.cfgCardBaseInfoProperty
end

---通过槽位获取羁绊卡模板属性
---@param cardId int
---@param level int
---@return DevelopProperty
function DevelopPropertyCtrl:GetCardLevelProperty(cardId, level)
    self.cardLevelProperty = self:CreateOrResetProperty(self.cardLevelProperty)
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    local cardTemplateCfg = BllMgr.GetCardBLL():GetCardLevelTemplate(level)
    if not cardTemplateCfg then
        return self.cardLevelProperty
    end
    self.cardLevelProperty:AddProperty(X3_CFG_CONST.PROPERTY_MAXHP, cardTemplateCfg.PropMaxHP * (cfg_CardBaseInfo.MaxHPRate / 1000))
    self.cardLevelProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYATTACK, cardTemplateCfg.PropPhyAtk * (cfg_CardBaseInfo.PhyAttackRate / 1000))
    self.cardLevelProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYDEFENCE, cardTemplateCfg.PropPhyDef * (cfg_CardBaseInfo.PhyDefenceRate / 1000))
    self.cardLevelProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITVAL, cardTemplateCfg.PropCritVal * (cfg_CardBaseInfo.CritValRate / 1000))
    self.cardLevelProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITHURTADD, cardTemplateCfg.PropCritHurt * (cfg_CardBaseInfo.CritHurtAddRate / 1000))
    return self.cardLevelProperty
end

---获取羁绊卡星级属性
function DevelopPropertyCtrl:GetCfgCardStarProperty(cardId, starLevel)
    self.cfgCardStarProperty = self:CreateOrResetProperty(self.cfgCardStarProperty)
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    local cardTemplateCfg = BllMgr.GetCardBLL():GetCardStarTemplate(starLevel)
    if not cardTemplateCfg then
        return self.cfgCardStarProperty
    end
    self.cfgCardStarProperty:AddProperty(X3_CFG_CONST.PROPERTY_MAXHP, cardTemplateCfg.PropMaxHP * (cfg_CardBaseInfo.MaxHPRate / 1000))
    self.cfgCardStarProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYATTACK, cardTemplateCfg.PropPhyAtk * (cfg_CardBaseInfo.PhyAttackRate / 1000))
    self.cfgCardStarProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYDEFENCE, cardTemplateCfg.PropPhyDef * (cfg_CardBaseInfo.PhyDefenceRate / 1000))
    self.cfgCardStarProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITVAL, cardTemplateCfg.PropCritVal * (cfg_CardBaseInfo.CritValRate / 1000))
    self.cfgCardStarProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITHURTADD, cardTemplateCfg.PropCritHurt * (cfg_CardBaseInfo.CritHurtAddRate / 1000))
    return self.cfgCardStarProperty
end

---获取羁绊卡觉醒属性
function DevelopPropertyCtrl:GetCfgCardAwakeProperty(cardId, awakeLevel)
    self.cfgCardAwakeProperty = self:CreateOrResetProperty(self.cfgCardAwakeProperty)
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    local cardTemplateCfg = BllMgr.GetCardBLL():GetCardAwakeTemplate(awakeLevel)
    if not cardTemplateCfg then
        return self.cfgCardAwakeProperty
    end
    self.cfgCardAwakeProperty:AddProperty(X3_CFG_CONST.PROPERTY_MAXHP, cardTemplateCfg.PropMaxHP * (cfg_CardBaseInfo.MaxHPRate / 1000))
    self.cfgCardAwakeProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYATTACK, cardTemplateCfg.PropPhyAtk * (cfg_CardBaseInfo.PhyAttackRate / 1000))
    self.cfgCardAwakeProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYDEFENCE, cardTemplateCfg.PropPhyDef * (cfg_CardBaseInfo.PhyDefenceRate / 1000))
    self.cfgCardAwakeProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITVAL, cardTemplateCfg.PropCritVal * (cfg_CardBaseInfo.CritValRate / 1000))
    self.cfgCardAwakeProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITHURTADD, cardTemplateCfg.PropCritHurt * (cfg_CardBaseInfo.CritHurtAddRate / 1000))
    return self.cfgCardAwakeProperty
end

---获取芯核加成属性
---@param cardBaseProperty DevelopProperty
---@param gemCores X3Data.GemCore[]
function DevelopPropertyCtrl:GetCardGemCoreProperty(cardId, cardBaseProperty, gemCores)
    self.cfgCardGemCoreProperty = self:CreateOrResetProperty(self.cfgCardGemCoreProperty)
    if not gemCores then
        return self.cfgCardGemCoreProperty
    end
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cfg_CardBaseInfo then
        return self.cfgCardGemCoreProperty
    end
    if not cardBaseProperty then
        Debug.LogError("必须要传CardBaseProperty！")
        return self.cfgCardGemCoreProperty
    end
    --芯核加成属性
    local coresProperty = self:CreateProperty()
    for _, gemCore in pairs(gemCores) do
        ---@type table<number,number>
        local gemCorePropertyMap = SelfProxyFactory.GetGemCoreProxy():GetGemCoreAllAttr(gemCore:GetPrimaryValue(), gemCore:GetPlayerUid(), GemCoreConst.GemCoreAttrType.All)
        if gemCorePropertyMap then
            local gemCoreProperty = self:CreateProperty()
            for type, value in pairs(gemCorePropertyMap) do
                local propertyType, propertyValue = cardBaseProperty:GetPropertyValueWithPercent(type, value)
                gemCoreProperty:AddProperty(propertyType, propertyValue)
            end
            coresProperty:AddPropertys(gemCoreProperty)
        end
    end
    coresProperty:FloorProperty()
    return coresProperty
end

---获取天赋加成属性
---@param cardBaseAndGemCoreProperty DevelopProperty
function DevelopPropertyCtrl:GetCardTalentProperty(cardId, cardBaseAndGemCoreProperty)
    self.cfgCardTalentProperty = self:CreateOrResetProperty(self.cfgCardTalentProperty)
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cfg_CardBaseInfo then
        return self.cfgCardTalentProperty
    end
    if not cardBaseAndGemCoreProperty then
        Debug.LogError("必须要传CardBaseProperty！")
        return self.cfgCardTalentProperty
    end
    --天赋加成属性
    local talentCfg = BllMgr.GetCardBLL():GetCardTalentCfgData(cfg_CardBaseInfo.TalentID)
    if talentCfg then
        local baseAttr = talentCfg.BaseAttr
        local increaseEffect = talentCfg.IncreaseEffect
        local attrValue = cardBaseAndGemCoreProperty:GetPropertyValue(baseAttr.Type)
        if attrValue > 0 then
            local extraValue = attrValue - baseAttr.ID
            local repeatCnt = math.floor(extraValue / baseAttr.Num)
            if repeatCnt > 0 then
                local talentProperty = self:CreateProperty()
                for i = 1, repeatCnt do
                    for j = 1, #increaseEffect do
                        local propertyType, propertyValue = cardBaseAndGemCoreProperty:GetPropertyValueWithPercent(increaseEffect[j].ID, increaseEffect[j].Num)
                        talentProperty:AddProperty(propertyType, propertyValue)
                    end
                end
                self.cfgCardTalentProperty:AddPropertys(talentProperty)
            end
        end
    end
    return self.cfgCardTalentProperty
end

---获取羁绊卡最终属性
---@param gemCores X3Data.GemCore[]
---@return DevelopProperty,DevelopProperty,DevelopProperty,DevelopProperty 最终属性，基础属性，芯核加成属性，天赋加成属性
function DevelopPropertyCtrl:GetCardFinalProperty(cardId, cardLevel, cardStarLevel, cardPhaseLevel, cardAwakeLevel, gemCores)
    self.cfgCardFinalProperty = self:CreateOrResetProperty(self.cfgCardFinalProperty)
    ---@type cfg.CardBaseInfo
    local cfg_CardBaseInfo = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cfg_CardBaseInfo then
        return self.cfgCardFinalProperty, self.cfgCardFinalProperty, self.cfgCardFinalProperty, self.cfgCardFinalProperty
    end
    if not cardLevel or not cardStarLevel or not cardPhaseLevel or not cardAwakeLevel then
        Debug.LogError("必须要传等级、星级、觉醒状态、品阶等级！")
        return self.cfgCardFinalProperty, self.cfgCardFinalProperty, self.cfgCardFinalProperty, self.cfgCardFinalProperty
    end
    --基础属性
    local baseProperty = self:GetCardBaseProperty(cardId, cardLevel, cardStarLevel, cardPhaseLevel, cardAwakeLevel)
    self.cfgCardFinalProperty:AddPropertys(baseProperty)
    --芯核加成属性
    local gemCoresProperty = self:GetCardGemCoreProperty(cardId, self.cfgCardFinalProperty, gemCores)
    self.cfgCardFinalProperty:AddPropertys(gemCoresProperty)
    --天赋加成属性
    local talentProperty = self:GetCardTalentProperty(cardId, self.cfgCardFinalProperty)
    self.cfgCardFinalProperty:AddPropertys(talentProperty)
    self.cfgCardFinalProperty:FloorProperty()
    return self.cfgCardFinalProperty, baseProperty, gemCoresProperty, talentProperty
end

--endregion
return DevelopPropertyCtrl