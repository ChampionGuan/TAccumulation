---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhanbo.
--- DateTime: 2022/3/19 16:41
---
---@class DevelopPropertyUtil
local DevelopPropertyUtil = {}
local DevelopPropertyCtrl = require("Runtime.System.X3Game.Modules.DevelopProperty.DevelopPropertyCtrl")

---@return DevelopProperty
function DevelopPropertyUtil.CreateProperty()
    return DevelopPropertyCtrl:CreateProperty()
end

---@param propertyMap table<int,int>
---@return DevelopProperty
function DevelopPropertyUtil.CreatePropertyByMap(propertyMap)
    return DevelopPropertyCtrl:CreatePropertyByMap(propertyMap)
end

---GetPlayerProperty 获取女主属性
---@param weaponSkinId int 武器皮肤Id (必须)
---@param plSuitId int
---@param scoreId int scoreId (必须)
---@param scoreRare int score的稀有度
---@param scoreLevel int score的等级
---@param scoreStar int score的突破等级
---@param scoreAwakeLevel int (0,1) score是否觉醒
---@return DevelopProperty
function DevelopPropertyUtil.GetPlayerProperty(weaponSkinId, plSuitId, scoreId, scoreRare, scoreLevel, scoreStar, scoreAwakeLevel)
    local property = DevelopPropertyCtrl:GetPlayerProperty(weaponSkinId, plSuitId, scoreId, scoreRare, scoreLevel, scoreStar, scoreAwakeLevel)
    return property
end

---获取Card基础属性
---@param cardId int
---@param cardLevel int
---@param starLevel int
---@param phaseLevel int
---@return DevelopProperty
function DevelopPropertyUtil.GetCardBaseProperty(cardId, cardLevel, starLevel, phaseLevel, awakenLevel)
    local property = DevelopPropertyCtrl:GetCardBaseProperty(cardId, cardLevel, starLevel, phaseLevel, awakenLevel)
    return property
end

---获取羁绊卡最终属性
---@param gemCores X3Data.GemCore[] key:siteId, value:gemCoreId
---@return DevelopProperty,DevelopProperty,DevelopProperty,DevelopProperty 最终属性，基础属性，芯核加成属性，天赋加成属性
function DevelopPropertyUtil.GetCardFinalProperty(cardId, cardLevel, cardStarLevel, cardPhaseLevel, cardAwakeLevel, gemCores)
    return DevelopPropertyCtrl:GetCardFinalProperty(cardId, cardLevel, cardStarLevel, cardPhaseLevel, cardAwakeLevel, gemCores)
end

---筛选出基础的四个属性：攻击，防御，血量，暴击/爆伤（暴击或爆伤，根据Card配置决定）
---@param cardId number 卡ID
---@param inProperty DevelopProperty
---@return DevelopProperty 攻击，防御，血量，暴击属性Map
function DevelopPropertyUtil.FilterBaseProperty(cardId, inProperty)
    if not cardId or not inProperty then
        return nil
    end
    local cardCfg = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cardCfg then
        return nil
    end
    local outProperty = DevelopPropertyUtil.CreateProperty()
    outProperty:AddProperty(X3_CFG_CONST.PROPERTY_MAXHP, inProperty:GetPropertyValue(X3_CFG_CONST.PROPERTY_MAXHP))
    outProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYATTACK, inProperty:GetPropertyValue(X3_CFG_CONST.PROPERTY_PHYATTACK))
    outProperty:AddProperty(X3_CFG_CONST.PROPERTY_PHYDEFENCE, inProperty:GetPropertyValue(X3_CFG_CONST.PROPERTY_PHYDEFENCE))
    if cardCfg.CritValRate > 0 or cardCfg.CritValRate == cardCfg.CritHurtAddRate then
        outProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITVAL, inProperty:GetPropertyValue(X3_CFG_CONST.PROPERTY_CRITVAL))
    else
        outProperty:AddProperty(X3_CFG_CONST.PROPERTY_CRITHURTADD, inProperty:GetPropertyValue(X3_CFG_CONST.PROPERTY_CRITHURTADD))
    end
    return outProperty
end

---筛选出基础的四个属性：攻击，防御，血量，暴击/爆伤（暴击或爆伤，根据Card配置决定）
---@param cardId number 卡ID
---@param inPropertyMap table<int,int>
---@return table<int,int> 攻击，防御，血量，暴击属性Map
function DevelopPropertyUtil.FilterBasePropertyByMap(cardId, inPropertyMap)
    if not cardId or not inPropertyMap then
        return nil
    end
    local cardCfg = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cardCfg then
        return nil
    end
    local outProperty = {
        [X3_CFG_CONST.PROPERTY_MAXHP] = inPropertyMap[X3_CFG_CONST.PROPERTY_MAXHP] or 0,
        [X3_CFG_CONST.PROPERTY_PHYATTACK] = inPropertyMap[X3_CFG_CONST.PROPERTY_PHYATTACK] or 0,
        [X3_CFG_CONST.PROPERTY_PHYDEFENCE] = inPropertyMap[X3_CFG_CONST.PROPERTY_PHYDEFENCE] or 0,
    }
    if cardCfg.CritValRate > 0 or cardCfg.CritValRate == cardCfg.CritHurtAddRate then
        outProperty[X3_CFG_CONST.PROPERTY_CRITVAL] = inPropertyMap[X3_CFG_CONST.PROPERTY_CRITVAL] or 0
    else
        outProperty[X3_CFG_CONST.PROPERTY_CRITHURTADD] = inPropertyMap[X3_CFG_CONST.PROPERTY_CRITHURTADD] or 0
    end
    return outProperty
end

---筛选出升级的三个属性：攻击，防御，血量
---@param cardId number 卡ID
---@param inPropertyMap table<int,int>
---@return table<int,int> 攻击，防御，血量，暴击属性Map
function DevelopPropertyUtil.FilterLevelUpPropertyByMap(cardId, inPropertyMap)
    if not cardId or not inPropertyMap then
        return nil
    end
    local cardCfg = LuaCfgMgr.Get("CardBaseInfo", cardId)
    if not cardCfg then
        return nil
    end
    local outProperty = {
        [X3_CFG_CONST.PROPERTY_MAXHP] = inPropertyMap[X3_CFG_CONST.PROPERTY_MAXHP] or 0,
        [X3_CFG_CONST.PROPERTY_PHYATTACK] = inPropertyMap[X3_CFG_CONST.PROPERTY_PHYATTACK] or 0,
        [X3_CFG_CONST.PROPERTY_PHYDEFENCE] = inPropertyMap[X3_CFG_CONST.PROPERTY_PHYDEFENCE] or 0,
    }
    return outProperty
end

---@class PropertyData 单个属性数据
---@field propertyType int  属性id
---@field propertyValue int  属性value

---转换属性从map到List
---@param inPropertyMap table<int,int> 属性数据
---@return PropertyData[]
function DevelopPropertyUtil.GetPropertyList(inPropertyMap)
    local ret = {}
    if table.isnilorempty(inPropertyMap) then
        return ret
    end
    for k, v in pairs(inPropertyMap) do
        ---@type PropertyData
        local tempAttr = {}
        tempAttr.propertyType = k
        tempAttr.propertyValue = v
        table.insert(ret, tempAttr)
    end
    table.sort(ret, function(a, b)
        ---@type cfg.Property
        local propertyCfg1 = LuaCfgMgr.Get("Property", a.propertyType)
        ---@type cfg.Property
        local propertyCfg2 = LuaCfgMgr.Get("Property", b.propertyType)
        if propertyCfg1.Rank ~= propertyCfg2.Rank then
            return propertyCfg1.Rank < propertyCfg2.Rank
        end
        return propertyCfg1.Id < propertyCfg2.Id
    end)
    return ret
end

return DevelopPropertyUtil