---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2021/12/28 15:00
--- 每天定时器

---@class DailyDateTick
local DailyDateTick = class("DailyDateTick")
---初始化
function DailyDateTick:Init()
    ---@type int[]
    self.hours ={}
    for i =0,23 do
        table.insert(self.hours,i)
    end
    local resetTime = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.COMMONDAILYRESETTIME)
    local sp = string.split(resetTime,":")
    ---固定每日刷新时间
    ---@type int
    self.daily_reset_hour = tonumber(sp and sp[1] or 0)
    ---@type int
    self.weekly_reset_wday = 1
    ---最大idx
    ---@type int
    self.max_idx = #self.hours
    ---当前idx
    ---@type int
    self.cur_idx = 0
    ---分换算秒
    ---@type int
    self.min_seconds = 60
    ---小时换算秒
    ---@type int
    self.hour_seconds = math.pow(self.min_seconds,2)
    ---一天小时数
    ---@type int
    self.day_hour = 24
    EventMgr.AddListener(Const.Event.TIME_REFRESH,self.CheckTime,self)
    self:CheckTime()
end

---重置
function DailyDateTick:ResetIdx()
    local cur_time = TimerMgr.GetCurDate(true)
    if cur_time then
        local cur_hour = cur_time.hour
        local idx = table.indexof(self.hours,cur_hour)
        self.cur_idx = math.max(0,idx and idx or 0 )
    else
        self.cur_idx = 0
    end
end

---刷新时间
function DailyDateTick:CheckTime()
    self:ResetIdx()
    self:Calculate()
end

---计算时间
function DailyDateTick:Calculate()
    TimerMgr.DiscardTimerByTarget(self)
    self.cur_idx  = self.cur_idx +1
    local idx = math.max( self.cur_idx % self.max_idx,1)
    local hour = self.hours[idx]
    local cur_time = TimerMgr.GetCurDate(true)
    local left_hour = 0
    local left_min = 0
    local left_sec = 0
    if cur_time then
        left_hour = cur_time.hour<hour and (hour-cur_time.hour) or (hour+self.day_hour-cur_time.hour)
        if cur_time.min>0 then
            left_hour = left_hour-1
            left_min = self.min_seconds-cur_time.min
        end
        if cur_time.sec>0 then
            left_sec = self.min_seconds- cur_time.sec
            left_min = left_min - 1
        end
        left_min = math.max(left_min,0)
        left_sec = math.max(left_sec,0)
        left_hour = math.max(left_hour,0)
    end
    if left_hour>0 or left_min>0 or left_sec >0   then
        TimerMgr.AddTimer(left_hour*self.hour_seconds+left_min*self.min_seconds+left_sec,self.OnTickFinish,self,false,TimerMgr.UpdateType.FINAL_UPDATE)
    end
end

---计时器
function DailyDateTick:OnTickFinish()
    local cur_time = TimerMgr.GetCurDate()
    if not cur_time then
        return
    end
    if self.daily_reset_hour == cur_time.hour then
        EventMgr.Dispatch("CommonDailyReset",cur_time.hour)
        if self.weekly_reset_wday == cur_time.wday then
            EventMgr.Dispatch("CommonWeeklyReset")
        end
    end
    EventMgr.Dispatch(Const.Event.TIME_TICK_HOUR,cur_time.hour)
    self:CheckTime()
end

local function Init()
    DailyDateTick:Init()
    
end

Init()

return 