---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 峻峻.
--- DateTime: 2021/5/28 16:07
--- 还在开发中
---@class ClawController
local ClawController = class("ClawController", GameObjectCtrl)
local UFOCatcherEnum = require("Runtime.System.X3Game.Modules.UFOCatcher.Data.UFOCatcherEnum")

---构造函数
function ClawController:ctor()
    ---@type ClawData
    self.clawData = nil
    ---@type UFOCatcherEnum.ClawType
    self.clawType = UFOCatcherEnum.ClawType.General
    --region Param Physics
    ---@type BtnController 抓取按钮控制器
    self.catchBtnCtrl = nil
    ---@type CS.UnityEngine.ConstantForce[] 控制爪子松紧的活塞
    self.constantForceList = nil
    ---@type CS.UnityEngine.Collider[] 爪子上所有的碰撞器
    self.triggerList = nil
    ---@type CS.UnityEngine.Collider[]
    self.freezeTriggerList = nil
    ---@type CS.UnityEngine.HingeJoint[] 爪子上所有的Joint组件
    self.jointList = nil
    ---@type CS.UnityEngine.Rigidbody[]
    self.rigidbodyList = nil
    ---@type float 做个碰撞处理不让两个爪子撞到
    self.limitX = 0
    ---@type float 做个碰撞处理不让两个爪子撞到
    self.limitZ = 0
    --endregion

    ---@type boolean 是否碰到了其他爪子卡住了
    self.isGetStuck = false

    ---@type int 爪子移动阶段
    self.catchingStep = UFOCatcherEnum.CatchingStep.WaitingToCatch
    ---@type boolean
    self.stepChanged = false
    ---@type boolean
    self.isCatching = false
    ---@type boolean
    self.isBack = false
    ---@type float
    self.stepDeltaTime = 0
    ---@type Vector3
    self.originPos = Vector3.zero
    ---@type Vector3
    self.lastPos = Vector3.zero
    ---@type Vector3
    self.moveTargetPos = nil
    ---@type boolean
    self.movedXToEnd = false
    ---@type boolean
    self.movedZToEnd = false
    ---@type fun 阶段切换回调
    self.stepChangeAction = nil
    ---@type fun 抓取回调
    self.catchAction = nil

    ---@type boolean
    self.moveSoundPlaying = false
    ---@type GameObject[]
    self.freezeDollList = {}
end

---初始化
function ClawController:Init()
    self.clawData = require("Runtime.System.X3Game.Modules.UFOCatcher.Data.ClawData").new()
    local CSData = self:GetComponent(nil, "ClawConfig")
    self.clawData:InitFromMonoBehavior(CSData)

    self:InitFromCSCfg(CSData)

    EventMgr.AddListener("ClawBack", self.OnClawBack, self)
    EventMgr.AddListener("ClawStop", self.OnClawStop, self)
    EventMgr.AddListener("GoingDownStop", self.OnGoingDownStop, self)
    EventMgr.AddListener("FreezeDollTrigger", self.OnFreezeDollTrigger, self)
    CSData.OnFixedUpdate = handler(self, self.FixedUpdate)
    TimerMgr.AddTimerByFrame(1, self.Update, self, true, TimerMgr.UpdateType.UPDATE)
end

---@return ClawData
function ClawController:GetData()
    return self.clawData
end

---从Mono上获取配置数据
---@param CSData CS.X3Game.ClawCfg
function ClawController:InitFromCSCfg(CSData)
    self.catchBtnCtrl = GameObjectCtrl.GetOrAddCtrl(CSData.catchBtn, "Runtime.System.X3Game.Modules.UFOCatcher.BtnController", self)
    self.jointList = GameHelper.ToTable(CSData.jointList)
    self.triggerList = GameHelper.ToTable(CSData.triggerList)
    if CSData.freezeTriggerList then
        self.freezeTriggerList = GameHelper.ToTable(CSData.freezeTriggerList)
    else
        self.freezeTriggerList = {}
    end
    if CSData.rigidbodyList then
        self.rigidbodyList = GameHelper.ToTable(CSData.rigidbodyList)
    else
        self.rigidbodyList = {}
    end
    self.liftObj = CSData.liftObj
    for _, trigger in pairs(self.triggerList) do
        local freezeDollTrigger = trigger.gameObject:GetOrAddComponent(typeof(CS.X3Game.FreezeDollTrigger))
        freezeDollTrigger.collider = trigger
    end
    for _, trigger in pairs(self.freezeTriggerList) do
        local freezeDollTrigger = trigger.gameObject:GetOrAddComponent(typeof(CS.X3Game.FreezeDollTrigger))
        freezeDollTrigger.collider = trigger
    end
    self.constantForceList = GameHelper.ToTable(CSData.constantForces)
end

---UpdateTick函数
function ClawController:Update()

end

---FixedUpdateTick函数
---@param dt float
function ClawController:FixedUpdate(dt)
    self:MoveUpdate(dt)
    self:CatchUpdate(dt)
    self:SkillUpdate(dt)
end

---爪子移动Update
---@param dt float
function ClawController:MoveUpdate(dt)

end

---爪子抓取Update
function ClawController:CatchUpdate(dt)

end

---根据世界方向移动爪子
---@param directionX float
---@param directionY float
function ClawController:MoveClawByWorldDirection(directionX, directionY)
    local clawPos = GameObjectUtil.GetPosition(self.gameObject)
    local deltaX = directionX * self.clawData.playerMoveSpeed * TimerMgr.GetCurTickDelta()
    local deltaZ = directionY * self.clawData.playerMoveSpeed * TimerMgr.GetCurTickDelta()
    if (self.limitX == 1 and deltaX > 0) or (self.limitX == -1 and deltaX < 0) then
        deltaX = 0
    end
    if (self.limitZ == 1 and deltaZ > 0) or (self.limitZ == -1 and deltaZ < 0) then
        deltaZ = 0
    end

    clawPos.x = clawPos.x + deltaX
    clawPos.z = clawPos.z + deltaZ
    GameObjectUtil.SetPosition(self.gameObject, clawPos)
    local localPos = GameObjectUtil.GetLocalPosition(self.gameObject)
    if self.clawData.rangeType == UFOCatcherEnum.RangeType.Square then
        localPos.x = math.min(math.max(localPos.x, self.clawData.rangeX.x), self.clawData.rangeX.y)
        localPos.z = math.min(math.max(localPos.z, self.clawData.rangeZ.x), self.clawData.rangeZ.y)
    else
        local rangeRadius = self.clawData.rangeX.x
        if Vector3.Distance(localPos, self.originPos) > rangeRadius then
            localPos = Vector3.MoveTowards(self.originPos, localPos, rangeRadius)
        end
    end
    GameObjectUtil.SetLocalPosition(self.gameObject, localPos)
end

---爪子回初始点事件
function ClawController:OnClawBack()
    self.isCatching = true
    self.stepChanged = false
    self.isBack = true
    self:CloseSkillEffect()
    self.catchingStep = UFOCatcherEnum.CatchingStep.Back
end

---爪子停止移动事件
function ClawController:OnClawStop()
    self.isCatching = false
    if self.beginCatchTimer ~= 0 then
        TimerMgr.Discard(self.beginCatchTimer)
        self.beginCatchTimer = 0
    end
    self:StopAllSound()
end

---绳子停止事件
---@param value bool
function ClawController:OnGoingDownStop(value)
    self.goingDownStop = value
end

---停止所有声音
function ClawController:StopAllSound()
    GameSoundMgr.StopSound(AudioConst.Audio_5)
    GameSoundMgr.StopSound(AudioConst.Audio_6)
    GameSoundMgr.StopSound(AudioConst.Audio_7)
    GameSoundMgr.StopSound(AudioConst.Audio_8)
    GameSoundMgr.StopSound(AudioConst.Audio_9)
    GameSoundMgr.StopSound(AudioConst.Audio_11)
end

---下爪
---@param gameMode GamePlayConst.GameMode
function ClawController:Catch(gameMode)
    if self.catchingStep == UFOCatcherEnum.CatchingStep.WaitingToCatch then
        self.catchingStep = UFOCatcherEnum.CatchingStep.GoingDown
        self.isBack = false
        pcall(self.catchAction)
        TimerMgr.AddTimer(self.clawData.catchDelay, self.ClawBeginCatching, self)
    end
end

---
function ClawController:AddCatchStep()
    self.stepChanged = true
    self.catchingStep = self.catchingStep + 1
    if self.isBack == false then
        pcall(self.stepChangeAction, self.catchingStep)
    end
    if self.catchingStep == UFOCatcherEnum.CatchingStep.End then
        self.catchingStep = UFOCatcherEnum.CatchingStep.WaitingToCatch
    end
    self.skillEffected = false
    self.stepDeltaTime = 0
end

---
function ClawController:ClawBeginCatching()
    if self.clawData.btnPressedUpDelay > 0 then
        self.catchBtnCtrl:PressOnce(self.clawData.btnPressedUpDelay)
    end
    GameSoundMgr.PlaySound(AudioConst.Audio_3)
    self.isCatching = true
    self.stepChanged = true
    EventMgr.Dispatch("EVENT_UFOCATCHER_CLAW_BEGIN_CATCHING", nil)
end

---设置爪子抓力
---@param power Vector3
function ClawController:SetRelativeForce(power)
    for _, piston in pairs(self.constantForceList) do
        piston.relativeForce = power
    end
end

---返回爪子抓力
---@return Vector3
function ClawController:GetRelativeForce()
    if self.constantForceList and #self.constantForceList > 0 then
        return self.constantForceList[1].relativeForce
    end
end

--region Button
---抓取按钮按下
function ClawController:OnCatchBtnDown()
    self.catchBtnCtrl:OnBtnDown()
end

---抓取按钮弹起
function ClawController:OnCatchBtnUp()
    self.catchBtnCtrl:OnBtnUp()
end
--endregion

--region Physics
---@param other CS.UnityEngine.Collider
function ClawController:OnTriggerEnter(other)
    local otherCtrl = GameObjectCtrl.GetCtrl(other.gameObject, "Runtime.System.X3Game.Modules.UFOCatcher.ClawController")
    if otherCtrl then
        self.isGetStuck = true
        local curPos = GameObjectUtil.GetPosition(self.gameObject)
        local delta = curPos - other:ClosestPointOnBounds(curPos)
        if math.abs(delta.x) > math.abs(delta.z) then
            if delta.x > 0 then
                self.limitX = -1
            else
                self.limitX = 1
            end
        else
            if delta.z > 0 then
                self.limitZ = -1
            else
                self.limitZ = 1
            end
        end
    end
end

---
---@param other CS.UnityEngine.Collider
function ClawController:OnTriggerExit(other)
    local otherCtrl = GameObjectCtrl.GetCtrl(other.gameObject, "Runtime.System.X3Game.Modules.UFOCatcher.ClawController")
    if otherCtrl then
        self.limitX = 0
        self.limitZ = 0
        self.isGetStuck = false
    end
end
--endregion

---是否是娃娃掉落
---@return boolean
function ClawController:IsDollDropped()
    return false
end

--region 个性化
---@param dt float
function ClawController:SkillUpdate(dt)
    if self.isCatching and not self.skillEffected then
        --region 冰冻技能
        if self.isFreezeState then
            if self.catchingStep == UFOCatcherEnum.CatchingStep.Catching then
                if self.stepDeltaTime >= 0.8 then
                    self.skillEffected = true
                    self:ClosePhysics()
                    self:OpenFreezeTrigger()
                end
            elseif self.catchingStep == UFOCatcherEnum.CatchingStep.GoingUp then
                self.skillEffected = true
                pcall(self.freezeCallback)
                self:FreezeTriggerStart()
            elseif self.catchingStep == UFOCatcherEnum.CatchingStep.Loose then
                self.skillEffected = true
                EventMgr.Dispatch("UFOCatcher_FreezeCount_Finish", #self.freezeDollList)
                self:CloseFreeze()
            end
        end
        --endregion
    end
end

---关闭个性化效果
function ClawController:CloseSkillEffect()
    self:CloseFreeze()
end

---开启冰冻碰撞检测
---@param gos GameObject[]
function ClawController:OnFreezeDollTrigger(gos)
    if self.isFreezeState then
        if table.indexof(self.freezeTriggerList, gos[0]) ~= false then
            local dollColliderGO = gos[1]
            local freezeParentGO = gos[2]
            local dollCheckCollider = GameObjectUtil.GetComponent(dollColliderGO, nil, "DollCheckCollider")
            if dollCheckCollider and dollCheckCollider.root then
                local dollController = GameObjectCtrl.GetCtrl(dollCheckCollider.root,
                        "Runtime.System.X3Game.Modules.UFOCatcher.DollController")
                if table.indexof(self.freezeDollList, dollCheckCollider.root) == false then
                    table.insert(self.freezeDollList, #self.freezeDollList + 1, dollCheckCollider.root)
                end
                if dollController then
                    dollController:SetFreezeParent(freezeParentGO)
                end
            end
        end
    end
end

---开启冰冻效果
---@param callback fun
function ClawController:OpenFreeze(callback)
    self.isFreezeState = true
    self.freezeCallback = callback
end

---关闭冰冻效果
function ClawController:CloseFreeze()
    self.isFreezeState = false
    self.freezeCount = 0
    for i = 1, #self.freezeDollList do
        local dollController = GameObjectCtrl.GetCtrl(self.freezeDollList[i],
                "Runtime.System.X3Game.Modules.UFOCatcher.DollController")
        if dollController then
            dollController:CloseFreeze(self.clawType)
        end
    end
    self.freezeCallback = nil
    table.clear(self.freezeDollList)
end

---开启Collider的碰撞
---@param value boolean
function ClawController:OpenPhysics()
    for _, collider in pairs(self.triggerList) do
        if collider then
            collider.isTrigger = false
        end
    end
    for _, rigidbody in pairs(self.rigidbodyList) do
        self:SetLayer(rigidbody.gameObject, Const.LayerMask.PhysicsLayer, true)
    end
end

---关闭Collider的碰撞
function ClawController:ClosePhysics()
    for _, collider in pairs(self.triggerList) do
        if collider then
            collider.isTrigger = true
        end
    end
    for _, rigidbody in pairs(self.rigidbodyList) do
        self:SetLayer(rigidbody.gameObject, Const.LayerMask.DEFAULT, true)
    end
end

---开启冰冻Trigger
function ClawController:OpenFreezeTrigger()
    for _, collider in pairs(self.freezeTriggerList) do
        if collider then
            collider.isTrigger = true
        end
    end
end

---
function ClawController:FreezeTriggerStart()
    local clawPos = GameObjectUtil.GetPosition(self.gameObject)
    table.sort(self.freezeDollList, function(a, b)
        return Vector3.Distance(GameObjectUtil.GetPosition(a), clawPos) < Vector3.Distance(GameObjectUtil.GetPosition(b), clawPos)
    end)
    for i = 1, self.freezeCount do
        if self.freezeDollList[i] then
            local dollController = GameObjectCtrl.GetCtrl(self.freezeDollList[i],
                    "Runtime.System.X3Game.Modules.UFOCatcher.DollController")
            if dollController then
                dollController:OpenFreeze()
            end
        end
    end
end
--endregion

return ClawController