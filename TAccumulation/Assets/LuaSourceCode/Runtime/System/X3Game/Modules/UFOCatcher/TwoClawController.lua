---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/8/29 16:23
---

---二爪爪子控制器，无绳子，无机械组件，按钮型
local ClawController = require("Runtime.System.X3Game.Modules.UFOCatcher.ClawController")
---@class TwoClawController : ClawController
local TwoClawController = class("TwoClawController", ClawController)
local UFOCatcherEnum = require("Runtime.System.X3Game.Modules.UFOCatcher.Data.UFOCatcherEnum")

---构造函数
function TwoClawController:ctor()
    self.super.ctor(self)
    ---@type BtnController 左移按钮控制器
    self.leftBtnCtrl = nil
    ---@type BtnController 上移按钮控制器
    self.upBtn = nil

    ---@type boolean
    self.leftBtnDown = false
    ---@type boolean
    self.upBtnDown = false
    ---@type float
    self.moveUpBtnTime = 0
    ---@type float
    self.moveLeftBtnTime = 0

    --region 爪子伸长表现用
    ---@type GameObject
    self.linkParent = nil
    ---@type GameObject
    self.linkTarget = nil
    ---@type float
    self.initialRadius = 1
    ---@type float
    self.decreaseRadius = 0.2
    ---@type float
    self.length = 0.2
    ---@type GameObject[]
    self.linkList = {}
    ---@type GameObject[]
    self.binkList = {}
    --endregion
end

---初始化
function TwoClawController:Init()
    self.super.Init(self)
    ---@type UFOCatcherEnum.ClawType
    self.clawType = UFOCatcherEnum.ClawType.TwoClaw
    self.linkParent = self:GetComponent("linkParent")
    self.linkTarget = self:GetComponent("linkTarget")
    table.insert(self.binkList, #self.binkList + 1, self:GetComponent("bink1"))
    table.insert(self.binkList, #self.binkList + 1, self:GetComponent("bink2"))
    table.insert(self.binkList, #self.binkList + 1, self:GetComponent("bink3"))
    table.insert(self.linkList, #self.linkList + 1, self:GetComponent("link1"))
    table.insert(self.linkList, #self.linkList + 1, self:GetComponent("link2"))
    table.insert(self.linkList, #self.linkList + 1, self:GetComponent("link3"))
    self.originPos = Vector3(self.clawData.backPos.x, 0, self.clawData.backPos.y)
end

---从Mono上获取配置数据
---@param CSData CS.PapeGames.X3.TwoClawCfg
function TwoClawController:InitFromCSCfg(CSData)
    self.super.InitFromCSCfg(self, CSData)
    self.leftBtnCtrl = GameObjectCtrl.GetOrAddCtrl(CSData.leftBtn, "Runtime.System.X3Game.Modules.UFOCatcher.BtnController", self)
    self.leftBtnCtrl:SetBtnPressedY(CSData.btnPressedY)
    self.upBtnCtrl = GameObjectCtrl.GetOrAddCtrl(CSData.upBtn, "Runtime.System.X3Game.Modules.UFOCatcher.BtnController", self)
    self.upBtnCtrl:SetBtnPressedY(CSData.btnPressedY)
end

---根据世界方向移动爪子
---@param directionX float
---@param directionY float
function TwoClawController:MoveClawByWorldDirection(directionX, directionY)
    self.super.MoveClawByWorldDirection(self, directionX, directionY)
    self:PressBtn(directionX, directionY)
end

--region Button
---左移按钮弹起
function TwoClawController:OnLeftBtnUp()
    self.leftBtnCtrl:OnBtnUp()
    self.leftBtnDown = false
end

---上移按钮弹起
function TwoClawController:OnUpBtnUp()
    self.upBtnCtrl:OnBtnUp()
    self.upBtnDown = false
end

---按下按钮
---@param directionX float
---@param directionY float
function TwoClawController:PressBtn(directionX, directionY)
    local tempVector2 = Vector2.Temp(directionX, directionY)
    local localDirection = self.transform:TransformDirection(tempVector2)
    Vector2.Release(tempVector2)
    if math.abs(localDirection.x) > math.abs(localDirection.y) then
        self.leftBtnCtrl:OnBtnDown()
        if self.leftBtnDown == false then
            GameSoundMgr.PlaySound(AudioConst.Audio_3)
            self.leftBtnDown = true
        end
    end
    if math.abs(localDirection.y) > math.abs(localDirection.x) then
        self.upBtnCtrl:OnBtnDown()
        if self.upBtnDown == false then
            GameSoundMgr.PlaySound(AudioConst.Audio_3)
            self.upBtnDown = true
        end
    end
end
--endregion

---
function TwoClawController:Update()
    self.super.Update(self)
    local height = math.abs(GameObjectUtil.GetPosition(self.linkParent).y - GameObjectUtil.GetPosition(self.linkTarget).y)
    for i = 1, #self.linkList do
        local radius = self.initialRadius - (i - 1) * self.decreaseRadius
        local linkHeight = math.min(i * self.length, height)
        linkHeight = i == #self.linkList - 1 and self.height or linkHeight
        GameObjectUtil.SetLocalScale(self.linkList[i], radius, linkHeight / 2, radius)
        local bindPos = GameObjectUtil.GetLocalPosition(self.binkList[i])
        GameObjectUtil.SetLocalPosition(self.binkList[i], bindPos.x, -linkHeight / 2 * 2, bindPos.z)
    end
end

---爪子抓取Update
---@param dt float
function TwoClawController:CatchUpdate(dt)
    if self.isCatching then
        self.stepDeltaTime = self.stepDeltaTime + dt
        if self.catchingStep == UFOCatcherEnum.CatchingStep.GoingDown then
            self:OpenPhysics()
            self:SetRelativeForce(self.clawData.torquePower)
            local clawPos = GameObjectUtil.GetLocalPosition(self.liftObj)
            clawPos.y = clawPos.y - dt * self.clawData.catchMoveSpeed
            GameObjectUtil.SetLocalPosition(self.liftObj, clawPos)
            if self.stepChanged then
                GameSoundMgr.PlaySound(AudioConst.Audio_5)
                self.stepChanged = false
            end

            if clawPos.y <= self.clawData.rangeY.x or self.goingDownStop then
                self:AddCatchStep()
                self.stepDeltaTime = 0
                GameSoundMgr.StopSound(AudioConst.Audio_5)
            end
            self.isOpenTrigger = true
        elseif self.catchingStep == UFOCatcherEnum.CatchingStep.Catching then
            self:SetRelativeForce(self.clawData.loosenPower)
            if self.stepChanged then
                GameSoundMgr.PlaySound(AudioConst.Audio_4)
                self.stepChanged = false
            end
            if self.stepDeltaTime >= 1 then
                self:AddCatchStep()
                self.stepDeltaTime = 0
            end
        elseif self.catchingStep == UFOCatcherEnum.CatchingStep.GoingUp then
            if self.stepChanged then
                GameSoundMgr.PlaySound(AudioConst.Audio_6)
                self.stepChanged = false
            end
            local clawPos = GameObjectUtil.GetLocalPosition(self.liftObj)
            clawPos.y = clawPos.y + dt * self.clawData.catchMoveSpeed
            GameObjectUtil.SetLocalPosition(self.liftObj, clawPos)
            if clawPos.y >= self.clawData.rangeY.y then
                GameSoundMgr.StopSound(AudioConst.Audio_6)
                self:AddCatchStep()
                self.stepDeltaTime = 0
            end
        elseif self.catchingStep == UFOCatcherEnum.CatchingStep.Back then
            if self.stepChanged then
                GameSoundMgr.PlaySound(AudioConst.Audio_11)
                self.stepChanged = false
            end
            local clawPos = GameObjectUtil.GetLocalPosition(self.gameObject)
            local direction = (self.originPos - clawPos).normalized
            if math.abs(clawPos.x - self.originPos.x) >= 0.01 then
                clawPos.x = clawPos.x + direction.x * self.clawData.catchMoveSpeed * 0.6 * dt
            end

            if math.abs(clawPos.z - self.originPos.z) >= 0.01 then
                clawPos.z = clawPos.z + direction.z * self.clawData.catchMoveSpeed * 0.6 * dt
            end

            GameObjectUtil.SetLocalPosition(self.gameObject, clawPos)
            if Vector3.Distance(clawPos, self.originPos) <= 0.02 then
                GameSoundMgr.StopSound(AudioConst.Audio_11)
                self:AddCatchStep()
            end
        elseif self.catchingStep == UFOCatcherEnum.CatchingStep.WaitForLoose then
            self:AddCatchStep()
        elseif self.catchingStep == UFOCatcherEnum.CatchingStep.Loose then
            self:ClosePhysics()
            EventMgr.Dispatch("EVENT_UFOCATCHER_CLAW_LOOSEN", nil)
            self:AddCatchStep()
            self.isCatching = false
            self.catchingStep = 0
            self.goingDownStop = false
            self:SetRelativeForce(self.clawData.loosenPower)
        end
    end
end

return TwoClawController