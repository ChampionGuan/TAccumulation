---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sms.
--- DateTime: 2023/3/20 16:05

--- 这一层级的Util类的设计有以下考虑:
--- 1. 本层级接口 拆分背景资源的本地数据的读写和相关方法;
--- 2. 上层业务调用接口不用考虑空值和默认值在本地数据的存储形式;
--- 3. 上层业务不必手动调用类似check()方法检查资源, 而是在调用get获取背景资源时检查数据资源合法性 （比如活动背景过期时） 不合法时返回默认资源;
---
--- note: 新增了CheckCfg()在Login时以整体为单位检查配置 防止配置出错或不明确 23.5.25

--- 关于特殊值 (默认值和空值) 的具体处理规则: 
--- 关于本地存储的GetInt值为空时统一返回 0, 在业务层中定义一个空值时则传入 -1   || 要注意这两个值的区别
--- -1 的情况通常发生在玩家留空位未选中时，而 0 是在新设备登陆时发生, 这两个特殊值业务层不关心, 在当前层级做处理

--- 关于活动背景时效性的限制处理规则:
--- 在get方法中, 如果本地数据中任意idx的资源为活动类型且已经过期, 则直接用空值替换, 若resDataList里的所有值都为空, 则直接返回配置中的默认资源
--- 在set方法中, 如果传入的resDataList中任意idx位置资源为活动类型且已经过期, 则传入空值, 若所有都为空, 则本次set方法失效

---@class SysLoginBGUtil
local SysLoginBGUtil = {}

---@type number 根据配置获取的最新活动Id
local latestOpIdByCfg
---@type number 根据配置获取的最新活动背景展示类型
local latestActBgShowType
---@type table<number, SysLoginBgResData> 根据配置获取的最新活动背景资源列表
local latestActResDataListByCfg

local ResMaxCount = 3

---私有方法声明
local __checkForceUpdateLoginBg
local __getCurOperationId, __setCurOperationId, __getLatestActResDataListByCfg

-- 检查当前是否有生效的活动背景配置
local function __checkIfInActivity()
    local actBgList = LuaCfgMgr.GetListByCondition("DynamicLoginBG", {Type = ThemeEnum.SysBGResType.Activity})
    return not table.isnilorempty(actBgList)
end

-- 获取活动背景配置
local function __getActivityBgResList()
    local activityBgCfgList = LuaCfgMgr.GetListByCondition("DynamicLoginBG", {Type = ThemeEnum.SysBGResType.Activity})
    local resDataList = {}
    for _, cfg in ipairs(activityBgCfgList) do table.insert(resDataList, {Id = cfg.BGID, resType = ThemeEnum.SysBGResType.Activity, Rank = cfg.Rank}) end
    table.sort(resDataList, function(a, b) if a.Rank ~= b.Rank then return a.Rank < b.Rank end return a.Id < b.Id end)  -- 以Rank排序

    if table.isnilorempty(resDataList) then return -1, nil end

    -- 展示类型以排序后配置的第一位为准
    local showType = LuaCfgMgr.Get("DynamicLoginBG", resDataList[1].Id).BGType
    local showCount = ThemeEnum.SysBgMaxShowCount[showType]
    if #resDataList > showCount then    -- 超出长度则截断数据
        for i = #resDataList, showCount + 1, -1 do table.remove(resDataList, i) end
    end
    
    for i, _ in ipairs(resDataList) do resDataList[i].Rank = nil end
    return showType, resDataList
end

-- 获取默认背景配置
local function __getDefaultBgResList()
    local defaultBgCfgList = LuaCfgMgr.GetListByCondition("DynamicLoginBG", {Type = ThemeEnum.SysBGResType.Default})
    local resDataList = {}
    for _, cfg in ipairs(defaultBgCfgList) do table.insert(resDataList, {Id = cfg.BGID, resType = ThemeEnum.SysBGResType.Default, Rank = cfg.Rank}) end
    table.sort(resDataList, function(a, b) if a.Rank ~= b.Rank then return a.Rank < b.Rank end return a.Id < b.Id end)  -- 以Rank排序

    if table.isnilorempty(resDataList) then Debug.LogError("default bgCfg not found") return end

    -- 展示类型以排序后配置的第一位为准
    local showType = LuaCfgMgr.Get("DynamicLoginBG", resDataList[1].Id).BGType
    local showCount = ThemeEnum.SysBgMaxShowCount[showType]
    if #resDataList > showCount then    -- 超出长度则截断数据
        for i = #resDataList, showCount + 1, -1 do table.remove(resDataList, i) end
    end
    
    for i, _ in ipairs(resDataList) do resDataList[i].Rank = nil end
    return showType, resDataList
end

-- decode bgResDataStr (string) to bgResData (table)
local function __decodeBgResData(resDataStr)
    if string.isnilorempty(resDataStr) then return {Id = -1, resType = -1} end
    local strList = string.split(resDataStr, ',')
    return {Id = tonumber(strList[1] or -1), resType = tonumber(strList[2] or -1)}
end

-- encode bgResData (table) to bgResDataStr (string)
local function __encodeBgResData(resData)
    if table.isnilorempty(resData) then return "-1,-1" end
    resData = resData or {}
    return string.format("%d,%d", resData.Id or -1, resData.resType or -1)
end

-- decode bgResDataListStr (string) to bgResDataList (table)
local function __decodeBgResDataList(resDataListStr)
    if string.isnilorempty(resDataListStr) then Debug.LogError("resDataListStr is nil -- ") return end
    local bgResDataList = {}
    local resDataStrList = string.split(resDataListStr, '|')
    for _, v in ipairs(resDataStrList) do
        table.insert(bgResDataList, __decodeBgResData(v))
    end
    return bgResDataList
end

-- encode bgResDataList (table) to bgResDataListStr (string)
local function __encodeBgResDataList(resDataList)
    if table.isnilorempty(resDataList) then Debug.LogError("encode error -- resDataList is nil or empty") return end
    local bgResDataListStr = __encodeBgResData(resDataList[1])
    for i = 2, ResMaxCount do
        bgResDataListStr = string.format("%s|%s", bgResDataListStr, __encodeBgResData(resDataList[i]))
    end
    return bgResDataListStr
end

-- 检查背景资源列表 格式检查 合法性检查
local function __checkBgResDataList(bgResDataList)
    if table.isnilorempty(bgResDataList) then return BllMgr.GetSystemSettingBLL():GetDefaultSysBg() end
    local _bgResDataList = table.clone(bgResDataList)
    for i, v in pairs(_bgResDataList) do
        -- -1代表空值的都删掉
        if not v.Id or not v.resType or v.Id == -1 or v.resType == -1 then _bgResDataList[i] = nil end

        -- 如果为思念或战斗套装 也检查一下基础配置 不合法则删掉
        if v.resType == ThemeEnum.SysBGResType.ScoreSuit or v.resType == ThemeEnum.SysBGResType.ColoredScoreSuit then
            if not LuaCfgMgr.Get("FormationSuit", v.Id) then bgResDataList[i] = nil end
        elseif v.resType == ThemeEnum.SysBGResType.Card or v.resType == ThemeEnum.SysBGResType.DynamicCard then
            if not LuaCfgMgr.Get("CardBaseInfo", v.Id) then bgResDataList[i] = nil end
        else
            -- 不是思念或搭档类型的数据都在DynamicLoginBG配置里可以找到
            -- 如果类型非搭档和思念, 配置还找不到 不合法直接删掉
            local bgCfg = LuaCfgMgr.Get("DynamicLoginBG", v.Id)
            if not bgCfg then _bgResDataList[i] = nil else
                -- 这里更新一下数据的资源类型 (以适应这种情况: 策划把背景配置类型更换为InValid)
                v.resType = bgCfg.Type
                -- 判断类型如果为InValid 则也要删除该数据
                if v.resType == ThemeEnum.SysBGResType.Invalid then _bgResDataList[i] = nil end
            end
        end
    end
    
    -- 如果检查后为空 直接返回默认
    if table.isnilorempty(_bgResDataList) then return BllMgr.GetSystemSettingBLL():GetDefaultSysBg() end
    
    -- showType为第一位非空的数据对应的资源展示类型
    local _showType
    for i = 1, ResMaxCount do
        if _bgResDataList[i] then
            local _id = _bgResDataList[i].Id
            local _resType = _bgResDataList[i].resType
            local curShowType
            if _resType == ThemeEnum.SysBGResType.ScoreSuit or _resType == ThemeEnum.SysBGResType.ColoredScoreSuit or _resType == ThemeEnum.SysBGResType.Card then
                curShowType = ThemeEnum.SysBGShowType.Static
            elseif _resType == ThemeEnum.SysBGResType.DynamicCard then
                curShowType = ThemeEnum.SysBGShowType.Dynamic
            else
                curShowType = LuaCfgMgr.Get("DynamicLoginBG", _id).BGType
            end
            if not _showType then   -- 这条数据为首条非空数据 设置showType
                _showType = curShowType
            elseif _showType ~= curShowType then -- 该条数据对应展示类型和首条非空数据对应展示类型不同 删除该条数据
                _bgResDataList[i] = nil
            end
        end
    end
    
    return _showType, _bgResDataList
end

-- 获取已保存的背景配置
local function __getSavedBgResList()
    local bgResDataListStr = PlayerPrefs.GetString(ThemeEnum.SysThemeLocalKey.SysBgResDataListStr)
    if string.isnilorempty(bgResDataListStr) then return BllMgr.GetSystemSettingBLL():GetDefaultSysBg() end
    
    -- 根据本地保存的字符串解析为dataList
    local bgResDataList = __decodeBgResDataList(bgResDataListStr)
    
    -- 返回校验后的数据列表
    return __checkBgResDataList(bgResDataList)
end

---------------------------------------------------------------------------------------------------------------------------------------------------
---Public方法定义
---@public 获取当前设备设置的资源列表
---@param skipNilValue bool 是否跳过未设置的背景资源
---@return ThemeEnum.SysBGShowType, table<number, SysLoginBgResData> 返回 展示类型, 当前应用的背景资源列表
function SysLoginBGUtil.GetLocalBgResList(skipNilValue)
    local showType
    local resList = {}
    
    -- 获取本地活动Id
    local curOpId = __getCurOperationId()
    -- 根据配置获取最新活动Id 和对应活动背景资源
    local opIdByCfg, actResShowType, resListByCfg = __getLatestActResDataListByCfg()
    if curOpId > 0 and resListByCfg then  -- 本地活动Id > 0 返回配置中最新的活动背景资源
        showType = actResShowType
        resList = table.clone(resListByCfg)
    else                                  -- 本地活动Id <= 0 返回本地存储的背景资源
        showType, resList = __getSavedBgResList()
    end
    
    -- 跳过空值
    if skipNilValue then
        local temp = {}
        for i = 1, ThemeEnum.SysBgMaxShowCount[showType] do
            if resList[i] then table.insert(temp, resList[i]) end
        end
        resList = temp
    end
    
    -- 保底
    if table.isnilorempty(resList) then showType, resList = BllMgr.GetSystemSettingBLL():GetDefaultSysBg() end
    
    return showType, resList
end

---@public 设置当前设备背景资源列表
---@param bgShowType ThemeEnum.SysBGShowType   展示类型 静态还是动态
---@param resDataList table<number, SysLoginBgResData>   静态背景资源列表传入, 静态模式下传最多三个, 动态模式下传最多一个
function SysLoginBGUtil.SetLocalBgResList(bgShowType, resDataList)
    local resDataListStr = __encodeBgResDataList(resDataList)
    PlayerPrefs.SetString(ThemeEnum.SysThemeLocalKey.SysBgResDataListStr, resDataListStr)
    
    -- 更新OpId (这个操作的意义是 如果是活动期间 任何对背景的重新设置操作都会使版本对应的活动背景失效)
    local savedOpId = __getCurOperationId()
    if savedOpId > 0 then __setCurOperationId(-savedOpId) end
    
    PlayerPrefs.Save()
end

---@public 获取默认背景资源列表
---活动期间返回活动配置 非活动期间返回默认配置
---@return ThemeEnum.SysBGShowType, table<number, SysLoginBgResData>
function SysLoginBGUtil.GetDefaultBgResList()
    if __checkIfInActivity() then
        return __getActivityBgResList()
    else
        return __getDefaultBgResList()
    end
end

---@public 检查当前是否有生效的活动背景配置
function SysLoginBGUtil.CheckIfInActivity()
    return __checkIfInActivity()
end

---@public 检查活动强更背景资源配置 (放在热更的后面)
function SysLoginBGUtil.CheckForceUpdateLoginBg()
    __checkForceUpdateLoginBg()
end

---@public 用在登陆时检查配置的合法性 (这些规则都是用来约束配置的 防止乱配置 规则都是和策划确认过的) [Debug]
function SysLoginBGUtil.CheckCfg()
    ---- 规则1: 检查当前的默认背景配置是否合法 (一定要存在且 静态不超过3个 动态不超过1个 动态静态不能混排)
    --local bgCfgList = LuaCfgMgr.GetListByCondition("DynamicLoginBG", {Default = 0})
    --for idx = #bgCfgList, 1, -1 do
    --    if bgCfgList[idx].Rank <= 0 then table.remove(bgCfgList, idx) end
    --end
    --if table.isnilorempty(bgCfgList) then Debug.LogError("SysLoginBgUtil 配置检查 没有默认背景配置") return end
    --for i = 1, #bgCfgList - 1 do
    --    if bgCfgList[i].BGType ~= bgCfgList[i + 1].BGType then Debug.LogError("SysLoginBgUtil 配置检查 默认背景动态静态混排") return end
    --end
    --local showType = bgCfgList[1].BGType
    --if #bgCfgList > ThemeEnum.SysBgMaxShowCount[showType] then Debug.LogError("SysLoginBgUtil 配置检查 静态或动态默认配置数量异常") return end
    ---- 规则2: 激活的活动类型背景配置不能超过1组
    --bgCfgList = LuaCfgMgr.GetListByCondition("DynamicLoginBG", {Default = 1, Force = 1, ForceEnd = 0})
    --for idx = #bgCfgList, 1, -1 do
    --    if bgCfgList[idx].Rank <= 0 then table.remove(bgCfgList, idx) end
    --end
    --if not table.isnilorempty(bgCfgList) then
    --    for i = 1, #bgCfgList - 1 do
    --        if bgCfgList[i].BGType ~= bgCfgList[i + 1].BGType then Debug.LogError("SysLoginBgUtil 配置检查 活动背景动态静态混排") return end
    --    end
    --    showType = bgCfgList[1].BGType
    --    if #bgCfgList > ThemeEnum.SysBgMaxShowCount[showType] then Debug.LogError("SysLoginBgUtil 配置检查 活动配置数量异常") return end
    --    -- 规则3: 活动类型背景配置不能是动态的
    --    if showType == ThemeEnum.SysBGShowType.Dynamic then Debug.LogError("SysLoginBgUtil 配置检查 活动配置不能是动态类型") return end
    --end
    --
    ---- 规则4: 活动类型Force字段不能为0 (风险等级较小)
    --local illegalCfgList = LuaCfgMgr.GetListByCondition("DynamicLoginBG", {Default = 1, Force = 0})
    --if not table.isnilorempty(illegalCfgList) then Debug.LogError("SysLoginBgUtil 配置检查 活动配置不能是Force为0的") return end
end
---------------------------------------------------------------------------------------------------------------------------------------------------
---私有方法定义

---@private 获取最近一次操作时的Id
__getCurOperationId = function()
    return PlayerPrefs.GetInt(ThemeEnum.SysThemeLocalKey.CurBgOperationId)
end

---@private 写入当前活动Id (用于行为记录)
---@param opId number 活动Id 
__setCurOperationId = function(opId)
    PlayerPrefs.SetInt(ThemeEnum.SysThemeLocalKey.CurBgOperationId, opId)

    PlayerPrefs.Save()
end

---@private 根据配置找到最新的活动背景配置
---@param forceRefresh bool 是否重新读取配置表
---@return number, number, table<number, SysLoginBgResData> 返回最新活动Id和活动背景数据
__getLatestActResDataListByCfg = function(forceRefresh)
    -- 如果有计算过 则直接返回 因为来源于配置 运行时不会变动
    if not forceRefresh and latestOpIdByCfg then return latestOpIdByCfg, latestActBgShowType, latestActResDataListByCfg end
    
    -- 根据配置获取活动配置 如果不存在则返回-1, nil
    local showType, curActivityResList = __getActivityBgResList()
    if table.isnilorempty(curActivityResList) then latestOpIdByCfg = -1 latestActBgShowType = nil latestActResDataListByCfg = nil return latestOpIdByCfg, latestActBgShowType, latestActResDataListByCfg end
    
    -- 如果存在 则保存且返回
    latestOpIdByCfg = curActivityResList[1].Id
    latestActBgShowType = showType
    latestActResDataListByCfg = curActivityResList
    return latestOpIdByCfg, latestActBgShowType, latestActResDataListByCfg
end

---@private 根据配置检查活动强更背景资源
__checkForceUpdateLoginBg = function()
    local curOpIdByCfg, actShowType, actResDataList = __getLatestActResDataListByCfg(true)
    local savedOpId = __getCurOperationId()
    
    local isForceUpdated = false
    
    if curOpIdByCfg == -1 then  -- 返回-1说明当前没有任何可用的活动背景配置
        -- 如果当前本地存储的活动Id > 0, 说明原本的活动背景已过期, 此时要把当前活动Id变成负数
        if savedOpId > 0 then
            __setCurOperationId(-savedOpId)
            isForceUpdated = true
        end
    elseif math.abs(savedOpId) ~= curOpIdByCfg then     -- 当前有可用活动背景配置且和本地存储的活动Id不同. 要更新OpId
        __setCurOperationId(curOpIdByCfg)
        isForceUpdated = true
    elseif math.abs(savedOpId) == curOpIdByCfg then     -- 通常走向: 本次登陆和上次登陆没有跨版本 或 当前设置的活动背景没有失效
    end
    
    -- 检查强更背景资源 派发事件
    if isForceUpdated then
        EventMgr.Dispatch(ThemeEnum.SysThemeEventMap.SysBgForceUpdate)
    end
end

---------------------------------------------------------------------------------------------------------------------------------------------------
--DynamicLoginBG表剩余字段：
--BGID：背景ID
--BGType：0=静态背景、1=动态背景
--Type：0=其他、1=默认、2=活动、3=失效
--Rank：仅用于列表显示排序及默认/活动用多图资源时的排序，数字从小到大排序，若数字一致则以BGID排序作为保底
--DynamicResource：当BGType=1时，读取此配置获取视频资源，用于登录背景显示
--UnDynamicResource：当BGType=0时，读取此配置获取UI图，用于登录背景显示
--※由于动态视频资源和静态资源分包标签不同，所以还是分2列
--BigIcon：背景选择界面中使用的长方形大Icon资源名
--SmallIcon：背景选择界面中使用的方形小Icon资源名
--每次启动游戏时，检查当前存储的登录背景设置数据：
--1、从配置表中读取，是否存在Type=2的活动背景
--若有，则获取所有Type=2的条目，以第1个条目的BGType决定当前的显示类型（动/静）
--显示类型=静态时：
--逐条获取所有Type=2的条目，并按Rank排序
--若【当前恢复标记位】≠ -第一个活动条目ID（负ID），则【恢复标记位】设置为第一个活动条目ID（大于0），并将前3个作为当前登录背景显示（但不改变存储数据）
--若【当前恢复标记位】＝ -第一个活动条目ID（负ID），则使用存储数据/默认背景进行显示
--※ 逐条过程中，若有Type=2但BGType=1（动态）的条目，则报错，并跳过此条目
--显示类型=动态时：
--逐条获取所有Type=2的条目，并按Rank排序后
--若【当前恢复标记位】≠ -第一个活动条目ID（负ID），则【恢复标记位】设置为第一个活动条目ID（大于0），并将前1个作为当前登录背景显示（但不改变存储数据）
--若【当前恢复标记位】＝ -第一个活动条目ID（负ID），则使用存储数据/默认背景进行显示
--※ 逐条过程中，若有Type=2但BGType=0（静态）的条目，则报错，并跳过此条目
--※ 当前同时只会配置1个动态背景，但是之后如果会有多个的话，就是显示时随机1个显示即可（这个逻辑如果顺手也可以考虑直接就做了~）
--2、若不存在活动背景，则判断是否已有存储的设置数据，及【恢复标记位】状态
--有存储数据+恢复标记位＞0：不改变存储数据，恢复标记位 x (-1)（即变为负值），使用存储数据进行显示
--有存储数据+恢复标记位≤0：不改变存储数据，不改变恢复标记位，使用存储数据进行显示
--无存储数据：读取配置表，使用默认背景进行显示，并将默认背景存入存储数据
--3、读取配置表获取默认背景方式为，从配置表中读取，找到所有Type=1的默认背景
--获取所有Type=1的条目，以第1个条目的BGType决定当前的显示类型（动/静）
--显示类型=静态时：
--逐条获取所有Type=1的条目，并按Rank排序后，将前3个作为默认背景
--※ 逐条过程中，若有Type=1但BGType=1（动态）的条目，则报错，并跳过此条目
--显示类型=动态时：
--逐条获取所有Type=1的条目，并按Rank排序后，将前1个作为默认背景
--※ 逐条过程中，若有Type=1但BGType=0（静态）的条目，则报错，并跳过此条目
--※ 当前同时只会配置1个动态背景，但是之后如果会有多个的话，就是显示时随机1个显示即可（这个逻辑如果顺手也可以考虑直接就做了~）
--经过上述过程，若最终获取到的数据有如下情况，则进行相关保底处理：
--失效数据：
--1、存储数据中，所存储的ID在对应配置表中不存在，则认为该条数据失效
--2、存储数据中，该条目读取配置获得的显示类型与第1条数据的显示类型不同，则认为该条数据失效
--3、存储数据中，该条目读取配置获得的Type=3，则认为该条数据失效
--失效数据不参与显示，且在存储的相关环节中，丢弃失效数据，不进行存储
--若经过上述过程，无任何有效数据留下来，则设置为活动背景/默认背景
--（已编辑）
---------------------------------------------------------------------------------------------------------------------------------------------------


return SysLoginBGUtil