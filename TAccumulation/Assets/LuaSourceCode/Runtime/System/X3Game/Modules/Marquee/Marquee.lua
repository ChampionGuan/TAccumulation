---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiangyu.
--- DateTime: 2023/2/15 10:49
---

local Marquee = class("Marquee")
local marqueeData = require("Runtime.System.X3Game.Modules.Marquee.MarqueeData")

---@class MarqueeData
---@field id int
---@field enableTime int
---@field disableTime int
---@field playTime int
---@field description string

local check_time = 1

function Marquee:ctor()
    ---@type table<int, MarqueeData> 所有要展示的跑马灯数据列表
    self.dataList = nil
end

---初始化加入倒计时监听，每隔check_time 刷新检查一次数据
function Marquee:Init()
    TimerMgr.AddTimer(check_time,self.UpdateCompare, self, true)
end

---刷新比较数据
function Marquee:UpdateCompare()
    if self.dataList == nil then
        return
    end

    local has = false
    local curTime = TimerMgr.GetCurTimeSeconds()
    for _, v in pairs(self.dataList) do
        if v ~= nil and (curTime >= v.enableTime and curTime < v.disableTime) then
            has = true
            break;
        end
    end

    if not has then
        --ErrandMgr.ClearTips(X3_CFG_CONST.POPUP_COMMONMARQUEE)
        return
    end

    if not ErrandMgr.IsAdded(X3_CFG_CONST.POPUP_COMMONMARQUEE) then
        ErrandMgr.Add(X3_CFG_CONST.POPUP_COMMONMARQUEE)
    end
end

---刷新数据
---@param fromServer bool
function Marquee:UpdateSetData(fromServer)
    if fromServer then
        if self.dataList ~= nil then
            table.clear(self.dataList)
        end
        local serverData = SelfProxyFactory.GetCommonMarqueeProxy():GetCollectionData()
        for _, v in pairs(serverData.Configs) do
            self:AddCMSData(v)
        end
    else
        for _, v in pairs(self.dataList) do
            if  not self:CheckValid(v) then
                self:Remove(v.id)
            end
        end
    end
end

---移除数据
---@param id int
function Marquee:Remove(id)
    if self.dataList == nil then
        return
    end
    self.dataList[id] = nil
end

---加入一个跑马灯数据
---@param data MarqueeData
function Marquee:Add(data)
    if self.dataList == nil then
        self.dataList = {}
    end
    
    self.dataList[data.id] = data
end

---加入一个跑马灯数据
---@param cmsData pbcmessage.AnnounceCMSConfig
function Marquee:AddCMSData(cmsData)
    if self.dataList == nil then
        self.dataList = {}
    end
    if self.dataList[cmsData.ID] ~= nil then
        --已经加入列表的不应该反复加入
        return;
    end
    local commonMarqueeData = marqueeData.new()
    commonMarqueeData:Init(cmsData)
    if not self:CheckValid(commonMarqueeData) then
        return
    end
    self.dataList[commonMarqueeData.id] = commonMarqueeData
end

---得到当前有效的跑马灯数据
---@return MarqueeData
function Marquee:GetCurrentData()
    if self.dataList == nil then
        return nil
    end
    local currentData = nil
    local curTime = TimerMgr.GetCurTimeSeconds()
    local time = 0
    for _, v in pairs(self.dataList) do
        if not self:CheckValid(v) then
            self:Remove(v.id)
        else
            if v ~= nil and curTime >= v.enableTime then
                if time == 0 or v.enableTime < time then
                    time = v.enableTime
                    currentData = v
                end
            end
        end
    end

    --if currentData == nil then
    --    ErrandMgr.ClearTips(X3_CFG_CONST.POPUP_COMMONMARQUEE)
    --end
    return currentData
end


---检查数据的有效性
---@param data MarqueeData
function Marquee:CheckValid(data)
    local curTime = TimerMgr.GetCurTimeSeconds()
    if curTime >= data.disableTime then
        Debug.LogFormat("跑马灯当前通知内容无效：id is %d 当前的时间 %d 大 于通知失效时间 %d ", data.id, curTime, data.disableTime)
        return false
    end
    local endTime = data.enableTime + data.playTime
    if endTime > data.disableTime then
        Debug.LogErrorFormat("跑马灯当前通知内容配置有问题：id is %d 通知失效时间=%d 应晚于（通知生效时间 =%d+循环播报时长 =%d）", data.id, data.disableTime, data.enableTime, data.playTime)
        return false
    end
    return true
end

return Marquee