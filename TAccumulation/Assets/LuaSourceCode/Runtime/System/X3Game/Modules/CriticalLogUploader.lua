---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2023/11/16 14:28
---

---@class CriticalLogUploader
local CriticalLogUploader = {}

---@private
function CriticalLogUploader.Init()
end

---@private
function CriticalLogUploader.Clear()
    
end

---上传日志（最新的）
function CriticalLogUploader.Upload()
    UICommonUtil.ShowMessageBox(UITextHelper.GetUIText(UITextConst.UI_TEXT_12975), {
        { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_12976, btn_call = function()
            CriticalLogUploader._Upload()
        end },
        { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_text = UITextConst.UI_TEXT_12977 }
    })
end

---@private
function CriticalLogUploader._Upload()
    local logFilePath = CriticalLog.GetLastLogFilePath()
    if string.isnilorempty(logFilePath) then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12974)
        return
    end

    local data = X3DataMgr.Get(X3DataConst.X3Data.CriticalLogPersistenceInfo, logFilePath)
    if not data then
        data = X3DataMgr.AddByPrimary(X3DataConst.X3Data.CriticalLogPersistenceInfo, nil, logFilePath)
        data:SetLastModifiedTime(CriticalLogUploader._GetLogLastModifyTime())
    else
        local lastTime = CriticalLogUploader._GetLogLastModifyTime()
        local state = data:GetUploadState()
        if state == X3DataConst.CriticalLogUploadState.Fail then
            --失败只需要更新时间即可
            data:SetLastModifiedTime(lastTime)
        else
            --成功过的需要检查时候最后修改时间有变化
            if lastTime ~= data:GetLastModifiedTime() then
                data:SetLastModifiedTime(lastTime)
            else
                UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12974)
                return
            end
        end
    end

    if not SDKMgr.IsHaveSDK() then
        return
    end

    local fileName = CS.System.IO.Path.GetFileName(logFilePath)
    local appGuid = CS.PapeGames.X3.AppContext.Instance.AppGuidString
    if SDKMgr.GetNid() ~= nil then
        fileName = string.format("%s_%s_%s", SDKMgr.GetNid(), appGuid, fileName)
    else
        fileName = string.format("%s_%s", appGuid, fileName)
    end
    
    local folder = os.date("%Y%m%d/%H%M", os.time())
    SDKMgr.OSSUpLoad(GameConst.OSSType.CriticalLog, logFilePath, nil, folder, fileName, CriticalLogUploader._UploadCallback)
end

---@private
---@param result table
function CriticalLogUploader._UploadCallback(result)
    if result == nil then
        return
    end
    
    if result.ret == 0 then
        local data = X3DataMgr.Get(X3DataConst.X3Data.CriticalLogPersistenceInfo, CriticalLog.GetLastLogFilePath())
        data:SetUploadState(X3DataConst.CriticalLogUploadState.Success)
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12971)
    elseif result.ret == -1 then
        Debug.LogErrorFormat("CriticalLog 上传失败: %s", result.msg)
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12972)
    elseif result.ret == 2402 then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_12973)
    end
    
    --按照上传阈值清理本地的Log
    ---@type X3Data.CriticalLogPersistenceInfo[]
    local infoArray = PoolUtil.GetTable()
    local count = X3DataMgr.GetAll(X3DataConst.X3Data.CriticalLogPersistenceInfo, infoArray)
    for i = 1, count do --删除已经不存在的文件
        local data = infoArray[i]
        local filePath = data:GetPrimaryValue()
        if not CS.System.IO.File.Exists(filePath) then
            X3DataMgr.Remove(X3DataConst.X3Data.CriticalLogPersistenceInfo, data:GetPrimaryValue())
        end
    end
    PoolUtil.ReleaseTable(infoArray)
end

---获取最新日志的最后修改时间
---@private
---@return string
function CriticalLogUploader._GetLogLastModifyTime()
    local filePath = CriticalLog.GetLastLogFilePath()
    if string.isnilorempty(filePath) then
        return ""
    end

    return tostring(CS.System.IO.File.GetLastWriteTime(filePath).Ticks)
end

return CriticalLogUploader