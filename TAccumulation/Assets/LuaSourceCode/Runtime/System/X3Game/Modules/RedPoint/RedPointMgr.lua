---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2021/1/14 16:06
--- 红点控制器
---参考文档：https://thoughts.teambition.com/workspaces/5d4cec0fa8c30400011dcb42/docs/60111c433739830001781aa6

local BindRed, UnBindRed, BindRedByCS, BindRedObj, GetRedIdByObj, RefreshRedData, SaveRed, Save, Remove, SetData, InitRedData, LocalSave
---@type pbcmessage.RedPointGroup
local DataMap = nil
local isInit = true
---@type RedDataCtrl
local DataCtrl
---@type RedViewCtrl
local ViewCtrl
local RedConst = require("Runtime.System.X3Game.Modules.RedPoint.RedConst")
---@class RedPointMgr
local RedPointMgr = {}
local is_data_dirty = false
local is_view_dirty = false
local is_save_dirty = false
---@type RedData[]
local cache_data_list = {}  --缓存数据
local cache_view_list = {}  --缓存view层数据
local cache_save_list = {}  --缓存save数据

local save_count = 0
---更新红点数量
---@param red_id number 红点id
---@param red_count number 红点数量
---@param identify_id number|string 主要用于同red_id列表区分，非列表不需要此字段
function RedPointMgr.UpdateCount(red_id, red_count, identify_id, ...)
    DataCtrl:UpdateCount(red_id, red_count, identify_id, ...)
end

---@param red_id int
function RedPointMgr.CLearRedCountMapByID(red_id)
    local red_count_map = DataCtrl:GetRedCountMap()
    if red_count_map and red_count_map[red_id] then
        red_count_map[red_id] = nil
    end
end

---检测红点gameobject上红点显示
---@param obj UnityEngine.GameObject
---@param identify_id number|string 主要用于列表区分id 和 UpdateCount 中对应参数对应
function RedPointMgr.CheckRedObj(obj, identify_id, ...)
    return ViewCtrl:CheckRedObj(obj, identify_id, ...)
end

---解除绑定红点obj
---@param obj UnityEngine.GameObject
function RedPointMgr.UnBindObj(obj)
    UnBindRed(obj)
end

---绑定红点obj
---@param obj UnityEngine.GameObject
function RedPointMgr.BindObj(obj)
    BindRedObj(obj)
end

---检测红点是否有效
---@param obj UnityEngine.GameObject 绑定红点的节点
---@param identity_id any 要检测的参数id
function RedPointMgr.IsAlive(obj, identity_id)
    return ViewCtrl:IsAlive(GetRedIdByObj(obj), identity_id)
end

---根据id获取红点数量
---@return number 红点数量
function RedPointMgr.GetCount(red_id, identify_id)
    return DataCtrl:GetCount(red_id, identify_id)
end

---获取view显示的红点数量
---@return int
function RedPointMgr.GetViewCount(red_id, identify_id)
    return DataCtrl:GetViewCount(red_id, identify_id)
end

---红点是否解锁
---@param red_id int
---@return boolean |int
function RedPointMgr.IsRedSysUnlock(red_id)
    return DataCtrl:IsRedUnlock(red_id)
end

---根据id获取红点类型
---@param red_id int
---@param identify_id any
---@return number 红点类型
function RedPointMgr.GetRedType(red_id, identify_id)
    return DataCtrl:GetRedType(red_id, identify_id)
end

---根据id获取静态类型的红点，仅限叶子节点类型
---@param red_id int
---@return number 红点类型
function RedPointMgr.GetStaticRedType(red_id)
    local data = RedPointMgr.GetData(red_id)
    if data then
        if UNITY_EDITOR then
            if not data:IsLeaf() then
                Debug.LogErrorFormat("[RedPointMgr.GetStaticRedType] failed red_id=[%s] not is leaf!!!")
                return -1
            end
        end
        return data:GetType()
    end
    return -1
end

---系统解锁刷新
---@param sysId int
function RedPointMgr.SysUnlockUpdate(sysId)
    if not sysId then
        return
    end
    DataCtrl:SysUnlockUpdate(sysId)
end

---@param obj GameObject
---@return any
function RedPointMgr.GetIdentify(obj, isEditor)
    local identify = ViewCtrl:GetIdentify(obj)
    if isEditor then
        return identify ~= nil and identify or ""
    end
    return identify
end

---刷新服务器红点数据
---@param redPoints pbcmessage.RedPointUpdateReply
function RedPointMgr.RefreshRedData(redPoints)
    if not redPoints then
        return
    end
    for k, v in pairs(redPoints) do
        RefreshRedData(v)
    end
end

---根据id获取红点数据
---@param red_id number
---@return RedData
function RedPointMgr.GetData(red_id)
    return DataCtrl:GetData(red_id)
end

---@param red_id int
---@param value int
function RedPointMgr.Save(value, red_id, ...)
    if RedPointMgr.GetValue(red_id, ...) == value then
        return
    end
    LocalSave(value, red_id, ...)
    Save(RedConst.DataType.Data, value, red_id, ...)
end

---@param red_id int
function RedPointMgr.Remove(red_id, ...)
    Remove(RedConst.DataType.Data, red_id, ...)
end

---@param red_id
---@vararg int,int,int
---@return int
function RedPointMgr.GetValue(red_id, ...)
    if not DataMap then
        return 0
    end
    local res = 0
    if select("#", ...) > 0 then
        if DataMap.GroupMap then
            local target = DataMap.GroupMap[red_id]
            if target then
                local keys = { ... }
                local idx = table.remove(keys)
                for k, v in ipairs(keys) do
                    target = target.GroupMap[v]
                end
                if target then
                    res = target.ValueMap and target.ValueMap[idx] or 0
                end
                PoolUtil.ReleaseTable(keys)
            end
        end
    else
        if DataMap.ValueMap then
            res = DataMap.ValueMap[red_id] or 0
        end
    end

    return res
end

---@param id int
---@return pbcmessage.RedPointGroup
function RedPointMgr.GetServerDataList(id)
    if DataMap then
        return DataMap.GroupMap[id]
    end
    return nil
end

---是否可以初始化
---@return boolean
function RedPointMgr.IsInit()
    return isInit
end

---@param is_init boolean
function RedPointMgr.SetIsInit(is_init)
    isInit = is_init
    SetData(RedConst.DataType.Init, RedConst.RedOperationType.SET, 1, 1)
end

---初始化红点数据
---@param data pbcmessage.RedPointGroup
function RedPointMgr.Init(data, reds)
    if data then
        isInit = data.GroupMap[RedConst.DataType.Init] == nil
        InitRedData(data.GroupMap[RedConst.DataType.Red])
        DataMap = data.GroupMap[RedConst.DataType.Data]
    end
    RedPointMgr.RefreshRedData(reds)
end

local DoRequest = function()
    ---@type pbcmessage.RedPointOperate[]
    local req_list = PoolUtil.GetTable()
    for _, v in pairs(cache_save_list) do
        table.insert(req_list, v)
    end
    local req = PoolUtil.GetTable()
    req.Operates = req_list
    GrpcMgr.SendRequestAsync(RpcDefines.RedPointSetRequest, req)
    for i, v in pairs(cache_save_list) do
        PoolUtil.ReleaseTable(v.ID)
        PoolUtil.ReleaseTable(v)
    end
    PoolUtil.ReleaseTable(req_list)
    PoolUtil.ReleaseTable(req)
end

local LateUpdate = function()
    if is_data_dirty then
        for _, v in pairs(cache_data_list) do
            v:RedCheckBll()
        end
        table.clear(cache_data_list)
    end

    if is_view_dirty then
        for _, v in pairs(cache_view_list) do
            ViewCtrl:OnCountChange(v)
        end
        table.clear(cache_view_list)
    end
    is_data_dirty = false
    is_view_dirty = false
    
end

local function CheckRequest()
    if is_save_dirty then
        DoRequest()
        table.clear(cache_save_list)
        is_save_dirty = false
    end
end

---添加红点缓存数据，在LateUpdate执行
---@param red_id number
function RedPointMgr.Check(red_id)
    local redData = DataCtrl:GetData(red_id)
    if not redData then
        return
    end
    is_data_dirty = true
    cache_data_list[red_id] = redData
end

function RedPointMgr.CheckProto(proto_name)
    local data_map = DataCtrl:GetDataMap()
    for i, v in pairs(data_map) do
        if v:CheckProtoIn(proto_name) then
            RedPointMgr.Check(v:GetId())
        end
    end
end

--region 编辑器接口
---编辑器使用，获取当前view显示的红点类型
---@param obj GameObject
---@param red_id int
---@return int
function RedPointMgr.GetShowTypeForEditor(obj, red_id)
    if red_id == 0 then
        return ViewCtrl:GetShowType(obj)
    else
        return RedPointMgr.GetRedType(red_id, RedPointMgr.GetIdentify(obj))
    end
end

---@param obj GameObject
---@return int
function RedPointMgr.GetCountForEditor(obj, red_id)
    return RedPointMgr.GetViewCount(red_id, RedPointMgr.GetIdentify(obj))
end

---@param red_id int
---@return int
function RedPointMgr.GetLockSysIdForEditor(red_id)
    local is_unlock, sys_id = RedPointMgr.IsRedSysUnlock(red_id)
    if not is_unlock then
        return sys_id
    end
    return 0
end

---@param obj GameObject
---@return string
function RedPointMgr.GetIdentifyForEditor(obj)
    return tostring(RedPointMgr.GetIdentify(obj, true))
end


--endregion

LocalSave = function(value, ...)
    if select("#", ...) == 0 then
        return
    end
    if not DataMap then
        DataMap = PoolUtil.GetTable()
    end
    local res = { ... }
    local target = DataMap
    local idx = table.remove(res)
    for k, v in ipairs(res) do
        if not target.GroupMap then
            target.GroupMap = PoolUtil.GetTable()
        end
        if not target.GroupMap[v] then
            target.GroupMap[v] = PoolUtil.GetTable()
        end
        target = target.GroupMap[v]
    end
    if not target.ValueMap then
        target.ValueMap = PoolUtil.GetTable()
    end
    target.ValueMap[idx] = value
    PoolUtil.ReleaseTable(res)
end

---@param data pbcmessage.RedPointGroup
InitRedData = function(data)
    if not data then
        return
    end
    for red_id, v in pairs(data.GroupMap) do
        for identify_id, count in pairs(v.ValueMap) do
            DataCtrl:UpdateCount(red_id, count, identify_id)
        end
    end
    for red_id, value in pairs(data.ValueMap) do
        DataCtrl:UpdateCount(red_id, value)
    end
end

---系统是否解锁
---@param sys_id int
---@return boolean
local function IsSysUnlock(sys_id)
    return RedPointMgr.IsForEditor or (SysUnLock and SysUnLock.IsUnLock(sys_id))
end

---数量变动
local function OnCountChange(red_id)
    is_view_dirty = true
    cache_view_list[red_id] = red_id

    EventMgr.Dispatch(Const.Event.ON_RED_DATA_CHANGED,red_id)
    if RedPointMgr.IsForEditor then
        ViewCtrl:OnCountChange(red_id)
    end
end

---获取绑定的红点id
GetRedIdByObj = function(obj)
    local red_cs = GameObjectUtil.GetComponent(obj, "", RedConst.CS_COMPONENT_NAME)
    return red_cs and red_cs.Id or 0
end

---内部函数
BindRedObj = function(obj, ...)
    local red_cs = GameObjectUtil.GetComponent(obj, "", RedConst.CS_COMPONENT_NAME)
    BindRedByCS(red_cs, ...)
end

BindRedByCS = function(red_cs, ...)
    local red_id = red_cs.Id
    local obj = red_cs.gameObject
    BindRed(obj, red_id, ...)
end

BindRed = function(obj, red_id, ...)
    ViewCtrl:Bind(obj, red_id, ...)
end

UnBindRed = function(obj, ...)
    ViewCtrl:UnBind(obj, ...)
end

local function OnEventBind(red_cs)
    BindRedByCS(red_cs)
end

local function OnEventUnBind(red_cs)
    if GameObjectUtil.IsNull(red_cs) then
        return
    end
    UnBindRed(red_cs.gameObject)
end

local ERedDotType = {
    Shop = 1001, ---商店
    Card = 1002, ---抽卡
    Guild = 1003, ---联盟
}

---服务器红点数据变更 RedPoint
---@param red pbcmessage.RedPoint
RefreshRedData = function(red)
    if not red then
        return
    end
    if red.Type == ERedDotType.Shop then

    elseif red.Type == ERedDotType.Guild then
        for k, v in pairs(red.Reds) do
            RedPointMgr.UpdateCount(X3_CFG_CONST.RED_GUILD_APPLY, v)
        end
    end
end

---@param red_id int
---@param count int
---@param identify_id int
SaveRed = function(red_id, count, identify_id)
    Save(RedConst.DataType.Red, count, red_id, identify_id)
end

---@param data_type RedConst.DataType
---@param value int
---@vararg int
Save = function(data_type, value, ...)
    SetData(data_type, RedConst.RedOperationType.SET, value, ...)
end

---@param data_type RedConst.DataType
---@vararg
Remove = function(data_type, ...)
    SetData(data_type, RedConst.RedOperationType.REMOVE, 0, ...)
end

---@param op_type RedConst.RedOperationType
---@param value
---@vararg int
SetData = function(data_type, op_type, value, ...)
    if not data_type or select("#", ...) == 0 then
        return
    end
    op_type = op_type or RedConst.RedOperationType.SET
    if op_type == RedConst.RedOperationType.SET then
        save_count = save_count + 1
    end
    ---@ type pbcmessage.RedPointSetRequest
    --local res = PoolUtil.GetTable()
    ---@type pbcmessage.RedPointOperate
    local operation = PoolUtil.GetTable()
    operation.ID = PoolUtil.GetTable()
    operation.OpType = op_type
    operation.Value = value
    table.insert(operation.ID, data_type)
    local keys = { ... }
    for _, v in ipairs(keys) do
        table.insert(operation.ID, v)
    end
    PoolUtil.ReleaseTable(keys)
    is_save_dirty = true
    table.insert(cache_save_list, operation)
end

local function OnSetRedReply(msg)

end

local function OnEventDestroy(red_cs)
    if ViewCtrl then
        ViewCtrl:OnRedPointDestroy(red_cs)
    end

end

local function OnEventRelease(redObj)
    if ViewCtrl then
        ViewCtrl:AddRedObjToCache(redObj)
    end

end

local function RegisterEvent()
    EventMgr.AddListener(RedConst.BIND_RED_POINT, OnEventBind)
    EventMgr.AddListener(RedConst.UN_BIND_RED_POINT, OnEventUnBind)
    EventMgr.AddListener(RedConst.DESTROY_RED_POINT, OnEventDestroy)
    EventMgr.AddListener(RedConst.RELEASE_RED_POINT, OnEventRelease)
    EventMgr.AddListener(RedConst.SERVER_SET_RED_REPLY, OnSetRedReply)

    CS.X3Game.RedPoint.EnableEventName = RedConst.BIND_RED_POINT
    CS.X3Game.RedPoint.DisableEventName = RedConst.UN_BIND_RED_POINT
    CS.X3Game.RedPoint.DestroyEventName = RedConst.DESTROY_RED_POINT
    CS.X3Game.RedPoint.ReleaseEventName = RedConst.RELEASE_RED_POINT
    CS.X3Game.RedPoint.RedPointName = RedConst.NODE_NAME
end

---检测红点数据
function RedPointMgr.CheckAllRed()
    DataCtrl:CheckAllRed()
end

function RedPointMgr.Clear()
    ViewCtrl:Clear()
    DataCtrl:Clear()
    CheckRequest()
    is_data_dirty = false
    is_view_dirty = false
    is_save_dirty = false
    table.clear(cache_save_list)
    table.clear(cache_view_list)
    table.clear(cache_data_list)
end

local function Init()
    RedPointMgr.IsForEditor = false
    DataCtrl = require(RedConst.RED_DATA_CTRL_PATH)
    ViewCtrl = require(RedConst.RED_VIEW_CTRL_PATH)
    DataCtrl:Init(OnCountChange, IsSysUnlock)
    ViewCtrl:Init()
    RegisterEvent()
    TimerMgr.AddTimerByFrame(1, LateUpdate, nil, -1, TimerMgr.UpdateType.FINAL_UPDATE)
    TimerMgr.AddTimer(RedConst.TickDt, CheckRequest, nil, -1, TimerMgr.UpdateType.FINAL_UPDATE)
end

Init()

return RedPointMgr