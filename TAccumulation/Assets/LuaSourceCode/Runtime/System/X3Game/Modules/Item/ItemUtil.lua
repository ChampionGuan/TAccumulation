---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2022/8/22 10:39
---

---@class ItemUtil
---@type ItemUtil
local ItemUtil = {}

---ItemCtrl 与 与其绑定的GameObject 的 parent 的映射字典，通过父物体可以找到子物体的itemCtrl
---@private
---@type table<Transform, ItemCtrl>
local itemCtrlBindDic

---与GameObject绑定记录OCX对应的GameObject的InstanceID显隐状态的字典
---@private
---@type table<number, InsActiveDicTempVirtualBase>
---不允许直接操纵 gameObjectActiveStatusDic
local gameObjectActiveStatusDic
--setmetatable(gameObjectActiveStatusDic,{ __mode = "k" })

---@type table<string, GameObject>
local effectInsCacheDic
---@type GameObject
local commonItemEffect

function ItemUtil.Init()
    ItemUtil.Clear()
end

function ItemUtil.Clear()
    itemCtrlBindDic = {}
    gameObjectActiveStatusDic = {}
    effectInsCacheDic = {}
    commonItemEffect = nil
end

function ItemUtil.Destroy()
    ItemUtil.Clear()
end

---@param go GameObject 与显隐状态字典绑定的GameObject
---@return InsActiveDicTempVirtualBase
function ItemUtil.GetActiveStatusDic(go)
    return gameObjectActiveStatusDic[go:GetInstanceID()]
end

---@param go GameObject 与显隐状态字典绑定的GameObject
---@param dic InsActiveDicTempVirtualBase
function ItemUtil.SetActiveStatusDic(go, dic)
    gameObjectActiveStatusDic[go:GetInstanceID()] = dic
end

--region ItemCtrl的ID字典
---@class ItemUtil.itemCtrlIdDic table<ItemCtrl, number>
---@field curId number id自增的值

---@private
---@type ItemUtil.itemCtrlIdDic
ItemUtil.itemCtrlIdDic = {}
ItemUtil.itemCtrlIdDic.curId = 0

---获取ItemCtrl的实例ID，如果没有就创建新的
---@private
---@param itemCtrl ItemCtrl
---@return number
function ItemUtil.itemCtrlIdDic:_GetItemCtrlId(itemCtrl)
    if not self[itemCtrl] then
        local id = self:_CtrlIdGenerator()
        -- 这里做成双向绑定，这样可以快速索引
        self[itemCtrl] = id
        self[id] = itemCtrl
    end
    return self[itemCtrl]
end

---@private
---@param id number
---@return ItemCtrl
function ItemUtil.itemCtrlIdDic:_GetItemCtrl(id)
    return self[id]
end

---@private
---@return number
function ItemUtil.itemCtrlIdDic:_CtrlIdGenerator()
    self.curId = self.curId + 1
    return self.curId
end
--endregion

---为选中的预制体添加Common_Item以及其子节点，并绑定Lua脚本
---@public
---@param owner UICtrl
---@param parent Transform
---@param itemId number
---@param itemType ItemConst.ItemType 在itemType不是nil的情况下走特殊的初始化流程（目前主要是针对Common_SCoreIcon——大卡）
---@return number ItemCtrl的实例ID
function ItemUtil.AddOrGetItemCtrl(owner, parent, itemId, itemType)
    ---@type ItemCtrl
    local itemCtrl = itemCtrlBindDic[parent]
    if not itemCtrl then
        local gameObj = X3AssetInsProvider.GetInsWithAssetPath(ItemConst.COMMON_ITEM_PATH)
        -- 从对象池取出的物体一定是active false
        gameObj:SetActive(true)
        if not gameObj then
            Debug.LogError(string.concat("请检查路径: ", ItemConst.COMMON_ITEM_PATH))
        end
        itemCtrl = UICtrl.GetOrAddCtrl(gameObj, ItemConst.ITEM_CTRL_PATH, owner, true)
        --对于新创建的Common_Item需要将active信息注册进gameObjectActiveStatusDic
        if not ItemUtil.GetActiveStatusDic(gameObj) then
            ItemUtil.SetActiveStatusDic(gameObj, ItemConst.ItemInsActiveDicTemp.new())
        end
        itemCtrl:SetParent(parent)

        itemCtrlBindDic[parent] = itemCtrl
    end

    -- 未提供类型的情况下推断类型
    if not itemType then
        itemType = ItemUtil._ConvertConfigTypeToItemType(itemId)
    end
    itemCtrl:AddItemObjectWithUICtrl(itemType, itemId)
    return ItemUtil.itemCtrlIdDic:_GetItemCtrlId(itemCtrl)
end

---专门为虚拟道具提供的访问接口
---@public
---@param owner UICtrl
---@param parent Transform
---@param itemId number
---@param itemConfigType number 虚拟道具的类型
---@return number ItemCtrl的实例ID
function ItemUtil.AddOrGetVirtualItemCtrl(owner, parent, itemId, itemConfigType)
    --防止为虚拟道具让普通道具无法正常显示
    local itemTypeCfg = LuaCfgMgr.Get("ItemType", itemConfigType)
    if itemTypeCfg.Virtual ~= 1 then
        return ItemUtil.AddOrGetItemCtrl(owner, parent, itemId)
    end
    
    ---@type ItemCtrl
    local itemCtrl = itemCtrlBindDic[parent]
    if not itemCtrl then
        local gameObj = X3AssetInsProvider.GetInsWithAssetPath(ItemConst.COMMON_ITEM_PATH)
        -- 从对象池取出的物体一定是active false
        gameObj:SetActive(true)
        if not gameObj then
            Debug.LogError(string.concat("请检查路径: ", ItemConst.COMMON_ITEM_PATH))
        end
        itemCtrl = UICtrl.GetOrAddCtrl(gameObj, ItemConst.ITEM_CTRL_PATH, owner, true)
        --对于新创建的Common_Item需要将active信息注册进gameObjectActiveStatusDic
        if not ItemUtil.GetActiveStatusDic(gameObj) then
            ItemUtil.SetActiveStatusDic(gameObj, ItemConst.ItemInsActiveDicTemp.new())
        end
        itemCtrl:SetParent(parent)

        itemCtrlBindDic[parent] = itemCtrl
    end

    --目前虚拟道具都显示为 NormalItem
    itemCtrl:AddItemObjectWithUICtrl(ItemConst.ItemType.NORMAL_ITEM, itemId, itemConfigType)
    return ItemUtil.itemCtrlIdDic:_GetItemCtrlId(itemCtrl)

end

---对于让具体的业务系统设置自己想要的Item的样式（仅处理显隐关系）
---注：需要提供完整的样式
---@public
---@param ctrlId number 需要修改显示样式的ItemCtrl的id
---@param showFlag number 显示样式（请使用 ItemConst.ItemShowFlag 下的成员做按位与运算）
function ItemUtil.SetStyle(ctrlId, showFlag)
    ---@type ItemCtrl
    local itemCtrl = ItemUtil.itemCtrlIdDic:_GetItemCtrl(ctrlId)
    itemCtrl:SetStyle(showFlag)
end

---通用的设置Data的方法 可以这样调用 ItemUtil.SetData(key,value, true).SetData(key,value)
---@public
---@param ctrlId number itemCtrl的ID
---@param dataEnum ItemConst.DataEnum
---@param value any
---@return ItemUtil
function ItemUtil.SetData(ctrlId, dataEnum, value)
    ---@type ItemCtrl
    local itemCtrl = ItemUtil.itemCtrlIdDic:_GetItemCtrl(ctrlId)
    -- 如果是end就UpdateView
    itemCtrl:SetData(dataEnum, value)
    return ItemUtil
end

--region Private Field
---@private 将配置表中的类型转换成Item系统中自定义的类型
---@param itemId number
---@return ItemConst.ItemType
function ItemUtil._ConvertConfigTypeToItemType(itemId)
    ---@type cfg.Item
    local itemConfig = LuaCfgMgr.Get("Item", itemId)
    local itemType = ItemConst.ItemType.NORMAL_ITEM
    if itemConfig then
        -- 没有itemConfig说明是虚拟道具
        if ItemConst.ItemIDTypeDic[itemConfig.Type] then
            itemType = ItemConst.ItemIDTypeDic[itemConfig.Type]
        end
    end
    return itemType
end

---@private 解除ItemCtrl和父对象的绑定关系
---@param parent Transform
function ItemUtil._RemoveBoundItemCtrl(parent)
    if itemCtrlBindDic[parent] then
        itemCtrlBindDic[parent] = nil
    end
end

---@private 通过名称获取特效的实例
---@param name string
---@return GameObject
function ItemUtil._GetEffectInsByName(name)
    if commonItemEffect == nil then
        commonItemEffect = X3AssetInsProvider.GetInsWithAssetPath(ItemConst.COMMON_ITEM_EFFECT_PATH)
        GameObjectUtil.SetActive(commonItemEffect, false)
    end

    local effect = effectInsCacheDic[name]
    if effect == nil then
        effectInsCacheDic[name] = GameObjectUtil.GetComponent(commonItemEffect, name)
        effect = effectInsCacheDic[name]
    end

    if effect ~= nil then
        --第二个参数代表所有的对象都回到池子后池子的生命周期
        return X3AssetInsProvider.GetInsWithPrefab(effect)
    end

    return nil
end
--endregion

return ItemUtil