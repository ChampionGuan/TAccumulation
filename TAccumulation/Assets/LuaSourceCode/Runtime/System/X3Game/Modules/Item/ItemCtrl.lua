---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2022/8/22 10:40
---

---@type Item.ItemData
local ItemData = require(ItemConst.ITEM_DATA_PATH)

---@class ItemCtrl:UICtrl
local ItemCtrl = class("ItemCtrl", UICtrl)

---@type ItemDataFactory
local ItemDataFactory = require(ItemConst.ITEM_DATA_FACTORY_PATH);

function ItemCtrl:ctor()
    ---@type Item.ItemData
    self.itemData = nil
    ---@type X3Game.CommonItemContainer
    self.commonItemContainer = nil
end

---给子逻辑节点添加GameObject并绑定UICtrl
---如果子逻辑节点已经绑定了UICtrl，就不添加GameObject以及绑定UICtrl只更改ObjEnum的显示
---@param itemType ItemConst.ItemType
---@param itemId number
---@param itemConfigType number ItemType配置表ID（为了适应虚拟物体增加）
function ItemCtrl:AddItemObjectWithUICtrl(itemType, itemId, itemConfigType)
    -- 1. 构造ItemData和ItemSubData
    if not self.itemData then
        self.itemData = ItemDataFactory.GetItemData(self)
    end

    local itemData = self.itemData
    itemData:InitData(itemType, itemId, itemConfigType);

    -- 2. 判断逻辑挂点是否已经绑定了UICtrl以及是否需要更新
    if itemData.itemTypeCtrlDic[itemType] then
        self:UpdateView()
        return
    end

    -- 3. 实例化对应的GameObject以及UICtrl（需要获取逻辑挂点setParent）
    local logicNodeTrans = self:GetComponent(ItemConst.ItemTypeLogicNodeOCXDic[itemType], "Transform")
    local gameObj = X3AssetInsProvider.GetInsWithAssetPath(ItemConst.ItemTypeAssetPathDic[itemType])
    if not gameObj then
        Debug.LogErrorFormat("请检查路径: %s", ItemConst.ItemTypeAssetPathDic[itemType])
    end
    -- 对象池取出的物体active默认是false
    gameObj:SetActive(true)
    ---@type ItemSubCtrl
    local itemSubCtrl = UICtrl.GetOrAddCtrl(gameObj, ItemConst.ItemTypeLuaPathDic[itemType], self, true)
    itemSubCtrl:SetParent(logicNodeTrans)
    -- 4. 对于新创建的Item（非重复使用）需要将Active信息注册进gameObjectActiveStatusDic
    if not ItemUtil.GetActiveStatusDic(gameObj) then
        local dic = ItemConst.ItemTypeInsActiveDicTempDic[itemType].new()
        ItemUtil.SetActiveStatusDic(gameObj, dic)
    end
    -- 5. itemCtrl 注册到 ItemData 中便于通过类型找到对应的子Ctrl
    itemData.itemTypeCtrlDic[itemType] = itemSubCtrl

    -- 6. 初始化以后更新显示
    self:UpdateView()
end

--- 修改ItemData以及SubData
---@param dataEnum ItemConst.DataEnum
---@param value any
function ItemCtrl:SetData(dataEnum, value)
    local itemData = self.itemData
    if dataEnum < ItemConst.DataEnum.__common_end then
        -- 处理公共数据
        local setDataFunc = ItemData.SetDataFuncDic[dataEnum]
        if setDataFunc then
            setDataFunc(itemData, value)
        end
        self:UpdateView()
    elseif dataEnum > ItemConst.DataEnum.__common_end then
        -- 非公共数据调用当前类型的SetData
        if not itemData.itemTypeCtrlDic[itemData.curItemType] then
            Debug.LogErrorFormat("找不到当前类型的Ctrl: %s", itemData.curItemType)
        else
            itemData.itemTypeCtrlDic[itemData.curItemType]:SetData(dataEnum, value)
        end
    end
end

---根据设置的样式应用Flag
function ItemCtrl:DecodeShowFlag()
    local itemData = self.itemData
    -- itemData.showFlag & 特定的flag ~= 0 说明需要显示
    if itemData.showFlag & ItemConst.ItemShowFlag.Common_Name ~= 0 then
        self:_ShowName()
    else
        self:_SetActiveStatus(ItemConst.OCX_ITEM_TXT_NAME, false)
    end

    -- 显示click
    self:_ShowClick()
end

---特异化的修改Item显示的样式，非固定流程
---@param showFlag number 显示样式
function ItemCtrl:SetStyle(showFlag)
    local itemData = self.itemData
    itemData.showFlag = showFlag

    -- 样式改变会同时影响父子节点
    itemData.isDirty = true
    itemData.itemSubDataDic[itemData.curItemType].isDirty = true
    self:UpdateView()
end

--- Common_Item 更新显示
function ItemCtrl:UpdateView()
    local itemData = self.itemData

    -- 更新子物体的显示
    itemData.itemTypeCtrlDic[itemData.curItemType]:UpdateView()

    -- 只有dirty才需要更新
    if not itemData.isDirty then
        return
    end

    -- 显示当前需要显示的ItemSubCtrl绑定的GameObject
    self:SetValue("", itemData.curItemType)

    if itemData.showFlag ~= 0 then
        -- 个性化显示
        self:DecodeShowFlag()
    else
        -- 标准显示流程(隐藏Name)
        self:_SetActiveStatus(ItemConst.OCX_ITEM_TXT_NAME, false)
        self:_ShowClick()
    end
    itemData.isDirty = false;
end

--region Private Field
---@private
function ItemCtrl:_ShowName()
    local itemData = self.itemData
    self:_SetActiveStatus(ItemConst.OCX_ITEM_TXT_NAME, true)
    self:SetText(ItemConst.OCX_ITEM_TXT_NAME, itemData.common_Name)
end

---@private
function ItemCtrl:_ShowClick()
    local itemData = self.itemData
    if itemData.common_TipsType ~= Define.ItemTipsType.None then
        self:_SetActiveStatus(ItemConst.OCX_ITEM_OBJ_CLICK, true)
        -- 增加点击事件
        if not itemData.isBoundOnClick then
            --self是当前ItemCtrl这里id切换的时候是否会出现
            self:AddButtonListener(ItemConst.OCX_ITEM_OBJ_CLICK, function()
                local data = self.itemData
                if data.common_TipsType ~= Define.ItemTipsType.None then
                    UICommonUtil.ShowItemTips(data.common_TipsItemData, data.common_TipsType, data.common_TipsParam, data.common_TipsCdData, data.itemTypeConfig.Id, self:GetComponent(ItemConst.OCX_ITEM_OBJ_CLICK, "Transform"))
                end
            end)
            itemData.isBoundOnClick = true
        end
    else
        -- 对于none不触发点击事件
        self:_SetActiveStatus(ItemConst.OCX_ITEM_OBJ_CLICK, false)
    end
end

---@private
---@param ocxKey string
---@param value boolean
function ItemCtrl:_SetActiveStatus(ocxKey, value)
    local index = ItemConst.CommonItemActiveDicOCXKeysIndexDic[ocxKey]
    local activeDic = ItemUtil.GetActiveStatusDic(self.gameObject)
    if activeDic and activeDic.values[index] ~= value then
        activeDic.values[index] = value
        self:SetActive(ocxKey, value)
    end
end

---调用CommonItemContainer的Refresh方法
function ItemCtrl:_InvokeRefresh()
    if self.commonItemContainer == nil then
        self.commonItemContainer = GameObjectUtil.EnsureCSComponent(self.transform.parent.gameObject, ItemConst.CommonItemContainerType)
    end

    if self.commonItemContainer ~= nil then
        self.commonItemContainer:Refresh()
    end
end
--endregion Private Field End

function ItemCtrl:OnClose()
    --1. 回收data
    ItemDataFactory.ReleaseItemData(self.itemData)
    self.itemData = nil
    if self.commonItemContainer ~= nil then
        self.commonItemContainer:Clear()
        self.commonItemContainer = nil
    end
    
    --2. 解除ItemCtrl与parent的绑定关系
    ItemUtil._RemoveBoundItemCtrl(self.parent)
    --3. 解除OnClick的ButtonListener以及将OCX_objClick对应的active属性设置为false
    self:RemoveButtonListener(ItemConst.OCX_ITEM_OBJ_CLICK, nil)
    self:SetActive(ItemConst.OCX_ITEM_OBJ_CLICK, false)
    local valueIndex = ItemConst.CommonItemActiveDicOCXKeysIndexDic[ItemConst.OCX_ITEM_OBJ_CLICK]
    ItemUtil.GetActiveStatusDic(self.gameObject).values[valueIndex] = false
    X3AssetInsProvider.ReleaseIns(self.gameObject)
end
return ItemCtrl
