---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2022/8/22 20:02
---

---ItemData包括：ItemCtrl脚本的数据、配置表数据、各个层次结构需要外界设置并且无法从配置读取的专属数据
---@class Item.ItemData
---@field owner ItemCtrl 与ItemData绑定的ItemCtrl
---@field itemTypeCtrlDic table<ItemConst.ItemType, ItemSubCtrl> 根据ItemType索引ItemSubCtrl
---@field curItemType ItemConst.ItemType 当前显示的Item类型
--- 子Item的DataDic
---@field itemSubDataDic table<ItemConst.ItemType, ItemSubData> 子item的数据
---@field isDirty boolean 当前是否需要更新显示(默认是Dirty的)
--- 共用的配置表数据
---@field configId number Item.xlsx 配置表中的 ID
---@field itemConfig cfg.Item Item.xlsx 中的 Item Sheet
---@field itemTypeConfig cfg.ItemType Item.xlsx 中的 ItemType Sheet
--- Common_Item专属
---@field isBoundOnClick boolean 防止反复的给button添加listener
---@field common_TipsItemData cfg.s3int | pbcmessage.S3Int {ID,Num,Type}的table
---@field common_TipsType Define.ItemTipsType 弹框类型不是None会有点击事件触发
---@field common_TipsParam itemTipsExtraParam 弹窗额外数据
---@field common_TipsCdData table 限时道具服务器数据
---@field common_Name string 需要显示的名称（非标准流程），传入 nil 表示使用默认样式
--- 特异化显示的标记
---@field showFlag number
---@type Item.ItemData
local ItemData = class("ItemData")

---@type ItemDataFactory
local ItemDataFactory = require(ItemConst.ITEM_DATA_FACTORY_PATH);

--- 修改ItemData共用属性的方法集合
--- 数据修改后需要根据情况决定UI是否需要更新
--- @alias SetDataFunc fun(itemData:Item.ItemData, value:any):void
--- @type table<ItemConst.DataEnum, SetDataFunc>
ItemData.SetDataFuncDic = {
    ---@param data Item.ItemData
    ---@param value string
    [ItemConst.DataEnum.NAME] = function(data, value)
        if value ~= nil then
            if data.common_Name ~= value then
                data.common_Name = value
            end
        else
            if data.curItemType == ItemConst.ItemType.NORMAL_ITEM then
                if data.itemTypeConfig.Virtual == 1 then
                    data.common_Name = BllMgr.GetItemBLL():GetItemShowName(data.configId, data.itemTypeConfig.Id)
                else
                    data.common_Name = data.itemConfig.Name
                end
            elseif data.curItemType == ItemConst.ItemType.SCORE_ICON_S then
                data.common_Name = BllMgr.GetScoreBLL():GetScoreName(data.configId)
            elseif data.curItemType == ItemConst.ItemType.CARD_ICON then
                data.common_Name = UITextHelper.GetUIText(data.itemConfig.Name)
            elseif data.curItemType == ItemConst.ItemType.CARD_CHIP then
                -- TODO目前尚未看到用到名字的地方
            end
        end
        data.isDirty = true
    end,

    ---@param data Item.ItemData
    ---@param value table
    [ItemConst.DataEnum.TIPS_CD_DATA] = function(data, value)
        data.common_TipsCdData = value
    end,

    ---@param data Item.ItemData
    ---@param value itemTipsExtraParam
    [ItemConst.DataEnum.TIPS_PARAM] = function(data, value)
        data.common_TipsParam = value
    end,

    ---@param data Item.ItemData
    ---@param value Define.ItemTipsType
    [ItemConst.DataEnum.TIPS_TYPE] = function(data, value)
        if data.common_TipsType ~= value and
                (data.common_TipsType == Define.ItemTipsType.None or value == Define.ItemTipsType.None) then
            -- 这里是onclick的显隐状态变更的条件
            data.isDirty = true
        end
        data.common_TipsType = value
    end,

    ---@param data Item.ItemData
    ---@param value cfg.s3int | pbcmessage.S3Int
    [ItemConst.DataEnum.TIPS_ITEM] = function(data, value)
        if not value.Type then
            -- 应对外界不清楚type的情况
            --TODO 这里还是应该重新思考一下
            value.Type = data.itemTypeConfig.Id
        end
        -- 默认是configId-以下是(CardIcon/ScoreIcon/ScoreIcon_S)默认情况
        data.common_TipsItemData = data.configId
        if data.curItemType == ItemConst.ItemType.NORMAL_ITEM then
            if data.itemTypeConfig.Virtual ~= 1 then
                data.common_TipsItemData = value.ID or value.Id
            end
        elseif data.curItemType == ItemConst.ItemType.CARD_CHIP then
            local connectID = data.itemConfig.ConnectID
            ---@type cfg.CardBaseInfo
            local cardInfo = LuaCfgMgr.Get("CardBaseInfo", connectID)
            data.common_TipsItemData = cardInfo.FragmentID
        end
    end
}

---ItemData 第一次生成后的初始化方法
---@param itemType ItemConst.ItemType
---@param itemId number
---@param itemConfigType number ItemType配置表ID(为了适应虚拟物体增加)
function ItemData:InitData(itemType, itemId, itemConfigType)
    ---@type Item.ItemData
    local itemData = self
    if itemData.curItemType == nil then
        -- 第一次初始化
        itemData.curItemType = itemType
        itemData.configId = itemId
        itemData.itemConfig = LuaCfgMgr.Get("Item", itemId)
        if not itemData.itemConfig and not itemConfigType then
            Debug.LogErrorFormat("Item 配置读取失败 %s 请检查", itemId)
        end
        
        if not itemConfigType then
            itemConfigType = itemData.itemConfig.Type
        else
            Debug.LogFormat("虚拟道具ID %s 虚拟道具类型ID %s", itemId, itemConfigType)
        end
        itemData.itemTypeConfig = LuaCfgMgr.Get("ItemType", itemConfigType)
        itemData.itemSubDataDic[itemType] = ItemDataFactory.GetItemSubData(itemData, itemType)
        itemData.itemSubDataDic[itemType]:InitData()
    elseif itemType ~= itemData.curItemType or itemId ~= itemData.configId then
        -- 类型发生变化 1.reset ItemData 2.重置具体类型的Data的数据
        itemData:Reset() --这里设置了dirty
        -- 这里内部有判空处理，先释放原有类型的数据
        if itemType ~= itemData.curItemType then
            ItemDataFactory.ReleaseItemSubData(itemData.itemSubDataDic[itemData.curItemType], itemData.curItemType)
            itemData.itemSubDataDic[itemData.curItemType] = nil
        else
            ItemDataFactory.ReleaseItemSubData(itemData.itemSubDataDic[itemType], itemType)
        end

        itemData.curItemType = itemType
        itemData.configId = itemId
        itemData.itemConfig = LuaCfgMgr.Get("Item", itemId)
        if not itemData.itemConfig and not itemConfigType then
            Debug.LogErrorFormat("Item 配置读取失败 %s 请检查", itemId)
        end
        
        if not itemConfigType then
            itemConfigType = itemData.itemConfig.Type
        else
            Debug.LogFormat("虚拟道具ID %s 虚拟道具类型ID %s", itemId, itemConfigType)
        end
        itemData.itemTypeConfig = LuaCfgMgr.Get("ItemType", itemConfigType)
        itemData.itemSubDataDic[itemType] = ItemDataFactory.GetItemSubData(itemData, itemType)
        itemData.itemSubDataDic[itemType]:InitData()
    end
end

function ItemData:ctor()
    self.owner = nil
    self.itemTypeCtrlDic = { }
    self.curItemType = nil
    self.itemSubDataDic = {}
    self.isDirty = true
    self.configId = 0
    self.itemConfig = nil
    self.itemTypeConfig = nil
    self.isBoundOnClick = false
    self.common_TipsItemData = nil
    self.common_TipsType = Define.ItemTipsType.None
    self.common_TipsParam = nil
    self.common_TipsCdData = nil
    self.common_Name = nil
    self.showFlag = 0
end

function ItemData:Clear()
    self.owner = nil
    for k, _ in pairs(self.itemTypeCtrlDic) do
        self.itemTypeCtrlDic[k] = nil
    end
    self.curItemType = nil
    for k, v in pairs(self.itemSubDataDic) do
        ItemDataFactory.ReleaseItemSubData(v, k)
        self.itemSubDataDic[k] = nil
    end
    self.isDirty = true
    self.configId = 0
    self.itemConfig = nil
    self.itemTypeConfig = nil
    self.isBoundOnClick = false
    self.common_TipsItemData = nil
    self.common_TipsType = Define.ItemTipsType.None
    self.common_TipsParam = nil
    self.common_TipsCdData = nil
    self.common_Name = nil
    self.showFlag = 0
end

--- 用于在类型切换(curItemType改变的时候)的时候重置一些数据（主要是通用结构的数据）
function ItemData:Reset()
    self.common_TipsItemData = nil
    self.common_TipsType = Define.ItemTipsType.None
    self.common_TipsParam = nil
    self.common_TipsCdData = nil
    self.common_Name = nil
    -- 和Clear一样数据发生清理就表示绑定的UI需要变更了
    self.isDirty = true
    self.showFlag = 0
end
return ItemData