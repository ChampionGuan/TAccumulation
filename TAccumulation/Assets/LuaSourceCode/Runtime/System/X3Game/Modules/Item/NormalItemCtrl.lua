---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2022/8/22 10:40
---

---@type ItemSubCtrl
local ItemSubCtrl = require(ItemConst.ITEM_SUB_CTRL_PATH)

---@type NormalItemData
local NormalItemData = require(ItemConst.ITEM_NORMAL_DATA_PATH)

---@class NormalItemCtrl:ItemSubCtrl
local NormalItemCtrl = class("NormalItemCtrl", ItemSubCtrl)
function NormalItemCtrl:Init()
    ---@type NormalItemData
    self.normalItemData = nil
    ---@type UObject
    self.iconObj = nil
end

---@return ItemConst.ItemType
function NormalItemCtrl:GetItemType()
    return ItemConst.ItemType.NORMAL_ITEM
end

function NormalItemCtrl:DecodeShowFlag()
    local isShow = self:_ShowLimitTime()
    ---@type Item.ItemData
    local itemData = self.owner.itemData
    if itemData.showFlag & ItemConst.ItemShowFlag.Normal_Icon ~= 0 then
        self:_ShowIcon()
    else
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_ICON, false)
    end

    if itemData.showFlag & ItemConst.ItemShowFlag.Normal_Quality ~= 0 then
        self:_ShowQuality()
    else
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_QUALITY, false)
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_BG, false)
    end

    if itemData.showFlag & ItemConst.ItemShowFlag.Normal_RoleTag ~= 0 then
        self:_ShowRoleTag()
    else
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_ROLE_BG, false)
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_ROLE_TAG, false)
    end

    self:_ShowNumber(itemData.showFlag & ItemConst.ItemShowFlag.Normal_RedNum ~= 0)
    if not isShow then
        self:_ShowTime()
    else
        self:_HideTime()
    end
end

--- 修改NormalItemData
---@param dataEnum ItemConst.DataEnum
---@param value any
function NormalItemCtrl:SetData(dataEnum, value)
    --保证每次取到的数据都是最新的
    ---@type ItemCtrl
    local owner = self.owner
    self.normalItemData = owner.itemData.itemSubDataDic[ItemConst.ItemType.NORMAL_ITEM]
    local normalItemData = self.normalItemData
    local setDataFunc = NormalItemData.SetDataFuncDic[dataEnum]
    if setDataFunc then
        setDataFunc(normalItemData, value)
    end

    self:UpdateView()
end

function NormalItemCtrl:UpdateView()
    --保证每次取到的数据都是最新的
    ---@type ItemCtrl
    local owner = self.owner
    self.normalItemData = owner.itemData.itemSubDataDic[ItemConst.ItemType.NORMAL_ITEM]
    local normalItemData = self.normalItemData
    if not normalItemData.isDirty then
        return
    end

    local itemData = owner.itemData
    if itemData.showFlag ~= 0 then
        self:DecodeShowFlag()
    else
        -- 标准显示流程
        local isShow = self:_ShowLimitTime()
        self:_ShowIcon()
        self:_ShowQuality()
        self:_ShowNumber(false)
        self:_ShowRoleTag()
        if not isShow then
            self:_ShowTime()
        else
            self:_HideTime()
        end
    end

    normalItemData.isDirty = false
end

--region Private Field
---@private
function NormalItemCtrl:_ShowIcon()
    ---@type NormalItemData
    local normalItemData = self.normalItemData
    --装修
    if normalItemData.itemShowConfig.Type == X3_CFG_CONST.ITEM_TYPE_DECORATION then
        local styleItem = SelfProxyFactory.GetCollectionRoomProxy():GetDecorationItemInfo(normalItemData.itemShowConfig.ID)
        if styleItem:GetIsURL() then
            styleItem:GetIconUrl(function(url)
                if string.isnilorempty(url) then
                    self:SetImage(ItemConst.OCX_NORMAL_ITEM_IMG_ICON, normalItemData.itemShowConfig.Icon)
                else
                    if not self.iconObj then
                        self.iconObj = self:GetComponent(ItemConst.OCX_NORMAL_ITEM_IMG_ICON)
                    end

                    UrlImgMgr.SetUrlImage(self.iconObj, url, nil, nil, UrlImgMgr.BizType.Item)
                end
            end)
        else
            self:SetImage(ItemConst.OCX_NORMAL_ITEM_IMG_ICON, normalItemData.itemShowConfig.Icon)
        end
    else
        self:SetImage(ItemConst.OCX_NORMAL_ITEM_IMG_ICON, normalItemData.itemShowConfig.Icon)
    end

    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_ICON, true)
end

---@private
function NormalItemCtrl:_ShowQuality()
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_QUALITY, true)
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_BG, true)

    ---@type NormalItemData
    local normalItemData = self.normalItemData

    ---@type string[]
    local images = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.ITEMRARITYBG)
    self:SetImage(ItemConst.OCX_NORMAL_ITEM_IMG_QUALITY, images[normalItemData.itemShowConfig.Quality])
end

---@private
---@param isShowRed boolean true表示需要number红显
function NormalItemCtrl:_ShowNumber(isShowRed)
    local normalItemData = self.normalItemData
    if string.isnilorempty(normalItemData.normal_Num) then
        -- 隐藏
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_NUM, false)
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_NUM_BG, false)
    else
        if isShowRed then
            self:SetValue(ItemConst.OCX_NORMAL_ITEM_TXT_NUM, true)
        else
            self:SetValue(ItemConst.OCX_NORMAL_ITEM_TXT_NUM, false)
        end
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_NUM, true)
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_NUM_BG, true)
        self:SetText(ItemConst.OCX_NORMAL_ITEM_TXT_NUM, normalItemData.normal_Num)
    end
end

---@private
function NormalItemCtrl:_ShowTime()
    ---@type Item.ItemData
    local itemData = self.owner.itemData
    local itemTypeConfig = itemData.itemTypeConfig
    -- 虚拟道具没有限时功能
    if itemTypeConfig.Virtual == 1 then
        self:_HideTime()
        return
    end

    local normalItemData = self.normalItemData
    local itemConfig = normalItemData.itemShowConfig
    --这里在Item表中能找到明确的规则必须二者都有才能显示
    if itemTypeConfig.CornerMark ~= 0 and itemConfig.IntExtra2 ~= 0 then
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_TIME01, true)
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG_01, true)
        self:SetText(ItemConst.OCX_NORMAL_ITEM_TXT_TIME01, UITextConst.UI_TEXT_5504, itemConfig.IntExtra2)
        return
    else
        self:_HideTime()
    end
end

---@private
---隐藏时间加成相关的组件并停止Timer
function NormalItemCtrl:_HideTime()
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_TIME01, false)
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG_01, false)
end

---@private
---显示道具的剩余时间（优先级高于道具提供的时间加成）
---@return boolean
function NormalItemCtrl:_ShowLimitTime()
    ---@type Item.ItemData
    local itemData = self.owner.itemData
    local itemTypeConfig = itemData.itemTypeConfig
    -- 虚拟道具没有限时功能
    if itemTypeConfig.Virtual == 1 then
        self:_HideLimitTime()
        return false
    end

    local normalItemData = self.normalItemData
    local itemConfig = normalItemData.itemShowConfig
    local itemBll = BllMgr.GetItemBLL()
    local _, endTime, result = itemBll:GetItemLeftTime(itemData.configId, itemConfig)
    if result then
        local totalSecond = TimerMgr.GetUnixTimestamp(endTime) - TimerMgr.GetRealTimeSeconds()
        if totalSecond >= 1 then
            -- 设置初始值
            self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_TIME, true)
            self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG, true)
            self:_UpdateLimitTime()
            -- 记录progressId便于停止timer
            if normalItemData.limitTimerId == 0 then
                normalItemData.limitTimerId = TimerMgr.AddTimerByFrame(5, self._UpdateLimitTime, self, -1)
            end

            return true
        end
    else
        if normalItemData.normal_CdData ~= nil then
            --走 Normal_CDData 相关的显示逻辑
            local totalSecond = itemBll:GetSpItemOverTime(normalItemData.normal_CdData).TotalSeconds
            if totalSecond > 0 then
                self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_TIME, true)
                self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG, true)
                self:_UpdateLimitTimeByCDData()
                if normalItemData.limitTimerId == 0 then
                    -- 保证界面开启的时候是最新的
                    normalItemData.limitTimerId = TimerMgr.AddTimerByFrame(5, self._UpdateLimitTimeByCDData, self, -1);
                end

                return true
            end
        end
    end

    --保底的隐藏显示逻辑
    self:_HideLimitTime()
    return false
end

---@private
---隐藏限时道具相关的组件并停止Timer
function NormalItemCtrl:_HideLimitTime()
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_TXT_TIME, false)
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG, false)
    self:StopTimer()
end

---@private
---设置限时时间相关的值
function NormalItemCtrl:_UpdateLimitTimeByCDData()
    local normalItemData = self.normalItemData
    local current = BllMgr.GetItemBLL():GetSpItemOverTime(normalItemData.normal_CdData)
    local index = current.TotalSeconds < ItemConst.NormalItemTimeBgChangeLimitSeconds and 1 or 0
    if normalItemData.curTimeBgIndex ~= index then
        normalItemData.curTimeBgIndex = index
        self:SetValue(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG, index)
    end

    local time = 0
    local txtId
    if ItemConst.DaySeconds < current.TotalSeconds then
        time = current.Days
        txtId = UITextConst.UI_TEXT_5504 --{}天
    elseif ItemConst.HourSeconds <= current.TotalSeconds then
        time = current.Hours
        txtId = UITextConst.UI_TEXT_5505 --{}小时
    elseif ItemConst.MinSeconds <= current.TotalSeconds then
        time = current.Minutes
        txtId = UITextConst.UI_TEXT_5506 --{}分
    elseif current.Seconds < 0 then
        Debug.LogErrorFormat("[ItemIcon]%d cdTime is negative", normalItemData.owner.configId)
        time = 0
        txtId = UITextConst.UI_TEXT_5507 --{}秒
    else
        time = current.Seconds
        txtId = UITextConst.UI_TEXT_5507 --{}秒
    end

    if normalItemData.curTimeValue ~= time then
        normalItemData.curTimeValue = time
        if time == 0 then
            self:SetText(ItemConst.OCX_NORMAL_ITEM_TXT_TIME, "")
        else
            self:SetText(ItemConst.OCX_NORMAL_ITEM_TXT_TIME, txtId, time)
        end
    end
end

---@private
function NormalItemCtrl:_UpdateLimitTime()
    ---@type Item.ItemData
    local itemData = self.owner.itemData
    local normalItemData = self.normalItemData
    local itemBll = BllMgr.GetItemBLL()
    local _, endTime = itemBll:GetItemLeftTime(itemData.configId)
    local curOffset = TimerMgr.GetUnixTimestamp(endTime) - TimerMgr.GetRealTimeSeconds()
    local secStr, isGreater = itemBll:GetCommonItemEndTime(curOffset)
    local index = isGreater and 0 or 1
    if normalItemData.curTimeBgIndex ~= index then
        normalItemData.curTimeBgIndex = index
        self:SetValue(ItemConst.OCX_NORMAL_ITEM_OBJ_TIME_BG, index)
    end

    if normalItemData.curTimeValue ~= curOffset then
        normalItemData.curTimeValue = curOffset
        self:SetText(ItemConst.OCX_NORMAL_ITEM_TXT_TIME, secStr)
    end

    if curOffset <= 0 then
        self:_HideLimitTime()
    end
end

---@private
function NormalItemCtrl:_ShowRoleTag()
    ---@type Item.ItemData
    local itemData = self.owner.itemData
    local itemTypeConfig = itemData.itemTypeConfig
    local itemConfig = self.normalItemData.itemShowConfig

    --虚拟道具没有角标信息
    if itemTypeConfig.Virtual == 1 or itemTypeConfig.RoleIcon == 0 then
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_ROLE_BG, false)
        self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_ROLE_TAG, false)
        return
    end

    local isActive = (itemConfig.Role ~= 0)
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_OBJ_ROLE_BG, isActive)
    self:SetActiveStatus(ItemConst.OCX_NORMAL_ITEM_IMG_ROLE_TAG, isActive)

    if isActive then
        local roleInfo = LuaCfgMgr.Get("RoleInfo", itemConfig.Role)
        if roleInfo ~= nil then
            self:SetImage(ItemConst.OCX_NORMAL_ITEM_IMG_ROLE_TAG, roleInfo.RoleMarkSmall, "A2RoleMark")
        end
    end
end

---@private
function NormalItemCtrl:StopTimer()
    local timerId = self.normalItemData.limitTimerId
    if timerId ~= 0 then
        self.normalItemData.limitTimerId = 0
        self.normalItemData.curTimeValue = 0
        TimerMgr.Discard(timerId)
    end
end
--endregion

function NormalItemCtrl:OnClose()
    TimerMgr.DiscardTimerByTarget(self)
    self.normalItemData = nil
    self.iconObj = nil
    X3AssetInsProvider.ReleaseIns(self.gameObject)
end

return NormalItemCtrl
