---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/7/3 16:34
---

---角色控制器
---@class CharacterCtrl
local CharacterCtrl = class("CharacterCtrl")

---@type CharacterCtrlEnum
local CharacterCtrlEnum = require("Runtime.System.X3Game.Modules.CharacterCtrl.CharacterCtrlEnum")

---构造函数
function CharacterCtrl:ctor()
    ---@type GameObject 角色实例
    self.gameObject = nil
    ---@type table<CharacterCtrlEnum.SystemType, CharacterSubSystem>
    self.systemDict = {}
end

---返回当前的InstanceID
---@return int
function CharacterCtrl:GetInstanceID()
    if self.gameObject then
        return self.gameObject:GetInstanceID()
    end
    return 0
end

---初始化函数
function CharacterCtrl:Init()

end

---添加System
---@param systemType CharacterCtrlEnum.SystemType
---@return CharacterSubSystem
function CharacterCtrl:AddSystem(systemType)
    if self.systemDict[systemType] == nil then
        if systemType == CharacterCtrlEnum.SystemType.Model then
            self.systemDict[systemType] = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterModelSystem").new()
        elseif systemType == CharacterCtrlEnum.SystemType.Animator then
            self.systemDict[systemType] = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterAnimatorSystem").new()
        elseif systemType == CharacterCtrlEnum.SystemType.Blush then
            self.systemDict[systemType] = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterBlushSystem").new()
        elseif systemType == CharacterCtrlEnum.SystemType.PhysicsCloth then
            self.systemDict[systemType] = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterPhysicsClothSystem").new()
        elseif systemType == CharacterCtrlEnum.SystemType.Sweat then
            self.systemDict[systemType] = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterSweatSystem").new()
        end
        self.systemDict[systemType]:BindGameObject(self.gameObject)
        self.systemDict[systemType]:OnInit()
    end
    return self.systemDict[systemType]
end

---获取一个System
---@param systemType CharacterCtrlEnum.SystemType
---@param autoCreate boolean 是否自动创建
function CharacterCtrl:GetSystem(systemType, autoCreate)
    if not self.systemDict then
        return nil
    end
    if autoCreate == nil then autoCreate = false end
    if  self.systemDict[systemType] == nil and autoCreate then
        self:AddSystem(systemType)
    end
    return self.systemDict[systemType]
end

---绑定角色实例
---@param gameObject GameObject
function CharacterCtrl:BindGameObject(gameObject)
    self.gameObject = gameObject
    for _, ctrl in pairs(self.systemDict) do
        ctrl:BindGameObject(gameObject)
    end
end

---从存储的数据恢复System
---@param data any
function CharacterCtrl:ResetSystemFromData(data)

end

---获取需要给别人继承的数据
---@return any
function CharacterCtrl:GetData()

end

--region ModelSystemAPI
--endregion

--region AnimatorSystemAPI
--endregion

--region BlushSystemAPI
---启动脸红
---@param id int
---@param callback fun
function CharacterCtrl:StartBlush(id, callback)
    ---@type CharacterBlushSystem
    local system = self:GetSystem(CharacterCtrlEnum.SystemType.Blush, true)
    system:Start(id, callback)
end

---停止脸红
---@param callback fun
function CharacterCtrl:StopBlush(callback)
    ---@type CharacterBlushSystem
    local system = self:GetSystem(CharacterCtrlEnum.SystemType.Blush, true)
    if system then
        system:Stop(callback)
    end
end
--endregion


--region SweatSystemAPI
---启动流汗
---@param id int
---@param callback fun
function CharacterCtrl:StartSweat(id, callback)
    ---@type CharacterSweatSystem
    local system = self:GetSystem(CharacterCtrlEnum.SystemType.Sweat, true)
    system:Start(id, callback)
end

---停止流汗
---@param callback fun
function CharacterCtrl:StopSweat(callback)
    ---@type CharacterSweatSystem
    local system = self:GetSystem(CharacterCtrlEnum.SystemType.Sweat, true)
    if system then
        system:Stop(callback)
    end
end
--endregion

--region PhysicsCloth
---启动点击抖动系统，依赖BoneChainRopeSystem
---@param partName string 部件名
---@param boneName string
---@param rangeX float
---@param rangeY float
function CharacterCtrl:StartPhysicsClothShake(partName, boneName, rangeX, rangeY)
    ---@type CharacterBlushSystem
    local system = self:GetSystem(CharacterCtrlEnum.SystemType.PhysicsCloth, true)
    system:Start(partName, boneName, rangeX, rangeY)
end

---停止
function CharacterCtrl:StopPhysicsClothShake()
    local system = self:GetSystem(CharacterCtrlEnum.SystemType.PhysicsCloth)
    if system then
        system:Stop()
    end
end
--endregion

---清理函数
function CharacterCtrl:Clear()
    for _, system in pairs(self.systemDict) do
        system:OnClear()
    end
    self.systemDict = nil
    GameUtil.ClearTarget(self)
end

return CharacterCtrl