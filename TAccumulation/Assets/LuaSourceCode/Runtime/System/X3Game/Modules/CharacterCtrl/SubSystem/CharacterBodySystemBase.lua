---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by fusu.
--- DateTime: 2023/11/27 17:00
---

---角色流汗系统
---@type CharacterSubSystem
local CharacterSubSystem = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterSubSystem")
---@class CharacterBodySystemBase : CharacterSubSystem
local CharacterBodySystemBase = class("CharacterBodySystemBase", CharacterSubSystem)

local CS_GenericAniTree = CS.PapeAnimation.GenericAnimationTree
local CS_Enum_MixerType = CS.PapeAnimation.MixerType
local CS_AniClipInsNode = CS.PapeAnimation.AnimationClipInstanceNode
local CS_PlayableAniMgr = CS.Framework.PlayableAnimationManager

---@type CharacterBodyState
local CharacterBodyState = require("Runtime.System.X3Game.Modules.CharacterCtrl.SubSystem.CharacterBodyState")

---@type CharacterCtrlEnum
local CharacterCtrlEnum = require("Runtime.System.X3Game.Modules.CharacterCtrl.CharacterCtrlEnum")

local PLAY_ID = 0

---构造函数
function CharacterBodySystemBase:ctor()
    CharacterSubSystem.ctor(self)
    ---@type CS.PapeAnimation.GenericAnimationTree
    self._mixer = nil
    ---@type CS.UnityEngine.Animator
    self._animator = nil
    ---@type CS.Framework.GenericPropertyAnimationSystem
    self.genericPropertyAnimation = nil
    ---@type CharacterCtrlEnum.SystemType
    self.systemType = CharacterCtrlEnum.SystemType.Sweat
    ---@type int BlushId
    self.id = -1
    ---@type int 正在播放的PlayId
    self.curPlayId = -1
    ---@type int 上次播放的PlayId
    self.lastPlayId = -1
    ---@type float 过渡权重
    self.crossWeight = 0
    ---@type float
    self.crossTime = 0.3
    ---@type table<int, CharacterBodyState>
    self.stateDict = {}
    --TODO 是否可以使用新接口了，临时
    ---@type bool
    self.useNewOutput = CS_PlayableAniMgr.Instance().AddGenericPropertyAnimation ~= nil
end

---初始化逻辑
function CharacterBodySystemBase:OnInit()
    CharacterSubSystem.OnInit(self)

    self._mixer = CS_GenericAniTree.Create(CS_Enum_MixerType.Mixer)
    self._animator = GameObjectUtil.EnsureCSComponent(self.gameObject, typeof(CS.UnityEngine.Animator))
    if self.useNewOutput then
        CS_PlayableAniMgr.Instance():AddGenericPropertyAnimation(self._animator)
        self.genericPropertyAnimation = CS_PlayableAniMgr.Instance():FindGenericPropertyAnimation(self.gameObject)
        self.genericPropertyAnimation:AddGenericPropertyNode(self._mixer)
    else
        CS_PlayableAniMgr.Instance():AddDynamicNode(self._animator, self._mixer, CS_Enum_MixerType.LayerMixer)
    end
    
    self.updateTimer = TimerMgr.AddTimerByFrame(1 , self.Update, self, true, TimerMgr.UpdateType.UPDATE)
    self.lateUpdateTimer = TimerMgr.AddTimerByFrame(1 , self.LateUpdate, self, true, TimerMgr.UpdateType.LATE_UPDATE)
end

---开启脸红
---@param id int
---@param callback fun Movein回调
function CharacterBodySystemBase:Start(id, moveInCallback)
    Debug.Log("CharacterBodySystemBase.Start")
    if self.id ~= id then
        local playId = self:CreateState(id , moveInCallback)
        self.id = id
        self:CrossFade(playId)
    else
        if moveInCallback then
            moveInCallback()
        end
    end
end

function CharacterBodySystemBase:CrossFade(playId)
    local state = self.stateDict[playId]
    if state ~= nil then
        local lastState = self:GetStateById(self.lastPlayId)
        if lastState ~= nil then
            self:DestroyState(lastState)
            self.lastPlayId = -1
        end
        local needCrossFade = false
        local curState = self:GetCurState()
        if curState ~= nil then
            self.lastPlayId = self.curPlayId
            needCrossFade = true
        end
        self.curPlayId = playId
        curState = self:GetCurState()
        if needCrossFade then
            self.crossWeight = 0;
            curState:GetTreeRoot():SetWeight(self.crossWeight);
            curState:Loop()
        else
            self.crossWeight = 1;
            curState:Play()
        end
    end
end

---创建一个状态
---@param id int
---@return int playId
function CharacterBodySystemBase:CreateState(id, moveInCallback)
    PLAY_ID= PLAY_ID + 1
    local newState = CharacterBodyState.new(self._mixer, id, PLAY_ID)
    newState:SetAnimationClips(id)
    newState:SetMoveInCallBack(moveInCallback)
    self.stateDict[PLAY_ID] = newState
    return PLAY_ID
end

function CharacterBodySystemBase:Update()
    ---@type CharacterBodyState
    local curState = self:GetCurState()
    if curState ~= nil and curState:IsFinish() then
        self:DestroyState(curState)
        self.curPlayId = -1
    end

    local lastState = self:GetStateById(self.lastPlayId)
    if lastState ~= nil and lastState:IsFinish() then
        self:DestroyState(lastState)
        self.lastPlayId = -1
    end

    if (curState == nil and lastState == nil) then
        self._mixer:SetWeight(0)
    else
        self._mixer:SetWeight(1)
    end
end

function CharacterBodySystemBase:LateUpdate()
    if self._mixer == nil then
        return
    end
    local deltaTime = CS.UnityEngine.Time.unscaledDeltaTime
    local lastState = self:GetStateById(self.lastPlayId)
    local curState = self:GetCurState()
    if self.crossWeight < 1 then
        self.crossWeight = Mathf.Lerp(self.crossWeight, 1 , deltaTime / self.crossTime)
        if self.crossWeight >= 0.999 and lastState ~= nil then
            lastState:Finish()
        end
    end
    if curState ~=nil then
        --Debug.LogFormat("CharacterBodySystemBase curState Weight: %s", self.crossWeight)
        curState:LateUpdate()
        curState:GetTreeRoot():SetWeight(self.crossWeight);
    end
    if lastState ~=nil then
        --Debug.LogFormat("CharacterBodySystemBase lastState Weight: %s", 1- self.crossWeight)
        lastState:LateUpdate()
        lastState:GetTreeRoot():SetWeight(1 - self.crossWeight);
    end
end

---@return CharacterBodyState
function CharacterBodySystemBase:GetCurState()
    return self.stateDict[self.curPlayId]
end

---@return CharacterBodyState
---@param id int
function CharacterBodySystemBase:GetStateById(id)
    return self.stateDict[id]
end

---
---@param progress float 手动Tick进度
function CharacterBodySystemBase:SetProgress(progress)
    ---@type CharacterBodyState
    local curState = self:GetCurState()
    if curState then
        curState:SetProgress(progress)
    end
end

---是否设置自动Tick
---@param autoTick bool
function CharacterBodySystemBase:SetAutoTick(autoTick)
    ---@type CharacterBodyState
    local curState = self:GetCurState()
    if curState then
        curState:SetAutoTick(autoTick)
    end
end

function CharacterBodySystemBase:Loop()
    ---@type CharacterBodyState
    local curState = self:GetCurState()
    if curState then
        curState:Loop()
    end
end

---关闭
---@param callback fun
function CharacterBodySystemBase:Stop(moveOutCallBack)
    Debug.Log("CharacterBodySystemBase.Stop")
    ---@type CharacterBodyState
    local curState = self:GetCurState()
    if curState then
        curState:SetMoveOutCallBack(moveOutCallBack)
        curState:Stop()
    else
        if moveOutCallBack then
            moveOutCallBack()
        end
    end
    self.id = -1
end

---@param state CharacterBodyState
function CharacterBodySystemBase:DestroyState(state)
    self.stateDict[state.playId] = nil
    state:Destroy()
end

---清理逻辑
function CharacterBodySystemBase:OnClear()
    self._animator = nil
    self.id = -1
    self.curPlayId = -1
    self.lastPlayId = -1
    self.crossWeight = 0
    ---先ClearUp,再缓一帧执行清理操作，保证MoveOut设置的时间生效
    for _, state in pairs(self.stateDict) do
        state:ClearUp()
    end
    TimerMgr.AddTimerByFrame(1, function()
        for _, state in pairs(self.stateDict) do
            state:Destroy()
        end
        self.stateDict = nil
        if self.useNewOutput then
            self.genericPropertyAnimation:RemoveGenericPropertyNode(self._mixer)
            self.genericPropertyAnimation = nil
        else
            CS_PlayableAniMgr.Instance():RemoveDynamicNode(self._mixer, true)
        end

        self._mixer = nil
        TimerMgr.DiscardTimerByTarget(self)
        CharacterSubSystem.OnClear(self)
    end)
end

return CharacterBodySystemBase