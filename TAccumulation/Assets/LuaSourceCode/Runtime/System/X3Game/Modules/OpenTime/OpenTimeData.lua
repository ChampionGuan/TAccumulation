---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/12/23 12:09
---

---有效时间区间配置方式：由Type、Para，两个字段组成，多个以|分割形成数组
---1、Type=0时，Para含义：
---年月日=时间段：yyyymmdd=hh:mm:ss-hh:mm:ss
---2、Type=1时，Para含义：
---星期限定=时间段：w=hh:mm:ss-hh:mm:ss
---3、Type=2时，Para含义：
---绝对时间段：年月日=时间-年月日=时间：yyyymmdd=hh:MM:ss-yyyymmdd=hh:MM:ss
---
----年月日部分：
----yyyy的部分=0，则表示不限年份，即每年
----mm的部分=0，则表示不限月份，即每月
----dd的部分=0或直接不填，则表示不限日期，即每日
----以上可以任意组合搭配，满足不同需求，例如：
----5，表示：每年每月5日
----718，表示：每年7月18日
----700，表示：每年7月每天
----20220018，表示：2022年每月18日
----20220718，表示：2022年7月18日
----当type=2时，则默认绝对时间区间，时间点为凌晨5点
----星期限定部分：
----1、2、3、4、5、6 分别表示周一到周六，0 或者 7 均表示周日
----时间段部分：
----允许省略配置
----省略秒配置=hh:mm
----省略分秒配置=hh
----全部省略则为不限时段，即全天（当日5:00:00 ~ 次日4:59:59）
---@class OpenTimeData
local OpenTimeData = class("OpenTimeData")
local OpenTimePeriod = require("Runtime.System.X3Game.Modules.OpenTime.OpenTimePeriod")

---
function OpenTimeData:ctor()
    ---@type int
    self.timeType = Define.DateOpenType.Day
    ---@type string
    self.timePara = nil

    ---@type OpenTimePeriod[] 时间配置以竖线分割
    self.openTimePeriodList = {}
end

---解析字符串配置
---@param timeType int
---@param timeParam string
function OpenTimeData:Parse(timeType, timeParam)
    self.timeType = timeType
    self.timePara = timeParam
    table.clear(self.openTimePeriodList)
    local splitString = string.split(timeParam, "|")
    for _, dateStr in pairs(splitString) do
        local period = OpenTimePeriod.new()
        period:Parse(self.timeType, dateStr)
        table.insert(self.openTimePeriodList, #self.openTimePeriodList + 1, period)
    end
end

---判断时间是否开启
---@param curTimeStamp int
---@return boolean
function OpenTimeData:IsInOpenTime(curTimeStamp)
    if curTimeStamp == nil or curTimeStamp == 0 then curTimeStamp = TimerMgr.GetCurTimeSeconds() end
    if self:IsOpenAllDay() then
        return true
    end
    for _, openTimePeriod in pairs(self.openTimePeriodList) do
        if openTimePeriod:IsInOpenTime(curTimeStamp) then
            return true
        end
    end
    return false
end

---获取最近的开启时间段，如果取不到则返回-1,为0表示全天开放
---@param curTimeStamp int
---@return uint, uint
function OpenTimeData:GetNearestOpenTime(curTimeStamp)
    if curTimeStamp == nil or curTimeStamp == 0 then curTimeStamp = TimerMgr.GetCurTimeSeconds() end
    if self:IsOpenAllDay() then
        return 0, 0
    end
    local nearestStartTimestamp = -1
    local nearestEndTimestamp = -1
    for _, openTimePeriod in pairs(self.openTimePeriodList) do
        local startTime, endTime = openTimePeriod:GetNearestOpenTime(curTimeStamp)
        if startTime <= curTimeStamp and endTime >= curTimeStamp then
            --当前正在开启的时间段
            nearestStartTimestamp = startTime
            nearestEndTimestamp = endTime
        else
            if startTime ~= -1 and (startTime < nearestStartTimestamp or nearestStartTimestamp == -1) then
                nearestStartTimestamp = startTime
                nearestEndTimestamp = endTime
            end
        end
    end
    return nearestStartTimestamp, nearestEndTimestamp
end

---是否是24小时不间断常开
---@return boolean
function OpenTimeData:IsOpenAllDay()
    return self.timeType == Define.DateOpenType.Day and
            (string.isnilorempty(self.timePara) or self.timePara == "0")
end

return OpenTimeData