---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kan.
--- DateTime: 2022/2/10 11:31
--- 备忘录操作类

local Caretaker = require("Runtime.System.X3Game.Modules.PurikuraProcess.MomentoBase.Caretaker")
local Originator = require("Runtime.System.X3Game.Modules.PurikuraProcess.MomentoBase.Originator")
local MementoObject = class("MementoObject", nil, true)
local PurikuraConstNew = require "Runtime.System.X3Game.Modules.PurikuraNew.PurikuraConstNew"

function MementoObject:Init(notNeedStart)
    self.caretaker = Caretaker:new()
    self.originator = Originator:new()
    --self.notNeedStart = notNeedStart
    self.startData = nil  ---用来记录初始状态
end

---新增备忘
function MementoObject:AddMemento(info)
    --Debug.LogError("MementoObject:AddMemento 111 ")
    --
    --Debug.LogErrorTable(self.caretaker.mementoList)

    self.originator:SetInfo(info)
    local memento = self.originator:SaveInfoToMemento()


    ---第一次单独记录
    if(self.startData) then
        self.caretaker:Add(memento)
    else
        self.startData = memento
    end
    --Debug.LogError("MementoObject:AddMemento 222 ")
    --Debug.LogErrorTable(self.caretaker.mementoList)

end

---撤销
---@return Memento 操作对象
function MementoObject:UnDo()
    local curIndex = self.caretaker:GetIndex()
    if  curIndex == 0 then
        print("撤销操作失败！！！")
        return false,nil
    end

    print("撤销操作成功！！！")
    curIndex = curIndex - 1
    self.caretaker:SetIndex(curIndex)
    local data = curIndex == 0 and self.startData or self.caretaker:GetMemento(curIndex)

    return true, data
end

---撤销 ---编辑中使用
function MementoObject:UnDoEvent()
    local curIndex = self.caretaker:GetIndex()
    if  curIndex == 0 then
        return
    end
    curIndex = curIndex - 1
    self.caretaker:SetIndex(curIndex)
    local data = curIndex == 0 and self.startData or self.caretaker:GetMemento(curIndex)
    if(data) then
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMementoChange, data.content)
    end
end

---回到第一个
function MementoObject:JumpFirst(isCancel)
    --local data = self.caretaker:GetStartMemento()
    local data = self.startData
    if(data) then
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMementoChange, data.content, isCancel)
    end
end

function MementoObject:JumpFirstTemp(isCancel)
    return self.startData
end

---重做
---@return Memento 操作对象
function MementoObject:ReDo()
    local curIndex = self.caretaker:GetIndex()
    local totalIndex = self.caretaker:GetMementoCount()
    if  curIndex == totalIndex then
        print("重做操作失败！！！")
        return nil
    end

    print("重做操作成功！！！")
    curIndex = curIndex + 1
    self.caretaker:SetIndex(curIndex)
    return self.caretaker:GetMemento(curIndex)
end

---前进
function MementoObject:ReDoEvent()
    local curIndex = self.caretaker:GetIndex()
    local totalIndex = self.caretaker:GetMementoCount()
    if  curIndex == totalIndex then
        return nil
    end

    curIndex = curIndex + 1
    self.caretaker:SetIndex(curIndex)
    local data = self.caretaker:GetMemento(curIndex)
    if(data) then
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMementoChange, data.content)
    end
end

---重置
---@return bool 是否操作成功
function MementoObject:ReSet()
    --self.startData = nil  ---用来记录初始状态

    --local curIndex = self.caretaker:GetIndex()
    --if curIndex == 0 then
    --    print("重置操作失败！！！")
    --    return false
    --end

    print("重置操作成功！！！")
    self.caretaker:Reset()
    return true
end

function MementoObject:Clear()
    self.startData = nil  ---用来记录初始状态
    self.caretaker:Reset()
    return true
end

---通过记录恢复
function MementoObject:RecoverEvent()
    local totalIndex = self.caretaker:GetMementoCount()
    local data = self.caretaker:GetMemento(totalIndex)
    if(data) then
        EventMgr.Dispatch(PurikuraConstNew.Event.OnPhotoItemMementoChange, data.content)
    end
end

function MementoObject:CheckCanJumpFirst()
    local curIndex = self.caretaker:GetIndex()
    if curIndex == 0 then
        return false
    end
    local curMemento = self.caretaker:GetMemento()
    if curMemento:GetContent().isFirst then
        return false
    end
    return true
end

function MementoObject:CheckCanDo(isReDo)
    if(isReDo) then
        local curIndex = self.caretaker:GetIndex()
        local totalIndex = self.caretaker:GetMementoCount()
        if  curIndex ~= totalIndex then
            return true
        end
    else
        local curIndex = self.caretaker:GetIndex()
        if  curIndex ~= 0 then
            return true
        end
    end
    return false
end

function MementoObject:GetCurIndex()
    return self.caretaker:GetIndex()
end

return MementoObject
