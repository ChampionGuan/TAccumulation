---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/7/9 20:36
---


---@class PurikuraProcessMgr
local PurikuraProcessMgr = class("PurikuraProcessMgr")

local PurikuraProcessData = require "Runtime.System.X3Game.Modules.PurikuraProcess.PurikuraProcessData"
local PurikuraProcessMemento = require "Runtime.System.X3Game.Modules.PurikuraProcess.PurikuraProcessMemento"
local PurikuraConstNew = require "Runtime.System.X3Game.Modules.PurikuraNew.PurikuraConstNew"
local self = PurikuraProcessMgr

function PurikuraProcessMgr:Init()
    self.dataModel = PurikuraProcessData:new()
    self.momentModel = PurikuraProcessMemento:new()

    self:InitItemBG()
    self:InitDecorateType()
    EventMgr.AddListener(PurikuraConstNew.Event.OnPurikuraDepose, self.Clear, self)
end

function PurikuraProcessMgr.Start(modeInfo, roleId)
    self.modeInfo = modeInfo
    self.roleId = roleId
    self.dataModel:Init(modeInfo)
    --Debug.LogError(" PurikuraProcessMgr Start", self.dataModel)
end

function PurikuraProcessMgr.Clear()
    self:RemoveAllDecorate()
    self.modeInfo = nil
    self.roleId = nil
    self.dataModel:Clear()
end

function PurikuraProcessMgr.SetRoleId(roleId)
    self.roleId = roleId
    self:RemoveAllDecorate() ---换人时临时清空饰品
end

---男主ID ----回头处理下换人
function PurikuraProcessMgr.GetRoleId()
    return self.roleId
end

----PhotoModel表
function PurikuraProcessMgr.GetModeInfo()
    return self.modeInfo
end

function PurikuraProcessMgr.GetStickerMode()
    return self.dataModel:GetStickerMode()
end


---设置每张照片的参数
function PurikuraProcessMgr.SetStickerInfo(index, mode, bgId)
    self.dataModel:SetStickerInfo(index, mode, bgId)
end

function PurikuraProcessMgr.GetStickerInfo(index)
    return self.dataModel:GetStickerInfo(index)
end

----------------操作记录-----------
function PurikuraProcessMgr.AddMemento(actionID,equipData,manAutoAction,isFirst)
    self.momentModel:AddMemento(actionID,equipData,manAutoAction,isFirst)
    EventMgr.Dispatch("OnPhotoStartAddMemento")
end

function PurikuraProcessMgr.ClearMoment()
    self.momentModel:Clear()
end

function PurikuraProcessMgr.UnDo()
    self.momentModel:UnDo()
end

function PurikuraProcessMgr.ReDo()
    self.momentModel:ReDo()
end

function PurikuraProcessMgr.CanJumpFirst()
    return self.momentModel:CanJumpFirst()
end

function PurikuraProcessMgr.JumpFirst()
    self.momentModel:JumpFirst()
end

function PurikuraProcessMgr.ReSet()
    self.momentModel:ReSet()
end

function PurikuraProcessMgr.CheckCanDo(isReDo)
    return self.momentModel:CheckCanDo(isReDo)
end

----------饰品---------

---这里直接操作合理么，先顺着往下看看
function PurikuraProcessMgr.AddDecorate(data, sex)
    self.dataModel:AddDecorate(data, sex)
end

function PurikuraProcessMgr.RemoveDecorate(index)
    self.dataModel:RemoveDecorate(index)
end

function PurikuraProcessMgr:RemoveAllDecorate()
    self.dataModel:RemoveAllDecorate()
end

function PurikuraProcessMgr.GetDecorateList()
    return self.dataModel:GetDecorateList()
end

function PurikuraProcessMgr.GetDecorateListByMode(mode)
    return self.dataModel:GetDecorateListByMode(mode)
end

function PurikuraProcessMgr.GetDecorateInfo(index)
    return self.dataModel:GetDecorateInfo(index)
end

function PurikuraProcessMgr.GetDecorateIsFull(sex)
    return self.dataModel:GetDecorateIsFull(sex)
end
---根据角色性别确定饰品是否选中
function PurikuraProcessMgr.DecorateExist(id, sex)
    return self.dataModel:DecorateExist(id, sex)
end

-----------------已获取饰品相关------------

function PurikuraProcessMgr:InitDecorateType()
    self.DecorateTabData = LuaCfgMgr.GetListByCondition("FashionPartInfo",{})
    table.remove(self.DecorateTabData, 1) --移除服装tab
    table.sort(self.DecorateTabData,function(a,b) return a.Sort < b.Sort  end)
end

---根据角色ID获取已拥有的饰品list
function PurikuraProcessMgr:GetOwnDecorateListByRoleId(RoleId)
    local decorateData = {}
    local types = self.DecorateTabData
    for i = 1, #types do
        local dataList = self:GetFashionData(RoleId,types[i].ID)
        for j = 1, #dataList do
            table.insert(decorateData, dataList[j])
        end
    end
    return decorateData
end
---根据角色ID和类型获取饰品数据list
function PurikuraProcessMgr:GetFashionData(roleID, PartEnum)
    --获取对应的数据
    local condition = {}
    --condition.RoleID = roleID
    condition.PartEnum = PartEnum
    condition.IsEmpty = 0
    local baseDataList = BllMgr.GetFashionBLL():GetAllCfgFashionList(condition)

    local resultData = {}
    for i = 1, #baseDataList do
        if table.containsvalue(baseDataList[i].RoleList, roleID) then
            table.insert(resultData, baseDataList[i])
        elseif roleID ~= 0 and table.containsvalue(baseDataList[i].RoleList, -1) then
            table.insert(resultData, baseDataList[i])
        end
    end
    local ownDataList = {}
    for i = 1, #resultData do
        if BllMgr.GetFashionBLL():GetFashionIsUnlock(resultData[i].ID) ~= 0 then
            table.insert(ownDataList, resultData[i])
        end
    end
    return ownDataList
end

-----------------临时存放------------
function PurikuraProcessMgr.InitItemBG()
    self.itemBG = { "#FFF9F6FF", "#F8F7F1FF", "#FFF9FAFF", "#FCFBF8FF", "#FFFCF9FF", "#FCFBF8FF", "#FFF9F6FF", "#FFFBFBFF" }
    self.itemDarkBG = { "#F1C0B3FF", "#D5CEC6FF", "#ECA4B2FF", "#E4E1CDFF", "#FFE5C2FF", "#9FC2CDFF", "#F1C0B3FF", "#F4CAC9FF",
                        "#E4E1CDFF", "#F1C0B3FF", "#FFE5C2FF", "#D5CEC6FF" }
    self.emptyDecorateBG = {"#F7FBFCFF","#FFF9FAFF"}
end

function PurikuraProcessMgr.GetItemBG(index, isDark)
    local itemBG = self.itemBG
    if isDark then
        itemBG = self.itemDarkBG
    end
    if not index then
        return itemBG[1]
    end --默认返回第一个颜色值

    local realIdx = index
    if realIdx > #itemBG then
        realIdx = (index % #itemBG)
        if realIdx == 0 then
            realIdx = #itemBG
        end
    end
    return itemBG[realIdx]
end

function PurikuraProcessMgr.GetEmptyDecorateItemBG(isMale)
    if isMale then
        return self.emptyDecorateBG[1]
    else
        return self.emptyDecorateBG[2]
    end
end

PurikuraProcessMgr:Init()

return PurikuraProcessMgr