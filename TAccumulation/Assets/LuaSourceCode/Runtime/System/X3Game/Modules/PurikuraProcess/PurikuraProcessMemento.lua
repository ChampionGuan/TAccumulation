---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2022/7/11 16:29
---

local MementoObject = require("Runtime.System.X3Game.Modules.PurikuraProcess.MomentoBase.MementoObject")
local PurikuraProcessMemento = class("PurikuraProcessMemento")

--function PurikuraProcessMemento:Init()
--    self.memento = MementoObject:new()
--    self.memento:Init()
--end
function PurikuraProcessMemento:ctor()
    self.memento = MementoObject:new()
    self.memento:Init(true)
end

---新增配饰备忘
function PurikuraProcessMemento:AddMemento(actionID, equipData, manAutoAction, isFirst)
    local info = self:GetStruct(actionID, equipData, manAutoAction, isFirst)
    self.memento:AddMemento(info)
end

function PurikuraProcessMemento:GetStruct(actionID, equipData, manAutoAction, isFirst)
    local struct = {}
    struct.actionID = actionID
    struct.equipData = equipData
    struct.manAutoAction = manAutoAction
    struct.isFirst = isFirst
    return struct
end

---撤销
---@return bool 是否操作成功
function PurikuraProcessMemento:UnDo()
    local isOk, memento = self.memento:UnDo()
    if not isOk then
        return
    end

    if not memento then
        local preData = self.memento.caretaker:GetMementoByIndex(1)
        self:ReSetOperate(not preData.content.manAutoAction)
        return
    end

    self:SetState(memento:GetContent())
    return true
end

---重做
---@return bool 是否操作成功
function PurikuraProcessMemento:ReDo()
    local memento = self.memento:ReDo()
    if not memento then
        return
    end

    self:SetState(memento:GetContent())
    return true
end

---重置
---@return bool 是否操作成功
function PurikuraProcessMemento:ReSet()
    self.memento:ReSet()
    self:ReSetOperate(true)
end

function PurikuraProcessMemento:CheckCanDo(isReDo)
    return self.memento:CheckCanDo(isReDo)
end

function PurikuraProcessMemento:CanJumpFirst()
    return self.memento:CheckCanJumpFirst()
end

function PurikuraProcessMemento:JumpFirst()
    if not self:CanJumpFirst() then
        return
    end
    local memento = self.memento:JumpFirstTemp()
    if not memento then
        return
    end

    self:SetState(memento:GetContent())
    --self:ReSet()
end

function PurikuraProcessMemento:Clear()
    self.memento:Clear()
end

function PurikuraProcessMemento:ReSetOperate(resetAction)
    if resetAction then
        EventMgr.Dispatch("FilmingMementoAction", -100)
    end
    EventMgr.Dispatch("FilmingMementoEquip", nil)
    EventMgr.Dispatch("FilmingMementoManAutoAction", false)
end

function PurikuraProcessMemento:SetState(info)
    EventMgr.Dispatch("FilmingMementoEquip", info.equipData)
    EventMgr.Dispatch("FilmingMementoAction", info.actionID)
    EventMgr.Dispatch("FilmingMementoManAutoAction", info.manAutoAction)
end

return PurikuraProcessMemento