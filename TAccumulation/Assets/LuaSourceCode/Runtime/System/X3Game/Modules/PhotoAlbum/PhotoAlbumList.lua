---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kan.
--- DateTime: 2022/4/11 16:01
---
---
----通用业务使用
local localPhotoDB = require "Runtime.System.X3Game.Modules.Photo.LocalPhotoDB"
local albumItemSrc =  "Runtime.System.X3Game.Modules.PhotoAlbum.PhotoAlbumIcon"
---@class PhotoAlbumList:UICtrl
local PhotoAlbumList = class("PhotoAlbumList",UICtrl)

function PhotoAlbumList:Init()

end

---界面关闭
function PhotoAlbumList:OnClose()

end

---初始化组件
---@param photoGrid GridView 列表
---@param clickCB fun() 点击回调
function PhotoAlbumList:InitControl(photoGrid, clickCB)
    self.photoGrid = photoGrid
    self:AddGridViewListener(self.photoGrid, handler(self, self.OnGridViewCellLoad))
    self.OnClickCB = clickCB
end

---显示列表
---@param roleID int 条件roleID
---@param modeID int 条件modeID
---@param typeID int 条件typeID
---@param stateID int 条件stateID
---@return int 照片数量
function PhotoAlbumList:ShowList(roleID, modeID, typeID, stateID)
    self:SetList(roleID, modeID, typeID, stateID)
    self.photoGrid:Load(#self.photoData)

    return #self.photoData
end

function PhotoAlbumList:OnGridViewCellLoad(lv, cellItem, index)
    local data = self.photoData[index+1]

    local iconParent =GameObjectUtil.GetComponent(cellItem,"OCX_Icon", "Transform")
    ---@type PhotoAlbumIcon
    self.iconScript = UICtrl.GetOrAddCtrl(iconParent:GetChild(0).gameObject, albumItemSrc, self)
    self.iconScript:SetData(data,self.OnClickCB)
    return Vector2.zero_readonly
end

function PhotoAlbumList:SetList(roleID, modeID, typeID, stateID)
    if(stateID == 1) then
        self.localPhoto = {}
    else
        self.localPhoto = localPhotoDB.SelectPhoto(modeID, roleID, typeID, stateID) or {}
    end

    self.photoData = table.clone(self.localPhoto)
    self:AppendCloudPhotoList(modeID, roleID, typeID, stateID)

    -------非相册业务需要过滤下无效图
    --for i = #self.photoData, 1, -1 do
    --    ---防替换耗时较久。只判断文件是否存在--只判云端
    --    if(not UrlImgMgr.Exists(self.photoData[i].Name, UrlImgMgr.BizType.PhotoAlbum)) then
    --        table.remove(self.photoData, i)
    --    end
    --end

    table.sort(self.photoData,function(a,b) return a.Time > b.Time  end)
end

function PhotoAlbumList:AppendCloudPhotoList(modeID, roleID, typeID, stateID)
    local cloudPhoto = BllMgr.Get("PhotoSystemBLL"):GetPhotoList()
    for i = 1, #cloudPhoto do
        --Status // 审核中 1; // 审核通过 2; // 审核未通过
        local data = cloudPhoto[i]
        local mode = modeID == -1 and cloudPhoto[i].Mode or modeID
        local state = stateID == 0 and -1 or cloudPhoto[i].Status --远端照片默认都是上传的
        local type = typeID == -1 and cloudPhoto[i].GroupMode or typeID

        local isRole = self:IsCloudPhotoRole(roleID, cloudPhoto[i].RoleId, cloudPhoto[i].GroupMode == GameConst.PhotoMode.Double)
        local isMode = cloudPhoto[i].Mode == mode
        local isType = cloudPhoto[i].GroupMode == type--self:IsGroup(typeID,cloudPhoto[i].GroupMode == GameConst.PhotoMode.Double)

        local enable = data.Status ~= GameConst.PhotoStatus.Audit_Reject
        ---这里看下本地加了审核状态后，是否可以换个做法
        if(not enable) then
            local localData = localPhotoDB.SelectPhotoByServerName(data.Url)
            if(localData) then
                enable = true
            end
        end

        if isRole and isMode and isType and state ~= -1 and enable then
            local name = UrlImgMgr.GetFileNameWithPath(data.Url)
            local fileExist = UrlImgMgr.Exists(name, UrlImgMgr.BizType.PhotoAlbum)
            if(fileExist) then
                table.insert(self.photoData,localPhotoDB.GetDataStruct(-1, name, data.Status,
                        data.TimeStamp, 1, data.Mode, data.RoleId, data.GroupMode, nil, data.Url))
            end
        end
    end
end

function PhotoAlbumList:IsGroup(filterTypeID,isGroup)
    --if filterTypeID == -1 then return true end
    --
    --if filterTypeID == 2 and isGroup then return true end
    --
    --if filterTypeID == 1 and not isGroup then return true end
    --
    --return false
end

function PhotoAlbumList:IsCloudPhotoRole(roleID, cloudRole, isGroupPhoto)
    if roleID == -1 then return true end
    if roleID == 0 and isGroupPhoto then return true end --女主查询，只要是合照就判定照片属于女主

    return cloudRole == roleID
end

function PhotoAlbumList:DownloadCloudPhoto(strName)
    --UrlImgMgr.DownloadTex2D(strName, function()
    --    EventMgr.Dispatch("PhotoAlbum_PhotoDownload", strName)
    --end, nil, nil, UrlImgMgr.BizType.PhotoAlbum)

    Debug.LogError("这里不应触发 DownloadCloudPhoto")
    --UrlImgMgr.Download(strName, function(data,fileName)
    --    EventMgr.Dispatch("PhotoAlbum_PhotoDownload",fileName)
    --end, nil, function(progress,fileName)
    --    EventMgr.Dispatch("PhotoAlbum_PhotoDownload",fileName,progress)
    --end, UrlImgMgr.BizType.PhotoAlbum)
end

return PhotoAlbumList