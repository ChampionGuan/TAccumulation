---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dengzi.
--- DateTime: 2023/6/30 14:21
---

local DCCardPlayerBase = require("Runtime.System.X3Game.Modules.DynamicCard.CardPlayer.DCCardPlayerBase")
---动卡多卡轮播控制器
---@class DCMultiCardPlayer : DCCardPlayerBase
local DCMultiCardPlayer = class("DCMultiCardPlayer", DCCardPlayerBase)

local PlayStatus = {
    Playing = 1,
    Pause = 2,
    Stop = 3,
}

function DCMultiCardPlayer:ctor(uiCtrl)
    self.super.ctor(self, uiCtrl)
    self.playIndex = 1
    self.cardIdList = nil
    self.cardDynamicCfg = nil
    self.startTime = nil
    self.playStatus = PlayStatus.Stop
    self.replaceFadeEffect = nil
    self.fadeEffect = nil
    self.fadeEffectKey = nil
    self.wantPlay = false
    self.onFadeEffectInCb = handler(self, self.OnFadeEffectIn)
    self.onFadeEffectOutStartCb = handler(self, self.OnFadeEffectOutStart)
end

function DCMultiCardPlayer:OnDestroy()
    self.playIndex = nil
    self.cardIdList = nil
    self.cardDynamicCfg = nil
    self.startTime = nil
    self.playStatus = nil
    self.replaceFadeEffect = nil
    self.fadeEffect = nil
    self.fadeEffectKey = nil
    self.wantPlay = nil
    self.onFadeEffectInCb = nil
    self.onFadeEffectOutStartCb = nil
end

function DCMultiCardPlayer:Play(cardIdList, fadeEffect)
    self.cardIdList = cardIdList
    self.replaceFadeEffect = fadeEffect
    self.playIndex = 1
    self.playStatus = PlayStatus.Playing
    self:InternalPlay(true)
end

function DCMultiCardPlayer:InternalPlay(isStart)
    local cardId = self.cardIdList[self.playIndex]
    self.cardDynamicCfg = LuaCfgMgr.Get("CardDynamic", cardId, 1)
    if not self.cardDynamicCfg then
        return
    end
    self.wantPlay = true
    self.fadeEffect = string.isnilorempty(self.replaceFadeEffect) and self.cardDynamicCfg.CarouselEffect or self.replaceFadeEffect
    if not string.isnilorempty(self.fadeEffect) then
        self.fadeEffectKey = tostring(self.uiCtrl:GetId()) .. "DCMultiCardPlayer" .. self.fadeEffect
    else
        self.fadeEffectKey = nil
    end
    if isStart == false and not string.isnilorempty(self.fadeEffect) then
        --非从头开始播放，需要播放动效遮挡
        ThreeStageMotionMgr.PlayMotionInByRes(self.fadeEffectKey, self.fadeEffect, self.uiCtrl:GetBlockMotionRoot(), self.onFadeEffectInCb)
    else
        self:_TryPlay(false)
    end
end

function DCMultiCardPlayer:OnSingleCardStart()
    if not string.isnilorempty(self.fadeEffect) and ThreeStageMotionMgr.IsMotionRunning(self.fadeEffectKey) then
        --self.player:Pause()
        ThreeStageMotionMgr.PlayMotionOut(self.fadeEffectKey, self.onFadeEffectOutStartCb)
    end
end

function DCMultiCardPlayer:OnFadeEffectIn()
    self:_TryPlay(true)
end

function DCMultiCardPlayer:OnFadeEffectOutStart()
    if self.playStatus == PlayStatus.Playing then
        --self.player:Resume()
    end
end

function DCMultiCardPlayer:_TryPlay(ignoreStaticCard)
    if self.playStatus == PlayStatus.Playing and self.wantPlay then
        local cardId = self.cardIdList[self.playIndex]
        self.player:Play(cardId, handler(self, self.OnSingleCardStart), nil, ignoreStaticCard)
        self.wantPlay = false
        self.startTime = 0
    end
end

function DCMultiCardPlayer:Stop()
    if self.playStatus == PlayStatus.Stop then
        return
    end
    self.playStatus = PlayStatus.Stop
    ThreeStageMotionMgr.StopMotion(self.fadeEffectKey)
    self.player:Stop()
end

function DCMultiCardPlayer:Pause()
    if self.playStatus ~= PlayStatus.Playing then
        return
    end
    self.playStatus = PlayStatus.Pause
    self.player:Pause()
end

function DCMultiCardPlayer:Resume()
    if self.playStatus ~= PlayStatus.Pause then
        return
    end
    self.playStatus = PlayStatus.Playing
    self.player:Resume()
end

function DCMultiCardPlayer:Update(deltaTime)
    self.player:Update(deltaTime)
    if self.playStatus == PlayStatus.Playing and self.startTime then
        self.startTime = self.startTime + deltaTime
        if self.startTime >= self.cardDynamicCfg.CarouselDuration then
            self.startTime = nil
            if self.playIndex >= #self.cardIdList then
                self.playIndex = 1
            else
                self.playIndex = self.playIndex + 1
            end
            self:InternalPlay(false)
        end
    end
end

function DCMultiCardPlayer:IsRunning()
    if self.player then
        return self.player:IsRunning()
    end
    return false
end

function DCMultiCardPlayer:Is3DPlaying()
    if self.player then
        return self.player:Is3DPlaying()
    end
    return false
end

function DCMultiCardPlayer:IsAnyMotionRunning()
    if not string.isnilorempty(self.fadeEffect) and ThreeStageMotionMgr.IsMotionRunning(self.fadeEffectKey) then
        return true
    end
    return false
end

return DCMultiCardPlayer
