---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dengzi.
--- DateTime: 2023/6/25 15:59
---

---@type DCStateDefine
local DCStateDefine = require("Runtime.System.X3Game.Modules.DynamicCard.StateMachine.DCStateDefine")
local DCStateBase = require("Runtime.System.X3Game.Modules.DynamicCard.StateMachine.DCStateBase")
---@class PlayingState : DCStateBase
local PlayingState = class("PlayingState", DCStateBase)
---@type CS.PapeGames.CutScene.X3CutSceneManager
local X3CTSMgr = CS.PapeGames.CutScene.X3CutSceneManager

local PlayMode = {
    PlayByCount = 1,  -- 根据时间播放
    PlayByTime = 2,   -- 根据次数播放
}

---距离结束的间隔，要在此时间开始显示转场动效，避免穿帮
local nearEndTime = 0.5

function PlayingState:OnEnter(cardId, stage, preStage)
    self.cardId = cardId
    self.stage = stage
    self.preStage = preStage
    self.cardDynamic = LuaCfgMgr.Get("CardDynamic", self.cardId, self.stage)
    if not self.cardDynamic then
        Debug.LogErrorFormat("获取CardDynamic失败：cardId %s, stage %s", tostring(self.cardId), tostring(self.stage))
        return
    end
    self.playMode = self.cardDynamic.PlaybackCount == 0 and PlayMode.PlayByTime or PlayMode.PlayByCount
    self.ctsEventCallback = handler(self, self.SignatureCallback)
    self.assetName = self.cardDynamic.CutSceneName
    self.startTime = self.cardDynamic.StartFrame < 0 and 0 or self.cardDynamic.StartFrame / 30
    self.endTime = self.cardDynamic.EndFrame < 0 and 0 or self.cardDynamic.EndFrame / 30
    local ctsLength = CutSceneMgr.GetCTSLength(self.assetName)
    if self.playMode == PlayMode.PlayByCount then
        if self.startTime == 0 and self.endTime == 0 then
            --完整播放
            self.playLength = ctsLength
        else
            --指定播放
            self.playLength = (self.endTime == 0 and ctsLength or self.endTime) - self.startTime
        end
    else
        self.playLength = self.cardDynamic.PlaybackDuration
    end
    ---播放次数为-1，用loop模式
    self.loop = self.cardDynamic.PlaybackCount == -1
    CutSceneMgr.RegisterEventCallback(self.ctsEventCallback, true)
    self.playCount = self.cardDynamic.PlaybackCount
    self:DoPlayCTS()
end

function PlayingState:DoPlayCTS()
    Debug.LogFormatWithTag(GameConst.LogTag.DynamicCard, "PlayingState:DoPlayCTS(). CardId：%s, Stage:%s", tostring(self.cardId), tostring(self.stage))
    self.playTime = 0
    self.wantShowFadeEffect = true
    self.playItem = CutSceneMgr.Play(self.assetName, CutScenePlayMode.Crossfade,
            self.loop and DirectorWrapMode.Loop or DirectorWrapMode.Hold,
            self.startTime, self.endTime, false, nil, Define.CutScenePlayTag.DynamicCard, true, true)
    local ctrl = self.playItem.Ctrl
    local x3Characters = ctrl.gameObject:GetComponentsInChildren(typeof(CS.X3.Character.X3Character))
    if x3Characters then
        for i = 0, x3Characters.Length - 1 do
            local x3Character = x3Characters[i]
            x3Character:PhysicsSmoothBlendCurrentPose()
        end
    end
    local assetIns = X3CTSMgr.GetAssetIns(self.playItem.PlayId, GameConst.RoleId.Player)
    if assetIns then
        if CharacterMgr.NeedFaceData(assetIns) then
            BllMgr.GetFaceBLL():SetHost(assetIns, self.cardDynamic.Type, self.cardDynamic.FaceHair)
        end
    end
    self.playCount = self.playCount - 1
end

function PlayingState:SignatureCallback(evtData)
    if evtData.Name == self.assetName then
        if evtData.EventType == CutSceneEventType.ReachEnd then
            if self.loop then
                if not string.isnilorempty(self.cardDynamic.BackActionEffect) then
                    self.dcCtrl:BlockFadeEffectOut()
                end
                self.playTime = 0
                self.wantShowFadeEffect = true
            else
                if self.playCount > 0 then
                    self:DoPlayCTS()
                else
                    self:GotoNextStage()
                end
            end
        end
    end
end

function PlayingState:GotoNextStage()
    local nextStage = 1
    local nextCardDynamic = LuaCfgMgr.Get("CardDynamic", self.cardId, self.stage + 1)
    if nextCardDynamic then
        nextStage = self.stage + 1
    else
        nextStage = 1
        self.dcPlayer:NotifyReachEnd()
    end
    self.dcPlayer:Switch(DCStateDefine.States.Loading, self.cardId, nextStage, self.stage)
end

function PlayingState:OnExit()
    Debug.LogFormatWithTag(GameConst.LogTag.DynamicCard, "PlayingState:OnExit() 111. CardId：%s, Stage:%s", tostring(self.cardId), tostring(self.stage))
    self.cardId = nil
    self.stage = nil
    self.preStage = nil
    self.cardDynamic = nil
    self.assetName = nil
    self.assetName = nil
    self.startTime = nil
    self.endTime = nil
    self.playTime = nil
    self.wantShowFadeEffect = nil
    self.playLength = nil
    self.playMode = nil
    CutSceneMgr.UnregisterEventCallback(self.ctsEventCallback)
    self.loop = nil
    self.ctsEventCallback = nil
    Debug.LogFormatWithTag(GameConst.LogTag.DynamicCard, "PlayingState:OnExit() 222. PlayItem：%s, PlayingState:%s", tostring(nil ~= self.playItem and self.playItem.PlayId or nil), tostring(self:GetPlayState()))
    self.playItem = nil
end

function PlayingState:OnUpdate(dt)
    if self.playMode == PlayMode.PlayByCount then
        self.playTime = self.playTime + dt
        if not string.isnilorempty(self.cardDynamic.BackActionEffect) then
            if (not self.loop) and (self.playCount == 0) then
                ---有后接动效，且非循环播放最后一次时，需要在快结束时播放转场动效
                if self.wantShowFadeEffect and (self.playTime + nearEndTime >= self.playLength) then
                    self.wantShowFadeEffect = false
                    self.dcCtrl:BlockFadeEffectIn(self.cardDynamic.BackActionEffect)
                end
            elseif self.loop then
                if self.wantShowFadeEffect and (self.playTime + nearEndTime >= self.playLength) then
                    self.wantShowFadeEffect = false
                    self.dcCtrl:BlockFadeEffectIn(self.cardDynamic.BackActionEffect)
                end
            end
        end
    elseif self.playMode == PlayMode.PlayByTime then
        self.playTime = self.playTime + dt
        if not string.isnilorempty(self.cardDynamic.BackActionEffect) and self.wantShowFadeEffect and (self.playTime + nearEndTime >= self.playLength) then
            self.wantShowFadeEffect = false
            self.dcCtrl:BlockFadeEffectIn(self.cardDynamic.BackActionEffect)
        end
        if self.playTime >= self.playLength then
            self:GotoNextStage()
        end
    end
end

function PlayingState:OnPause()
    if self.playItem then
        CutSceneMgr.Pause(self.playItem.PlayId)
    end
end

function PlayingState:OnResume()
    if self.playItem then
        CutSceneMgr.Resume(self.playItem.PlayId)
    end
end

return PlayingState