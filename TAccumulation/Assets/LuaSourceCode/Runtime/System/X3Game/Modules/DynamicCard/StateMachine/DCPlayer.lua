---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dengzi.
--- DateTime: 2023/6/21 16:12
---

---@type DCStateDefine
local DCStateDefine = require("Runtime.System.X3Game.Modules.DynamicCard.StateMachine.DCStateDefine")
---@class DCPlayer
local DCPlayer = class("DCPlayer")
---@type DynamicCardSceneMgr
local DynamicCardSceneMgr = require("Runtime.System.X3Game.Modules.DynamicCard.DynamicCardSceneMgr")


---@type string
local statePathPrefix = "Runtime.System.X3Game.Modules.DynamicCard.StateMachine.State."


function DCPlayer:ctor()
    self.cardId = nil
    ---@type DynamicCardCtrl
    self.dcCtrl = nil
    self.playStatus = DCStateDefine.PlayStatus.Stop
    ---开始播放第一段的回调
    self.onStartCb = nil
    ---最后一段播放完成的回调
    self.onReachEndCb = nil
    ---@type DCStateBase
    self.curState = nil
    --暂停状态下切换状态，先缓存下来，等resume时再切
    self.cacheNextStateName = nil
    self.cacheNextStateParam = nil
    --等待下载完成后播放
    self.waitDownload2Play = false
    EventMgr.AddListener("DynamicCardDownloadFinish", self.OnDynamicCardDownloadFinish, self)
end

function DCPlayer:Destroy()
    self.cardId = nil
    self.dcCtrl = nil
    self.playStatus = nil
    self.onStartCb = nil
    self.onReachEndCb = nil
    self.curState = nil
    self.cacheNextStateName = nil
    self.cacheNextStateParam = nil
    self.waitDownload2Play = nil
    EventMgr.RemoveListenerByTarget(self)
end

---通知第一段开始播放
function DCPlayer:NotifyStart()
    if self.onStartCb then
        self.onStartCb()
        self.onStartCb = nil
    end
end

---通知最后一段播放完成
function DCPlayer:NotifyReachEnd()
    if self.onReachEndCb then
        self.onReachEndCb()
    end
end

function DCPlayer:OnDynamicCardDownloadFinish()
    if self.waitDownload2Play then
        local isDownloaded = BllMgr.GetCardBLL():CheckDynamicCardDownloaded(self.cardId)
        local isResExist = BllMgr.GetCardBLL():CheckDynamicCardResExist(self.cardId)
        if isDownloaded and isResExist then
            self.waitDownload2Play = false
            self:Switch(DCStateDefine.States.StaticCard, self.cardId)
        end
    end
end

function DCPlayer:Switch(stateName, ...)
    if self.playStatus == DCStateDefine.PlayStatus.Playing then
        self.cacheNextStateName = nil
        self.cacheNextStateParam = nil
        if self.curState then
            self.curState:OnExit()
            self.curState = nil
        end
        local stateLuaPath = string.concat(statePathPrefix, stateName)
        local stateCls = require(stateLuaPath)
        if not stateCls then
            Debug.LogErrorFormat("DCState 不存在：%s", stateLuaPath)
            return
        end
        self.curState = stateCls.new()
        self.curState.dcCtrl = self.dcCtrl
        self.curState.dcPlayer = self
        self.curState.stateName = stateName
        self.curState:OnEnter(...)
    elseif self.playStatus == DCStateDefine.PlayStatus.Pause then
        --暂停状态下切换状态，先缓存下来，等resume时再切
        self.cacheNextStateName = stateName
        self.cacheNextStateParam = table.pack(...)
    end
end

function DCPlayer:Update(deltaTime)
    if self.playStatus ~= DCStateDefine.PlayStatus.Playing then
        return
    end
    if self.curState then
        self.curState:Update(deltaTime)
    end
end

---@param onStartCb function 开始播放第一段的回调(循环到第一段重新播放的不会回调)
---@param onReachEndCb function 最后一段播放完成的回调
---@param ignoreStaticCard boolean 不用显示静卡阶段
function DCPlayer:Play(cardId, onStartCb, onReachEndCb, ignoreStaticCard)
    Debug.LogFormatWithTag(GameConst.LogTag.DynamicCard, "DCPlayer:Play(). CardId：%s, PlayStatus:%s", tostring(cardId), tostring(self.playStatus))
    self:Stop()
    self.cardId = cardId
    self.onStartCb = onStartCb
    self.onReachEndCb = onReachEndCb
    self.playStatus = DCStateDefine.PlayStatus.Playing
    local isDownloaded = BllMgr.GetCardBLL():CheckDynamicCardDownloaded(cardId)
    local isResExist = BllMgr.GetCardBLL():CheckDynamicCardResExist(cardId)
    if isDownloaded and isResExist then
        ---资源已下载，直接播放
        self.waitDownload2Play = false
        if ignoreStaticCard then
            self:Switch(DCStateDefine.States.Loading, self.cardId, 1, nil)
        else
            self:Switch(DCStateDefine.States.StaticCard, cardId)
        end
    else
        --资源未下载，设置静态图，等待下载完成后播放
        self.dcCtrl:SetStaticCardVisible(true)
        local cardCfg = LuaCfgMgr.Get("CardBaseInfo", cardId)
        if cardCfg then
            UICommonUtil.TrySetImageWithLocalFile(self.dcCtrl:GetComponent("OCX_img_StaticCard"), cardCfg.CardImage)
        end
        self.waitDownload2Play = true
        self:NotifyStart()
    end
    self.dcCtrl:RefreshDownloadBtn(cardId)
    local cardCfg = LuaCfgMgr.Get("CardBaseInfo", self.cardId)
    if cardCfg then
        PerformanceLog.Begin(PerformanceLog.Tag.DynamicCard, UITextHelper.GetUIText(cardCfg.Name), tostring(self.dcCtrl.id))
    end
end

function DCPlayer:Stop()
    Debug.LogFormatWithTag(GameConst.LogTag.DynamicCard, "DCPlayer:Stop(). CardId：%s, PlayStatus:%s", tostring(self.cardId), tostring(self.playStatus))
    if self.playStatus == DCStateDefine.PlayStatus.Stop then
        return
    end
    local cardCfg = LuaCfgMgr.Get("CardBaseInfo", self.cardId)
    if cardCfg then
        PerformanceLog.End(PerformanceLog.Tag.DynamicCard, UITextHelper.GetUIText(cardCfg.Name), tostring(self.dcCtrl.id))
    end
    self.cardId = nil
    self.onStartCb = nil
    self.onReachEndCb = nil
    self.waitDownload2Play = nil
    self.playStatus = DCStateDefine.PlayStatus.Stop
    if self.curState then
        self.curState:OnExit()
        self.curState = nil
    end
    DynamicCardSceneMgr.RemoveScene(self.dcCtrl:GetId())
    CutSceneMgr.StopWithTag(Define.CutScenePlayTag.DynamicCard)
    self.dcCtrl:StopSC2DCMotion()
    self.dcCtrl:StopBlockFadeEffect()
end

function DCPlayer:Pause()
    if self.playStatus ~= DCStateDefine.PlayStatus.Playing then
        return
    end
    self.playStatus = DCStateDefine.PlayStatus.Pause
    if self.curState then
        self.curState:OnPause()
    end
end

function DCPlayer:Resume()
    if self.playStatus ~= DCStateDefine.PlayStatus.Pause then
        return
    end
    self.playStatus = DCStateDefine.PlayStatus.Playing
    if self.curState then
        self.curState:OnResume()
    end
    if self.cacheNextStateName then
        self:Switch(self.cacheNextStateName, table.unpack(self.cacheNextStateParam))
    end
end

function DCPlayer:IsCurrentState(state)
    return self.curState == state
end

function DCPlayer:IsRunning()
    return self.playStatus ~= DCStateDefine.PlayStatus.Stop
end

function DCPlayer:Is3DPlaying()
    if self.curState then
        return self.curState:GetStateName() == DCStateDefine.States.Playing
    end
    return false
end

function DCPlayer:LoadScene(sceneAssetPath, onComplete)
    DynamicCardSceneMgr.LoadScene(self.dcCtrl:GetId(), sceneAssetPath, onComplete)
end

function DCPlayer:LoadCTS(ctsAssetPath, onComplete)
    Res.LoadWithAssetPathAsync(ctsAssetPath, AutoReleaseMode.EndOfFrame, nil, nil, onComplete)
end

function DCPlayer:OnCTSLoaded()

end

return DCPlayer