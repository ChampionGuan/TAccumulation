---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhanbo.
--- DateTime: 2022/12/12 19:55
---
---@class CMSCtrl
local CMSCtrl = class("CMSCtrl")

local m_Url_Param = {
    lang = "zh"
}

function CMSCtrl:ctor()
    ---@type DBFilter
    self.dbFilter = nil
    ---@type int
    self.dbVersion = 0
    ---@type int
    self.cmsVersion = 0
end

---@param dbFilter DBFilter
function CMSCtrl:CheckVersion(dbFilter)
    self.dbFilter = dbFilter
    self.dbVersion = dbFilter:GetRegionVersion()
    GameHttpRequest:Get(ServerUrl.UrlType.CMS, ServerUrl.UrlOp.SensitiveCustomVersion, m_Url_Param, nil,
            function(respTxt)
                local json = JsonUtil.Decode(respTxt)
                if not json then
                    return
                end
                self.cmsVersion = tonumber(json.version)
                Debug.Log("[敏感词] CMS版本号: ", self.cmsVersion, " 本地版本号: ", self.dbVersion)
                if self.cmsVersion ~= self.dbVersion then
                    self:_DownLoad()
                end
            end,
            function(errorMsg, isNetworkError, respCode)
                Debug.LogError(errorMsg)
            end
    )
end

function CMSCtrl:_DownLoad()
    GameHttpRequest:Get(ServerUrl.UrlType.CMS, ServerUrl.UrlOp.SensitiveCustom, m_Url_Param, nil,
            function(respTxt)
                local json = JsonUtil.Decode(respTxt)
                if not json then
                    return
                end
                local wordlist = json.wordlist
                ---生成DB文件
                self:_GenDB(wordlist)
                wordlist = nil
                json = nil
                LuaUtil.GC()
            end,
            function(errorMsg, isNetworkError, respCode)
                Debug.LogError(errorMsg)
            end
    )
end

---判断是否是当前地区屏蔽词
---@param tags int[]
function CMSCtrl:_IsCurRegion(tags)
    if Locale.GetRegion() == Locale.Region.ChinaMainland then
        return true
    end
    ---屏蔽词 3，4，5大区合并，所以 3，4，5大区都匹配 3 区屏蔽词
    local curRegion = self:_GetRegion(Locale.GetRegion())
    for i, v in ipairs(tags) do
        local region = self:_GetRegion(v)
        if region == curRegion then
            return true
        end
    end
    return false
end

function CMSCtrl:_GetRegion(region)
    if region == Locale.Region.EuropeAmericaAsia or region == Locale.Region.Japan or region == Locale.Region.SouthKorea then
        region = Locale.Region.EuropeAmericaAsia
    end
    return region
end

function CMSCtrl:_GenDB(serverWordList)
    ---collectgarbage("stop")
    ---local count = collectgarbage("count")
    ---local time = os.clock()
    local wordlist = serverWordList
    if table.isnilorempty(wordlist) then
        wordlist = {}
    end
    ---记录头word
    local recordDict = PoolUtil.GetTable()
    for i, v in pairs(wordlist) do
        ---屏蔽词国服全量匹配，非国服，只匹配当前地区的
        if self:_IsCurRegion(v.Tags) then
            local word = v.Words
            local wordDict = nil
            for p, c in utf8.codes(word) do
                wordDict = { id = c, value = word }
                break
            end
            table.insert(recordDict, wordDict)
        end
    end
    ---json
    local sqliteTable = PoolUtil.GetTable()
    for _, recordData in ipairs(recordDict) do
        local isFind = false
        for i = 1, #sqliteTable do
            local sqliteData = sqliteTable[i]
            if sqliteData.id == recordData.id then
                isFind = true
                table.insert(sqliteData.value, recordData.value)
                sqliteTable[i] = sqliteData
                break
            end
        end
        if isFind == false then
            local value = {}
            table.insert(value, recordData.value)
            table.insert(sqliteTable, { id = recordData.id, value = value })
        end
    end
    PoolUtil.ReleaseTable(recordDict)
    table.sort(sqliteTable, function(a, b)
        return a.id < b.id
    end)
    local id_table = PoolUtil.GetTable()
    for i = 1, #sqliteTable do
        local sqliteData = sqliteTable[i]
        ---从大到小(为了优先命中大的,命中就跳过)
        table.sort(sqliteData.value, function(a, b)
            local lenA = utf8.len(a)
            local lenB = utf8.len(b)
            if lenA ~= lenB then
                return lenA > lenB
            end
            return false
        end)
        local tmp = {}
        for _, v in ipairs(sqliteData.value) do
            local len = utf8.len(v)
            table.insert(tmp, len)
            table.insert(tmp, v)
        end
        sqliteData.value = tmp
        sqliteTable[i] = sqliteData
        id_table[sqliteData.id] = { value = sqliteData.id }
    end
    ---sqlite
    local tableName = "RegionDirtyWords"
    local data1 = sqliteTable[1]
    if data1 == nil then
        data1 = {}
        data1.id = 1
        data1.value = {}
    end
    self.dbFilter:GetDBHelper():CreateTable(tableName, {
        [data1.id] = {
            value = data1.value
        }
    })
    self.dbFilter:GetDBHelper():AddValues(tableName, sqliteTable)
    PoolUtil.ReleaseTable(sqliteTable)
    ---写入自定义标签的版本号
    self.dbFilter:GetDBHelper():CreateTable("Prefs", { [1] = { value = self.cmsVersion } })
    self.dbFilter:GetDBHelper():AddOrUpdate("Prefs", 1, { value = self.cmsVersion })
    local idTableName = "RegionDirtyWordsId"
    self.dbFilter:GetDBHelper():CreateTable(idTableName, { [1] = { value = 1 } })
    self.dbFilter:GetDBHelper():AddValues(idTableName, id_table)
    PoolUtil.ReleaseTable(id_table)
    self.dbFilter:ClearCache()
end

return CMSCtrl