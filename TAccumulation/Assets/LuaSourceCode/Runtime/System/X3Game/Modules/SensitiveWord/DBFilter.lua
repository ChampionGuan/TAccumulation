---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhanbo.
--- DateTime: 2022/10/18 19:30
---
---@class DBFilter
local DBFilter = class("DBFilter")
local DBHelper = require("Runtime.Common.DBHelper")
local FileUtility = CS.PapeGames.X3.FileUtility

function DBFilter:ctor()
    self.TABLE_NAME = "DirtyWords"
    self.TABLE_ID = "DirtyWordsId"
    self.REGION_TABLE_NAME = "RegionDirtyWords"
    self.REGION_TABLE_ID = "RegionDirtyWordsId"
    self.HEAD_CACHE_COUNT = 300
    self.headCache = {}
    self.lengthOfHeadCache = 0
    self.result = {}
    self.lengthOfResult = 0
    ---@type int[]
    self.dirtyWordsIds = nil
    ---@type int[]
    self.regionDirtyWordsIds = nil
    local dbPath = nil
    local dbJsonPath = nil
    ---编辑器下读取表格目录
    if UNITY_EDITOR then
        ---Editor DB路径修改
        local langName = require("Runtime.System.X3Game.Modules.SensitiveWord.SensitiveWordDefine").GetLangName()
        local persistentDBPath = string.concat(CS.UnityEngine.Application.persistentDataPath, "/DBCfg/", langName, "/DirtyWords.db")
        if not io.exists(persistentDBPath) then
            local originalPath = CS.UnityEngine.Application.dataPath .. "/../../Binaries/Tables/DirtyWords/Locale/" .. langName .. "/DBCfg/DirtyWords.db"
            FileUtility.CopyFile(originalPath, persistentDBPath)
        end
        dbPath = persistentDBPath
    else
        dbPath = CS.UnityEngine.Application.persistentDataPath .. "/DBCfg/DirtyWords.db"
    end
    self:ClearCache()
    if io.exists(dbPath) then
        ---@type DBHelper
        self.helper = DBHelper.new(dbPath)
        if self.helper == nil or not self.helper:ExistTable("Prefs") then
            ---如果库文件读取异常，删掉库文件,依靠热更更新
            FileUtility.DelFile(dbPath)
            self.helper = nil
        end
    else
        Debug.LogError("dbPath DB路径不存在", dbPath)
    end
end

local function Search(t, v)
    if not t then
        return false
    end
    if not v then
        return false
    end
    local left = 1
    local right = #t
    while left <= right do
        local mid = left + ((right - left) >> 1)
        if t[mid] == v then
            return true
        elseif t[mid] < v then
            left = mid + 1
        else
            right = mid - 1
        end
    end
    return false
end

---获取自定义标签的版本号
---@return int
function DBFilter:GetRegionVersion()
    if table.isnilorempty(self.helper) then
        return 0
    end
    if self.helper:ExistTable("Prefs") then
        local version = self.helper:GetOneFieldByIndex("Prefs", 1, 1)
        return version and tonumber(version) or 0
    end
    return 0
end

---@return DBHelper
function DBFilter:GetDBHelper()
    return self.helper
end

---是否包含敏感词
---@param word string
---@return bool
function DBFilter:ContainSensitiveWord(word)
    if table.isnilorempty(self.helper) then
        return false
    end
    if string.isnilorempty(word) then
        return false
    end
    word = self:Trim(word)
    --word = self:Lower(word)
    if string.isnilorempty(word) then
        return false
    end
    ---判断是否存在
    local isDirtyWords = false
    local len_total = utf8.len(word)
    for i = 1, len_total do
        local head = utf8.byte(word, i)
        local dirtyWords = self:GetHeadCacheDirtyWords(head)
        if not dirtyWords then
            ---自定义标签
            if self.helper:ExistTable(self.REGION_TABLE_ID) then
                local flag = self.helper:Get(self.REGION_TABLE_ID, head)
                if flag then
                    if self.helper:ExistTable(self.REGION_TABLE_NAME) then
                        local regionDirtyWords = self.helper:GetOneFieldByIndex(self.REGION_TABLE_NAME, head, 1)
                        if regionDirtyWords then
                            for _, v in pairs(regionDirtyWords) do
                                if not dirtyWords then
                                    dirtyWords = {}
                                end
                                table.insert(dirtyWords, v)
                            end
                        end
                    end
                end
            end

            ---公共库
            if self.helper:ExistTable(self.TABLE_ID) then
                local flag = self.helper:Get(self.TABLE_ID, head)
                if flag then
                    if self.helper:ExistTable(self.TABLE_NAME) then
                        local commonDirtyWords = self.helper:GetOneFieldByIndex(self.TABLE_NAME, head, 1)
                        if commonDirtyWords then
                            for _, v in pairs(commonDirtyWords) do
                                if not dirtyWords then
                                    dirtyWords = {}
                                end
                                table.insert(dirtyWords, v)
                            end
                        end
                    end
                end
            end

            if dirtyWords then
                self:AddHeadCacheDirtyWords(head, dirtyWords)
            end
        end
        if dirtyWords then
            local offset = utf8.offset(word, i)
            local len_dirty_worlds = #dirtyWords
            for j = 2, len_dirty_worlds, 2 do
                local v = dirtyWords[j]
                local p1 = utf8.findoffset(word, v, offset)
                if p1 then
                    isDirtyWords = true
                    break
                end
            end
        end
        if isDirtyWords then
            break
        end
    end
    return isDirtyWords
end

---填充敏感词
---@param word string
---@param filterString string
---@return string
function DBFilter:FilterSensitiveWord(word, filterString)
    if table.isnilorempty(self.helper) then
        return word
    end
    if not self:ContainSensitiveWord(word) then
        return word
    end
    word = self:Trim(word)
    word = self:Lower(word)
    if not filterString then
        filterString = "*"
    end
    ---判断是否存在
    self.lengthOfResult = 0
    local step = 0
    local len_total = utf8.len(word)
    for i = 1, len_total do
        if i > step then
            local head = utf8.byte(word, i)
            local dirtyWords = self:GetHeadCacheDirtyWords(head)
            if not dirtyWords then
                if self.helper:ExistTable(self.REGION_TABLE_ID) then
                    ---自定义标签
                    local flag = self.helper:Get(self.REGION_TABLE_ID, head)
                    if flag then
                        if self.helper:ExistTable(self.REGION_TABLE_NAME) then
                            local regionDirtyWords = self.helper:GetOneFieldByIndex(self.REGION_TABLE_NAME, head, 1)
                            if regionDirtyWords then
                                for _, v in pairs(regionDirtyWords) do
                                    if not dirtyWords then
                                        dirtyWords = {}
                                    end
                                    table.insert(dirtyWords, v)
                                end
                            end
                        end
                    end
                end
                if self.helper:ExistTable(self.TABLE_ID) then
                    ---公共库
                    local flag = self.helper:Get(self.TABLE_ID, head)
                    if flag then
                        if self.helper:ExistTable(self.TABLE_NAME) then
                            local commonDirtyWords = self.helper:GetOneFieldByIndex(self.TABLE_NAME, head, 1)
                            if commonDirtyWords then
                                for _, v in pairs(commonDirtyWords) do
                                    if not dirtyWords then
                                        dirtyWords = {}
                                    end
                                    table.insert(dirtyWords, v)
                                end
                            end
                        end
                    end
                end
                if dirtyWords then
                    self:AddHeadCacheDirtyWords(head, dirtyWords)
                end
            end
            local isFind = false
            if dirtyWords then
                ---找到最长的提前终止
                local offset = utf8.offset(word, i)
                local len_dirty_worlds = #dirtyWords
                for j = 2, len_dirty_worlds, 2 do
                    local v = dirtyWords[j]
                    local p2 = dirtyWords[j - 1]
                    ---长度优先判断
                    if len_total - i + 1 >= p2 then
                        local p1 = utf8.findoffset(word, v, offset)
                        if p1 then
                            ---print(v, i, p1, p2)
                            for k = 1, p2 do
                                self.lengthOfResult = self.lengthOfResult + 1
                                self.result[self.lengthOfResult] = filterString
                            end
                            step = i + p2 - 1
                            isFind = true
                            break
                        end
                    end
                end
            end
            if not isFind then
                self.lengthOfResult = self.lengthOfResult + 1
                self.result[self.lengthOfResult] = utf8.char(head)
            end
        end
    end
    local result = table.concat(self.result, "", 1, self.lengthOfResult)
    return result
end

function DBFilter:AddHeadCacheDirtyWords(head, dirtyWords)
    if (not head) or (not dirtyWords) then
        return
    end
    if self.lengthOfHeadCache >= self.HEAD_CACHE_COUNT then
        return
    end
    self.lengthOfHeadCache = self.lengthOfHeadCache + 1
    self.headCache[head] = dirtyWords
end

function DBFilter:GetHeadCacheDirtyWords(head)
    return self.headCache[head]
end

function DBFilter:ClearCache()
    ---变量清空
    table.clear(self.headCache)
    self.lengthOfHeadCache = 0
    table.clear(self.result)
    self.lengthOfResult = 0
end

---字符串转换成小写
---@param word string
---@return string
function DBFilter:Lower(word)
    if string.containword(word) then
        word = string.lower(word)
    end
    return word
end

---去除字符串中的"",\n,\t,\r
function DBFilter:Trim(word)
    word = string.gsub(word, " ", "")
    word = string.gsub(word, "\r", "")
    word = string.gsub(word, "\n", "")
    word = string.gsub(word, "\t", "")
    return word
end

return DBFilter