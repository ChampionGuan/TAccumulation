---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/12/30 14:11
---
---@type PureLogic.ICommand
local ICommand = require("PureLogic.Common.Command.ICommand")
---@class DataStore:PureLogic.ICommand
---@field entity PureLogic.ClientEntity
local DataStore = class('DataStore', ICommand)

function DataStore:ctor()
    ICommand.ctor(self)
    ---@type DBIndexCtrl
    self.dataStore = nil
    self.fileName = nil
    self.ossFileName = nil
    self.ossUploadFileName = nil
    self.isCanSave = false
    self.isCanSaveDB = false
    self.isCanSaveToFile = false
end

---执行命令
---@param dataCommandType DataCommandType
---@param req table
---@param onComplete fun(type:table)
function DataStore:OnCommand(dataCommandType, req, onComplete, uid)
    if not self:IsCanSave() then
        if onComplete then
            onComplete()
        end
        return
    end
    if dataCommandType == ServerConst.DataCommandType.Save then
        self:Save(self.entity:GetType(), req)
    elseif dataCommandType == ServerConst.DataCommandType.Get then
        local data = self:GetData(self.entity:GetType())
        if onComplete then
            onComplete(data)
        end
    elseif dataCommandType == ServerConst.DataCommandType.Clear then
        self:ClearData(self.entity:GetType())
    elseif dataCommandType == ServerConst.DataCommandType.UpLoadOss then
        if ServerConst.IsOssEnable then
            self:UpLoadOss(uid)
        end
    end
end

---@param dataId int
---@param data any
function DataStore:Save(dataId, data)
    if not self.dataStore then
        return
    end
    self.dataStore:AddOrUpdate(dataId, data)
    if self.isCanSaveToFile then
        LogicUtil.WriteFile(self:_GetRecordFileName(), LogicUtil.JsonEncode(data))
    end
end

---@param dataId int
---@return PureLogic.SaveData
function DataStore:GetData(dataId)
    if ServerConst.LoadCommandMode == ServerConst.LoadCommandType.FromRecord then
        return self.dataStore and self.dataStore:Get(dataId) or nil
    end
    local js = LogicUtil.ReadFile(self:_GetRecordFileName())
    if not string.isnilorempty(js) then
        return LogicUtil.JsonDecode(js)
    end
end

---@param uid int
function DataStore:UpLoadOss(uid)
    local data = self:GetData(self.entity:GetType())
    local jsonStr = LogicUtil.JsonEncode(data)
    LogicUtil.WriteFile(self:_GetOssFileName(uid), jsonStr)
    local filePath = LogicUtil.GetFilePath(self:_GetOssFileName(uid))
    LogicUtil.UpLoadOss(LogicEntityUtil.GetChannelId(self.entity:GetType()), filePath, nil, LogicEntityUtil.GetOssCategoryName(self.entity:GetType()),self:_GetOssUploadOssFileName(uid))
end

---@param dataId int
function DataStore:ClearData(dataId)
    if not self.dataStore then
        return
    end
    self.dataStore:ClearTable()
end

function DataStore:IsCanSave()
    return self.isCanSave

end

---@return string
function DataStore:_GetRecordFileName(uid)
    if string.isnilorempty(self.fileName) then
        self.fileName = string.concat(LogicEntityUtil.GetEntityTypeNameByEntityType(self.entity:GetType()), "/", ServerConst.RecordFileName, "_", LogicEntityUtil.GetEntityTypeNameByEntityType(self.entity:GetType()), "_", self.entity:GetLevelId(), "_", ServerConst.SaveFileId, ServerConst.RecordFileExt)
    end
    return self.fileName
end

---oss上传数据的本地文件名
---@return string
function DataStore:_GetOssFileName(uid)
    if string.isnilorempty(self.ossFileName) then
        self.ossFileName = string.concat(LogicEntityUtil.GetEntityTypeNameByEntityType(self.entity:GetType()), "/", tostring(uid), "_", self.entity:GetLevelId(), "_", self.entity:GetTimeStamp(), ServerConst.RecordFileExt)
    end
    return self.ossFileName
end

---oss上传数据的服务器文件名
---@return string
function DataStore:_GetOssUploadOssFileName(uid)
    if string.isnilorempty(self.ossUploadFileName) then
        self.ossUploadFileName = string.concat(tostring(uid), "_", self.entity:GetLevelId(), "_", self.entity:GetTimeStamp(), ServerConst.RecordFileExt)
    end
    return self.ossUploadFileName
end

---初始化
function DataStore:OnInit()
    self.isCanSaveDB = self.entity:IsSaveTypeEnable(ServerConst.SaveType.SaveToDB)
    self.isCanSaveToFile = self.entity:IsSaveTypeEnable(ServerConst.SaveType.SaveToFile)
    self.isCanSave = not self.entity:IsServerMode() and (self.isCanSaveDB or self.isCanSaveToFile)
    if self.isCanSaveDB then
        self.dataStore = DBMgr.GetOrCreateIndexCtrl(ServerConst.DBName)
    end
end

---销毁
function DataStore:OnDispose()
    self.dataStore = nil
end
return DataStore