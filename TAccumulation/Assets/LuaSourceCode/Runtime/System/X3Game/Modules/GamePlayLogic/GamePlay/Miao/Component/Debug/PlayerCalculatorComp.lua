---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by baozhatou.
--- DateTime: 2023/6/1 17:15
---
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by baozhatou.
--- DateTime: 2023/2/9 16:13
---
---@type PureLogic.IComponent
local IComponent = require("PureLogic.Common.Component.IComponent")
---@class PureLogic.PlayerCalculatorComp:PureLogic.IComponent
local PlayerCalculatorComp = class("PlayerCalculatorComp", IComponent)

function PlayerCalculatorComp:ctor()
    ---@type PureLogic.MiaoLogicEntity
    self.entity = nil
    IComponent.ctor(self)
end

---初始化
function PlayerCalculatorComp:OnInit()
    self:_InitConstConfig()
end

---注销
function PlayerCalculatorComp:OnDispose()
    self.Const = nil
end

---@private
function PlayerCalculatorComp:_InitConstConfig()
    self.Const = {
        CardID = {
            ADDBUFF_PASS = 2201, -- 跳过喵，跳过数字牌阶段  
            ADDBUFF_FREEZE = 2202, -- 冰冻喵，跳过功能牌阶段
            VETO = 2203, -- 否决喵                  
            GETNUM = 2204, -- 发财喵，抽数字牌           
            GETFUNC = 2205, -- 贪心喵，抽功能牌，并丢弃      
            REVEAL = 2206, -- 过河拆喵，看对方手牌后丢弃      
            RECYCLE = 2207, -- 顺手牵喵，从坟场回收牌       
            CHANGECOLOR = 2208, -- 变色喵，随机改变格子颜色  
            BANKRUPT = 2209, -- 破产喵，丢弃双发所有牌      
            CHANGENUM = 2210, -- 变小喵，改格子上的卡      
            DEMOLITION = 2211, -- 拆迁喵，拆格子上的卡     
            ADDBUFF_NPLUS = 2212 -- 兴奋喵，打出两张数字牌 
        },

        BuffID = {
            PASSNUM = 1, -- 跳过喵，跳过数字牌阶段
            PASSFUNC = 2, -- 冰冻喵，跳过功能牌阶段
            NUMPLUS = 3 -- 兴奋喵，打出两张数字牌
        },

        FuncValue = {
            [2201] = 4.2, -- 跳过喵，跳过数字牌阶段
            [2202] = 1.5, -- 冰冻喵，跳过功能牌阶段
            [2203] = 3.5, -- 否决喵
            [2204] = 8.2, -- 发财喵，抽数字牌
            [2205] = 9.8, -- 贪心喵，抽功能牌，并丢弃
            [2206] = 6.9, -- 过河拆喵，看对方手牌后丢弃
            [2207] = 6.9, -- 顺手牵喵，从坟场回收牌
            [2208] = 8.3, -- 变色喵，随机改变格子颜色
            [2209] = 4.1, -- 破产喵，丢弃双方所有数字牌
            [2210] = 7.5, -- 变小喵，改格子上的卡
            [2211] = 13.6, -- 拆迁喵，拆格子上的卡 
            [2212] = 4.2 -- 兴奋喵，打出两张数字牌
        },

        BasicValue = {
            AverageFuncScore = 6.5, -- 功能卡平均强度（屯牌性格出功能牌标准）
            AverageNumScore = 3.5, -- 数字卡平均得分（标准性格出功能牌标准）
            DrawNumScore = 4.1 -- 抽数字牌平均分
        }
    }
end

--- 计算使用功能卡具体评分
function PlayerCalculatorComp:CalCardPlayValue(cardID, seat, target)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    local miaoRecord = bbComp:GetCalculatorData()
    local value = 0
    if cardID == self.Const.CardID.ADDBUFF_PASS then
        value = self:_PlayAddBuffPass(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.ADDBUFF_FREEZE then
        value = self:_PlayAddBuffFreeze(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.VETO then
        value = self:_PlayVeto(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.GETNUM then
        value = self:_PlayGetNum(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.GETFUNC then
        value = self:_PlayGetFunc(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.REVEAL then
        value = self:_PlayReveal(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.RECYCLE then
        value = self:_PlayRecycle(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.CHANGECOLOR then
        value = self:_PlayChangeColor(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.BANKRUPT then
        value = self:_PlayBankrupt(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.CHANGENUM then
        value = self:_PlayChangeNum(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.DEMOLITION then
        value = self:_PlayDemolition(miaoRecord, seat, target)
    elseif cardID == self.Const.CardID.ADDBUFF_NPLUS then
        value = self:_PlayAddBuffNumPlus(miaoRecord, seat, target)
    end
    LogicUtil.LogFormat("FuncCard[%d] play Value : %s", cardID, tostring(value))

    return value
end

--- 计算卡牌配置的价值
function PlayerCalculatorComp:CalCardIdleValue(cardID, seat)
    local miaoRecord = nil
    local value = 0
    if cardID == self.Const.CardID.ADDBUFF_PASS then
        value = self:_IdleAddBuffPass(miaoRecord, seat)
    elseif cardID == self.Const.CardID.ADDBUFF_FREEZE then
        value = self:_IdleAddBuffFreeze(miaoRecord, seat)
    elseif cardID == self.Const.CardID.VETO then
        value = self:_IdleVeto(miaoRecord, seat)
    elseif cardID == self.Const.CardID.GETNUM then
        value = self:_IdleGetNum(miaoRecord, seat)
    elseif cardID == self.Const.CardID.GETFUNC then
        value = self:_IdleGetFunc(miaoRecord, seat)
    elseif cardID == self.Const.CardID.REVEAL then
        value = self:_IdleReveal(miaoRecord, seat)
    elseif cardID == self.Const.CardID.RECYCLE then
        value = self:_IdleRecycle(miaoRecord, seat)
    elseif cardID == self.Const.CardID.CHANGECOLOR then
        value = self:_IdleChangeColor(miaoRecord, seat)
    elseif cardID == self.Const.CardID.BANKRUPT then
        value = self:_IdleBankrupt(miaoRecord, seat)
    elseif cardID == self.Const.CardID.CHANGENUM then
        value = self:_IdleChangeNum(miaoRecord, seat)
    elseif cardID == self.Const.CardID.DEMOLITION then
        value = self:_IdleDemolition(miaoRecord, seat)
    elseif cardID == self.Const.CardID.ADDBUFF_NPLUS then
        value = self:_IdleAddBuffNPlus(miaoRecord, seat)
    end

    LogicUtil.LogFormat("FuncCard[%d] Idle Value : %s", cardID, tostring(value))

    return value
end

--- 计算配置的数字价值
function PlayerCalculatorComp:CalNumValue(cardID)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    return bbComp:GetMiaoCardInfoCfg(cardID).Num
end

-- region 简单封装一些方法 , 用于后续价值的计算

---@private
function PlayerCalculatorComp:_FindOpponentSeat(seat)
    local isP1 = seat == Miao.MiaoPlayerPos.MiaoPlayerPosP1
    return isP1 and Miao.MiaoPlayerPos.MiaoPlayerPosP2 or Miao.MiaoPlayerPos.MiaoPlayerPosP1
end

---@private
---@return cfg.MiaoCardDifficulty
function PlayerCalculatorComp:_GetDiffConfig()
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    local subTD = bbComp:GetDifficultyCfg()
    return subTD
end

---@private
function PlayerCalculatorComp:_HasBuff(seat, buffID)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    local player = bbComp:GetPlayer(seat)
    return bbComp:HasBuff(player, buffID)
end

---@private
function PlayerCalculatorComp:_CalSlotScore(slot)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    return bbComp:CalSlotScore(slot)
end

---@private
function PlayerCalculatorComp:_GetMiaoCardInfo(cardID)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    return bbComp:GetMiaoCardInfoCfg(cardID)
end

---@private
function PlayerCalculatorComp:_GetMiaoFuncEffect(num)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    return bbComp:GetMiaoCardFuncEffectCfg(num)
end

---@private
function PlayerCalculatorComp:_IsHandFull(player, subTD)
    if subTD == nil then
        subTD = self:_GetDiffConfig()
    end
    local playerCardCount = #player.NumCardList + #player.FuncCardList
    return playerCardCount >= subTD.HandCardLimit
end

---@private
function PlayerCalculatorComp:_IsHandEmpty(player, subTD)
    local playerCardCount = #player.NumCardList + #player.FuncCardList
    return playerCardCount == 0
end

---@private
---@param player pbcmessage.MiaoPlayer
function PlayerCalculatorComp:_HasFuncCard(player, cardID)
    for k, v in pairs(player.FuncCardList) do
        if v == cardID then
            return true
        end
    end
    return false
end

---@private
function PlayerCalculatorComp:_IsNumEmpty(player)
    return #player.NumCardList == 0
end

---@private
function PlayerCalculatorComp:_IsFuncEmpty(player)
    return #player.FuncCardList == 0
end

---@private
function PlayerCalculatorComp:_RemoveHandNumCard(player, cardID)
    -- 从临时数据从去掉第一次的手牌
    local tempRemoveIndex = 0
    for i, id in ipairs(player.NumCardList) do
        if id == cardID then
            tempRemoveIndex = i
            break
        end
    end
    table.remove(player.NumCardList, tempRemoveIndex)
end

--- 计算当前空余格子数量
---@return number,number,table,table
function PlayerCalculatorComp:GetFreeSlotCount(slotList)
    local normalCount = 0
    local doubleCount = 0
    local normalSlotList = {}
    local doubleSlotList = {}

    for k, v in ipairs(slotList) do
        if v.Occupy == 0 then
            local slotCardCfg = self:_GetMiaoCardInfo(v.SlotId)
            if slotCardCfg.SubClass == Miao.MiaoSlotSubClass.MiaoSlotSubClassDouble then
                doubleCount = doubleCount + 1
                table.insert(doubleSlotList, k)
            else
                normalCount = normalCount + 1
                table.insert(normalSlotList, k)
            end
        end
    end
    return normalCount, doubleCount, normalSlotList, doubleSlotList
end

---@private
function PlayerCalculatorComp:_CalMiaoScore(slotList)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    return bbComp:CalMiaoScore(slotList)
end

---@private
---@param player pbcmessage.MiaoPlayer
function PlayerCalculatorComp:_GetMaxScore(player)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    local maxScore, cardID, slotIndex = bbComp:CalMaxScoreByNumCardsByCards(player.NumCardList)
    return cardID, maxScore
end

---根据玩家手牌获取目标格子的最大分数
---@private
function PlayerCalculatorComp:_GetMaxScoreBySlot(slotCardCfg, numCardList)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    if slotCardCfg.SubClass == Miao.MiaoSlotSubClass.MiaoSlotSubClassNormal then
        -- 普通格
        local cardCfg = bbComp:GetMiaoCardInfoCfg(numCardList[1]) --  gamedata.GetMiaoCardInfo(numCardList[1])
        return numCardList[1], cardCfg.Num
    else
        -- 翻倍格
        for _, cardId in pairs(numCardList) do
            local cardCfg = bbComp:GetMiaoCardInfoCfg(cardId)
            if cardCfg.Type == slotCardCfg.Type then
                return cardId, cardCfg.Num * 2
            end
        end
    end
    return numCardList[#numCardList], 0
end

---@private
function PlayerCalculatorComp:_GetExpectScoreBySlot(slotCardCfg, numCardPile)
    local maxScore = 0
    local totalScore = 0
    for _, cardId in pairs(numCardPile) do
        local cardCfg = self:_GetMiaoCardInfo(cardId)
        if slotCardCfg.SubClass == Miao.MiaoSlotSubClass.MiaoSlotSubClassNormal then -- miao.MIAO_CARD_SUBTYPE.NORMALSLOT then
            -- 普通格
            totalScore = totalScore + cardCfg.Num
            if cardCfg.Num > maxScore then
                maxScore = cardCfg.Num
            end
        elseif cardCfg.Type == slotCardCfg.Type then
            -- 翻倍格且颜色相同
            totalScore = totalScore + cardCfg.Num * 2
            if cardCfg.Num * 2 > maxScore then
                maxScore = cardCfg.Num * 2
            end
        end
    end
    return totalScore / #numCardPile, maxScore
end

function PlayerCalculatorComp:GetExpectScoreByCard(cardID, slotList)
    local score = 0
    local cardCfg = self:_GetMiaoCardInfo(cardID)
    for _, slot in pairs(slotList) do
        if slot.Occupy == 0 then
            local slotCardCfg = self:_GetMiaoCardInfo(slot.SlotId)
            if slotCardCfg.SubClass == Miao.MiaoSlotSubClass.MiaoSlotSubClassDouble then
                -- 翻倍格且颜色相同
                if cardCfg.Type == slotCardCfg.Type then
                    return cardCfg.Num * 2
                end
            else
                score = cardCfg.Num
            end
        end
    end
    return score
end

---@private
function PlayerCalculatorComp:_CalNumValue(cardID)

end

-- endregion

--- 2201, 跳过喵，跳过数字牌阶段
---@private
function PlayerCalculatorComp:_PlayAddBuffPass(miaoRecord, seat, target)
    local oppoSeat = self:_FindOpponentSeat(seat)
    if self:_HasBuff(oppoSeat, self.Const.BuffID.PASSNUM) then
        return 0
    end
    return self.Const.FuncValue[self.Const.CardID.ADDBUFF_PASS]
end

---@private
function PlayerCalculatorComp:_IdleAddBuffPass(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.ADDBUFF_PASS]
end

-- 2202, 冰冻喵,跳过功能牌阶段
---@private
function PlayerCalculatorComp:_PlayAddBuffFreeze(miaoRecord, seat, target)
    local oppoSeat = self:_FindOpponentSeat(seat)
    if self:_HasBuff(oppoSeat, self.Const.BuffID.PASSFUNC) then
        return 0
    end
    return self.Const.FuncValue[self.Const.CardID.ADDBUFF_FREEZE]
end

---@private
function PlayerCalculatorComp:_IdleAddBuffFreeze(miaoRecord, seat, target)
    return self.Const.FuncValue[self.Const.CardID.ADDBUFF_FREEZE]
end

-- 2203, 否决
---@private
function PlayerCalculatorComp:_PlayVeto(miaoRecord, seat, target)
    if target <= 0 then
        -- todo 检测需要否决的牌的价值
    end
    return self.Const.FuncValue[self.Const.CardID.VETO]
end

---@private
function PlayerCalculatorComp:_IdleVeto(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.VETO]
end

-- 2204, 发财喵，抽数字牌
---@private
function PlayerCalculatorComp:_PlayGetNum(miaoRecord, seat, target)
    local player = miaoRecord.MiaoPlayers[seat]
    local subTD = self:_GetDiffConfig()
    if self:_IsHandFull(player, subTD) then
        return self.Const.BasicValue.DrawNumScore
    end
    return self.Const.FuncValue[self.Const.CardID.GETNUM]
end

---@private
function PlayerCalculatorComp:_IdleGetNum(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.GETNUM]
end

-- 2205, 贪心喵，抽功能牌，并丢弃
---@private
function PlayerCalculatorComp:_PlayGetFunc(miaoRecord, seat, target)
    if miaoRecord.ChessBoard.FuncPileCount == 0 then
        return 0
    end
    local player = miaoRecord.MiaoPlayers[seat]
    local subTD = self:_GetDiffConfig()
    if seat == Miao.MiaoPlayerPos.MiaoPlayerPosP2 then
        -- 女主专用，不考虑男主
        return 0
    else
        -- 玩家使用，未知己方手牌
        if self:_IsHandFull(player, subTD) then
            if miaoRecord.ChessBoard.FuncPileCount == 1 then
                return self.Const.BasicValue.AverageFuncScore * 2 - self.Const.BasicValue.AverageNumScore
            end
            return self.Const.BasicValue.AverageFuncScore - self.Const.BasicValue.AverageNumScore
        end
        if miaoRecord.ChessBoard.FuncPileCount == 2 then
            return self.Const.BasicValue.AverageFuncScore * 3 - self.Const.BasicValue.AverageNumScore
        end
        return self.Const.BasicValue.AverageFuncScore * 2 - self.Const.BasicValue.AverageNumScore
    end
    return self.Const.FuncValue[self.Const.CardID.GETFUNC]
end

---@private
function PlayerCalculatorComp:_IdleGetFunc(miaoRecord, seat)
    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    local chessBoard = bbComp:GetChessBoard()
    if chessBoard.FuncPileCount == 0 then
        return 0
    end
    return self.Const.FuncValue[self.Const.CardID.GETFUNC]
end

-- 2206, 过河拆喵，看对方手牌后丢弃
---@private
function PlayerCalculatorComp:_PlayReveal(miaoRecord, seat, target)
    local oppoSeat = self:_FindOpponentSeat(seat)
    local opponent = miaoRecord.MiaoPlayers[oppoSeat]
    if self:_IsHandEmpty(opponent) then
        return 0
    end
    if seat == Miao.MiaoPlayerPos.MiaoPlayerPosP2 then
        -- npc使用，看不到对方手牌
        local total = self.Const.BasicValue.DrawNumScore * #opponent.NumCardList +
                          self.Const.BasicValue.AverageFuncScore * #opponent.FuncCardList
        return total / (#opponent.NumCardList + #opponent.FuncCardList)
    else
        -- 玩家使用，已知己方手牌
        local maxScore = 0
        for _, cardID in ipairs(opponent.FuncCardList) do
            if self.Const.FuncValue[cardID] > maxScore then
                maxScore = self.Const.FuncValue[cardID]
            end
        end
        for _, cardID in ipairs(opponent.NumCardList) do
            local numScore = self:GetExpectScoreByCard(cardID, miaoRecord.ChessBoard.SlotList)
            if numScore > maxScore then
                maxScore = numScore
            end
        end
        return maxScore
    end
end

---@private
function PlayerCalculatorComp:_IdleReveal(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.REVEAL]
end

-- 2207, 顺手牵喵，从坟场回收牌
---@private
function PlayerCalculatorComp:_PlayRecycle(miaoRecord, seat, target)
    local cardTD = self:_GetMiaoCardInfo(self.Const.CardID.RECYCLE)
    local effectTD = self:_GetMiaoFuncEffect(cardTD.Num)

    local discardSize = #miaoRecord.ChessBoard.FuncDiscard
    local recCount = discardSize
    if recCount > effectTD.Para1 then
        recCount = effectTD.Para1
    end

    if recCount == 0 then
        return 0
    end

    local valueSum = 0
    for i = 1, recCount do
        local index = discardSize - i + 1
        local cardID = miaoRecord.ChessBoard.FuncDiscard[index]
        if cardID == self.Const.CardID.RECYCLE then
            recCount = recCount - 1
        else
            valueSum = valueSum + self:CalCardIdleValue(cardID, seat)
        end
    end
    if recCount == 0 then
        return 0
    end
    return valueSum / recCount
end

---@private
function PlayerCalculatorComp:_IdleRecycle(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.RECYCLE]
end

-- 2208, 变色喵，随机改变格子颜色
---@private
function PlayerCalculatorComp:_PlayChangeColor(miaoRecord, seat, target)
    if target <= 0 then
        return self.Const.FuncValue[self.Const.CardID.CHANGECOLOR]
    end
    local slot = miaoRecord.ChessBoard.SlotList[target]
    if slot.Occupy == 0 then
        -- 空格子
        return 0
    end
    local score = self:_CalSlotScore(slot) -- 原分数
    local cardTD = self:_GetMiaoCardInfo(slot.CardId)
    if slot.Occupy == seat then
        -- 己方格子
        return cardTD.Num * 0.5 - score
    end
    return score - cardTD.Num * 0.25
end

---@private
function PlayerCalculatorComp:_IdleChangeColor(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.CHANGECOLOR]
end

-- 2209, 破产喵，丢弃双方所有数字牌
---@private
function PlayerCalculatorComp:_PlayBankrupt(miaoRecord, seat, targets)
    local player = miaoRecord.MiaoPlayers[seat]
    local oppoSeat = self:_FindOpponentSeat(seat)
    local opponent = miaoRecord.MiaoPlayers[oppoSeat]
    if self:_IsNumEmpty(opponent) then
        return 0
    end
    if seat == Miao.MiaoPlayerPos.MiaoPlayerPosP2 then
        -- npc使用，看不到对方手牌
        if #player.NumCardList < #opponent.NumCardList then
            return (#opponent.NumCardList - #player.NumCardList) * self.Const.BasicValue.DrawNumScore
        else
            return self.Const.BasicValue.DrawNumScore
        end
    else
        -- 玩家使用，已知己方手牌
        local _, maxScore = self:_GetMaxScore(opponent, miaoRecord.ChessBoard.SlotList)
        if maxScore > self.Const.BasicValue.AverageNumScore then
            return maxScore
        else
            if self:_HasFuncCard(opponent, self.Const.CardID.GETNUM) then
                return 0
            else
                return (#opponent.NumCardList - #player.NumCardList) * self.Const.BasicValue.DrawNumScore
            end
        end
    end
    return self.Const.FuncValue[self.Const.CardID.BANKRUPT]
end

---@private
function PlayerCalculatorComp:_IdleBankrupt(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.BANKRUPT]
end

-- 2210, 变小喵，改格子上的卡
---@private
function PlayerCalculatorComp:_PlayChangeNum(miaoRecord, seat, target)
    if target <= 0 then
        return self.Const.FuncValue[self.Const.CardID.CHANGENUM]
    end
    local slot = miaoRecord.ChessBoard.SlotList[target]
    local score = self:_CalSlotScore(slot) -- 原分数
    if score == 0 then
        return 0
    end
    local slotCardCfg = self:_GetMiaoCardInfo(slot.SlotId)
    local cardTD = self:_GetMiaoCardInfo(self.Const.CardID.CHANGENUM)
    local effectTD = self:_GetMiaoFuncEffect(cardTD.Num)

    if slotCardCfg.SubClass == Miao.MiaoSlotSubClass.MiaoSlotSubClassNormal then
        return score - effectTD.Para0
    end
    return score - effectTD.Para0 * 2
end

---@private
function PlayerCalculatorComp:_IdleChangeNum(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.CHANGENUM]
end

-- 2211, 拆迁喵，拆格子上的卡
---@private
function PlayerCalculatorComp:_PlayDemolition(miaoRecord, seat, target)
    if target <= 0 then
        return self.Const.FuncValue[self.Const.CardID.DEMOLITION]
    end
    local player = miaoRecord.MiaoPlayers[seat]
    local slot = miaoRecord.ChessBoard.SlotList[target]
    local score = self.Const.BasicValue.DrawNumScore + self:_CalSlotScore(slot) -- 拆迁分数

    if not self:_IsNumEmpty(player) then
        local _, preMaxScore = self:_GetMaxScore(player, miaoRecord.ChessBoard.SlotList)
        local slotCardCfg = self:_GetMiaoCardInfo(slot.SlotId)
        local _, slotScore = self:_GetMaxScoreBySlot(slotCardCfg, player.NumCardList)
        if slotScore > preMaxScore then
            score = score + slotScore - preMaxScore
        end
    end
    return score
end

---@private
function PlayerCalculatorComp:_IdleDemolition(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.DEMOLITION]
end

-- 2212, 兴奋喵，打出两张数字牌
---@private
function PlayerCalculatorComp:_PlayAddBuffNumPlus(miaoRecord, seat, target)

    local freeNormalSlot, freeDoubleSlot, normalFSlots, doubleFSlots =
        self:GetFreeSlotCount(miaoRecord.ChessBoard.SlotList)
    local freeSlotCount = freeNormalSlot + freeDoubleSlot
    LogicUtil.LogFormat("FuncCard[%d] freeSlotCount : %d", 2212, freeSlotCount)
    -- 空格子过少
    if freeSlotCount < 2 then
        return 0
    end

    local bbComp = self.entity:GetComponent(Miao.Component.Debug.BlackboardComp)
    local player = bbComp:GetPlayer(seat)
    if #player.NumCardList < 2 then
        return 0
    end
    -- 先计算当前的场上的分数
    local p1Score, p2Score = bbComp:CalMiaoScore()

    -- 临时拷贝一份男主的数据出来用于计算
    local tempPlayer = table.clone(player)
    -- 计算第一次出牌的得分
    local maxScore1, cardID1, slotIndex1 = bbComp:CalMaxScoreByNumCards(tempPlayer)
    -- 从临时数据从去掉第一次的手牌
    self:_RemoveHandNumCard(tempPlayer, cardID1)
    -- 计算第二次出牌得分
    local maxScore2, cardID2, slotIndex2 = bbComp:CalMaxScoreByNumCards(tempPlayer, false, slotIndex1)

    -- 如果两次出牌后的分数大于对方，且格子只剩2个，则认为是必胜
    if (p1Score + maxScore1 + maxScore2) > p2Score and freeSlotCount == 2 then
        return 99
    else
        return maxScore2
    end

end

---@private
function PlayerCalculatorComp:_IdleAddBuffNPlus(miaoRecord, seat)
    return self.Const.FuncValue[self.Const.CardID.ADDBUFF_NPLUS]
end

return PlayerCalculatorComp
