---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/12/30 14:56
---
---@type PureLogic.ICommand
local ICommand = require("PureLogic.Common.Command.ICommand")
---@class DataSync:PureLogic.ICommand
---@field entity PureLogic.ClientEntity
local DataSync = class('DataSync', ICommand)

function DataSync:ctor()
    ICommand.ctor(self)
    self.onComplete = nil
    ---@type DataStore.Req
    self.cachedData = nil
    ---@type boolean 是否数据dirty
    self.isDirty = false
end

---@class DataStore.Req
---@field DataVersion int
---@field Data DataStore.Data

---@class DataStore.Data
---@field Record table<int,pbcmessage.GamePlayRecord>
---@field Blackboard table
---@field Command PureLogic.CommandData[]

---执行命令
---@param dataCommandType DataCommandType
---@param req DataStore.Req
---@param onComplete fun(type:table)
function DataSync:OnCommand(dataCommandType, req, onComplete)
    if self.entity:IsOffline() then
        if onComplete then
            onComplete()
        end
        return
    end
    if dataCommandType == ServerConst.DataCommandType.Save then
        self:Sync(self.entity:GetGameType(), req)
    elseif dataCommandType == ServerConst.DataCommandType.Get then
        self.onComplete = onComplete
        self:Get(self.entity:GetGameType())
    elseif dataCommandType == ServerConst.DataCommandType.Clear then
        self:Clear(self.entity:GetGameType())
    elseif dataCommandType == ServerConst.DataCommandType.ForceSync then
        self:SyncCache()
    end
end

---@param dataId int
---@return table
function DataSync:Get(dataId)
    ---@type pbcmessage.LoadGamePlayRequest
    local req = PoolUtil.GetTable()
    req.GameType = dataId
    req.EnterType = self.entity:GetEntryType()
    LogicUtil.SendGrpc(RpcDefines.LoadGamePlayRequest, req)
    PoolUtil.ReleaseTable(req)
end

---@param dataId int
---@param data DataStore.Req
function DataSync:Sync(dataId, data)
    self.isDirty = true
    if not self.cachedData then
        self.cachedData = PoolUtil.GetTable()
        table.merge(self.cachedData, data)
    else
        if self.cachedData.DataVersion == 1 or self.cachedData.DataVersion < data.DataVersion then
            table.merge(self.cachedData, data)
        end
    end
end

---@param dataId int
---@param data DataStore.Req
function DataSync:SyncData(dataId, data)
    ---@type pbcmessage.SaveGamePlayRequest
    local req = PoolUtil.GetTable()
    req.GameType = dataId
    req.SaveRecords = data.Data.Record
    req.EnterType = self.entity:GetEntryType()
    data.Data.Record = nil
    --不重复上传 SaveRecords
    req.SaveData = LogicUtil.Compress(data)
    data.Data.Record = req.SaveRecords
    LogicUtil.SendGrpc(RpcDefines.SaveGamePlayRequest, req)
    PoolUtil.ReleaseTable(req)
    --发送成功清理cachedData
    if self.cachedData then
        PoolUtil.ReleaseTable(self.cachedData)
        self.cachedData = nil
    end
end

---@param dataId int
function DataSync:Clear(dataId)

end

---强制同步数据
function DataSync:SyncCache()
    if not self.cachedData then
        return
    end
    self.isDirty = false
    self:SyncData(self.entity:GetGameType(), self.cachedData)
end

---@param data pbcmessage.LoadGamePlayReply
function DataSync:OnLoadDataSuccess(data)
    local onComplete = self.onComplete
    if onComplete then
        ---@type PureLogic.LoadData
        local t = LogicUtil.Decompress(data.SaveData)
        local isNew = false
        if not t then
            isNew = true
            t = {}
        end
        t.Seed = data.Seed
        t.LevelId = data.SubId
        onComplete(t, isNew)
    end
    self.onComplete = nil
end

---@param data pbcmessage.SaveGamePlayReply
function DataSync:OnSaveDataSuccess(data)

end

function DataSync:OnUpdate()
    if self.isDirty and LogicUtil.IsNetConnected() then
        self:SyncCache()
    end
end

---初始化
function DataSync:OnInit()
    LogicUtil.AddListener(ServerConst.LoadDataEventName, self.OnLoadDataSuccess, self)
    LogicUtil.AddListener(ServerConst.SaveDataEventName, self.OnSaveDataSuccess, self)
    LogicUtil.AddTimer(ServerConst.SyncDt, self.OnUpdate, self, -1)
end

---销毁
function DataSync:OnDispose()
    LogicUtil.ClearTarget(self)
end
return DataSync