---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingzi003.
--- DateTime: 2022/9/2 15:31
---
---@class FaceEditUtil @捏脸Util
local FaceEditUtil = {}
local FaceEditConst = require("Runtime.System.X3Game.GameConst.FaceEditConst")

---@param mainType number @主类型
---@param subType number @子类型
---@param propType number @属性类型
---@return number @键（key = 主类型*100000 + 子类型*1000 + 属性类型）
function FaceEditUtil.GetKey(mainType, subType, propType)
    if mainType then
        subType = subType and tonumber(subType) or 0
        propType = propType and tonumber(propType) or FaceEditConst.EditPropType.StyleAndColor
        return mainType * FaceEditConst.MainFactor + subType * FaceEditConst.SubFactor + propType
    end
end

---获取头发的PartKey
function FaceEditUtil.GetHairKey(isMakeup)
    local baseKey = FaceEditUtil.GetKey(FaceEditConst.MainType.Hair)
    local realKey = SelfProxyFactory.GetFaceEditProxy():GetCurrentValue(baseKey, isMakeup)
    local result = LuaCfgMgr.Get("FaceHair", realKey and math.floor(realKey) or nil)
    return result and result.StyleSourceID or nil
end

---@param key number @键（key = 主类型*100000 + 子类型*1000 + 属性类型）
---@return number @主类型
---@return number @子类型
---@return number @属性类型
function FaceEditUtil.GetTypes(key)
    local mainType = FaceEditUtil.GetMainTypeByKey(key)
    local subType = FaceEditUtil.GetSubTypeByKey(key)
    local propType = FaceEditUtil.GetThirdType(key)
    return mainType, subType, propType
end

---@param key number @键（key = 主类型*100000 + 子类型*1000 + 属性类型）
---@return number @主类型
function FaceEditUtil.GetMainTypeByKey(key)
    return key and math.floor(key / FaceEditConst.MainFactor)
end

---@param key number @键（key = 大类型*100000 + 子类型*1000 + 属性类型）
---@return number @子类型
function FaceEditUtil.GetSubTypeByKey(key)
    return key and math.floor((key % FaceEditConst.MainFactor) / FaceEditConst.SubFactor)
end

---@param key number @键（key = 大类型*100000 + 子类型*1000 + 属性类型）
---@return number @属性类型
function FaceEditUtil.GetThirdType(key)
    return key and key % FaceEditConst.SubFactor
end

---@param mainType number @主类型
---@param subType number @子类型
---@return table<number, string> @关联子属性配置
function FaceEditUtil.GetSubCfgDic(mainType, subType)
    if mainType then
        subType = subType and tonumber(subType) or 0
        return FaceEditConst.EditSubCfg[mainType] and FaceEditConst.EditSubCfg[mainType][subType]
    end
end

function FaceEditUtil.GetSubCfgFieldName(mainType, subType, propType)
    return mainType and subType and propType and FaceEditConst.EditSubCfg[mainType]
            and FaceEditConst.EditSubCfg[mainType][subType] and FaceEditConst.EditSubCfg[mainType][subType][propType]
end

---@param mainType number @主类型
---@param subType number @子类型
---@return string @配置表名
function FaceEditUtil.GetCfgName(mainType, subType)
    local _value = mainType and FaceEditConst.TypeToCfgDic[mainType]
    if not _value then
        return
    end

    if type(_value) == "table" then
        subType = subType and tonumber(subType) or 0
        if mainType == FaceEditConst.MainType.Bone and subType and subType > 0 then
            subType = 1
        end
        return _value and _value[subType]
    else
        return _value
    end
end

---@param propType number @属性类型
---@return number @属性类型值的数据类型
function FaceEditUtil.GetDataTypeByKey(key)
    local mainType, _, propType = FaceEditUtil.GetTypes(key)
    if mainType == FaceEditConst.MainType.Bone then
        return FaceEditConst.ValueDataTypes.Float
    else
        return propType and FaceEditConst.EditPropDataType and FaceEditConst.EditPropDataType[propType]
    end
end

---@param key number
---@return number @默认属性key对应的自定义属性key
function FaceEditUtil.GetCustomKey(key)
    local mainKey =  FaceEditUtil.GetMainTypeByKey(key)
    if mainKey == FaceEditConst.MainType.Bone then
        return nil
    end

    local subProp = FaceEditUtil.GetThirdType(key)
    local prop = subProp and FaceEditConst.SubPropTypes[subProp]
    if prop then
        return (key - key % FaceEditConst.SubFactor) + prop
    end
end

---@param key number
---@return number @自定义属性key对应的默认属性key
function FaceEditUtil.GetSubKey(key)
    local mainKey = FaceEditUtil.GetMainTypeByKey(key)
    if mainKey == FaceEditConst.MainType.Bone then
        return nil
    end
    local prop = FaceEditUtil.GetThirdType(key)
    local sub = table.keyof(FaceEditConst.SubPropTypes, prop)
    if sub then
        return (key - key % FaceEditConst.SubFactor) + sub
    end
end

function FaceEditUtil.GetServerDeflateValue(key, value)
    local data_type = FaceEditUtil.GetDataTypeByKey(key)
    if data_type and data_type == FaceEditConst.ValueDataTypes.Color then
        value = Color.DecToRGB(value & 0xFFFFFF)
    else
        value = value and value * FaceEditConst.ServerDeflateFactor or 0
    end
    return value
end

function FaceEditUtil.GetServerInflateValue(key, value)
    local data_type = FaceEditUtil.GetDataTypeByKey(key)
    if data_type and data_type == FaceEditConst.ValueDataTypes.Color then
        value = Color.RGBToDec(value) | 0xFF000000
    else
        value = math.floor(value * FaceEditConst.ServerInflateFactor)
    end
    return value
end

function FaceEditUtil.FilterLockedEditItems(sourceData)
    local hasLockedItem = false
    for k, v in pairs(sourceData) do
        local mainType, subType, propType = FaceEditUtil.GetTypes(k)
        if propType == FaceEditConst.EditPropType.StyleAndColor then
            if mainType == FaceEditConst.MainType.Makeup or mainType == FaceEditConst.MainType.Hair then
                local cfgName = FaceEditUtil.GetCfgName(mainType, subType)
                local cfgId = FaceEditUtil.GetServerDeflateValue(k, v)
                local cfg = LuaCfgMgr.Get(cfgName, cfgId)
                if cfg and cfg.ItemCondition and cfg.ItemCondition > 0 then
                    local itemAmount = BllMgr.GetItemBLL():GetItemNum(cfg.ItemCondition)
                    if itemAmount == 0 then
                        sourceData[k] = nil
                        hasLockedItem = true
                    end
                end
            end
        end
    end
    if hasLockedItem then
        UICommonUtil.ShowMessage(UITextConst.UI_TEXT_7882)
    end

    return sourceData
end

return FaceEditUtil