---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by doudou.
--- DateTime: 2022/9/7 15:12
---@type FaceEditUtil
local FaceEditUtil = require("Runtime.System.X3Game.Modules.FaceEdit.FaceEditUtil")
---@type FaceEditConst
local FaceEditConst = require("Runtime.System.X3Game.GameConst.FaceEditConst")

---@class FaceCharacterHelper
local FaceCharacterHelper = class("FaceCharacterHelper")
local CHARACTER_MGR_CLS = CS.PapeGames.X3.CharacterMgr
function FaceCharacterHelper:ctor(go, editItems, faceChangeType, faceHair)
    ---@type GameObject
    self.characterObj = nil
    ---@type X3.Character.FaceMorph.X3FaceMorph
    self.faceMorph = nil
    ---@type X3.Character.X3Makeup
    self.makeup = nil
    ---@type Define.FaceChangeType @套装发型替换类型
    self.faceChangeType = nil
    ---@type number @套装替换发型CfgId
    self.faceHair = nil
    ---@type boolean @是否束发
    self.isTieHair = false
    ---@type boolean @是否有试穿头发
    self.tryOnHairCfgId = nil
    ---@type boolean @是否为无头有阴影
    self.isNoHeadWithShadow = false
    ---@type string
    self.roleBaseKey = nil
    ---@type boolean @忽略妆容细节
    self.skipMakeupDetail = nil
    ---@type table<int, boolean> @过滤字典
    self.filterDict = nil

    self.NO_HEAD_WITH_SHADOW_PART_NAME = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.PLAYERNOHEADHAVESHADOW)
    self.shadowOnlyParts = {
        CS.X3.Character.CharacterDefines.BodyType.Head,
        CS.X3.Character.CharacterDefines.BodyType.Hair,
        CS.X3.Character.CharacterDefines.BodyType.Eye_L,
        CS.X3.Character.CharacterDefines.BodyType.Eye_R,
        CS.X3.Character.CharacterDefines.BodyType.EyeShell,
        CS.X3.Character.CharacterDefines.BodyType.Teeth,
    }

    self.makeupType = {
        Eyelash = CS.X3.Character.CharacterDefines.MakeupType.Eyelash,
        EYE_L = CS.X3.Character.CharacterDefines.MakeupType.EYE_L,
        EYE_R = CS.X3.Character.CharacterDefines.MakeupType.EYE_R,
        Skin = CS.X3.Character.CharacterDefines.MakeupType.Skin,
        Eyeshadow = CS.X3.Character.CharacterDefines.MakeupType.Eyeshadow,
        Eyeliner = CS.X3.Character.CharacterDefines.MakeupType.Eyeliner,
        Eyebrow = CS.X3.Character.CharacterDefines.MakeupType.Eyebrow,
        Lip = CS.X3.Character.CharacterDefines.MakeupType.Lip,
        Blusher = CS.X3.Character.CharacterDefines.MakeupType.Blusher,
        Decorate = CS.X3.Character.CharacterDefines.MakeupType.Decorate,
        Body_LD = CS.X3.Character.CharacterDefines.MakeupType.FullBody_LD,
        Body = CS.X3.Character.CharacterDefines.MakeupType.Body,
        Hand = CS.X3.Character.CharacterDefines.MakeupType.Hand,
        Hair = CS.X3.Character.CharacterDefines.MakeupType.Hair,
        Eyelid = CS.X3.Character.CharacterDefines.MakeupType.Eyelid,
        SkinSGTex = CS.X3.Character.CharacterDefines.MakeupType.SkinSGTex,
        BodySGTex = CS.X3.Character.CharacterDefines.MakeupType.BodySGTex,
        HandSGTex = CS.X3.Character.CharacterDefines.MakeupType.HandSGTex,
        EyeShell = CS.X3.Character.CharacterDefines.MakeupType.Eyeshell,
        MultiplyColor = CS.X3.Character.CharacterDefines.MakeupType.MakeupMultiplyColor,
    }

    self.styleFaceIdx = {
        [FaceEditConst.EditPropType.PosA_Index] = 0,
        [FaceEditConst.EditPropType.PosA_Weight] = 0,
        [FaceEditConst.EditPropType.PosB_Index] = 1,
        [FaceEditConst.EditPropType.PosB_Weight] = 1,
        [FaceEditConst.EditPropType.PosC_Index] = 2,
        [FaceEditConst.EditPropType.PosC_Weight] = 2,
    }

    self.styleFaceOpr = {
        [FaceEditConst.EditPropType.PosA_Index] = handler(self, self.SetTemplate),
        [FaceEditConst.EditPropType.PosA_Weight] = handler(self, self.SetTemplateWeight),
        [FaceEditConst.EditPropType.PosB_Index] = handler(self, self.SetTemplate),
        [FaceEditConst.EditPropType.PosB_Weight] = handler(self, self.SetTemplateWeight),
        [FaceEditConst.EditPropType.PosC_Index] = handler(self, self.SetTemplate),
        [FaceEditConst.EditPropType.PosC_Weight] = handler(self, self.SetTemplateWeight),
    }

    self.hairColorType = {
        [FaceEditConst.EditPropType.ColorA] = CS.X3.Character.CharacterDefines.HairColorType.WholeTop,
        [FaceEditConst.EditPropType.SubColorA] = CS.X3.Character.CharacterDefines.HairColorType.WholeTop,
        [FaceEditConst.EditPropType.ColorB] = CS.X3.Character.CharacterDefines.HairColorType.WholeBottom,
        [FaceEditConst.EditPropType.SubColorB] = CS.X3.Character.CharacterDefines.HairColorType.WholeBottom,
        [FaceEditConst.EditPropType.ColorC] = CS.X3.Character.CharacterDefines.HairColorType.Specular1,
        [FaceEditConst.EditPropType.SubColorC] = CS.X3.Character.CharacterDefines.HairColorType.Specular1,
        [FaceEditConst.EditPropType.ColorD] = CS.X3.Character.CharacterDefines.HairColorType.Specular2,
        [FaceEditConst.EditPropType.SubColorD] = CS.X3.Character.CharacterDefines.HairColorType.Specular2,
        [FaceEditConst.EditPropType.ColorE] = CS.X3.Character.CharacterDefines.HairColorType.HighlightTop,
        [FaceEditConst.EditPropType.SubColorE] = CS.X3.Character.CharacterDefines.HairColorType.HighlightTop,
        [FaceEditConst.EditPropType.ColorF] = CS.X3.Character.CharacterDefines.HairColorType.HighlightBottom,
        [FaceEditConst.EditPropType.SubColorF] = CS.X3.Character.CharacterDefines.HairColorType.HighlightBottom,
    }

    self.partType = {
        Skin = 1,
        Lip = 2,
        Eyebrow = 3,
        Eyeshadow = 4,
        Eye = 5,
        Eyeliner = 6,
        Eyelash = 7,
        Blusher = 8,
        Decorate = 9,
        Eyelid = 10,
        EyeshadowMask = 11,
    }

    self.textureFolder = {
        [self.partType.Skin] = "Skin/",
        [self.partType.Eyebrow] = "Eyebrow/",
        [self.partType.Lip] = "Lip/",
        [self.partType.Eyeshadow] = "EyeShadow/",
        [self.partType.Eye] = "Iris/",
        [self.partType.Eyeliner] = "Eyeliner/",
        [self.partType.Eyelash] = "Eyelash/",
        [self.partType.Blusher] = "CheekColor/",
        [self.partType.Decorate] = "Decorate/",
        [self.partType.Eyelid] = "Eyelid/",
        [self.partType.EyeshadowMask] = "Blink/",
    }

    self.matFolder = {
        [self.partType.Eye] = "Iris/",
    }

    self.oprMap = {
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Skin, nil, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetSkin),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyebrow, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyebrow),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyebrow, FaceEditConst.EditPropType.Density)] = handler(self, self.SetEyebrowDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyebrow, FaceEditConst.EditPropType.SubDensity)] = handler(self, self.SetEyebrowDensity),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Lip, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetLip),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Lip, FaceEditConst.EditPropType.Density)] = handler(self, self.SetLipDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Lip, FaceEditConst.EditPropType.SubDensity)] = handler(self, self.SetLipDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Lip, FaceEditConst.EditPropType.Gloss)] = handler(self, self.SetLipGloss),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Lip, FaceEditConst.EditPropType.SubGloss)] = handler(self, self.SetLipGloss),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.EyeL, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyeL),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.EyeR, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyeR),
        --[FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.EyeR, FaceEditConst.EditPropType.EyeRCover)] = handler(self, self.SetEyeR),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyeshadow, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyeshadow),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyeshadow, FaceEditConst.EditPropType.Density)] = handler(self, self.SetEyeshadowDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyeshadow, FaceEditConst.EditPropType.SubDensity)] = handler(self, self.SetEyeshadowDensity),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyelash, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyelash),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.EyeLiner, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyeliner),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.EyeLiner, FaceEditConst.EditPropType.Density)] = handler(self, self.SetEyelinerDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.EyeLiner, FaceEditConst.EditPropType.SubDensity)] = handler(self, self.SetEyelinerDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Eyelid, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetEyelid),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Blush, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetBlusher),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Blush, FaceEditConst.EditPropType.Density)] = handler(self, self.SetBlusherDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Blush, FaceEditConst.EditPropType.SubDensity)] = handler(self, self.SetBlusherDensity),

        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Decorate, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetDecoration),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Decorate, FaceEditConst.EditPropType.Density)] = handler(self, self.SetDecorationDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Makeup, FaceEditConst.MakeupType.Decorate, FaceEditConst.EditPropType.SubDensity)] = handler(self, self.SetDecorationDensity),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.StyleAndColor)] = handler(self, self.SetHairStyle),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.TogB)] = handler(self, self.SetHairGradientEnable),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.SubTogB)] = handler(self, self.SetHairGradientEnable),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.FloatA)] = handler(self, self.SetHairGradientDis),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.SubFloatA)] = handler(self, self.SetHairGradientDis),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.SubTogC)] = handler(self, self.SetHairHighLightEnable),
        [FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.SubTogD)] = handler(self, self.SetHairGradient2Enable),
    }

    self:SetCharacter(go, editItems, faceChangeType, faceHair)
end

---@param key number @编辑项key
---@param value number|Color @编辑项值
function FaceCharacterHelper:Apply(key, value)
    if self.characterObj == nil then
        Debug.LogWarningWithTag(GameConst.LogTag.FaceEdit, "请先SetCharacter")
        return
    end

    if self.faceMorph == nil or self.makeup == nil then
        Debug.LogWarningWithTag(GameConst.LogTag.FaceEdit, "角色缺少FaceMorph或MakeUp")
        return
    end

    if self.oprMap[key] then
        self.oprMap[key](value)
    else
        local mainType, subKey, thirdType = FaceEditUtil.GetTypes(key)
        if mainType == FaceEditConst.MainType.StyleFace then
            if self.styleFaceOpr[thirdType] and self.styleFaceIdx[thirdType] then
                self.styleFaceOpr[thirdType](self.styleFaceIdx[thirdType], value)
            end
        elseif mainType == FaceEditConst.MainType.Hair then
            if self.hairColorType[thirdType] then
                local color = value
                if self.faceChangeType and self.faceChangeType == Define.FaceChangeType.ReplaceHair then
                    local cfg = LuaCfgMgr.Get("FaceHair", self.faceHair)
                    local propType = table.keyof(FaceEditConst.SubPropTypes, thirdType) or thirdType
                    local fieldName = FaceEditUtil.GetSubCfgFieldName(mainType, 0, propType)
                    if cfg and fieldName and cfg[fieldName] then
                        color = Color.HexToRGBA(cfg[fieldName])
                    end
                end
                self:SetHairColor(self.hairColorType[thirdType], color)
            end
        elseif mainType == FaceEditConst.MainType.Voice then
            self:SetPlayerVoice(subKey, value)
        elseif mainType == FaceEditConst.MainType.Bone then
            self:DetailMorph(thirdType, value)
        end
    end
end

function FaceCharacterHelper:RefreshItems(editItems)
    local hairRefreshed = false
    if editItems then
        for _, item in ipairs(editItems) do
            if item and item.key and item.value then
                if self.filterDict == nil or not self.filterDict[FaceEditUtil.GetMainTypeByKey(item.key)] then
                    self:Apply(item.key, item.value)
                    hairRefreshed = hairRefreshed or item.key == FaceEditUtil.GetKey(FaceEditConst.MainType.Hair, nil, FaceEditConst.EditPropType.StyleAndColor)
                end
            end
        end
    end

    if self.faceHair and not hairRefreshed then
        self:SetHairStyle()
        if self.faceChangeType and self.faceChangeType == Define.FaceChangeType.ReplaceHair then
            local cfg = LuaCfgMgr.Get("FaceHair", self.faceHair)
            if cfg then
                for propType, colorType in pairs(self.hairColorType) do
                    local fieldName = FaceEditUtil.GetSubCfgFieldName(FaceEditConst.MainType.Hair, 0, propType)
                    if fieldName and cfg[fieldName] then
                        local color = Color.HexToRGBA(cfg[fieldName])
                        self:SetHairColor(colorType, color)
                    end
                end
                self:SetHairGradientEnable(cfg.EnableGradient)
                self:SetHairHighLightEnable(cfg.CanHighLight)
                self:SetHairGradientDis(cfg.DefaultGraDis)
            end
        end
    end

    CharacterMgr.SetPartsToShadowOnly(self.characterObj, self.shadowOnlyParts, self.isNoHeadWithShadow)
end

function FaceCharacterHelper:ApplyItems(editItems, faceChangeType, faceHair, roleBaseKey, filter, skipMakeupDetail)
    self.faceChangeType = faceChangeType
    self.faceHair = faceHair
    self.isNoHeadWithShadow = self:HasPart(self.NO_HEAD_WITH_SHADOW_PART_NAME)
    self.roleBaseKey = roleBaseKey
    self.skipMakeupDetail = skipMakeupDetail
    if filter then
        self.filterDict = {}
        for _,v in pairs(filter) do
            self.filterDict[v] = true
        end
    else
        self.filterDict = nil
    end

    self:RefreshItems(editItems)
end

---@param go GameObject
---@param editItems EditItem[]
function FaceCharacterHelper:SetCharacter(go, editItems, faceChangeType, faceHair, filter)
    self.characterObj = go
    self.faceMorph = CharacterMgr.GetSubSystem(go, CS.X3.Character.ISubsystem.Type.FaceMorph)
    self.makeup = CharacterMgr.GetSubSystem(go, CS.X3.Character.ISubsystem.Type.Makeup)
    self.makeup:ClearMakeup()
    self.makeup:ClearExtraPartName()
    local extraParts = LuaCfgMgr.GetAll("FaceHairColorPart")
    for k,_ in pairs(extraParts) do
        self.makeup:AddExtraPartName(k, CS.X3.Character.CharacterDefines.BodyType.Hair)
    end

    self.faceMorph.templatePosition = FaceEditConst.FaceStylePresetAngles

    self:ApplyItems(editItems, faceChangeType, faceHair, filter)
end

function FaceCharacterHelper:Release()
    self.characterObj = nil
    self.faceMorph = nil
    self.makeup = nil
    self.faceChangeType = nil
    self.faceHair = nil
    self.isTieHair = false
    self.tryOnHairCfgId = nil
end

function FaceCharacterHelper:HasPart(key)
    local partKeys = CharacterMgr.GetPartKeys(self.characterObj)
    if key and partKeys then
        for _, partKey in pairs(partKeys) do
            if partKey == key then
                return true
            end
        end
    end
    return false
end

function FaceCharacterHelper:HasPartType(partType)
    local partKeys = CharacterMgr.GetPartKeys(self.characterObj)
    if partType and partKeys then
        for _, partKey in pairs(partKeys) do
            local cfg = LuaCfgMgr.Get("PartConfig", partKey)
            if cfg and cfg.Type == partType then
                return true
            end
        end
    end
    return false
end

function FaceCharacterHelper:SetTieHair(isOn)
    self.isTieHair = isOn
end

function FaceCharacterHelper:SetTryOnHair(hairCfgId)
    self.tryOnHairCfgId = hairCfgId
end

function FaceCharacterHelper:GetTexture(assetName, partType)
    return Res.Load(string.format("%s%s",
            self.textureFolder[partType], assetName), ResType.T_MakeupTex, AutoReleaseMode.EndOfFrame, typeof(CS.UnityEngine.Texture), self.characterObj)
end

function FaceCharacterHelper:GetMaterial(assetName, partType)
    return Res.Load(string.format("%s%s",
            self.matFolder[partType], assetName), ResType.T_MakeupMat, AutoReleaseMode.EndOfFrame, typeof(CS.UnityEngine.Material), self.characterObj)
end

function FaceCharacterHelper:SetTextureAndColor(partType, makeupType, cfgName, key, colorKey, id)
    local cfg = LuaCfgMgr.Get(cfgName, id)
    if cfg == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.FaceEdit, "[Face]Invalid CfgID %s %s", cfgName, id)
        return
    end

    local texture = nil
    if not string.isnilorwhitespace(cfg[key]) then
        texture = self:GetTexture(cfg[key], partType)
    end
    self.makeup:MakeUpTex(makeupType, texture)

    if colorKey and cfg[colorKey] and not string.isnilorwhitespace(cfg[colorKey]) then
        self.makeup:MakeUp(makeupType, Color.HexToRGBA(cfg[colorKey]))
    end
end

function FaceCharacterHelper:SetMaterial(oprType, makeupType, cfgName, key, id)
    local cfg = LuaCfgMgr.Get(cfgName, id)
    if cfg == nil or cfg[key] == nil then
        Debug.LogErrorFormatWithTag(GameConst.LogTag.FaceEdit, "[Face]Invalid TextureSetting %s %s $d", cfgName, key, id)
        return
    end
    local mat = self:GetMaterial(cfg[key], oprType)
    if mat then
        self.makeup:MakeUpMat(makeupType, mat)
    end
end

function FaceCharacterHelper:DetailMorph(cfgId, value)
    ---@type cfg.FaceBoneDetail
    local boneCfg = LuaCfgMgr.Get("FaceBoneDetail", cfgId)
    if boneCfg then
        self.faceMorph:TrySetDetailWeight(boneCfg.ParaName, value)
    end
end

function FaceCharacterHelper:SetTemplate(idx, value)
    --for idx, name in pairs(templates) do
    local cfg = LuaCfgMgr.Get("FaceStyle", value)
    if cfg and cfg.SourceName then
        self.faceMorph:SetStyleMorphTemplate(idx, cfg.SourceName)
    end
    --end
end

function FaceCharacterHelper:SetTemplateWeight(idx, value)
    --for idx, name in pairs(templates) do
    self.faceMorph:SetStyleWeight(idx, value)
    --end
end

function FaceCharacterHelper:SetSparkle(id, makeupType)
    local cfg = LuaCfgMgr.Get("FaceSparkle", id)
    if self.makeup then
        if cfg then
            local mask = nil
            if not string.isnilorempty(cfg.Mask) and not self.skipMakeupDetail then
                mask = self:GetTexture(cfg.Mask, self.partType.EyeshadowMask)
            end
            self.makeup:EnableSparkle(makeupType, Vector4(cfg.SizeX, cfg.SizeY, cfg.SizeZ, cfg.SizeW) * 0.001,
                    Vector4(cfg.Dense, cfg.RandomSize, cfg.Roughness, cfg.Independence) * 0.001,
                    Vector4(cfg.RGBA1, cfg.RGBA2, cfg.RGBA3, cfg.RGBA4), mask)
        else
            self.makeup:DisableSparkle(makeupType)
        end
    end
end

function FaceCharacterHelper:SetSkin(id)
    if BllMgr.GetFaceEditBLL():GetMode() ~= FaceEditConst.Mode.None then
        self:SetTextureAndColor(self.partType.Skin, self.makeupType.Skin, "FaceSkin", "StyleSourceName", "Color", id)
        self:SetTextureAndColor(self.partType.Skin, self.makeupType.SkinSGTex, "FaceSkin", "StyleSourceNameR", nil, id)
        local cfg = LuaCfgMgr.Get("FaceSkin", id)
        if cfg and cfg["BlackColor"] and not string.isnilorwhitespace(cfg["BlackColor"]) then
            self.makeup:MakeUp(self.makeupType.MultiplyColor, Color.HexToRGBA(cfg["BlackColor"]))
        end
    end
    
    self:SetTextureAndColor(self.partType.Skin, self.makeupType.Body_LD, "FaceSkin", "StyleSourceLD", "Color", id)
    self:SetTextureAndColor(self.partType.Skin, self.makeupType.Body, "FaceSkin", "StyleSourceNameBody", "Color", id)
    self:SetTextureAndColor(self.partType.Skin, self.makeupType.Hand, "FaceSkin", "StyleSourceNameArm", "Color", id)

    self:SetTextureAndColor(self.partType.Skin, self.makeupType.BodySGTex, "FaceSkin", "StyleSourceNameBodyR", nil, id)
    self:SetTextureAndColor(self.partType.Skin, self.makeupType.HandSGTex, "FaceSkin", "StyleSourceNameArmR", nil, id)
    self:SetTextureAndColor(self.partType.Skin, self.makeupType.EyeShell, "FaceSkin", "StyleSourceNameEyeR", nil, id)
end

function FaceCharacterHelper:SetEyebrow(id)
    self:SetTextureAndColor(self.partType.Eyebrow, self.makeupType.Eyebrow, "FaceEyebrow", "Source", "Color", id)
end

function FaceCharacterHelper:SetEyebrowDensity(density)
    self.makeup:MakeUp(self.makeupType.Eyebrow, density)
end

function FaceCharacterHelper:SetLip(id)
    if not self.skipMakeupDetail then
        self:SetTextureAndColor(self.partType.Lip, self.makeupType.Lip, "FaceLip", "Source", "Color", id, "Sparkle")
    end
    local cfg = LuaCfgMgr.Get("FaceLip", id)
    if cfg then
        self:SetSparkle(cfg.Sparkle, self.makeupType.Lip)
    end
end

function FaceCharacterHelper:SetLipDensity(density)
    self.makeup:MakeUp(self.makeupType.Lip, density)
end

function FaceCharacterHelper:SetLipGloss(id)
    ---@type cfg.FaceLipGloss
    local gloss = LuaCfgMgr.Get("FaceLipGloss", id)
    if gloss == nil then
        Debug.LogErrorWithTag(GameConst.LogTag.FaceEdit, "[Face]Invalid lipGlossId", id)
    end
    self.makeup:MakeUp(self.makeupType.Lip, gloss.Roughness, gloss.Highlight)
end

function FaceCharacterHelper:SetEyeL(id)
    self:SetTextureAndColor(self.partType.Eye, self.makeupType.EYE_L, "FaceEye", "SourceLeftLD", nil, id)
    self:SetMaterial(self.partType.Eye, self.makeupType.EYE_L, "FaceEye", "SourceLeft", id)
end

function FaceCharacterHelper:SetEyeR(id)
    self:SetTextureAndColor(self.partType.Eye, self.makeupType.EYE_R, "FaceEye", "SourceRightLD", nil, id)
    self:SetMaterial(self.partType.Eye, self.makeupType.EYE_R, "FaceEye", "SourceRight", id)
end

function FaceCharacterHelper:SetEyeshadow(id)
    if not self.skipMakeupDetail then
        self:SetTextureAndColor(self.partType.Eyeshadow, self.makeupType.Eyeshadow, "FaceEyeShadow", "Source", "Color", id, "Sparkle")
    end
    local cfg = LuaCfgMgr.Get("FaceEyeShadow", id)
    if cfg then
        self:SetSparkle(cfg.Sparkle, self.makeupType.Eyeshadow)
    end
end

function FaceCharacterHelper:SetEyeshadowDensity(density)
    self.makeup:MakeUp(self.makeupType.Eyeshadow, density)
end

function FaceCharacterHelper:SetEyelash(id)
    self:SetTextureAndColor(self.partType.Eyelash, self.makeupType.Eyelash, "FaceEyelash", "TextureSource", "Color", id)
end

function FaceCharacterHelper:SetEyeliner(id)
    self:SetTextureAndColor(self.partType.Eyeliner, self.makeupType.Eyeliner, "FaceEyeLiner", "Source", "Color", id)
end

function FaceCharacterHelper:SetEyelinerDensity(density)
    self.makeup:MakeUp(self.makeupType.Eyeliner, density)
end

function FaceCharacterHelper:SetEyelid(id)
    self:SetTextureAndColor(self.partType.Eyelid, self.makeupType.Eyelid, "FaceEyelid", "Source", nil, id)
end

function FaceCharacterHelper:SetEyelinerColor(hexColor)
    local color = Color.HexToRGBA(hexColor)
    self.makeup:MakeUp(self.makeupType.Eyeliner, color)
end

function FaceCharacterHelper:SetBlusher(id)
    self:SetTextureAndColor(self.partType.Blusher, self.makeupType.Blusher, "FaceBlush", "Source", "Color", id)
end

function FaceCharacterHelper:SetBlusherDensity(density)
    self.makeup:MakeUp(self.makeupType.Blusher, density)
end

function FaceCharacterHelper:SetDecoration(id)
    self:SetTextureAndColor(self.partType.Decorate, self.makeupType.Decorate, "FaceDecorate", "Source", "Color", id)

    local cfg = LuaCfgMgr.Get("FaceDecorate", id)
    if cfg then
        self.makeup:SetDecorateTransform(self.makeupType.Decorate, cfg.PosX * FaceEditConst.ConfigDeflateFactor, cfg.PosY * FaceEditConst.ConfigDeflateFactor, cfg.Scale)
    end
end

function FaceCharacterHelper:SetDecorationDensity(density)
    self.makeup:MakeUp(self.makeupType.Decorate, density)
end

function FaceCharacterHelper:SetHairStyle(hairId)
    -- 判断脸部件
    if (self.roleBaseKey == "PL_NH" and not self.isNoHeadWithShadow) or
            (not self:HasPartType(FaceEditConst.PartConfigType.Face)) then
        return
    end

    if self.isTieHair then
        return
    end

    local defaultHair = 101
    if self.tryOnHairCfgId and self.tryOnHairCfgId ~= defaultHair and hairId == defaultHair then
        return
    end

    if self.faceChangeType and self.faceChangeType >= Define.FaceChangeType.ReplaceHair then
        hairId = self.faceHair --套装发型
    end

    if hairId then
        ---@type cfg.FaceHair
        local cfg = LuaCfgMgr.Get("FaceHair", hairId)
        if cfg and cfg.StyleSourceID then
            CharacterMgr.ReplacePart(self.characterObj, cfg.StyleSourceID, true)
        end
    end
end

function FaceCharacterHelper:SetHairGradientEnable(value)
    local enabled = value and value == 1 and true or false
    self.makeup:SetGradientEnable(enabled)
end

function FaceCharacterHelper:SetHairGradient2Enable(value)
    local enabled = value and value == 1 and true or false
    self.makeup:SetGradient2Enable(enabled)
end

function FaceCharacterHelper:SetHairHighLightEnable(value)
    local enabled = value and value == 1 and true or false
    self.makeup:SetHairHighLightEnable(enabled)
end


function FaceCharacterHelper:SetHairGradientDis(distance)
    self.makeup:SetHairColorDistance(1 - distance)
end

function FaceCharacterHelper:SetHairColor(colorType, color)
    self.makeup:MakeUp(self.makeupType.Hair, color, colorType)
end

---return table<string, number>
function FaceCharacterHelper:GetBoneDetailValue()
    if self.faceMorph then
        return self.faceMorph:GetBoneDetailValue()
    end
end

function FaceCharacterHelper:GetStyleBoneWeight(boneName)
    if self.faceMorph then
        return self.faceMorph:GetStyleBoneWeight(boneName)
    end
end

function FaceCharacterHelper:SetBoneDetailValues(bonesList)
    if self.faceMorph then
        self.faceMorph:SetDetailWeights(bonesList)
    end
end

function FaceCharacterHelper:ForceUpdateMorph()
    if self.faceMorph then
        self.faceMorph:LateUpdate()
    end
end

---@return Texture2D[]
function FaceCharacterHelper:BakeFace()
    if self.makeup then
        return self.makeup:BakeFace()
    end
end

function FaceCharacterHelper:ApplyMergedMakeUp(tex1, tex2)
    if self.makeup then
        return self.makeup:ApplyMergedMakeUp(tex1, tex2)
    end
end

function FaceCharacterHelper:SetPartSelectParam(breathTime, spreadSpeed, shinningTime)
    if self.faceMorph then
        return self.faceMorph:SetPartSelectParam(breathTime, spreadSpeed, shinningTime)
    end
end

function FaceCharacterHelper:SelectMakeupPart(partId, selectedUVx, selectedUVy)
    if self.faceMorph then
        return self.faceMorph:SelectMakeupPart(partId, selectedUVx, selectedUVy)
    end
end

function FaceCharacterHelper:SetPlayerVoice(subKey, value)
    if BllMgr.GetFaceEditBLL():GetMode() == FaceEditConst.Mode.First then
        BllMgr.GetFaceBLL():SetPlayerVoice(subKey, value, true)
    end
end

return FaceCharacterHelper