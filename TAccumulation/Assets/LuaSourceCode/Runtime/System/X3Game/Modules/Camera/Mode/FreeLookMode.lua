---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/4/27 11:37
---

local Vector2 = CS.UnityEngine.Vector2
local Time = CS.UnityEngine.Time

---拖拽参数
---@class DragParameter
---@field Damp number 阻尼
---@field MaxDeltaX number 横向最大值
---@field MaxDeltaY number 纵向最大值
---@field PowDeltaX number 横向值取幂
---@field PowDeltaY number 纵向值取幂
---@field FactorDeltaX number 横向值加值
---@field FactorDeltaY number 横向值加值
---@field RatioDeltaXY number 横纵向值比例

---@class FreeLookMode:CameraModeBase
---@field virtualCamera FreeLookCamera
local FreeLookMode = class("FreeLookMode", require("Runtime.System.X3Game.Modules.Camera.Base.CameraModeBase"))
FreeLookMode.CameraClassType = CameraClassType.FreeLook

---@param dragParameter DragParameter
function FreeLookMode:OnAwake(dragParameter)
    self._dragParameter = dragParameter
    EventMgr.AddListener(CameraEvent.Follow, self._SetFollow, self)
    EventMgr.AddListener(CameraEvent.DragDelta, self._SetDragDelta, self)
    EventMgr.AddListener(CameraEvent.FOV, self._SetFOV, self)
    EventMgr.AddListener(CameraEvent.DistanceFactor, self._SetDistanceFactor, self)
end

function FreeLookMode:OnDestroy()
    EventMgr.RemoveListenerByTarget(self)
end

---@param fov number
function FreeLookMode:_SetFOV(fov)
    if not fov then
        return
    end
    self.virtualCamera:SetFov(fov)
end

---@param isSmooth boolean
---@param tgt Role
function FreeLookMode:_SetFollow(isSmooth, tgt)
    self._followTgt = tgt
    self.virtualCamera:SetFollow(tgt, isSmooth)
    self.virtualCamera:SetLookAt(tgt, isSmooth)
end

---@param factor number
function FreeLookMode:_SetDistanceFactor(factor)
    if factor and self.virtualCamera.SetCameraDistanceFactor then
        self.virtualCamera:SetCameraDistanceFactor(factor)
    end
end

---@param delta UnityEngine.Vector2
---@param isDrag boolean
function FreeLookMode:_SetDragDelta(delta, isDrag)
    if not self._dragParameter then
        return
    end
    self._dragDampCoroutine = self:_StopCoroutine(self._dragDampCoroutine)
    if delta ~= Vector2.zero_readonly and not isDrag then
        self._dragDampCoroutine = self:_StartCoroutine(self._DragEndDamp, self, delta)
    else
        self.virtualCamera:SetAxisInputValue(self:_HandleDragDelta(delta))
    end
end

---@param delta UnityEngine.Vector2
function FreeLookMode:_DragEndDamp(delta)
    while Vector2.SqrMagnitude(delta) > 0.1
    do
        delta = Vector2.Lerp(delta, Vector2.zero_readonly, Time.smoothDeltaTime * self._dragParameter.EndDamp);
        self.virtualCamera:SetAxisInputValue(self:_HandleDragDelta(delta))
        coroutine.yield(nil)
    end
    self.virtualCamera:SetAxisInputValue(Vector2.zero)
end

function FreeLookMode:_HandleDragDelta(delta)
    local result = delta
    if delta.x ~= 0 then
        delta.x = delta.x > self._dragParameter.MaxDeltaX and self._dragParameter.MaxDeltaX or delta.x
        delta.x = delta.x < -self._dragParameter.MaxDeltaX and -self._dragParameter.MaxDeltaX or delta.x
        self.__temp = delta.x > 0 and 1 or -1
        result.x = self.__temp * Mathf.Pow(self.__temp * delta.x, self._dragParameter.PowDeltaX) * self._dragParameter.FactorDeltaX
    end
    if delta.y ~= 0 then
        delta.y = delta.y > self._dragParameter.MaxDeltaY and self._dragParameter.MaxDeltaY or delta.y
        delta.y = delta.y < -self._dragParameter.MaxDeltaY and -self._dragParameter.MaxDeltaY or delta.y
        self.__temp = delta.y > 0 and 1 or -1
        result.y = self.__temp * Mathf.Pow(self.__temp * delta.y, self._dragParameter.PowDeltaY) * self._dragParameter.FactorDeltaY
    end
    return result
end

return FreeLookMode