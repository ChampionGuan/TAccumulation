---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/4/8 11:14
---

local X3Res = CS.PapeGames.X3.Res
local WaitForSeconds = CS.UnityEngine.WaitForSeconds
local CinemachineImpulseSource = CS.Cinemachine.CinemachineImpulseSource

---@class CameraShake:CameraEffectBase
---@field _currName string
---@field _currPriority number
local CameraShake = class("CameraShake", require("Runtime.System.X3Game.Modules.Camera.Base.CameraEffectBase"))

function CameraShake:OnAwake()
    self._impulseSource = GameObjectUtil.EnsureCSComponent(self.virtualCamera:GetRoot(), typeof(CinemachineImpulseSource))
    self._impulseNoises = {}
    self._currPriority = -1
end

function CameraShake:OnDestroy()
    self:Stop(self._currName)
end

---@param name string
---@param priority number
---@param amplitudeGain number 振幅
---@param frequencyGain number 振频
---@param attackTime number 渐入时间
---@param sustainTime number 保持时间
---@param decayTime number 衰减时间
function CameraShake:Play(name, priority, amplitudeGain, frequencyGain, attackTime, sustainTime, decayTime)
    if string.isnilorempty(name) or priority < self._currPriority then
        return
    end

    local noise = self._impulseNoises[name]
    if not noise then
        noise = X3Res.Load(CameraResPath .. name .. ".asset", X3Res.AutoReleaseMode.Scene)
        self._impulseNoises[name] = noise
    end

    self._currName = name
    self._currPriority = priority

    local impulseDefine = self._impulseSource.m_ImpulseDefinition
    impulseDefine.m_RawSignal = noise
    impulseDefine.m_AmplitudeGain = amplitudeGain
    impulseDefine.m_FrequencyGain = frequencyGain
    local timeEnvelope = impulseDefine.m_TimeEnvelope
    timeEnvelope.m_AttackTime = attackTime
    timeEnvelope.m_SustainTime = sustainTime
    timeEnvelope.m_DecayTime = decayTime
    impulseDefine.m_TimeEnvelope = timeEnvelope
    self._impulseSource.m_ImpulseDefinition = impulseDefine

    self._shakeCoroutine = self:_StopCoroutine(self._shakeCoroutine)
    self._impulseSource.enabled = true
    self._impulseSource:GenerateImpulse(GlobalCameraMgr.GetCameraForward())
    self._shakeCoroutine = self:_StartCoroutine(self._CheckComplete, self, attackTime + sustainTime + decayTime, name)
end

function CameraShake:Stop(name)
    if name ~= self._currName then
        return
    end
    self._currName = nil
    self._currPriority = -1
    self._impulseSource.enabled = false
end

function CameraShake:_CheckComplete(time, name)
    coroutine.yield(WaitForSeconds(time))
    self:Stop(name)
end

return CameraShake