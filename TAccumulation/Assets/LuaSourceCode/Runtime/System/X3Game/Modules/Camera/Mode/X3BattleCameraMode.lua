---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/6/23 16:54
---

local HideFlags = CS.UnityEngine.HideFlags
local GameObject = CS.UnityEngine.GameObject
local X3FreeCamera = CS.Cinemachine.X3FreeLookCamera
local X3TargetCamera = CS.Cinemachine.X3TargetLookCamera

---镜头目标
---@class CameraTarget
---@field _master Role
---@field _virCam VirtualCameraBase
---@field _length number
---@field _yCache number[]
---@field _yThreshold number
---@field _dummy UnityEngine.Transform
---@field _targetAssist UnityEngine.Transform
local CameraTarget = class("CameraTarget")
---@param length number
---@param parent UnityEngine.Transform
function CameraTarget:ctor(length, parent)
    self._length = length or 8
    self._targetAssist = GameObject("_targetAssist").transform
    self._targetAssist.parent = parent
    self._targetAssist.gameObject.hideFlags = HideFlags.HideInHierarchy
    self:ResetArray()
end

function CameraTarget:OnDestroy()
    if GameObjectUtil.IsNull(self._targetAssist) then
        return
    end
    GameObject.Destroy(self._targetAssist.GameObject)
    self._master = nil
    self._dummy = nil
    self._targetAssist = nil
    self._virCam = nil
end

function CameraTarget:ResetArray()
    self._index = 1
    self._yCache = {}
end

---@param master Role
function CameraTarget:SetMaster(master)
    self._master = master
    self._dummy = master.view:GetDummy(BattleActorDummyType.Camera)
    self._yThreshold = (master.config.DummyCamMargin or 50) * 0.01
    self:ResetArray()
end

---@return UnityEngine.Transform
function CameraTarget:GetTarget()
    return self._targetAssist
end

function CameraTarget:Tick()
    if not self._dummy then
        return
    end
    if not self._tempV3 then
        self._tempV3 = Vector3.zero
    end

    self._tempV3.x, self._tempV3.y, self._tempV3.z = GameObjectUtil.GetPositionXYZ(self._dummy)
    if self._tempV3.y <= self._yThreshold then
        self._tempV3.y = self._yThreshold
    end
    self._yCache[self._index] = self._tempV3.y

    self._index = self._index + 1
    if self._index > self._length then
        self._index = 0
    end

    local value = 0
    for _, v in ipairs(self._yCache) do
        value = value + v
    end
    self._tempV3.y = value / #self._yCache

    GameObjectUtil.SetPosition(self._targetAssist, self._tempV3)
end

---@class X3BattleCameraMode:TargetLookMode
local X3BattleCameraMode = class("X3BattleCameraMode", require("Runtime.System.X3Game.Modules.Camera.Base.CameraModeBase"))
X3BattleCameraMode.CameraClassType = CameraClassType.Virtual

---@param verticalFOV boolean
---@param cameraFOV number
---@param cameraDistanceFactor number
---@param cameraDragFactor number
function X3BattleCameraMode:OnAwake(verticalFOV, cameraFOV, cameraDistanceFactor, cameraDragFactor)
    EventMgr.AddListener(CameraEvent.FOV, self._SetFOV, self)
    EventMgr.AddListener(CameraEvent.Follow, self._SetFollow, self)
    EventMgr.AddListener(CameraEvent.LookAt, self._SetLookAt, self)
    EventMgr.AddListener(CameraEvent.DragDelta, self._SetDragDelta, self)
    EventMgr.AddListener(CameraEvent.DistanceFactor, self._SetDistanceFactor, self)
    EventMgr.AddListener(CameraEvent.SmoothTransition, self._SetSmooth, self)
    EventMgr.AddListener(CameraEvent.Active, self._SetActive, self)

    self._x3FreeCamera = GameObjectUtil.EnsureCSComponent(self.virtualCamera:GetRoot(), typeof(X3FreeCamera))
    self._x3TargetCamera = GameObjectUtil.EnsureCSComponent(self.virtualCamera:GetRoot(), typeof(X3TargetCamera))

    self._x3FreeCamera.m_axisCtrl.m_axisFactor = cameraDragFactor or 1
    self._x3FreeCamera.m_verticalFov = verticalFOV or false
    self._x3TargetCamera.m_verticalFov = verticalFOV or false

    self._followCameraTgt = CameraTarget.new(8, GlobalCameraMgr.GetRoot().transform)
    self._lookAtCameraTgt = CameraTarget.new(8, GlobalCameraMgr.GetRoot().transform)
    self.virtualCamera:SetFollow(self._followCameraTgt:GetTarget())
    self.virtualCamera:SetLookAt(self._lookAtCameraTgt:GetTarget())

    self._x3FreeCamera:SetTransform(GlobalCameraMgr.GetCameraPosition(), GlobalCameraMgr.GetCameraEulerAngles())
    ---增加抖动接收组件
    self.virtualCamera:AddCineMachineExtension(CameraExtensionType.ImpulseListener)
    ---镜头距离
    self:_SetDistanceFactor(cameraDistanceFactor)
    ---镜头fov
    self:_SetFOV(cameraFOV)
    ---update
    self._coroutineUpdate = self:_StartCoroutine(self._OnUpdate, self)
end

function X3BattleCameraMode:OnEnter()
    self._x3FreeCamera:SetTransform(GlobalCameraMgr.GetCameraPosition(), GlobalCameraMgr.GetCameraEulerAngles())
end

function X3BattleCameraMode:OnDestroy()
    EventMgr.RemoveListenerByTarget(self)
    self._followCameraTgt:OnDestroy()
    self._lookAtCameraTgt:OnDestroy()
    self._followCameraTgt = nil
    self._lookAtCameraTgt = nil
    self:_StopCoroutine(self._coroutineUpdate)
    self._followTgt = nil
    self._lookAtTgt = nil
end

---@return BattleCameraType
function X3BattleCameraMode:GetCameraType()
    return self._curCameraType
end

---@param type BattleCameraType
function X3BattleCameraMode:SetCameraType(type, isSmooth)
    self._curCameraType = type
    if type == BattleCameraType.FreeLook then
        self._x3FreeCamera:SetLive()
    elseif type == BattleCameraType.TargetLook then
        self._x3TargetCamera:SetLive()
    end
    self:_SetSmooth(isSmooth)
end

---@param fov number
function X3BattleCameraMode:_SetFOV(fov)
    if not fov or fov <= 0 then
        return
    end
    self._x3FreeCamera.m_fov = fov
    self._x3TargetCamera.m_fov = fov
end

---@param isSmooth boolean
---@param tgt Role
function X3BattleCameraMode:_SetFollow(isSmooth, tgt)
    if tgt then
        self._followCameraTgt:SetMaster(tgt)
    end
    self._followTgt = tgt
    self:_SetSmooth(isSmooth)
    self._followCameraTgt:Tick()
end

---@param isSmooth boolean
---@param tgt Role
function X3BattleCameraMode:_SetLookAt(isSmooth, tgt)
    if tgt then
        self._lookAtCameraTgt:SetMaster(tgt)
    end
    self._lookAtTgt = tgt
    self:_SetSmooth(isSmooth)
    self._lookAtCameraTgt:Tick()
end

function X3BattleCameraMode:_SetActive(active)
    if active then
        self.virtualCamera:SetEnable()
    else
        self.virtualCamera:SetDisable()
    end
end

function X3BattleCameraMode:_SetSmooth(isSmooth)
    isSmooth = isSmooth or false
    if self._curCameraType == BattleCameraType.FreeLook then
        self._x3FreeCamera:SetSmooth(isSmooth)
    elseif self._curCameraType == BattleCameraType.TargetLook then
        self._x3TargetCamera:SetSmooth(isSmooth)
    end
end

---@param factor number
function X3BattleCameraMode:_SetDistanceFactor(factor)
    if not factor then
        return
    end
    self._x3FreeCamera.m_linePCFactor = factor
    self._x3TargetCamera.m_linePCFactor = factor
end

---@param delta UnityEngine.Vector2
---@param isDrag boolean
function X3BattleCameraMode:_SetDragDelta(delta, isDrag)
    if self._curCameraType ~= BattleCameraType.FreeLook then
        return
    end
    self._x3FreeCamera:AxisInput(delta, not isDrag)
end

function X3BattleCameraMode:_OnUpdate()
    while true do
        if self._followTgt then
            self._followCameraTgt:Tick()
        end
        if self._lookAtTgt then
            self._lookAtCameraTgt:Tick()
        end
        coroutine.yield(nil)
    end
end

return X3BattleCameraMode