---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by afan002.
--- DateTime: 2023/11/22 11:15
---

---@class FreeViewpointMode:CameraModeBase
---@field virtualCamera MixingCamera
local FreeViewpointMode = class("FreeViewpointMode", require("Runtime.System.X3Game.Modules.Camera.Base.CameraModeBase"))
FreeViewpointMode.CameraClassType = CameraClassType.Mixing

local updateTime = 0.03

--region 生命周期

---@param params X3Game.FreeViewpointAction 摄像机参数
function FreeViewpointMode:OnAwake(params)
    self.params = params

    ---@type Vector2
    self.curWeight = Vector2.new(0, 0)
    ---@type Vector2
    self.targetWeight = Vector2.new(0, 0)
    ---@type Vector2
    self.resultWeight = Vector2.new(0, 0)
    ---@type Vector2
    self.deltaPos = Vector2.new(0, 0)
    ---@type Vector2
    self.speed = Vector2.new(0, 0)
    ---@type Vector2
    self.startPoint = Vector2.new(0, 0)
    ---@type Vector2
    self.endPoint = Vector2.new(0, 0)
end

function FreeViewpointMode:OnEnter()
    self:ResetCameraPos()
end

function FreeViewpointMode:OnUpdate()
    if self.inDrag then
        self:_MoveCamera()
    end
    self:_CheckFinish()
end

function FreeViewpointMode:OnExit()
    self:SetDragActive(false)

    TimerMgr.DiscardTimerByTarget(self)
end

function FreeViewpointMode:OnDestroy()
    Vector2.Release(self.curWeight)
    Vector2.Release(self.targetWeight)
    Vector2.Release(self.resultWeight)
    Vector2.Release(self.deltaPos)
    Vector2.Release(self.speed)
    Vector2.Release(self.startPoint)
    Vector2.Release(self.endPoint)
end

--endregion

--region 拖拽func

---开始拖拽回调
function FreeViewpointMode:OnBeginDrag()
    self.inDrag = true
end

---拖拽回调
---@param pos Vector2 拖转起始坐标
---@param deltaPos Vector2 拖转偏移向量
---@param gesture _Gesture 手势
function FreeViewpointMode:OnDrag(pos, deltaPos, gesture)
    self.deltaPos:Set(deltaPos.x, deltaPos.y)

    self:_ColTargetPos(self.deltaPos)
end

---结束拖拽回调
function FreeViewpointMode:OnEndDrag()
    self.inDrag = false

    self:_ResetDragParams()
    self.targetWeight:Set(self.curWeight.x, self.curWeight.y)
    self.resultWeight:Set(self.curWeight.x, self.curWeight.y)
end

--endregion

--region 内部函数

---重置拖拽参数
function FreeViewpointMode:_ResetDragParams()
    self.deltaPos:Set(0, 0)
    self.speed:Set(0, 0)
end

---重置相机参数
function FreeViewpointMode:_ResetCameraParams()
    self:ClearEnterFinishRangeFunc()
    self:ClearExitFinishRangeFunc()
    self:ClearFinishFunc()

    self.finishTime = 0
    self.inFinishRange = false
    self.isFinish = false
end

---计算速度
---@param deltaPos float 拖拽偏移值
function FreeViewpointMode:_ColTargetPos(deltaPos)
    if deltaPos.x == 0 and deltaPos.y == 0 then
        return
    end

    local curX = self.curWeight.x
    local curY = self.curWeight.y
    local absCurX = math.abs(curX)
    local absCurY = math.abs(curY)
    local absXY = absCurX + absCurY

    --region 位移计算 各向合并计算最大速度

    -- 是否处于减速区域
    local accX = deltaPos.x * self.params.AccRateX
    local accY = deltaPos.y * self.params.AccRateY
    local maxSpeed = self.params.MaxSpeed

    local inDecRange = absXY >= self.params.DecBD
    local needDec = inDecRange and Vector2.Dot(self.curWeight, deltaPos) > 0
    if needDec then
        accX = self.params.DecRate * accX
        accY = self.params.DecRate * accY
        maxSpeed = self.params.DecRate * maxSpeed
    end

    if self.params.UseAcc then
        self.speed:Set(self.speed.x + accX, self.speed.y + accY)
    else
        self.speed:Set(accX, accY)
    end

    local k = maxSpeed / self.speed.magnitude
    if k < 1 then
        self.speed:Set(self.speed.x * k, self.speed.y * k)
    end

    local isSD = Vector2.Dot(self.curWeight, deltaPos) > 0
    local outOfBD = absXY >= self.params.MaxBD
    if isSD and outOfBD then
        ---求速度映射
        local signX = self:_GetSign(self.curWeight.x)
        local signY = self:_GetSign(self.curWeight.y)
        self.startPoint:Set(0, signY * self.params.MaxBD)
        self.endPoint:Set(signX * self.params.MaxBD, 0)
        local speed = self:GetMappingVector(self.speed, self.startPoint, self.endPoint)
        self.speed:Set(speed.x, speed.y)
    end

    local offsetX = self.speed.x * 1
    local offsetY = self.speed.y * 1

    --endregion

    local resultX
    local resultY
    local targetX = curX + offsetX
    local targetY = curY + offsetY
    outOfBD = math.abs(targetX) + math.abs(targetY) >= self.params.MaxBD
    if outOfBD then
        -- targetSignX 和 targetSignY 不可能同时为0
        -- targetSignX * x + targetSignY * y = self.params.MaxBD
        -- offsetY * x - offsetX * y + offsetX * curY - offsetY * curX = 0
        local targetSignX = self:_GetSign(targetX)
        local targetSignY = self:_GetSign(targetY)
        if targetSignX == 0 then
            resultX = 0
            resultY = targetSignY
        elseif targetSignY == 0 then
            resultX = targetSignX
            resultY = 0
        else
            if offsetX == 0 then
                resultX = curX
                resultY = (self.params.MaxBD - targetSignX * curX) / targetSignY
            elseif offsetY == 0 then
                resultX = (self.params.MaxBD - targetSignY * curY) / targetSignX
                resultY = curY
            else
                -- 位移方向为边缘相同方向
                if offsetX * targetSignX + offsetY * targetSignY == 0 then
                    resultX = targetX
                    resultY = targetY
                else
                    resultX = (offsetX / targetSignY + offsetY * curX - offsetX * curY) / (offsetY + offsetX * targetSignX / targetSignY)
                    resultY = (self.params.MaxBD - targetSignX * resultX) / targetSignY
                end
            end
        end
    else
        resultX = targetX
        resultY = targetY
    end

    self.targetWeight:Set(targetX, targetY)
    self.resultWeight:Set(resultX, resultY)
end

function FreeViewpointMode:GetMappingVector(vec, startPoint, endPoint)
    local dir = endPoint - startPoint
    local dot = Vector2.Dot(dir, vec)
    local sqr = Vector2.SqrMagnitude(dir)
    return (dot / sqr) * dir
end

---摄像机移动
function FreeViewpointMode:_MoveCamera()
    local curX = self.curWeight.x
    local curY = self.curWeight.y
    local resultX = self.resultWeight.x
    local resultY = self.resultWeight.y

    if curY == resultX and curY == resultY then
        return
    end

    local targetX = self.targetWeight.x
    local targetY = self.targetWeight.y

    local weightX
    local weightY

    if self.params.NeedLerp then
        local lerpValue
        if self.params.LerpRate then
            lerpValue = updateTime * self.params.LerpRate
        else
            lerpValue = updateTime
        end

        weightX = Mathf.Lerp(curX, targetX, lerpValue)
        local offsetX = weightX - curX
        local offsetRX = resultX - curX
        if math.abs(offsetX) > math.abs(offsetRX) then
            weightX = resultX
        end

        weightY = Mathf.Lerp(curY, targetY, lerpValue)
        local offsetY = weightY - curY
        local offsetRY = resultY - curY
        if math.abs(offsetY) > math.abs(offsetRY) then
            weightY = resultY
        end
    else
        weightX = resultX
        weightY = resultY
    end

    self.curWeight:Set(weightX, weightY)

    local df = self.params.MaxBD - math.abs(weightX) - math.abs(weightY)
    df = df < 0 and 0 or df

    self.virtualCamera._cineMachineVirtualCamera:SetWeight(0, df)

    if weightX >= 0 then
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(4, weightX)
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(3, 0)
    else
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(4, 0)
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(3, - weightX)
    end

    if weightY >= 0 then
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(1, weightY)
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(2, 0)
    else
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(1, 0)
        self.virtualCamera._cineMachineVirtualCamera:SetWeight(2, - weightY)
    end
end

function FreeViewpointMode:_CheckFinish()
    local finishType = self.params.FinishType
    local bdWeight = self.params.FinishWeight

    local curX = self.curWeight.x
    local curY = self.curWeight.y

    local inFinishRange = false
    if finishType == 1 then -- 上
        inFinishRange = curY >= 0 and math.abs(curY) > bdWeight
    elseif finishType == 2 then -- 下
        inFinishRange = curY <= 0 and math.abs(curY) > bdWeight
    elseif finishType == 3 then -- 左
        inFinishRange = curX <= 0 and math.abs(curX) > bdWeight
    elseif finishType == 4 then -- 右
        inFinishRange = curX >= 0 and math.abs(curX) > bdWeight
    end

    if self.inFinishRange ~= inFinishRange then
        self.inFinishRange = inFinishRange

        if self.inFinishRange then
            if self.enterFinishRangeFunc then
                self.enterFinishRangeFunc(self.enterFinishRangeFuncTarget)
            end
        else
            if self.exitFinishRangeFunc then
                self.exitFinishRangeFunc(self.exitFinishRangeFuncTarget)
            end
            self.finishTime = 0
        end
    end

    if not self.isFinish and self.inFinishRange and self.params.FinishTime then
        self.finishTime = self.finishTime + updateTime
        if self.finishTime >= self.params.FinishTime then
            self.isFinish = true
            if self.finishFunc then
                self.finishFunc(self.finishFuncTarget)
            end
        end
    end
end

---获取数值正负号
---@param num float 值
---@return int 正负号
function FreeViewpointMode:_GetSign(num)
    if num > 0 then
        return 1
    elseif num < 0 then
        return -1
    else
        return 0
    end
end

--endregion

--region 外调

---重置摄像机位置
function FreeViewpointMode:ResetCameraPos()
    self.curWeight:Set(0, 0)
    self.targetWeight:Set(0, 0)
    self.resultWeight:Set(0, 0)

    self.virtualCamera._cineMachineVirtualCamera:SetWeight(0, 1)
    self.virtualCamera._cineMachineVirtualCamera:SetWeight(1, 0)
    self.virtualCamera._cineMachineVirtualCamera:SetWeight(2, 0)
    self.virtualCamera._cineMachineVirtualCamera:SetWeight(3, 0)
    self.virtualCamera._cineMachineVirtualCamera:SetWeight(4, 0)
end

---@param dragObj GameObject 拖拽检测碰撞体
function FreeViewpointMode:SetDragActive(active, dragObj)
    self.dragActive = active
    if active then
        self:_ResetDragParams()
        self:_ResetCameraParams()

        self.inputComponent = GameObjClickUtil.Get(dragObj)
        self.inputComponent:SetCtrlType(GameObjClickUtil.CtrlType.DRAG)
        self.inputComponent:SetClickType(GameObjClickUtil.ClickType.POS)
        self.inputComponent:SetDelegate(self)
        self.inputComponent:SetTouchEnable(true)
        self.inputComponent:SetMoveThresholdDis(self.params.MoveThresholdDis)

        self.timerID = TimerMgr.AddTimer(updateTime, self.OnUpdate, self, true)
    else
        if self.timerID then
            TimerMgr.Discard(self.timerID)
            self.timerID = nil
        end

        self:_ResetDragParams()
        self:_ResetCameraParams()

        if self.inputComponent then
            self.inputComponent:SetDelegate(nil)
            self.inputComponent:SetTouchEnable(false)
        end
    end
end

---@param enterFinishRangeFunc function 进入完成区域回调
function FreeViewpointMode:SetEnterFinishRangeFunc(enterFinishRangeFunc, target)
    self.enterFinishRangeFunc = enterFinishRangeFunc
    self.enterFinishRangeFuncTarget = target
end

function FreeViewpointMode:ClearEnterFinishRangeFunc()
    self.enterFinishRangeFunc = nil
    self.enterFinishRangeFuncTarget = nil
end

---@param exitFinishRangeFunc function 离开完成区域回调
function FreeViewpointMode:SetExitFinishRangeFunc(exitFinishRangeFunc, target)
    self.exitFinishRangeFunc = exitFinishRangeFunc
    self.exitFinishRangeFuncTarget = target
end

function FreeViewpointMode:ClearExitFinishRangeFunc()
    self.exitFinishRangeFunc = nil
    self.exitFinishRangeFuncTarget = nil
end

---@param finishFunc function 完成回调
---@param target table
function FreeViewpointMode:SetFinishFunc(finishFunc, target)
    self.finishFunc = finishFunc
    self.finishFuncTarget = target
end

function FreeViewpointMode:ClearFinishFunc()
    self.finishFunc = nil
    self.finishFuncTarget = nil
end

--endregion

return FreeViewpointMode