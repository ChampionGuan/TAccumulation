---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/4/12 15:20
---

local PathUtility = CS.PathUtility
local X3Res = CS.PapeGames.X3.Res
local UObj = CS.UnityEngine.Object
local Animator = CS.UnityEngine.Animator
local PlayableAnimator = CS.X3.PlayableAnimator.PlayableAnimator
local GameObject = CS.UnityEngine.GameObject
local PostProcessVolume = CS.PapeGames.Rendering.PostProcessVolume
local CineMachineCoreStage = CS.Cinemachine.CinemachineCore.Stage
local StandbyUpdateMode = CS.Cinemachine.CinemachineVirtualCameraBase.StandbyUpdateMode

local EffectClass = {
    [CameraEffectType.Shake] = require("Runtime.System.X3Game.Modules.Camera.Effect.CameraShake"),
    [CameraEffectType.PostProcess] = require("Runtime.System.X3Game.Modules.Camera.Effect.CameraPostProcess"),
    [CameraEffectType.FullScreenEffect] = require("Runtime.System.X3Game.Modules.Camera.Effect.CameraFullScreenEffect"),
}

local CineMachineExtensionClass = {
    [CameraExtensionType.CameraOffset] = CS.CinemachineCameraOffset,
    [CameraExtensionType.Collider] = CS.Cinemachine.CinemachineCollider,
    [CameraExtensionType.Confiner] = CS.Cinemachine.CinemachineConfiner,
    [CameraExtensionType.FollowZoom] = CS.Cinemachine.CinemachineFollowZoom,
    [CameraExtensionType.Storyboard] = CS.Cinemachine.CinemachineStoryboard,
    [CameraExtensionType.ImpulseListener] = CS.X3.Impulse.ImpulseListener,
    [CameraExtensionType.BasicMultiChannelPerlin] = CS.Cinemachine.CinemachineBasicMultiChannelPerlin
}

---@type number
local _uniqueID = 0
---@return number
local UniqueID = function()
    _uniqueID = _uniqueID + 1
    return _uniqueID
end

---虚拟相机类，
---将CinemachineVirtualCameraBase封起来，不再对外，并提供常用API接口
---@class VirtualCameraBase:CameraBase
---@field CineMachineCameraType
---@field _rootG UnityEngine.GameObject
---@field _data any
---@field _insID number
---@field _status CameraStatusType
---@field _defaultPriority CameraPriorityType
---@field _mode CameraModeBase
---@field _effects table<CameraEffectType, CameraEffectBase>
---@field _cineMachineExtensions table<CameraExtensionType, Cinemachine.CinemachineExtension>
---@field _cineMachineVirtualCamera Cinemachine.CinemachineVirtualCameraBase
---@field _postProcessVolume1 PapeGames.Rendering.PostProcessVolume
---@field _postProcessVolume2 PapeGames.Rendering.PostProcessVolume
---@field _playableAnimator X3.PlayableAnimator.PlayableAnimator
---@field _animator UnityEngine.Animator
local VirtualCameraBase = class("VirtualCameraBase", require("Runtime.System.X3Game.Modules.Camera.Base.CameraBase"))

---@param modePath string
---@param prefabInsOrFullPath UnityEngine.GameObject|string|nil 预设实例、预设完整路径，或者传空
---@param priority CameraPriorityType
function VirtualCameraBase:ctor(modePath, prefabInsOrFullPath, priority)
    self._defaultPriority = priority
    self._insID = UniqueID()
    self._rootG, self._mode, self._cineMachineVirtualCamera = self:_LoadCamera(modePath, prefabInsOrFullPath)
    self._rootT = self._rootG.transform
    self._cineMachineExtensions = {}
    self._effects = {}
    self._noiseComponent = nil
    self._noiseStopTimer = 0
    ---重命名
    self:Rename(self._insID .. "_" .. self._rootG.name)
    ---远平面值默认500，与空气确认！
    self:SetFarClipPlane(500)
end

function VirtualCameraBase:OnAwake(...)
    self._data = { ... }
    self._status = CameraStatusType.Standby
    self._rootG:SetActive(true)
    self._mode:OnAwake(...)
    self._cineMachineVirtualCamera.Priority = self._defaultPriority
end

function VirtualCameraBase:OnDestroy()
    if self._status == CameraStatusType.Live then
        self:OnExit()
    end
    self:DestroyCinemachineNoise()
    self._status = CameraStatusType.Destroyed
    for _, effect in pairs(self._effects) do
        effect:OnDestroy()
    end
    self._mode:OnDestroy()
    self._cineMachineExtensions = {}

    UObj.Destroy(self._rootG)
end

function VirtualCameraBase:OnEnter()
    self._status = CameraStatusType.Live
    self._mode:OnEnter(table.unpack(self._data))
    --Debug.LogError("onEnter: ", self._rootG.name, " InsID: ", self._rootG:GetInstanceID())
end

function VirtualCameraBase:OnExit()
    --Debug.LogError("onExit:", self._rootG.name, "InsID:", self._rootG:GetInstanceID())
    self._status = self._status == CameraStatusType.Live and CameraStatusType.Standby or self._status
    self._mode:OnExit()
end

---@return boolean
function VirtualCameraBase:IsSyncMainCameraOnActivated()
    return self._mode.SyncMainCameraOnActivated
end

---@return boolean
function VirtualCameraBase:IsSmoothOnActivated()
    return self._mode.SmoothOnActivated
end

---@return boolean
function VirtualCameraBase:IsLiving()
    return self._status == CameraStatusType.Live
end

---@return boolean
function VirtualCameraBase:IsDestroyed()
    return self._status == CameraStatusType.Destroyed
end

---@param value number
function VirtualCameraBase:SetFarClipPlane(value)

end

---@param name string
function VirtualCameraBase:Rename(name)
    self._rootG.name = name
end

---@return number
function VirtualCameraBase:GetInsID()
    return self._insID
end

---@return CameraModeBase
function VirtualCameraBase:GetMode()
    return self._mode
end

---@return UnityEngine.GameObject
function VirtualCameraBase:GetRoot()
    return self._rootG
end

---@return UnityEngine.Transform
function VirtualCameraBase:GetFollow()
    return self._cineMachineVirtualCamera.Follow
end

---@return UnityEngine.Transform
function VirtualCameraBase:GetLookAt()
    return self._cineMachineVirtualCamera.LookAt
end

---@return UnityEngine.Vector3
function VirtualCameraBase:GetPosition()
    return self._rootT.position
end

---@return UnityEngine.Vector3
function VirtualCameraBase:GetEulerAngles()
    return self._rootT.eulerAngles
end

---@return CameraStatusType
function VirtualCameraBase:GetStatus()
    return self._status
end

---@return CameraPriorityType
function VirtualCameraBase:GerPriority()
    return self._defaultPriority
end

---@return PapeGames.Rendering.PostProcessVolume
function VirtualCameraBase:GetPPV1()
    if GameObjectUtil.IsNull(self._postProcessVolume1) then
        local ppv = GameObjectUtil.EnsureCSComponent(self._rootG, typeof(PostProcessVolume))
        ppv.isGlobal = true
        ppv.priority = 7
        ppv.manualWeightForGlobal = 1
        self._postProcessVolume1 = ppv
    end
    return self._postProcessVolume1
end

---@return PapeGames.Rendering.PostProcessVolume
function VirtualCameraBase:GetPPV2()
    if GameObjectUtil.IsNull(self._postProcessVolume2) then
        local ppv = GameObjectUtil.EnsureCSComponent(self._rootG, typeof(PostProcessVolume))
        ppv.isGlobal = true
        ppv.priority = 8
        ppv.manualWeightForGlobal = 1
        self._postProcessVolume2 = ppv
    end
    return self._postProcessVolume2
end

---@return UnityEngine.Animator
function VirtualCameraBase:GetAnimator()
    if GameObjectUtil.IsNull(self._animator) then
        local animator = GameObjectUtil.EnsureCSComponent(self._rootG, typeof(Animator))
        animator.applyRootMotion = false
        self._animator = animator
    end
    return self._animator
end

---@return X3.PlayableAnimator.PlayableAnimator
function VirtualCameraBase:GetPlayableAnimator()
    if GameObjectUtil.IsNull(self._playableAnimator) then
        self._playableAnimator = GameObjectUtil.EnsureCSComponent(self._rootG, typeof(PlayableAnimator))
        self._animator = self._playableAnimator.animator
    end
    return self._playableAnimator
end

---@return Cinemachine.CinemachineComponentBase
function VirtualCameraBase:GetAim()
    return self._cineMachineVirtualCamera:GetCinemachineComponent(CineMachineCoreStage.Aim)
end

---@return Cinemachine.CinemachineComponentBase
function VirtualCameraBase:GetBody()
    return self._cineMachineVirtualCamera:GetCinemachineComponent(CineMachineCoreStage.Body)
end

---@return Cinemachine.CinemachineComponentBase
function VirtualCameraBase:GetNoise()
    return self._cineMachineVirtualCamera:GetCinemachineComponent(CineMachineCoreStage.Noise)
end

---@param extensionType CameraExtensionType
function VirtualCameraBase:AddCineMachineExtension(extensionType)
    local extensionIns = self._cineMachineExtensions[extensionType]
    if not extensionIns then
        local extensionClass = CineMachineExtensionClass[extensionType]
        if not extensionClass then
            return nil
        end
        extensionIns = GameObjectUtil.EnsureCSComponent(self._rootG, typeof(extensionClass))
        self._cineMachineExtensions[extensionType] = extensionIns
    end
    return extensionIns
end

function VirtualCameraBase:SetEnable(...)
    if self._status == CameraStatusType.Destroyed then
        return
    end
    self._rootG:SetActive(true)

    --if self._status == CameraStatusType.Live then
    --    return
    --end
    self._data = { ... }
    self._cineMachineVirtualCamera:MoveToTopOfPrioritySubqueue()
end

function VirtualCameraBase:SetDisable()
    if self._status == CameraStatusType.Destroyed then
        return
    end

    self._rootG:SetActive(false)
end

---@param priorityType CameraPriorityType
function VirtualCameraBase:SetPriority(priorityType)
    self._defaultPriority = priorityType
    self._cineMachineVirtualCamera.Priority = self._defaultPriority
end

---@param position UnityEngine.Vector3
function VirtualCameraBase:SetPosition(position)
    if not position then
        return
    end
    self._rootT.position = position
end

---@param eulerAngles UnityEngine.Vector3
function VirtualCameraBase:SetEulerAngles(eulerAngles)
    if not eulerAngles then
        return
    end
    self._rootT.eulerAngles = eulerAngles
end

---@param tgt UnityEngine.Transform
function VirtualCameraBase:SetFollow(tgt)
    self._cineMachineVirtualCamera.Follow = tgt
end

---@param tgt UnityEngine.Transform
function VirtualCameraBase:SetLookAt(tgt)
    self._cineMachineVirtualCamera.LookAt = tgt
end

---@param type CameraStandbyUpdateType
function VirtualCameraBase:SetStandbyUpdateType(type)
    self._cineMachineVirtualCamera.m_StandbyUpdate = StandbyUpdateMode.__CastFrom(type)
end

---@param type CameraEffectType
---@param name string
---@param priority number
function VirtualCameraBase:EffectPlay(type, name, priority, ...)
    local effectIns = self._effects[type]
    if not effectIns and EffectClass[type] then
        effectIns = EffectClass[type].new(self)
        if effectIns then
            effectIns:OnAwake()
        end
        self._effects[type] = effectIns
    end
    if not effectIns then
        Debug.LogError("播放镜头效果失败，请检查效果类型是否存在！%s", type)
        return
    end
    effectIns:Play(name, priority, ...)
end

---@param type CameraEffectType
---@param name string
function VirtualCameraBase:EffectStop(type, name)
    local effectIns = self._effects[type]
    if not effectIns then
        return
    end
    effectIns:Stop(name)
end

---@param modePath string
---@param prefabInsOrFullPath UnityEngine.GameObject|string|nil 预设实例、预设完整路径，或者传空
function VirtualCameraBase:_LoadCamera(modePath, prefabInsOrFullPath)
    ---@type CameraModeBase
    local mode = nil
    ---@type Cinemachine.CinemachineVirtualCameraBase
    local script = nil
    ---@type UnityEngine.GameObject
    local root = nil
    if not string.isnilorempty(modePath) then
        local ok, classType = pcall(require, modePath)
        if ok then
            mode = classType.new(self)
        end
    end
    if not mode then
        Debug.LogError("创建虚拟相机失败，请检查模式是否存在，path{%s} ！", modePath)
        return nil, nil, nil
    end
    if type(prefabInsOrFullPath) == "string" then
        local asset = X3Res.Load(prefabInsOrFullPath,CS.PapeGames.X3.Res.AutoReleaseMode.None)
        root = GameObject.Instantiate(asset)
        X3Res.AddRefObj(asset,root)
        X3Res.SubRefCount(asset,1)
        root.name = PathUtility.PathToFileName(prefabInsOrFullPath)
    else
        root = prefabInsOrFullPath
    end
    if root then
        script = root:GetComponentInChildren(typeof(self.CineMachineCameraType))
    else
        root = GameObject(mode.__cname)
        root.transform.position = GlobalCameraMgr.GetCameraPosition()
        root.transform.eulerAngles = GlobalCameraMgr.GetCameraEulerAngles()
    end
    root.transform.parent = GlobalCameraMgr.GetRoot().transform
    if not script then
        script = GameObjectUtil.EnsureCSComponent(root, typeof(self.CineMachineCameraType))
    end
    return root, mode, script
end

---开启相机呼吸
---@param assetPath string
---@param amplitude float
---@param frequency float
function VirtualCameraBase:OpenCinemachineNoise(assetPath, amplitude, frequency)
    TimerMgr.Discard(self._noiseStopTimer)
    self._noiseStopTimer = 0
    local asset = Res.LoadWithAssetPath(assetPath, AutoReleaseMode.EndOfFrame)
    if self._noiseComponent == nil then
        local noiseComponent = self:GetNoise()
        if noiseComponent == nil then
            self._noiseComponent = self._cineMachineVirtualCamera:AddCinemachineComponent(typeof(CineMachineExtensionClass[CameraExtensionType.BasicMultiChannelPerlin]))
        else
            self._noiseComponent = noiseComponent
        end
    end
    if self._noiseComponent and asset then
        Res.AddRefObj(asset, self._rootG)
        self._noiseComponent.m_NoiseProfile = asset
        self._noiseComponent.m_AmplitudeGain = amplitude
        self._noiseComponent.m_FrequencyGain = frequency
    end
end

---关闭呼吸效果
function VirtualCameraBase:CloseCinemachineNoise()
    if self._noiseStopTimer == 0 then
        if GameObjectUtil.IsNull(self._noiseComponent) == false then
            self._curAmplitude = self._noiseComponent.m_AmplitudeGain
            self._noiseStopTimer = TimerMgr.AddTimerByFrame(1, self.StopUpdate, self, true)
        end
    end
end

---需要一个缓动关闭呼吸，不然会有跳变
function VirtualCameraBase:StopUpdate()
    --TODO 速度需要配表么？
    self._curAmplitude = self._curAmplitude - 1 / 30
    if self._curAmplitude <= 0 then
        self:DestroyCinemachineNoise()
    else
        self._noiseComponent.m_AmplitudeGain = self._curAmplitude
    end
end

---销毁CinemachineNoise
function VirtualCameraBase:DestroyCinemachineNoise()
    TimerMgr.Discard(self._noiseStopTimer)
    self._noiseStopTimer = 0
    if GameObjectUtil.IsNull(self._noiseComponent) == false then
        self._noiseComponent = nil
        self._cineMachineVirtualCamera:DestroyCinemachineComponent(typeof(CineMachineExtensionClass[CameraExtensionType.BasicMultiChannelPerlin]))
    end
end

---@return Cinemachine.CinemachineVirtualCameraBase
function VirtualCameraBase:GetCinemachineVirtualCameraBase()
    return self._cineMachineVirtualCamera
end

return VirtualCameraBase