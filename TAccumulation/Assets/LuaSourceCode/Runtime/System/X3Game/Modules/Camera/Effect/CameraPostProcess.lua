---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/4/8 11:12
---

local X3Res = CS.PapeGames.X3.Res
local UnityAnimator = CS.UnityEngine.Animator

---@class CameraPostProcess:CameraEffectBase
---@field _currName string
---@field _currPriority number
local CameraPostProcess = class("CameraPostProcess", require("Runtime.System.X3Game.Modules.Camera.Base.CameraEffectBase"))

function CameraPostProcess:OnAwake()
    self._currPriority = -1
    self._ppv = self.virtualCamera:GetPPV1()
    self._animator = self.virtualCamera:GetAnimator()
    self._controller = X3Res.Load(CameraResPath .. "CameraPostProcess.controller", X3Res.AutoReleaseMode.None)
    self._animator.runtimeAnimatorController = self._controller
end

function CameraPostProcess:OnDestroy()
    self:Stop(self._currName)
    if self._controller then
        X3Res.Unload(self._controller)
        self._controller = nil
    end
end

---@param name string
---@param priority number
---@param playType CameraAnimPlayType
---@param onPlayComplete fun()
function CameraPostProcess:Play(name, priority, playType, onPlayComplete)
    if string.isnilorempty(name) or priority < self._currPriority or not self._animator:HasState(0, UnityAnimator.StringToHash(name)) then
        pcall(onPlayComplete)
        return
    end

    self._animationCoroutine = self:_StopCoroutine(self._animationCoroutine)
    self._currName = name
    self._currPriority = priority
    self._onPlayComplete = onPlayComplete
    self._ppv:DeactivateAllFeatures()
    self._animator.enabled = true
    self._animator:Play(name, 0, 0)
    self._animationCoroutine = playType == CameraAnimPlayType.None and self:_StartCoroutine(self._CheckAnimComplete, self, name) or nil
end

function CameraPostProcess:Stop(name)
    if name ~= self._currName then
        return
    end
    self._currName = nil
    self._currPriority = -1
    self._onPlayComplete = nil
    self:_StopCoroutine(self._animationCoroutine)
    self._animator.enabled = false
    self._ppv:DeactivateAllFeatures()
end

function CameraPostProcess:_CheckAnimComplete(name)
    coroutine.yield(nil)
    while self._animator:GetCurrentAnimatorStateInfo(0).normalizedTime < 1 do
        coroutine.yield(nil)
    end

    pcall(self._onPlayComplete)
    self:Stop(name)
end

return CameraPostProcess