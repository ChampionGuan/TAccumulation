---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/4/15 16:54
---

local X3Res = CS.PapeGames.X3.Res
local GameObject = CS.UnityEngine.GameObject
local UnityAnimator = CS.UnityEngine.Animator

---@class CloseupMode:CameraModeBase
local CloseupMode = class("CloseupMode", require("Runtime.System.X3Game.Modules.Camera.Base.CameraModeBase"))
CloseupMode.CameraClassType = CameraClassType.Virtual

function CloseupMode:OnAwake()
    local root = self.virtualCamera:GetRoot()
    self._closeupRoot = GameObject(root.name .. "Closeup").transform
    self._closeupRoot.parent = GlobalCameraMgr.GetRoot().transform
    root.transform.parent = self._closeupRoot

    self._animator = self.virtualCamera:GetAnimator()
    self._animator.runtimeAnimatorController = X3Res.Load(CameraResPath .. "CameraCloseup.controller", X3Res.AutoReleaseMode.Scene)
end

function CloseupMode:OnDestroy()
    self._animationCoroutine = self:_StopCoroutine(self._animationCoroutine)
end

---@param name string 特写名称
---@param playType CameraCloseupPlayType 播放方式
---@param camPos UnityEngine.Vector3 镜头位置
---@param camEulerAngles UnityEngine.Vector3 镜头欧拉角
---@param onComplete function 完成回调
function CloseupMode:OnEnter(name, playType, camPos, camEulerAngles, onComplete)
    if string.isnilorempty(name) or not self._animator:HasState(0, UnityAnimator.StringToHash(name)) then
        self.virtualCamera:SetDisable()
        pcall(onComplete)
        return
    end

    self:_SetTransitionBlendType(true, playType)
    self._animationCoroutine = self:_StopCoroutine(self._animationCoroutine)
    self._closeupRoot.position = camPos
    self._closeupRoot.eulerAngles = camEulerAngles
    self._animator:Play(name, 0, 0)
    self._animationCoroutine = self:_StartCoroutine(self._CheckAnimComplete, self, name, playType, onComplete)
end

function CloseupMode:_CheckAnimComplete(name, playType, onComplete)
    coroutine.yield(nil)
    while self._animator:GetCurrentAnimatorStateInfo(0).normalizedTime < 1 do
        coroutine.yield(nil)
    end

    self:_SetTransitionBlendType()
    if playType == CameraCloseupPlayType.CutEnter2CutExit
            or playType == CameraCloseupPlayType.CutEnter2SmoothExit
            or playType == CameraCloseupPlayType.SmoothEnter2CutExit
            or playType == CameraCloseupPlayType.SmoothEnter2SmoothExit
    then
        self.virtualCamera:SetDisable()
    end

    self._animationCoroutine = self:_StopCoroutine(self._animationCoroutine)
    pcall(onComplete)
end

function CloseupMode:_SetTransitionBlendType(isEnter, playType)
    if isEnter then
        if (playType == CameraCloseupPlayType.CutEnter2CutExit or playType == CameraCloseupPlayType.CutEnter2NoExit or playType == CameraCloseupPlayType.CutEnter2SmoothExit) then
            GlobalCameraMgr.SetDefaultBlend(CameraDefaultBlendStyle.Cut, 0)
        else
            GlobalCameraMgr.SetDefaultBlend(CameraDefaultBlendStyle.EaseOut, 0.8)
        end
    else
        if playType == CameraCloseupPlayType.CutEnter2CutExit or playType == CameraCloseupPlayType.SmoothEnter2CutExit then
            GlobalCameraMgr.SetDefaultBlend(CameraDefaultBlendStyle.Cut, 0)
        else
            GlobalCameraMgr.SetDefaultBlend(CameraDefaultBlendStyle.EaseOut, 0.8)
        end
    end
end

return CloseupMode
