---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/5/31 15:23
---
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.BaseActionPipeline:CatCard.CatCardBaseAction
local BaseActionPipeline = class("BaseActionPipeline", BaseAction)

function BaseActionPipeline:ctor()
    ---@type CatCardBLL
    self.bll = nil
    ---@type CatCard.ActionPipelineCtrl
    self.owner = nil
    ---@type CatCard.BaseActionData[]
    self.actionList = {}
    ---@type boolean 是否正在running
    self.isRunning = false
    ---@type fun(type:CatCard.BaseActionData)
    self.actionFinishCall = handler(self, self.OnActionEnd)
    ---@type CatCard.BaseDataParser
    self.dataParser = nil
    ---@type boolean
    self.isBreak = false
    ---@type CatCard.PipelineType
    self.pipelineType = CatCardConst.ActionPipelineType.Default
    ---@type fun(type:CatCard.PipelineType)
    self.finishCall = nil
    ---@type boolean
    self.isPause = false
end

---@return boolean
function BaseActionPipeline:IsPause()
    return self.isPause
end

---@param finishCall fun(type:CatCard.PipelineType)
function BaseActionPipeline:SetFinishCall(finishCall)
    self.finishCall = finishCall
end

---@param pipelineType CatCard.PipelineType
function BaseActionPipeline:SetPipelineType(pipelineType)
    self.pipelineType = pipelineType
end

---@return CatCard.PipelineType
function BaseActionPipeline:GetPipelineType()
    return self.pipelineType
end

---@return boolean
function BaseActionPipeline:IsBreak()
    return self.isBreak
end

---@param isBreak boolean
function BaseActionPipeline:SetIsBreak(isBreak)
    self.isBreak = isBreak
end

---@return boolean
function BaseActionPipeline:IsRunning()
    return self.isRunning
end

---@param data pbcmessage.PlayMiaoCardReply | pbcmessage.MiaoPlayFuncCardReply
function BaseActionPipeline:Execute(data)
    self:SetIsBreak(false)
    self:SetIsRunning(true)
    self:Parse(data)
    self:Begin()
end

---@return CatCard.BaseActionData
function BaseActionPipeline:GetValidAction()
    return self.dataParser:GetValidAction()
end

function BaseActionPipeline:IsActionFinish()
    return self.dataParser:IsFinish()
end

---@param action_data CatCard.BaseActionData
function BaseActionPipeline:OnActionEnd(action_data)
    self.dataParser:Remove(action_data)
    if not self:IsActionFinish() then
        if action_data:IsBreak() then
            self.dataParser:BreakAllAction()
        end
    end
    if self:IsActionFinish() then
        self:OnAllActionEnd()
    else
        if not action_data:IsParallel() then
            self:ExecuteAction(self:GetValidAction())
        end
    end
end

---所有action表演结束
function BaseActionPipeline:OnAllActionEnd()
    self:End()
end


---@param action_data CatCard.BaseActionData
function BaseActionPipeline:ExecuteAction(action_data)
    if action_data ~=nil then
        self.bll:ExecuteAction(action_data)
    end
end

---开始表演
function BaseActionPipeline:Begin()
    self:OnAddEventListener()
end

---结束表演
function BaseActionPipeline:End()
    self:SetIsRunning(false)
    self:OnRemoveEventListener()
    local finish_call = self.finishCall
    if finish_call then
        finish_call(self.pipelineType)
    end
end

function BaseActionPipeline:OnAddEventListener()

end

function BaseActionPipeline:OnRemoveEventListener()

end

---@param force boolean
---@param data pbcmessage.PlayMiaoCardReply | pbcmessage.MiaoPlayFuncCardReply
function BaseActionPipeline:GetDataParser(force, data)
    if force or not self.dataParser then
        
        local parser_type = CatCardConst.DataParserType.Default
        local action = data.Action
        if action then
            if action.CardId and action.CardId ~= 0 then
                local card_data = self.bll:GenData(CatCardConst.CardType.CARD, action.CardId, 0)
                if card_data:IsFuncCard() then
                    parser_type = card_data:GetEffectId()
                end
                self.bll:ReleaseData(card_data)
            end
        end
        local spAction = data.SPAction
        if spAction and spAction.id then
            parser_type = CatCardConst.SwitchSpParseType[spAction.id]
        end
        self.dataParser = self.bll:GetDataParser(parser_type)
        self.dataParser:SetFinishCall(self.actionFinishCall)
    end
    return self.dataParser
end

---解析数据
---@param data pbcmessage.PlayMiaoCardReply | pbcmessage.MiaoPlayFuncCardReply
---@vararg any
function BaseActionPipeline:Parse(data)
    local parser = self:GetDataParser(true, data)
    parser:Parse(data)
end
--endregion

---游戏逻辑进入,初始化进入一次
function BaseActionPipeline:Enter()
end

---游戏逻辑退出
function BaseActionPipeline:Exit()
    self:OnRemoveEventListener()
    if self.dataParser then
        self.dataParser:Clear()
    end
    GameUtil.ClearTarget(self)
end


function BaseActionPipeline:RefreshTipsText(...)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_TIPS, ...)
end

---@param a CatCard.BaseActionData
---@param b CatCard.BaseActionData
function BaseActionPipeline:OnActionSort(a, b)
    if a:GetOrder() ~= b:GetOrder() then
        return a:GetOrder() < b:GetOrder()
    end
    return false
end

function BaseActionPipeline:SetIsRunning(is_running)
    self.isRunning = is_running
    self.bll:CheckRunning()
end

---@param bll CatCardBLL
function BaseActionPipeline:SetBll(bll)
    self.bll = bll
end


return BaseActionPipeline
