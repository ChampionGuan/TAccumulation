---
--- Generated by EmmyLua(https:--github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/3/9 11:14
---@class CatCardStateData
local CatCardStateData = class("CatCardStateData")
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")

function CatCardStateData:ctor()
    self.dialogueMap = {} --剧情变量记录
    self.roundCount = 0  --轮数
    self.maxRoundCount = 0  --最大轮数
    self.resultList = {} --每轮结果记录
    self.seed = 0  --剧情随机种子
    self.state = 0 --当前状态
    self.popState = 0  --出牌阶段
    self.subState = 0  --子状态
    self.eventConId = 0  --当前服务器对话事件
    self.turnCount = 0  --当前回合数
    self.clientRoll = 0  --客户端猜拳事件
    self.roleCount = 0   --当前猜拳数
    self.actionType = 0    --行为类型
    self.seat = 0         --玩家位置
    self.card_id = 0      --卡牌id
    self.slotIndex = 0   --槽位
    self.funcDiscard = PoolUtil.GetTable() --弃牌堆数据（功能牌）
    self.lastFuncDiscard = PoolUtil.GetTable()  --上一轮弃牌堆功能牌数据
    self.numDiscard = {} --数字弃牌堆
    self.slotPileCount = 0 --双倍棋牌格堆数量
    self.numPileCount = 0  --数字牌堆数量
    self.funcPileCount = 0  --功能牌堆数量
    self.roleResult = 0   --猜拳结果
    self.spAction = nil   --当轮特殊行为
    self.actionRes = 0 --特殊行为结果
    ---@type table<number,pbcmessage.MiaoSPRecord>
    self.spRecords = {} --特殊行为记录
    self.lastPyt = -1  --上一轮玩家类型
    ---@type cfg.MiaoCardDifficulty
    self.miaoDiffData = nil --喵喵牌配置数据
    self.buffData = PoolUtil.GetTable()  --buff数据
    self.buffCache = {}  --buff缓存数据
    --服务器下发状态
    self.s_miaoState = {
        MiaoStateInit = 0, -- 初始状态
        MiaoStateRoll = 1, -- 猜拳
        MiaoStateInitHand = 2, -- 发牌
        MiaoStateEnd = 3, -- 结束
        MiaoStateAction = 4, -- 出牌阶段
        MiaoStateActFinish = 5, -- 行动结束
    }
    self.modeType = CatCardConst.ModeType.Normal
    self.serverMsg = nil
    self.spState = 0
    ---@type CatCardConst.ExchangeType
    self.exchangeType = 0
    ---@type int
    self.stealCardId = 0
    ---@type int
    self.robCardId = 0
    ---@type pbcmessage.GamePlayRecord
    self.gamePlayRecord = nil
    ---@type int[]
    self.roundCheck = nil
    ---@type int
    self.finalResult = 0
end

function CatCardStateData:ResetData()
    self.popState = 0
    self.subState = 0
    self.actionType = 0
    self.card_id = 0
    self.slotIndex = 0
end

---@param msg table
function CatCardStateData:SetServerMsg(msg)
    self.serverMsg = msg
end

function CatCardStateData:GetServerMsg()
    return self.serverMsg
end

---解析协议数据
function CatCardStateData:ParseInfo(msg)
    self.dialogueMap = msg.DialogueVariableMap and msg.DialogueVariableMap or self.dialogueMap
    self.roundCount = msg.RoundCount and msg.RoundCount or self.roundCount
    self.resultList = msg.ResultList and msg.ResultList or self.resultList
    self.seed = msg.Seed and msg.Seed or self.seed
    self.actionType = msg.Action and msg.Action.ActionType or self.actionType
    self:SetSeat(msg.Seat and msg.Seat or self.seat)
    self.card_id = msg.Action and msg.Action.CardId or self.card_id
    self.slotIndex = msg.Action and msg.Action.Target or self.slotIndex
    self:SetSubState(msg.SubState and msg.SubState or self.subState)
    self:SwitchState(msg.State and msg.State or self.state)
    self:SetEventConversationId(msg.EventConversationId and msg.EventConversationId or self.eventConId)
    self.turnCount = msg.TurnCount and msg.TurnCount or self.turnCount
    self.clientRoll = msg.RollRecord and msg.RollRecord.ClientRoll or self.clientRoll
    self.roll_count = msg.RollRecord and msg.RollRecord.RollCount or self.roll_count
    self.roleResult = msg.RollRecord and msg.RollRecord.RollResult or self.roleResult
    self.slotPileCount = msg.SlotPileCount and msg.SlotPileCount or self.slotPileCount
    self:SetChessBoard(msg.ChessBoard)
    self.spAction = msg.SPAction and msg.SPAction or self.spAction
    self:ParseActionInfo(msg)
    self.gamePlayRecord = msg.GamePlayRecord and msg.GamePlayRecord or self.gamePlayRecord
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_DIALOGUE_SET_VARIABLE_EVENT, CatCardConst.DialogueVariable.ROLLID, self.clientRoll)
end

---@param record pbcmessage.GamePlayRecord
function CatCardStateData:SetGamePlayRecord(record)
    self.gamePlayRecord = record
end

function CatCardStateData:SetChessBoard(chessBoard)
    if not chessBoard then
        return
    end
    self.lastFuncDiscard = table.clone(self.funcDiscard)
    self.funcDiscard = chessBoard.FuncDiscard
    self.numDiscard = chessBoard.NumDiscard
    self.numPileCount = chessBoard.NumPileCount
    self:SetFuncPileCount(chessBoard.FuncPileCount)
end

---对服务器状态数据做转换
function CatCardStateData:SwitchState(server_state)
    if server_state == self.s_miaoState.MiaoStateInit then
        self.state = CatCardConst.State.INIT
    elseif server_state == self.s_miaoState.MiaoStateRoll then
        self.state = CatCardConst.State.ROLL
    elseif server_state == self.s_miaoState.MiaoStateInitHand then
        self.state = CatCardConst.State.INITHAND
    elseif server_state == self.s_miaoState.MiaoStateEnd then
        self.state = CatCardConst.State.END
    elseif server_state == self.s_miaoState.MiaoStateAction then
        if self.seat == 1 then
            self.state = CatCardConst.State.P1_PRE
        elseif self.seat == 2 then
            self.state = CatCardConst.State.P2_PRE
        end
        if self.subState == CatCardConst.SubState.MiaoSubStateFunc then
            self:ChangePopState(CatCardConst.PopCardState.PopFuc)
        elseif self.subState == CatCardConst.SubState.MiaoSubStateNum then
            self:ChangePopState(CatCardConst.PopCardState.PopNum)
        elseif self.subState == CatCardConst.SubState.MiaoSubStateNumPlus then
            self:ChangePopState(CatCardConst.PopCardState.PopNumPlus)
        else
            self:ChangePopState(CatCardConst.PopCardState.None)
        end
    elseif server_state == self.s_miaoState.MiaoStateActFinish then
        if self.seat == 1 then
            self.state = CatCardConst.State.P1_ACT
        elseif self.seat == 2 then
            self.state = CatCardConst.State.P2_ACT
        end
        self:ChangePopState(CatCardConst.PopCardState.None)
    end
end

function CatCardStateData:ChangePopState(popState)
    if popState ~= self.popState then
        self.popState = popState
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_POPSTATE_CHANGE, popState)
    end
end

---@return bool 是否可出牌
function CatCardStateData:IsCanPopCard()
    if self.seat == CatCardConst.SeatType.ENEMY then
        return false
    end

    return self.popState > CatCardConst.PopCardState.None
end

function CatCardStateData:ParseActionInfo(msg, no_change_records)
    self.actionRes = msg.Result and msg.Result or self.actionRes
    if not no_change_records then
        self.spRecords = msg.SPRecords and msg.SPRecords or self.spRecords
    end
end

---设置当前喵喵牌难度数据
function CatCardStateData:SetMiaoCardDiff(sub_id)
    self.miaoDiffData = LuaCfgMgr.Get("MiaoCardDifficulty", sub_id)
    self.modeType = self.miaoDiffData.MiaoCardType
    self.roundCheck = self.miaoDiffData.RoundUICheck
    self.finalResult = self.miaoDiffData.FinalResultUICeck
end

---@return cfg.MiaoCardDifficulty 获取喵喵牌难度配置数据
function CatCardStateData:GetMiaoCardDiff()
    return self.miaoDiffData
end

function CatCardStateData:GetLoadingType()
    local diffType = LuaCfgMgr.GetDataByCondition("GameDifficultyType", { GameType = Define.GamePlayType.GamePlayTypeMiao, Para1 = self.miaoDiffData.MiaoCardType })
    if diffType then
        return diffType.LoadingTipsGroupID
    end
    return GameConst.LoadingType.CatCard
end

---@return CatCardConst.RoundCheckType
function CatCardStateData:GetRoundState()
    return self.roundCheck[self.roundCount] or CatCardConst.RoundCheckType.None
end

---@return bool 是否显示总结算
function CatCardStateData:IsShowFinalResult()
    return self.finalResult == 0
end

---获取当前模式
---@return CatCard.ModeType
function CatCardStateData:GetMode()
    return self.modeType
end

---@param actionRes int 设置行为结果
function CatCardStateData:SetActionRes(actionRes)
    self.actionRes = actionRes
end

---@return int 获取行为结果
function CatCardStateData:GetActionRes()
    return self.actionRes
end

---获得剧情变量数据
function CatCardStateData:GetDialogueVariableMap()
    return self.dialogueMap
end

function CatCardStateData:SetDialogueVariableMap(map)
    self.dialogueMap = map
end

---获得轮数
function CatCardStateData:GetRoundCount()
    return self.roundCount
end

function CatCardStateData:SetRoundCount(count)
    self.roundCount = count
end

---获得最大轮数
function CatCardStateData:GetMaxRoundCount()
    self.maxRoundCount = self.miaoDiffData and self.miaoDiffData.Round or 0
    return self.maxRoundCount
end

---获得每轮结果记录
function CatCardStateData:GetResultList()
    return self.resultList
end

function CatCardStateData:GetResultByRound(round)
    return self.resultList[round] or CatCardConst.RoundRes.NONE
end

function CatCardStateData:SetResultList(list)
    self.resultList = list
end

function CatCardStateData:ClearActionRes()
    self.spState = 0
    self.exchangeType = 0
    self.actionRes = nil
    self.spAction = nil
end

function CatCardStateData:ClearRecord()
    self.spRecords = nil
end

function CatCardStateData:ClearCache()
    table.clear(self.buffCache)
    table.clear(self.buffData)
    table.clear(self.funcDiscard)
    table.clear(self.lastFuncDiscard)
    table.clear(self.gamePlayRecord)
    self:ResetData()
    self:ChangePopState(CatCardConst.PopCardState.None)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_RESET_BUFF_EVENT)
end

function CatCardStateData:SetSeed(seed)
    self.seed = seed
end

---获得剧情随机种子
function CatCardStateData:GetSeed()
    return self.seed
end

---获得当前状态
function CatCardStateData:GetState()
    return self.state
end

---获取出牌阶段
function CatCardStateData:GetPopState()
    return self.popState
end

---设置子状态（确保在设置状态之前调用）
function CatCardStateData:SetSubState(subState)
    self.subState = subState
end

---@return CatCardConst.SubState
function CatCardStateData:GetSubState()
    return self.subState
end

---设置状态
function CatCardStateData:SetState(state)
    self:SwitchState(state)
end

---@param playerType CatCardConst.PlayerType 玩家类型
function CatCardStateData:GetBuffData(playerType)
    local buffInfo = {}
    if self.buffData[playerType] then
        for i, v in pairs(self.buffData[playerType]) do
            local info = LuaCfgMgr.Get("MiaoBuff", v)
            table.insert(buffInfo, info)
        end
    end
    return buffInfo
end

function CatCardStateData:SetBuffData(playerType, buffData)
    self.buffData[playerType] = buffData
end

---获得当前服务器对话事件
function CatCardStateData:GetEventConversationId()
    return self.eventConId
end

function CatCardStateData:SetEventConversationId(id)
    self.eventConId = id
end

---当前回合数
function CatCardStateData:GetTurnCount()
    return self.turnCount
end

function CatCardStateData:SetTurnCount(turnCount)
    self.turnCount = turnCount
end

---客户端猜拳事件
function CatCardStateData:GetClientRoll()
    return self.clientRoll
end

function CatCardStateData:SetClientRoll(clientRoll)
    self.clientRoll = clientRoll
end

---当前猜拳数
function CatCardStateData:GetRollCount()
    return self.roll_count
end

---设置抢牌次数
function CatCardStateData:SetRollCount(roll_count)
    self.roll_count = roll_count
end

---获取行为类型
---@return CatCardConst.MiaoActionType
function CatCardStateData:GetActionType()
    return self.actionType
end

---设置行为类型
---param type CatCardConst.MiaoActionType
function CatCardStateData:SetActionType(type)
    self.actionType = type
end

---@return int  轮到谁（1是玩家，2是NPC）
function CatCardStateData:GetSeat()
    return self.seat
end

---@param seat int
function CatCardStateData:SetSeat(seat)
    if self.seat > 0 then
        self.lastPyt = CatCardConst.PlayerTypeSwitch[self.seat]
    end
    self.seat = seat
end

---判断女主是否有冰冻buff
---@return bool
function CatCardStateData:IsFrozen()
    local playerType = CatCardConst.PlayerTypeSwitch[self.seat]
    if playerType == CatCardConst.PlayerType.PLAYER then
        local buffData = self:GetBuffCache(playerType)
        local num = table.nums(buffData)
        if num > 0 then
            if self:HasFrozenBuff(buffData) then
                return true
            end
        end
    end
    return false
end

function CatCardStateData:HasFrozenBuff(buffData)
    local isExist = false
    for i, v in pairs(buffData) do
        if type(v) == "number" and v == CatCardConst.BuffType.FrozenCard then
            isExist = true
            break
        end
    end
    return isExist
end

---添加buff数据缓存
function CatCardStateData:AddBuffCache(playerType, buffID)
    if not self.buffCache[playerType] then
        self.buffCache[playerType] = {}
    end
    table.insert(self.buffCache[playerType], buffID)
end

function CatCardStateData:RemoveBuffCache(playerType, buffID)
    if table.nums(self.buffCache[playerType]) > 0 then
        table.removebyvalue(self.buffCache[playerType], buffID)
    end
end

function CatCardStateData:GetBuffCache(playType)
    return self.buffCache[playType] or {}
end

---@param playerType CatCardConst.PlayerType
function CatCardStateData:SetLastPlayerType(playerType)
    self.lastPyt = playerType
end

---@return CatCardConst.PlayerType
function CatCardStateData:GetLastPlayerType()
    return self.lastPyt
end

---@return int 卡牌id
function CatCardStateData:GetCardId()
    return self.card_id
end

function CatCardStateData:SetCardId(id)
    self.card_id = id
end

---@return int 槽位索引
function CatCardStateData:GetSlotIndex()
    return self.slotIndex
end

function CatCardStateData:SetSlotIndex(index)
    self.slotIndex = index
end

function CatCardStateData:GetFuncDiscard()
    return self.funcDiscard
end

---从双方打出的最近5张功能牌中随机抽走一张加入己方手牌(顺手牵喵)
function CatCardStateData:GetFiveFuncCard(selectCardId)
    local num = selectCardId == nil and #self.funcDiscard or #self.lastFuncDiscard
    local func_ids = {}
    if num <= 5 then
        func_ids = selectCardId == nil and self.funcDiscard or self.lastFuncDiscard
    else
        for i = num, num - 4, -1 do
            if selectCardId == nil then
                table.insert(func_ids, self.funcDiscard[i])
            else
                table.insert(func_ids, self.lastFuncDiscard[i])
            end
        end
    end
    if selectCardId then
        --使服务器随机的卡牌进入展示列
        local isExist = false
        for i, v in pairs(func_ids) do
            if v == selectCardId then
                isExist = true
                break
            end
        end
        if not isExist then
            table.insert(func_ids, selectCardId)
        end
    end
    return func_ids
end

---获得弃牌堆中对应位置卡牌id
---@param index int 弃牌堆位置索引
function CatCardStateData:GetFuncDiscardCardIdByIndex(index)
    return self.funcDiscard[index]
end

function CatCardStateData:GetSlotPileCount()
    return self.slotPileCount
end

function CatCardStateData:SetSlotPileCount(count)
    self.slotPileCount = count
end

function CatCardStateData:GetNumPileCount()
    return self.numPileCount
end

function CatCardStateData:SetNumPileCount(count)
    self.numPileCount = count
end

function CatCardStateData:GetFuncPileCount()
    return self.funcPileCount
end

function CatCardStateData:SetFuncPileCount(count)
    self.funcPileCount = count
end

---@return CatCardConst.RoundRes
function CatCardStateData:GetRollResult()
    return self.roleResult
end

---@param roleResult CatCardConst.RoundRes 掷骰子结果
function CatCardStateData:SetRollResult(roleResult)
    self.roleResult = roleResult
end

---@return table 特殊行为数据
function CatCardStateData:GetSPAction()
    if self.spAction == nil or self.spAction.id == nil then
        return
    end
    return self.spAction
end

---@param action table 特殊行为数据
function CatCardStateData:SetSPAction(action)
    self.spAction = action
end

function CatCardStateData:SetWanderEndTime(endTime)
    self.wanderEndTime = endTime + TimerMgr.GetCurTimeSeconds()
end

function CatCardStateData:GetWanderEndTime()
    return self.wanderEndTime
end

function CatCardStateData:SetSelectSlotMap(map)
    self.select_slot_map = map
end

function CatCardStateData:GetSelectSlotMap()
    return self.select_slot_map
end

function CatCardStateData:SetExchangeType(exchange_type)
    if exchange_type then
        self.exchangeType = exchange_type
        return
    end
    self.exchangeType = self.exchangeType + 1
end

---设置SP玩法状态
---@param state
function CatCardStateData:SetSpState(state)
    self.spState = state
end

function CatCardStateData:GetSpState()
    return self.spState
end

function CatCardStateData:GetExchangeType()
    return self.exchangeType
end

function CatCardStateData:SetIsCheckState(is_check)
    self.isCheckState = is_check
end

function CatCardStateData:GetIsCheckState()
    return self.isCheckState
end

function CatCardStateData:SetStealCardId(card_id)
    self.stealCardId = card_id
end

function CatCardStateData:SetRobCardId(card_id)
    self.robCardId = card_id
end

function CatCardStateData:GetRobCardId()
    return self.robCardId
end

function CatCardStateData:GetStealCardId()
    return self.stealCardId
end

---是否处于Sp状态
---@return bool
function CatCardStateData:IsInSpState()
    if self.spState > 0 then
        return true
    end
    return false
end

---@return table 特殊行为记录
function CatCardStateData:GetSPRecords()
    return self.spRecords
end

function CatCardStateData:SetSPRecords(records)
    self.spRecords = records
end

---通过sp行为的specialType获取 SPRecord数据
---@param specialType CatCardConst.SpecialType
---@return pbcmessage.MiaoSPRecord
function CatCardStateData:GetSpRecordsBySpecialType(specialType)
    return self.spRecords[specialType]
end

---@param data pbcmessage.GamePlayRecord
function CatCardStateData:SetGamePlayRecord(data)
    self.gamePlayRecord = data
end

---@return pbcmessage.GamePlayRecord
function CatCardStateData:GetGamePlayRecord()
    return self.gamePlayRecord
end

return CatCardStateData