---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/8/27 11:14
---
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
local CatCardData = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardData")
---@class SlotData:CatCardData
local SlotData = class("SlotData", CatCardData)

function SlotData:ctor()
    self.super.ctor(self)
end

---占用情况 0: free 1: p1, 2: p2, 9: both
function SlotData:GetOccupy(no_check_switching)
    if no_check_switching then
        return self.occupy
    end
    return self:IsInSwitching() and self:GetSwitchingOccupy() or self.occupy
end

function SlotData:GetOccupyPlayer(no_check_switching)
    if self:IsOccupied() then
        for k, v in pairs(CatCardConst.PlayerType) do
            if self:IsOccupied(v, no_check_switching) then
                return v
            end
        end
    end
    return -1
end

function SlotData:GetPlayerType()
    return self:GetOccupyPlayer()
end

---是否被占用
function SlotData:IsOccupied(player_type, no_check)
    if player_type == nil then
        return self:GetOccupy(no_check) ~= CatCardConst.Occupy.FREE
    else
        local ocuppy_type
        if player_type == CatCardConst.PlayerType.PLAYER then
            ocuppy_type = CatCardConst.Occupy.PLAYER
        elseif player_type == CatCardConst.PlayerType.ENEMY then
            ocuppy_type = CatCardConst.Occupy.ENEMY
        else
            return true
        end
        return self:GetOccupy(no_check) == ocuppy_type
    end
end

function SlotData:IsTouchEnable()
    return self.is_touch_enable
end

---格子当前的卡片id
function SlotData:GetCardId(no_check)
    if not no_check then
        if self:IsInSwitching() then
            return self:GetSwitchingCardId()
        elseif self:IsInRegreting() then
            return self:GetRegretCardId()
        end
    end
    return self.cardId
end

function SlotData:SetCardId(id)
    self.cardId = id
end

---是否被替换
function SlotData:IsInSwitching()
    if self.bll:GetStateData():GetSpState() == CatCardConst.WanderingState.WANDERING then
        if self.bll:IsCanSwitch(self:GetType()) then
            return self.bll:IsPosIndexSelected(self:GetType(), self:GetIndex())
        end
    end
    return false
end

---是否被替换
function SlotData:IsInRegreting()
    --local cat_card_bll = self.bll
    --if cat_card_bll:IsInLocalState(CatCardConst.LocalState.IN_REGRETING) then
    --    if cat_card_bll:IsCanRegret(CatCardConst.CardType.CARD) then
    --        return cat_card_bll:IsPosIndexSelected(self:GetType(), self:GetIndex())
    --    end
    --end
    if self.bll:GetStateData():GetSpState() > 0 then
        return true
    end
    return false
end

---获取被替换的card——id
function SlotData:GetSwitchingCardId()
    local cat_card_bll = self.bll
    local select_indexs = cat_card_bll:GetSelectIndexs(self:GetType())
    local res = cat_card_bll:GetStateData():GetActionRes()
    if res and res == CatCardConst.WanderingType.SWITCHSUCCESS then
        return self:GetCardId(true)
    end
    if select_indexs and #select_indexs > 0 then
        local switch_index
        for k, v in pairs(select_indexs) do
            if v ~= self:GetIndex() then
                switch_index = v
                break
            end
        end
        if switch_index then
            local data = cat_card_bll:GetData(self:GetType(), switch_index)
            if data then
                return data:GetCardId(true)
            end
        end
    end
    return self:GetCardId(true)
end

--获取玩家悔牌id
function SlotData:GetRegretCardId()
    local cat_card_bll = self.bll
    local select_index = cat_card_bll:GetCurSelectIndex(CatCardConst.CardType.CARD)
    if select_index then
        local data = cat_card_bll:GetData(CatCardConst.CardType.CARD, select_index)
        return data:GetId()
    end
    return self:GetCardId(true)
end

---查找替换下的占用情况
function SlotData:GetSwitchingOccupy()
    local cat_card_bll = self.bll
    local res = cat_card_bll:GetStateData():GetActionRes()
    if res and res == CatCardConst.WanderingType.SWITCHSUCCESS then
        return self:GetOccupy(true)
    end
    local select_indexs = cat_card_bll:GetSelectIndexs(self:GetType())
    if select_indexs and #select_indexs > 0 then
        local switch_index
        for k, v in pairs(select_indexs) do
            if v ~= self:GetIndex() then
                switch_index = v
                break
            end
        end
        if switch_index then
            local data = cat_card_bll:GetData(self:GetType(), switch_index)
            if data then
                return data:GetOccupy(true)
            end
        end
    end
    return self:GetOccupy(true)
end

---获取杯垫位置
function SlotData:GetCupMatModel(tag)
    tag = 1
    if self:IsOccupied() then
        if self:GetOccupy() == CatCardConst.Occupy.ENEMY then
            tag = 3
        elseif self:GetOccupy() == CatCardConst.Occupy.PLAYER then
            tag = 2
        end
    end
    return self.super.GetCupMatModel(self, tag, self:GetIndex())
end

---是否是翻倍格子
function SlotData:IsDoubleSlot()
    return self:GetSubType() == CatCardConst.SubType.DOUBLEBACK
end

function SlotData:GetSound(no_check)
    if self:IsDoubleSlot() then
        local card_id = self:GetCardId(no_check)
        if self:IsMatched(card_id) then
            return CatCardConst.Sound.SYSTEM_MIAO_CATCHEER
        else
            return CatCardConst.Sound.SYSTEM_MIAO_CATCRY
        end
    end
    return CatCardConst.Sound.SYSTEM_MIAO_CATNORMAL
end

---是否匹配
function SlotData:IsMatched(card_id)
    local is_matched = false
    local is_can_check = false
    if not card_id then
        is_can_check = self:IsOccupied() and self:IsDoubleSlot()
        card_id = self:GetCardId()
    else
        is_can_check = true
    end

    if is_can_check then
        if card_id and card_id > 0 then
            local cat_card_bll = self.bll
            local card_data = cat_card_bll:GenData(CatCardConst.CardType.CARD, card_id)
            if self:IsDoubleSlot() then
                if card_data:GetColor() == self:GetColor() then
                    is_matched = true
                end
            end
            cat_card_bll:ReleaseData(card_data)
        end
    end
    return is_matched
end

function SlotData:GetFlagModel()
    if self:IsMatched() then
        return self.super.GetFlagModel(self)
    end
    return ""
end

---获取杯子数字模型
function SlotData:GetNumModel()
    if self:IsOccupied() then
        local cat_card_bll = self.bll
        local card_data = cat_card_bll:GenData(CatCardConst.CardType.CARD, self:GetCardId())
        local idx = card_data:GetMatchIdx(self:GetColor())
        if idx then
            return card_data:GetNumModel(idx)
        end
    end
    return ""
end

---获取当前位置分数
function SlotData:GetScore(player_type)
    local score = 0
    if self:IsOccupied(player_type) then
        --我方或者是敌方，花色相同， 翻倍
        score = self:GetScoreByCardId(self:GetCardId())
    end
    return score
end

---根据card计算分数
function SlotData:GetScoreByCardId(card_id)
    local score = 0
    if card_id == 0 then
        return score
    end
    local cat_card_bll = self.bll
    local card_data = cat_card_bll:GenData(CatCardConst.CardType.CARD, card_id)
    if card_data then
        score = card_data:GetNum()
        if self:IsDoubleSlot() then
            if self:IsMatched(card_id) then
                score = CatCardConst.DOUBLEPARA * score
            else
                score = 0
            end
        end
    end
    cat_card_bll:ReleaseData(card_data)
    return score
end

---获取猫出现的时候的动画列表
function SlotData:GetCatAppearAnimationList()
    local card_id = self:GetCardId()
    local animation_list = PoolUtil.GetTable()
    if card_id and card_id ~= 0 then
        table.insert(animation_list, CatCardConst.CatAnimation.APPEAR)
        --table.insert(animation_list,CatCardConst.CatAnimation.NORMAL_IDLE)
        if self:IsDoubleSlot() then
            ---花色匹配
            if self:IsMatched() then
                table.insert(animation_list, CatCardConst.CatAnimation.DOUBLE)
                --table.insert(animation_list,CatCardConst.CatAnimation.DOUBLE_IDLE)
            else
                table.insert(animation_list, CatCardConst.CatAnimation.NO_MATCH)
                --table.insert(animation_list,CatCardConst.CatAnimation.NO_MATHCH_IDLE)
            end
        end
    end
    return animation_list
end

---获取猫的动画
function SlotData:GetCatAnimation(no_check)
    if self.play_ani_name then
        return self.play_ani_name
    end
    local card_id = self:GetCardId(no_check)
    if self:IsInSwitching() then
        if self.bll:GetStateData():GetActionRes() == CatCardConst.WanderingType.SWITCHFAILED then
            card_id = self:GetCardId(true)
        end
    end
    local animation_name
    if card_id and card_id ~= 0 then
        if self:IsDoubleSlot() then
            if self:IsMatched(card_id) then
                animation_name = CatCardConst.CatAnimation.DOUBLE_IDLE
            else
                animation_name = CatCardConst.CatAnimation.NO_MATHCH_IDLE
            end
        else
            animation_name = CatCardConst.CatAnimation.NORMAL_IDLE
        end
    end
    return animation_name
end

---@param ani_name string
function SlotData:SetCatAnimation(ani_name)
    self.play_ani_name = ani_name
end

function SlotData:Refresh(server_data)
    self.super.Refresh(self, server_data)
    self.occupy = server_data.Occupy and server_data.Occupy or 0
    self:SetCardId(server_data.CardId and server_data.CardId or 0)
    if server_data.SlotId then
        self:SetId(server_data.SlotId)
    end
end

return SlotData