---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hongyun.
--- DateTime: 2022/6/7 15:22
---

---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")

---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)

---选择物体的Action，需要由外部主动调用End
---@class CatCard.SelectAction:CatCard.CatCardBaseAction
local SelectAction = class("SelectAction",BaseAction)

---@param action_data CatCard.SelectActionData
function SelectAction:Begin(action_data)

    ---可被选中的物体
    self.objs = action_data:GetSelectableObjs()
    if self.objs == nil or (not next(self.objs)) then
        Debug.LogError("SelectAction的selectableObjs不能为空")
        self:End()
        return
    end

    local input = self.bll:GetSelectActionInputComponent()
    if not input then
        Debug.LogError("CatCardBLL缺少SelectActionInputComponent")
        self:End()
        return
    end
    input:SetDelegate(self)
    input:SetTouchEnable(true)

    ---物体到index的映射
    self.obj2Index = PoolUtil.GetTable()

    ---记录物体选中状态
    self.objSelectStates = PoolUtil.GetTable()

    ---记录物体原始数据 位置/旋转/缩放
    self.objOriginalDatas = PoolUtil.GetTable()

    for i, obj in ipairs(self.objs) do

        self.obj2Index[obj] = i

        self.objSelectStates[obj] = false

        local objData =  PoolUtil.GetTable()
        local trans = obj.transform
        objData.pos = trans.position
        objData.rot = trans.rotation
        objData.scale = trans.localScale
        self.objOriginalDatas[obj] = objData
    end

    ---最后一个选中的物体
    self.lastSelectObj = nil

end

---结束
function SelectAction:End()

    self.objs = nil

    local input = self.bll:GetSelectActionInputComponent()
    input:SetDelegate(nil)
    input:SetTouchEnable(false)

    ---Action结束时 取消掉所有选中
    self:DeselectAllObj()

    PoolUtil.ReleaseTable(self.obj2Index)
    self.obj2Index = nil

    PoolUtil.ReleaseTable(self.objSelectStates)
    self.objSelectStates = nil

    for i, objData in pairs(self.objOriginalDatas) do
        PoolUtil.ReleaseTable(objData)
    end
    PoolUtil.ReleaseTable(self.objOriginalDatas)
    self.objOriginalDatas = nil

    BaseAction.End(self)
end

---InputComponent的物体点击回调
function SelectAction:OnTouchClickObj(obj)

    ---@type CatCard.SelectActionData
    local data = self:GetData()

    if not self:IsSelectableObj(obj) then
        ---不接受空白处点击时，点击空白处不做处理
        if not data:GetIsCheckEmpty() then
            return
        end
        ---点击了不可选中的物体 视为点击了空白 需要取消当前选中的所有物体
        self:DeselectAllObj()

        ---触发回调
        ---点击空白的话参数全部传空了
        local callback = data:GetOnSelectedCallback()
        if callback then
            callback()
        end
        return
    end

    local selected = self.objSelectStates[obj]
    if not selected then
        ---点击了未选中的物体 将其修改为选中状态

        if not data:GetIsMulti() then
            ---单选模式下 需要先取消前一个被选中物体的选中状态
            self:SelectObj(self.lastSelectObj,false)
        end

        self:SelectObj(obj,true)
        self.lastSelectObj = obj
    end


end

---是否为可选中的物体
---@param obj GameObject
---@return bool
function SelectAction:IsSelectableObj(obj)
    for i, v in ipairs(self.objs) do
        if v == obj then
             return true
        end
    end
    return false
end

---取消所有选中
function SelectAction:DeselectAllObj()
    for go, isSelect in pairs(self.objSelectStates) do
        if isSelect then
            self:SelectObj(go,false)
        end
    end
    self.lastSelectObj = nil
end

---选中/取消选中物体
---@param obj GameObject
---@param isSelect bool
function SelectAction:SelectObj(obj,isSelect)

    if GameObjectUtil.IsNull(obj) then
        return
    end

    ---@type CatCard.SelectActionData
    local data = self:GetData()

    ---修改状态记录
    self.objSelectStates[obj] = isSelect

    ---移动或还原物体位置
    self:MoveObj(obj,isSelect)

    ---执行选中特效Action
    local cardSelectData = self.bll:GetActionData(CatCardConst.ActionType.CardSelect)
    cardSelectData:Set(obj,self:GetData():GetEffectName(),self:GetData():GetSoundName(),isSelect)
    cardSelectData:Begin()

    ---触发回调
    local callback = data:GetOnSelectedCallback()
    if callback then
        local index = self:GetObjIndex(obj)
        callback(index,obj,isSelect)
    end
end

---移动/还原被选中/取消选中的物体
function SelectAction:MoveObj(obj,isSelect)
    ---@type CatCard.SelectActionData
    local data = self:GetData()

    local moveType = data:GetMoveType()

    if moveType == CatCardConst.SelectMoveType.None then
         return
    end

    local trans = obj.transform

    if not isSelect then
        ---还原
        trans.position = self:GetObjOriginalPos(obj)
        trans.rotation = self:GetObjOriginalRot(obj)
        trans.localScale = self:GetObjOriginalScale(obj)
    else
        ---修改
        if moveType == CatCardConst.SelectMoveType.Offset then

            trans.position = trans.position + trans.up * data:GetOffset()

        elseif moveType == CatCardConst.SelectMoveType.Target then

            trans.position = data:GetTargetPos()
            trans.rotation = data:GetTargetRot()
            trans.localScale = data:GetTargetScale()

        end
    end

end

---获取物体索引
function SelectAction:GetObjIndex(obj)
    return self.obj2Index[obj]
end

---获取物体原始位置
---@param obj GameObject
---@return Vector3
function SelectAction:GetObjOriginalPos(obj)
    local objData = self.objOriginalDatas[obj]
    if not objData then
        return nil
    end
    return objData.pos
end

---获取物体原始旋转
---@param obj GameObject
---@return Quaternion
function SelectAction:GetObjOriginalRot(obj)
    local objData = self.objOriginalDatas[obj]
    if not objData then
        return nil
    end
    return objData.rot
end

---获取物体原始缩放
---@param obj GameObject
---@return float
function SelectAction:GetObjOriginalScale(obj)
    local objData = self.objOriginalDatas[obj]
    if not objData then
        return nil
    end
    return objData.scale
end

return SelectAction