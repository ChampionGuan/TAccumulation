---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/9/30 15:56
---

local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
local BaseAni = require(CatCardConst.BASE_ANIMATION_PATH)
local RegretCardAni = class("RegretCardAni", BaseAni)

function RegretCardAni:Execute(is_revert, callback, player_type, slot_index, card_id, card_index, is_play_ui_ani)
    self.is_revert = is_revert
    self.end_call = callback
    self.is_play_ui_ani = is_play_ui_ani
    if is_revert then
        self:StartAni(is_revert)
    else
        self.is_in_second = false
        self.slot_index = slot_index
        self.card_id = card_id
        self.card_index = card_index
        self:PreInit(player_type)
        self:SetIsRunning(true)
        self:SetCatSelect(true, function()
            self:StartAni(false)
        end)
    end

end

function RegretCardAni:StartAni(is_revert)
    local speed = CatCardConst.CARD_REGRET_SPEED
    local model
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.REGRET, self.is_play_ui_ani, true)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_PLAY_REGRET_UI_ANIMATION, self.is_play_ui_ani, self.start_pos, self.end_pos, speed)
    if is_revert then
        model = self.model
        if not model then
            self:OnFinish()
            return
        end
        local animation_st = CatCardConst.AnimationState.MOVE | CatCardConst.AnimationState.SCALE | CatCardConst.AnimationState.ROTATION
        local slot_node, card_node = self:GetParentNodes()
        if not self.is_in_second then
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CARDFLY)
            self.bll:CheckAnimation(CatCardConst.AnimationType.MOVE_MODEL, animation_st, model, slot_node, speed, function()
                EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL, self.model_name, self.model)
                self:SetCatSelect(false, handler(self, self.OnFinish))
                self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_APPEAR)
            end)
        else
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CARDBACK)
            self.bll:CheckAnimation(CatCardConst.AnimationType.MOVE_MODEL, animation_st, model, card_node, speed, function()
                EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL, self.model_name, self.model)
                self:SetIsRunning(false)
                self:ChangeData()
                local slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slot_index)
                model = self:GetMoveModel(slot_data:GetCardId(), GameObjectUtil.GetComponent(card_node, nil, "Transform"))
                self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CARDFLY)
                self.bll:CheckAnimation(CatCardConst.AnimationType.MOVE_MODEL, animation_st, model, slot_node, speed, function()
                    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL, self.model_name, self.model)
                    self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_APPEAR)
                    self:SetCatSelect(false, function()
                        self:OnFinish()
                    end)
                end)
            end)
        end

    else
        self.is_in_second = false
        local slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slot_index)
        local slot_node, card_node = self:GetParentNodes()
        model = self:GetMoveModel(slot_data:GetCardId(), GameObjectUtil.GetComponent(slot_node, nil, "Transform"))
        local animation_st = CatCardConst.AnimationState.MOVE | CatCardConst.AnimationState.SCALE | CatCardConst.AnimationState.ROTATION
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CARDBACK)
        self:SetEffectActive(true, self.logic_ctrl:GetModel(CatCardConst.CardType.SLOT, self.slot_index))
        self:SetFollowModel(model)
        self.bll:CheckAnimation(CatCardConst.AnimationType.MOVE_MODEL, animation_st, model, card_node, speed, function()
            EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL, self.model_name, self.model)
            model = self:GetMoveModel(self.card_id, GameObjectUtil.GetComponent(card_node, nil, "Transform"))
            self:SetIsRunning(false)
            self:ChangeData()
            self:OnFirstAniEnd()
            self.is_in_second = true
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CARDFLY)
            self:SetFollowModel(model)
            self.bll:CheckAnimation(CatCardConst.AnimationType.MOVE_MODEL, animation_st, model, slot_node, speed, function()
                EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL, self.model_name, self.model)
                self:OnSecondAniEnd()
            end)
        end)
    end
end

function RegretCardAni:SetFollowModel(model)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_FOLLOW_MODEL, model)
end

function RegretCardAni:ChangeData()
    --self.bll:SetLocalState(CatCardConst.LocalState.REGRETING_CHANGE_DATA)
    EventMgr.Dispatch(CatCardConst.Event.REGRET_CHANGE_CARD_DATA_EVENT)
end

---获取移动的model
function RegretCardAni:GetMoveModel(card_id, parent)
    local card_data = self.bll:GenData(CatCardConst.CardType.CARD, card_id)
    local model_name = card_data:GetCardModel()
    self.bll:ReleaseData(card_data)
    self.model = self.logic_ctrl:LoadModel(model_name)
    self.model_name = model_name
    GameObjectUtil.SetParent(GameObjectUtil.GetComponent(self.model, nil, "Transform"), parent)
    self.logic_ctrl:ResetModel(self.model)
    GameObjectUtil.SetLayer(self.model, Const.LayerMask.RT, true)
    return self.model
end

function RegretCardAni:GetParentNodes()
    return self.logic_ctrl:GetSlotStackNode(CatCardConst.CardType.SLOT, self.slot_index, self.player_type), self.logic_ctrl:GetModelParent(CatCardConst.CardType.CARD, self.card_index, self.player_type)
end

---第一段动画结束
function RegretCardAni:OnFirstAniEnd()
    --self.bll:SetLocalState(CatCardConst.LocalState.REGRETING_FIRST_ANIMATION_END)
end

---第二段动画结束
function RegretCardAni:OnSecondAniEnd()
    self:PlayCatAni(function()
        self:OnFinish()
        --self.bll:SetLocalState(CatCardConst.LocalState.REGRETING_SECOND_ANIMATION_END)
    end)
end

function RegretCardAni:SetEffectActive(is_active, model)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_CHECK_UI_EFFECT, is_active and CatCardConst.EffectState.SHOW or CatCardConst.EffectState.HIDE, model:GetPosIndex(), CatCardConst.Effect.MODEL_APPEAR_UI, model:GetEffectPos())
end

---显示分数
function RegretCardAni:CheckScore(call)
    local score_diff = self.bll:GetScore(self.player_type) - self.bll:GetScore(self.player_type, true)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SHOW_SCORE, self.slot_index, score_diff, self.player_type, call)
end

---悔牌动画完成开始播放猫动画
function RegretCardAni:PlayCatAni(callback)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_MODELS, CatCardConst.CardType.SLOT)
    self:CheckScore(function()
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_VIEW, true)
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_SCORE)
    end)
    local model = self.logic_ctrl:GetModel(CatCardConst.CardType.SLOT, self.slot_index)
    if model then
        local cat = model:GetModelByType("CAT")
        if cat then
            GameObjectUtil.SetActive(cat, true)
            local data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slot_index)
            local animation_list = data:GetCatAppearAnimationList()
            if animation_list and #animation_list > 0 then
                EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.RT, CatCardConst.CardType.SLOT, self.slot_index)
                self:SetEffectActive(true, model)
                self:PlayCatSound(model, cat, data, animation_list)
                self:Play(CatCardConst.AnimationState.ANIMATION, cat, function()
                    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.DEFAULT, CatCardConst.CardType.SLOT, self.slot_index)
                    self:SetEffectActive(false, model)
                    self:OnCatAniFinish()
                    if callback then
                        callback()
                    end
                end, animation_list)
                PoolUtil.ReleaseTable(animation_list)
                return
            end
        end
    end
    if callback then
        callback()
    end
end

function RegretCardAni:PlayCatSound(model, cat, data, animation_list)
    self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_APPEAR)
    local ani_dt = model:GetAnimationDt(cat, animation_list[1])
    TimerMgr.AddScaledTimer(ani_dt, function()
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, data:GetSound())
    end)
end

function RegretCardAni:OnCatAniFinish()
    local model = self.logic_ctrl:GetModel(CatCardConst.CardType.SLOT, self.slot_index)
    if model then
        local cat = model:GetModelByType("CAT")
        if cat then
            local data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slot_index)
            local animation_name = data:GetCatAnimation()
            --self.bll:CheckSound(CatCardConst.SoundType.DEFAULT,CatCardConst.Sound.SYSTEM_MIAO_PUTDOWN)
            if animation_name then
                self:Play(CatCardConst.AnimationState.ANIMATION, cat, nil, animation_name)
            end
        end
    end
end

function RegretCardAni:PreInit(player_type)
    self.player_type = player_type
    self.start_pos = self.logic_ctrl:GetMovePos(CatCardConst.CardType.SLOT, self.slot_index)
    self.end_pos = self.logic_ctrl:GetPos(CatCardConst.CardType.CARD, self.card_index, player_type)
end

function RegretCardAni:SetCatSelect(is_select, callback)
    local model = self.logic_ctrl:GetModel(CatCardConst.CardType.SLOT, self.slot_index)
    local cat_model = model:GetModelByType("CAT")

    if not is_select then
        self:SetEffectActive(true, model)
        GameObjectUtil.SetActive(cat_model, true)
    end
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.RT, CatCardConst.CardType.SLOT, self.slot_index)

    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_CAT_SELECT, self.slot_index, is_select, function()
        if is_select then
            GameObjectUtil.SetActive(cat_model, false)
        else
            local data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slot_index)
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, data:GetSound())
            self:SetEffectActive(false, model)
        end
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.DEFAULT, CatCardConst.CardType.SLOT, self.slot_index)
        if callback then
            callback()
        end
    end)
end

function RegretCardAni:OnFinish()
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.DEFAULT, CatCardConst.CardType.SLOT, self.slot_index)
    self:SetIsRunning(false)
    self.is_play_ui_ani = false
    self.is_revert = false
    self.is_in_second = false
    self.model = nil
    self.model_name = nil
    local end_call = self.end_call
    self.end_call = nil
    if end_call then
        end_call()
    end
end

return RegretCardAni