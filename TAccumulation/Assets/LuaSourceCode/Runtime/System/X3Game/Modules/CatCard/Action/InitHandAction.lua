---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/11/10 16:29
---发手牌
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
local BaseAction = require(CatCardConst.BASE_ACTION_PATH)
---@class CatCard.Action.InitHandAction:CatCardBaseAction
local InitHandAction = class("InitHandAction",BaseAction)

function InitHandAction:Execute(is_clear_cache,call_back,start_index,player_type,is_rotation,check_z,is_replace_cards)
    if not self.show_map then
        self.show_map = {}
    end
    local map = self.show_map[player_type]
    if not map then
        map = {}
        self.show_map[player_type] = map
    end
    map.clear_cache = is_clear_cache
    map.is_replace_cards = is_replace_cards

    map.call_back = call_back
    if start_index then
        map.start_index = start_index
    end
    map.is_rotation = is_rotation
    map.check_z = check_z
    self:Start(player_type)
end

---初始化index
function InitHandAction:ResetCardIndex(player_type)
    local map = self.show_map[player_type]
    local datas = self.bll:GetDataList(CatCardConst.CardType.CARD,player_type)
    map.cur_card_index = map.cur_card_index or 1
    map.card_count = #datas
    if map.card_caches == nil then
        map.card_caches = {}
    end
    PoolUtil.ReleaseTable(datas)
end

---刷新cards
function InitHandAction:RefreshCards(player_type)
    local data_list = self.bll:GetDataList(CatCardConst.CardType.CARD,player_type)
    local card_show_map = self.show_map[player_type]
    local card_caches = card_show_map.card_caches
    local z = player_type == CatCardConst.PlayerType.PLAYER  and 180 or 0
    for k,v in pairs(data_list) do
        local model_name = v:GetCardModel()
        local model = self.logic_ctrl:LoadModel(model_name)
        local model_parent = self.logic_ctrl:GetModelParent(CatCardConst.CardType.CARD,v:GetIndex(),player_type)
        local model_trans = GameObjectUtil.GetComponent(model,nil,"Transform")
        GameObjectUtil.SetParent(model_trans,GameObjectUtil.GetComponent(model_parent,nil,"Transform"))
        GameObjectUtil.SetLocalEulerAngles(model_trans,0,0,z)
        table.insert(card_caches,{model_name = model_name,model = model})
    end
    PoolUtil.ReleaseTable(data_list)
end

---旋转card
function InitHandAction:RotationCards(player_type,callback)
    local data_list  = self.bll:GetDataList(CatCardConst.CardType.CARD,player_type)
    local count = #data_list
    local ani_call = function()
        count = count -1
        if count<=0 then
            if callback then
                callback()
            end
        end
    end
    for k,v in pairs(data_list) do
        v:SetRotationZ(0)
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ROTATION_MODEL,CatCardConst.CardType.CARD,v:GetIndex(),player_type,ani_call)
    end
end

function InitHandAction:ClearCacheModels(player_type)
    local map = self.show_map[player_type]
    if map and map.card_caches then
        for _,va in pairs(map.card_caches) do
            EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL,va.model_name,va.model)
        end
        table.clear(map.card_caches)
    end
end

function InitHandAction:Start(player_type)
    self:SetIsRunning(true)
    self.card_speed = CatCardConst.CARD_SPEED
    self:ResetCardIndex(player_type)
    local map = self.show_map[player_type]
    if map.is_replace_cards then
        self:ClearCacheModels(player_type)
    end
    
    local datas = self.bll:GetDataList(CatCardConst.CardType.CARD,player_type)
    local card_ids = PoolUtil.GetTable()
    for k,v in ipairs(datas) do
        if v:IsNew() then
            table.insert(card_ids,v:GetId())
            map.cur_card_index  = map.cur_card_index + 1
            v:SetIsNew(false)
        end
    end
    PoolUtil.ReleaseTable(datas)
    if #card_ids>0 then
        ---@type CatCard.GetCardActionData
        local action_data = self.bll:GetActionData(CatCardConst.ActionType.GetCard,player_type,function ()
            PoolUtil.ReleaseTable(card_ids)
            self:OnGetCardsEnd(player_type)
        end)
        action_data:SetIsAutoRelease(false)
        action_data:SetCardIds(card_ids)
        action_data:SetRotation(false)
        action_data:Begin()
    else
        self:OnGetCardsEnd(player_type)
    end
    
    
    
    --self:GetCards(player_type,function ()
    --    self:OnGetCardsEnd(player_type)
    --end)
end

function InitHandAction:OnGetCardsEnd(player_type)
    local map = self.show_map[player_type]
    if map.is_rotation then
        self:RotationCards(player_type,function ()
            self:End(player_type)
        end)
    else
        self:End(player_type)
    end
end

function InitHandAction:End(player_type)
    local map = self.show_map[player_type]
    self:SetIsRunning(false)
    if map then
        local callback = map.call_back
        map.call_back  = nil
        if map.clear_cache then
            self:ClearCacheModels(player_type)
        end
        if callback then
            callback()
        end
    end
end

return InitHandAction