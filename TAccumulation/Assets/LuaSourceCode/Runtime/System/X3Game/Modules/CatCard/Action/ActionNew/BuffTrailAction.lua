---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/8/1 18:49
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.BuffTrailAction:CatCard.CatCardBaseAction
local BuffTrailAction = class("BuffTrailAction", BaseAction)

---@param actionData CatCard.BuffTrailActionData
function BuffTrailAction:Begin(actionData)
    self.actionData = actionData
    self.playerType = self.actionData:GetPlayerType()
    self.actionData:SetEffectState(true)
    self.buffId = self.actionData:GetBuffId()
    self:PlayBuffAni()
end

function BuffTrailAction:PlayBuffAni()
    local startPos = self.actionData:GetStartPos()
    local endPos = self.actionData:GetTargetPos()
    local distance = Vector3.Distance(startPos, endPos)
    local speed = distance / CatCardConst.BUFF_MOVE_TIME
    local pos_list = self:GetPosList(startPos, endPos)
    self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_GETBUFF)
    self.bll:CheckAnimation(CatCardConst.AnimationType.DEFAULT, CatCardConst.AnimationState.BEIZER, self.actionData:GetEffect(), function()
        if self.buffId == CatCardConst.BuffType.FrozenCard then
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_BUFFFREEZE)
        else
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_BUFFSKIP)
        end
        self:End()
    end, pos_list[1], speed, CS.DG.Tweening.Ease.Linear, pos_list[2])
end

function BuffTrailAction:GetPosList(start_pos, end_pos)
    local p_vector = end_pos - start_pos
    local aix = Vector3.up
    local aix_r = Vector3.back
    if self.playerType == CatCardConst.PlayerType.PLAYER then
        aix = Vector3.down
    end
    local player_conf = CatCardConst.PlayerTypeConf[self.playerType]
    local angle_percent = player_conf.angle_percent
    local length_percent = player_conf.length_percent
    local angle = Vector3.Angle(p_vector, aix) * angle_percent
    local p_vector2 = Quaternion.AngleAxis(angle, aix_r) * p_vector
    local dis = p_vector.magnitude * length_percent
    local length = math.abs(dis / math.cos(math.rad(angle)))
    Vector3.ClampMagnitude(p_vector2, length)
    local pos = p_vector2 + start_pos
    local pos_list = { start_pos, pos, end_pos }
    local dis = 0
    for k = 1, #pos_list - 1 do
        dis = dis + Vector3.Distance(pos_list[k], pos_list[k + 1])
    end
    return { pos_list, dis }
end

function BuffTrailAction:End()
    self.actionData:ClearData()
    BaseAction.End(self)
end

return BuffTrailAction