---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/5/31 15:30
---
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type BaseCatCardCtrl
local CatCardBaseCtrl = require(CatCardConst.BASE_CTRL_PATH)
---@class CatCard.ActionPipelineCtrl:BaseCatCardCtrl
local ActionPipelineCtrl = class("ActionPipelineCtrl",CatCardBaseCtrl)

function ActionPipelineCtrl:ctor()
    CatCardBaseCtrl.ctor(self)
    ---@type fun(type:CatCard.PipelineType)
    self.pipelineFinishCall = nil
end

function ActionPipelineCtrl:OnResume()
    if table.isnilorempty(self.params) then return end
    for k,v in pairs(self.params) do
        self:OnFinish(k)
        break
    end
end

---@param pipeline_type CatCard.PipelineType
function ActionPipelineCtrl:OnFinish(pipeline_type)
    if self:IsPause() then return end
    local param = self.params and self.params[pipeline_type] or nil
    if param then
        self:Check(pipeline_type,self:GetParam(pipeline_type))
    end
end

---@param pipeline_type CatCard.PipelineType
---@return CatCard.BaseActionPipeline
function ActionPipelineCtrl:GetHandler(pipeline_type)
    ---@type CatCard.BaseActionPipeline
    local pipeline = self.node_map[pipeline_type]
    if not pipeline then
        local path = CatCardConst.ActionPipelineConf[pipeline_type]
        if string.isnilorempty(path) then
            Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard,"[喵喵牌]ActionPipelineCtrl GetHandler failed {%s}",pipeline_type)
            --Debug.LogErrorFormat("[喵喵牌]ActionPipelineCtrl GetHandler failed {%s}",pipeline_type)
            return
        end
        pipeline = require(path).new()
        pipeline:SetOwner(self)
        pipeline:SetBll(self.bll)
        pipeline:Enter()
        pipeline:SetFinishCall(self.pipelineFinishCall)
        self.node_map[pipeline_type] =pipeline
    end
    return pipeline
end

---@param pipeline_type CatCard.PipelineType
---@vararg any
function ActionPipelineCtrl:SetParam(pipeline_type,...)
    if not self.params then
        self.params = {}
    end
    self.params[pipeline_type] = {...}
end

---@param pipeline_type CatCard.PipelineType
---@return any
function ActionPipelineCtrl:GetParam(pipeline_type)
    local res = self.params[pipeline_type]
    if res then
        return table.unpack(res)
    end
end

---@param pipeline_type CatCard.PipelineType
function ActionPipelineCtrl:ReleaseParam(pipeline_type)
    if not self.params then
        return
    end
    local param = self.params[pipeline_type]
    if param then
        self.params[pipeline_type] = nil
        PoolUtil.ReleaseTable(param)
    end
end

---@param pipeline_type CatCard.PipelineType
function ActionPipelineCtrl:Check(pipeline_type,...)
    local pipeline = self:GetHandler(pipeline_type)
    if pipeline then
        if pipeline:IsRunning() or self:IsPause() then
            self:SetParam(pipeline_type,...)
            return
        end
        self:ReleaseParam(pipeline_type)
        pipeline:Execute(...)
    end
end

function ActionPipelineCtrl:Exit()
    if self.node_map then
        for k,v in pairs(self.node_map) do
            v:Exit()
        end
    end
    CatCardBaseCtrl.Exit(self)
    
end

function ActionPipelineCtrl:Enter()
    self.pipelineFinishCall = handler(self,self.OnFinish)
    CatCardBaseCtrl.Enter(self)
end

return ActionPipelineCtrl