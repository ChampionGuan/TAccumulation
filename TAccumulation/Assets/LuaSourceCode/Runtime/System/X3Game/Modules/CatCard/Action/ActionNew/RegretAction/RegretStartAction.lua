---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/12/30 18:49
---悔牌开始
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
-----@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
-----@class CatCard.RegretStartAction:CatCard.CatCardBaseAction
local RegretStartAction = class("RegretStartAction", BaseAction)

---@param actionData CatCard.RegretStartActionData
function RegretStartAction:Begin(actionData)
    self.actionData = actionData
    self.param = actionData:GetParam()
    self.stateData = self.bll:GetStateData()
    self.aniType = self.param.id
    self.actionState = self.param.args[1]
    ---@type CatCardDialogueCtrl
    self.dialogueCtrl = self:GetCtrl(CatCardConst.Ctrl.Dialogue)
    if #self.param.args >= 3 then
        self:OnStart()
    else
        Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard, "悔牌数据错误......")
        self:End()
    end
end

function RegretStartAction:OnStart()
    self.stateData:SetActionRes(self.param.args[1])
    self.playerType = CatCardConst.PlayerType.ENEMY
    self.cardId = self.param.args[2]
    self.slotIndex = self.param.args[3]
    self.cardIndex = self.bll:GetValidPosIndex(CatCardConst.PlayerType.ENEMY, self.aniType, self.cardId)
    self.isPause = false
    self.bll:SetCurSelectIndex()
    for k, v in pairs(CatCardConst.PlayerType) do
        self.bll:SaveScore(self.bll:GetScore(v), v)
    end
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_CENTER_VIEW)
    self:CheckRes()
end

--抓包成功
function RegretStartAction:CaughtSuccess()
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.TIPS, false)
    self:SetAniPause(true)
    if self.bll:IsCanAction(CatCardConst.PlayerType.PLAYER, self.aniType) then
        self.dialogueCtrl:SetDialogueVariable(CatCardConst.DialogueVariable.REGRETCONDITIONSTORYID, 1)
    else
        self.dialogueCtrl:SetDialogueVariable(CatCardConst.DialogueVariable.REGRETCONDITIONSTORYID, 0)
    end
    ----TODO 播放抓包成功剧情
    ---@type CatCard.ChangeDialogueStateActionData
    local dialogData = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, CatCardConst.PlayerType, handler(self, self.RegretCaughtResult))
    dialogData:SetState(CatCardConst.DialogueState.UndoCardSuccess)
    dialogData:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
    dialogData:Begin()
end

function RegretStartAction:PlayRegretAni(is_revert, player_type, callback)
    self.playerType = player_type
    local is_play_ui_ani = false
    if player_type == CatCardConst.PlayerType.ENEMY and not is_revert then
        is_play_ui_ani = true
    end
    self.bll:CheckAnimation(CatCardConst.AnimationType.REGRET_CARD, is_revert, callback, player_type, self.slotIndex, self.cardId, self.cardIndex, is_play_ui_ani)
end

function RegretStartAction:PlayAniEnd()
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.TIPS, false)
    if self.actionState == CatCardConst.RegretState.BEGINNING then
        self.actionState = CatCardConst.RegretState.CAUGHTFAILED
    end

    self:SendRegretMsg(self.actionState, self.cardId, self.slotIndex)
end

---检测悔牌结果
function RegretStartAction:CheckRes()
    local res = self.stateData:GetSpState()
    if res == CatCardConst.RegretState.BEGINNING then
        --TODO
        --GamePlayMgr.GetController():ChangeState("UndoCard_CoverUp")
        self:PlayRegretAni(false, self.playerType, handler(self, self.PlayAniEnd))
    end
end

--重启动画
function RegretStartAction:RegretCaughtResult()
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.REGRET, false)
    local choose = self.dialogueCtrl:GetDialogueVariable(CatCardConst.DialogueVariable.REGRETSTORYID)
    if choose == 1 then
        --阻止男主
        self.actionState = CatCardConst.RegretState.CAUGHTSUC_PRE
        self:RegretStopHim()
    elseif choose == 2 then
        --放过男主，也尝试换牌
        self.actionState = CatCardConst.RegretState.CAUGHTSUC_MINECHANGE
        self.stateData:SetSpState(self.actionState)
        --TODO 
        --等剧情结束后设置动画恢复
        ---@type CatCard.ChangeDialogueStateActionData
        local playDialog = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, CatCardConst.PlayerType.PLAYER, function()
            self:SetAniPause(false)
        end)
        playDialog:SetState(CatCardConst.DialogueState.UndoCardSucceedLetItGoChangeToo)
        playDialog:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
        playDialog:Begin()
    elseif choose == 3 then
        --放过男主，女主放弃换牌
        self.actionState = CatCardConst.RegretState.CAUGHTSUC_MINECANCEL
        ---@type CatCard.ChangeDialogueStateActionData
        local playDialog = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, CatCardConst.PlayerType.PLAYER, function()
            self:SetAniPause(false)
        end)
        playDialog:SetState(CatCardConst.DialogueState.UndoCardSucceedLetItGoNoChange)
        playDialog:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
        playDialog:Begin()
    else
        Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard, "错误选择结果 choose=%s,请检查剧情返回值", choose)
        self.actionState = CatCardConst.RegretState.CAUGHTFAILED
        self:SetAniPause(false)
    end
end

function RegretStartAction:SendRegretMsg(actionState, cardId, slotIndex)
    if actionState ~= CatCardConst.RegretState.CAUGHTSUC_MINECHANGE then
        self.actionData:SetIsBreak(true)
        self.bll:CheckAction(CatCardConst.SpecialType.NET_WORK, CatCardConst.NetworkType.MIAOSPUNDO, function()
            self:End()
        end, actionState, cardId, slotIndex)
    else
        self:End()
    end
end

function RegretStartAction:RegretStopHim()
    local playDialog = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, CatCardConst.PlayerType.PLAYER, function()
        self:PlayRegretAni(true, self.playerType, handler(self, self.PlayAniEnd))
        self.bll:SetAniPause(false)
    end)
    playDialog:SetState(CatCardConst.DialogueState.UndoCardSucceedStopHim)
    playDialog:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
    playDialog:Begin()
end

function RegretStartAction:RegretPassEvent()
    if self.is_pause then
        self:SetAniPause(false)
    else
        self:End()
    end
end

function RegretStartAction:ChangeCardData()
    local slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slotIndex)
    local card_data = self.bll:GetData(CatCardConst.CardType.CARD, self.cardIndex, self.playerType)
    local card_id = slot_data:GetCardId()
    card_data:SetId(card_id)
    slot_data:SetCardId(self.cardId)
    self.cardId = card_id
end

function RegretStartAction:OnAddEventListener()
    EventMgr.AddListener(CatCardConst.Event.REGRET_RECEIVE_MSG_EVENT, self.RegretReply, self)
    EventMgr.AddListener(CatCardConst.Event.REGRET_CAUGHT_SUCCESS, self.CaughtSuccess, self)
    --EventMgr.AddListener(CatCardConst.Event.REGRET_CAUGHT_SELECT_RESULT, self.RegretCaughtResult, self)
    EventMgr.AddListener(CatCardConst.Event.REGRET_STOP_HIM_EVENT, self.RegretStopHim, self)
    EventMgr.AddListener(CatCardConst.Event.REGRET_PASS_EVENT, self.RegretPassEvent, self)
    EventMgr.AddListener(CatCardConst.Event.REGRET_CHANGE_CARD_DATA_EVENT, self.ChangeCardData, self)
end

--设置动画是否暂停
function RegretStartAction:SetAniPause(is_pause)
    self.is_pause = is_pause
    local running_state = is_pause and CatCardConst.AniRunningState.PAUSE or CatCardConst.AniRunningState.RESUME
    self.bll:ChangeAnimationState(CatCardConst.AnimationType.REGRET_CARD, running_state)
    self.bll:ChangeAnimationState(CatCardConst.AnimationType.MOVE_MODEL, running_state)
    self.bll:SetAniPause(is_pause)
end

function RegretStartAction:End()
    if self.bll then
        self.bll:SetAniPause(false)
    end
    BaseAction.End(self)
end

return RegretStartAction
