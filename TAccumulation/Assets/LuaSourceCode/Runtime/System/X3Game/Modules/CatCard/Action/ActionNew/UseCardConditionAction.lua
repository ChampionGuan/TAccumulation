---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/16 15:12
--- 使用卡条件检测
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.UseCardConditionAction:CatCard.CatCardBaseAction
local UseCardConditionAction = class("UseCardConditionAction", BaseAction)
---@param action_data CatCard.UseCardConditionActionData
function UseCardConditionAction:Begin(action_data)
    local data = action_data:GetData()
    if data:IsFuncCard() then

        ---@type CatCardConst.UseCardCheckType
        local checkType = action_data:GetUseCardCheckType()

        if checkType == CatCardConst.UseCardCheckType.CanUse then
            ---检测是否能使用功能卡
            action_data:SetIsSuccess(self:CheckFuncCard(data, action_data:GetUseCardType()))
            self:End()

        elseif checkType == CatCardConst.UseCardCheckType.SecondConfirm then
            ---点击了使用功能卡 检测是否进行二次弹窗
            self:CheckSecondConfirm(data, action_data:GetUseCardType())
        end

    else
        action_data:SetIsSuccess(true)
        self:End()
    end
end

---@param func_card_type CatCardConst.FuncCardType
---@param use_card_type CatCardConst.UseCardType
function UseCardConditionAction:CheckTips(func_card_type, use_card_type)
    ---@type CatCard.UseCardConditionActionData
    local data = self:GetData()
    if data:IsCanShowTips() then
        local text = data:GetTipsText()
        if string.isnilorempty(text) then
            local conf = CatCardConst.FuncCardTypeConf[func_card_type]
            if conf then
                text = conf.use_failed_text
            end
        end
        data:SetTipsText(text)
    end
end

---@param data CatCardData
---@param use_card_type CatCardConst.UseCardType
function UseCardConditionAction:CheckFuncCard(data, use_card_type)
    local res = false
    local conf = CatCardConst.FuncCardTypeConf[data:GetEffectId()]
    if not conf then
        res = true
    else
        if conf.use_card_condition_check then
            res = self:CheckCondition(data:GetEffectId(), use_card_type)
            if not res then
                self:CheckTips(data:GetEffectId(), use_card_type)
            end
        else
            res = true
        end
    end
    return res
end

---@param func_card_type CatCardConst.FuncCardType
---@param use_card_type CatCardConst.UseCardType
function UseCardConditionAction:CheckCondition(func_card_type, use_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf and conf.use_card_condition_check then
        local func = self[conf.use_card_condition_check]
        if func then
            return func(self, func_card_type, use_card_type)
        else
            Debug.LogErrorFormat("[喵喵牌]:使用功能牌[%s]条件检测错误，未实现检测方法[%s]", func_card_type, conf.use_card_condition_check)
        end
    end
    return true
end

---检测功能卡使用后的二次弹窗
---@param data CatCardData
---@param use_card_type CatCardConst.UseCardType
function UseCardConditionAction:CheckSecondConfirm(data, use_card_type)

    ---@type CatCard.UseCardActionData
    local actionData = self:GetData()

    local conf = CatCardConst.FuncCardTypeConf[data:GetEffectId()]
    if not conf or not conf.second_confirm_check then
        ---不需要二次弹窗
        actionData:SetIsSuccess(true)
        self:End()
        return
    end

    local func = self[conf.second_confirm_check]
    if func then
        func(self, data:GetEffectId())
    else
        Debug.LogErrorFormat("[喵喵牌]:使用功能牌[%s]二次确认条件检测错误，未实现检测方法[%s]", data:GetEffectId(), conf.second_confirm_check)
    end
end

--region 每种功能卡使用条件检测
---@param use_card_type CatCardConst.UseCardType
function UseCardConditionAction:UseVetoCard(func_card_type, use_card_type)
    if use_card_type == CatCardConst.UseCardType.Query then
        return true
    end
    return false
end

---使用需要格子为目标的卡
---@param func_card_type
function UseCardConditionAction:UseSlotTargetCard(func_card_type, use_card_type)
    ---@type CatCardConst.FuncCardTypeConf
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        ---@type CatCard.TargetFilterActionData
        local action = self.bll:GetActionData(CatCardConst.ActionType.TargetFilter, self:GetData():GetPlayerType())

        local select_target_owner = CatCardConst.SelectTargetOwner.All
        local conf = CatCardConst.FuncCardTypeConf[func_card_type]
        if conf then
            if conf.target_owner_type then
                select_target_owner = self.bll:ConvertSelectTargetOwner(conf.target_owner_type, self:GetData():GetPlayerType())
            end
        end

        action:Set(CatCardConst.SelectTargetType.Slot, conf.target_filter_type, select_target_owner)

        action:Begin()
        local is_empty = action:IsTargetsEmpty()
        action:End()
        if is_empty then
            return false
        end
    end
    return true
end

function UseCardConditionAction:UseStealCard(func_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        local funcDiscard = self.bll:GetStateData():GetFiveFuncCard()
        local num = table.nums(funcDiscard)
        if num == 0 then
            conf.use_failed_text = UITextConst.UI_TEXT_35035
            return false
        end
        conf.use_failed_text = UITextConst.UI_TEXT_35034
        local isExist = false --是否存在非顺手牵喵功能卡
        for i, v in pairs(funcDiscard) do
            if v ~= conf.cardId then
                isExist = true
                break
            end
        end
        return isExist
    end
end

---使用贪心喵时验证功能牌库是否为空
function UseCardConditionAction:UseGreedyCard(func_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        local funcPileCount = self.bll:GetStateData():GetFuncPileCount()
        if funcPileCount == 0 then
            return false
        end
    end
    return true
end

---使用发财喵验证数字牌库是否为空
function UseCardConditionAction:UseRichCard(func_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        local numPileCount = self.bll:GetStateData():GetNumPileCount()
        if numPileCount == 0 then
            return false
        end
    end
    return true
end

---使用跳过喵限制(当男主已有跳过buff时，不可再用)
function UseCardConditionAction:UsePassCard(func_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        local buffData = self.bll:GetStateData():GetBuffData(CatCardConst.PlayerType.ENEMY)
        if next(buffData) then
            for i, v in pairs(buffData) do
                if v.ID == CatCardConst.BuffType.PassCard then
                    return false
                end
            end
        end
    end
    return true
end

---使用冰冻喵限制（当男主已有冰冻buff时，不可再用）
function UseCardConditionAction:UseFrozenCard(func_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        local buffData = self.bll:GetStateData():GetBuffData(CatCardConst.PlayerType.ENEMY)
        if next(buffData) then
            for i, v in pairs(buffData) do
                if v.ID == CatCardConst.BuffType.FrozenCard then
                    return false
                end
            end
        end
    end
    return true
end

---使用兴奋喵限制（当女主已有兴奋buff时或者女主有跳过buff时，不可再用）
function UseCardConditionAction:UseExcitedCard(func_card_type)
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then
        local buffData = self.bll:GetStateData():GetBuffData(CatCardConst.PlayerType.PLAYER)
        if next(buffData) then
            for i, v in pairs(buffData) do
                if v.ID == CatCardConst.BuffType.ExciteCard then
                    conf.use_failed_text = UITextConst.UI_TEXT_35041
                    return false
                elseif v.ID == CatCardConst.BuffType.PassCard then
                    conf.use_failed_text = UITextConst.UI_TEXT_35042
                    return false
                end
            end
        end
    end
    return true
end

-----使用过河拆桥喵限制（当男主没有手牌时，无法使用）
--function UseCardConditionAction:UseShowCard(func_card_type)
--    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
--    if conf then
--        local count = self.bll:GetCardCount(CatCardConst.PlayerType.ENEMY)
--        if count == 0 then
--            return false
--        end
--    end
--    return true
--end
--endregion

---使用兴奋喵时的二次确认检查
function UseCardConditionAction:SecondConfirmExcitedCard(func_card_type)
    ---@type CatCard.UseCardActionData
    local actionData = self:GetData()
    local conf = CatCardConst.FuncCardTypeConf[func_card_type]
    if conf then

        ---统计数字牌数量
        local count = 0
        ---@type CatCardData[]
        local cards = self.bll:GetDataList(CatCardConst.CardType.CARD, CatCardConst.PlayerType.PLAYER)
        for k, v in pairs(cards) do
            local subType = v:GetSubType()
            if subType == CatCardConst.SubType.NORMALCARD then
                count = count + 1
            end
        end
        PoolUtil.ReleaseTable(cards)

        if count < 2 then
            ---数字手牌不足2张 需要弹出二次确认框
            UICommonUtil.ShowMessageBox(conf.second_confirm_text, {
                { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_text = UITextConst.UI_TEXT_5701, btn_call = function()
                    ---确认
                    actionData:SetIsSuccess(true)
                    self:End()
                end },

                { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_text = UITextConst.UI_TEXT_5702, btn_call = function()
                    ---取消
                    actionData:SetIsSuccess(false)
                    self:End()
                end }
            })

            return
        end
    end

    actionData:SetIsSuccess(true)
    self:End()
end

---使用贪心喵二次确认
function UseCardConditionAction:SecondConfirmGreedyCard(func_card_type)
    ---@type CatCard.UseCardConditionActionData
    local actionData = self:GetData()
    local cardCount = self.bll:GetCardCount(CatCardConst.PlayerType.PLAYER)
    local callBack = function(state)
        actionData:SetIsSuccess(state)
        self:End()
    end
    if cardCount == CatCardConst.MAX_CARD_COUNT then
        local conf = CatCardConst.FuncCardTypeConf[actionData:GetData():GetEffectId()]
        UICommonUtil.ShowMessageBox(conf.second_confirm_text, { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
            callBack(true)
        end }, { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_call = function()
            callBack(false)
        end } })
        return
    end
    callBack(true)
end

---使用发财喵二次确认（手牌满时）
function UseCardConditionAction:SecondConfirmRichCard()
    ---@type CatCard.UseCardConditionActionData
    local actionData = self:GetData()
    local cardCount = self.bll:GetCardCount(CatCardConst.PlayerType.PLAYER)
    local callBack = function(state)
        actionData:SetIsSuccess(state)
        self:End()
    end
    if cardCount == CatCardConst.MAX_CARD_COUNT then
        local conf = CatCardConst.FuncCardTypeConf[actionData:GetData():GetEffectId()]
        UICommonUtil.ShowMessageBox(conf.second_confirm_text, { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
            callBack(true)
        end }, { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_call = function()
            callBack(false)
        end } })
        return
    end
    callBack(true)
end

---使用给喵看看二次确认
function UseCardConditionAction:SecondConfirmShowCard(func_card_type)
    local actionData = self:GetData()
    local cardCount = self.bll:GetCardCount(CatCardConst.PlayerType.ENEMY)
    local callBack = function(state)
        actionData:SetIsSuccess(state)
        self:End()
    end
    if cardCount == 0 then
        local conf = CatCardConst.FuncCardTypeConf[actionData:GetData():GetEffectId()]
        UICommonUtil.ShowMessageBox(conf.second_confirm_text, { { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
            callBack(true)
        end }, { btn_type = GameConst.MessageBoxBtnType.CANCEL, btn_call = function()
            callBack(false)
        end } })
        return
    end
    callBack(true)
end

return UseCardConditionAction