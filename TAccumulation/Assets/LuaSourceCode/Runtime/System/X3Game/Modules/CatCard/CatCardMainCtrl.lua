---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/8/25 16:39
---
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
local CatCardMainCtrl = class("CatCardMainCtrl")

function CatCardMainCtrl:Init()
    self:RegisterEvent()
    self.ctrl_map = {}
    self.is_init = false
    self.is_exit = true
    ---@type CatCardBLL
    self.bll = nil
    self:InitCtrl()
end

---事件帧事件
function CatCardMainCtrl:OnAnimationEvent(event_name)
    if event_name == CatCardConst.AnimationEvent.MIAO_APPEAR_END then
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_PUTDOWN)
    end
end

function CatCardMainCtrl:OnEventCatCardBreak()
    self.bll:SetIsBreak(true)
end

function CatCardMainCtrl:OnEventCatCardContinue()
    self.bll:SetIsBreak(false)
end

function CatCardMainCtrl:OnGuideEvent(msg)
    if not self.bll:IsInGuide() then
        return
    end
    if self.bll:IsBreak() then
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_CONTINUE)
    end
end

function CatCardMainCtrl:OnPause()
    for k, v in pairs(self.ctrl_map) do
        v:SetPause(true)
    end
end

function CatCardMainCtrl:OnResume()
    for k, v in pairs(self.ctrl_map) do
        v:SetPause(false)
    end
end

function CatCardMainCtrl:OnEventStopPipeline()
    local ctrl = self:GetCtrl(CatCardConst.Ctrl.PIPELINE_ACTION)
    if ctrl then
        ctrl:Exit()
    end
    ctrl = self:GetCtrl(CatCardConst.Ctrl.PIPELINE)
    if ctrl then
        ctrl:Exit()
    end
end

function CatCardMainCtrl:RegisterEvent()
    for k, v in pairs(CatCardConst.AnimationEvent) do
        EventMgr.AddListener(v, function()
            self:OnAnimationEvent(v)
        end, self)
    end
    EventMgr.AddListener(CatCardConst.Event.CAT_CHECK_STATE, self.CheckState, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_ACTION, self.CheckAction, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_ANIMATION, self.CheckAnimation, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_SOUND, self.CheckSound, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_EFFECT, self.CheckEffect, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_RUNNIG, self.CheckRunning, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHANGE_ANIMATION_RUNNING_STATE, self.ChangeAnimationState, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_BREAK, self.OnEventCatCardBreak, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_EXECUTE_ACTION, self.CheckPipelineAction, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_PIPELINE, self.CheckPipeline, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_ENTER, self.OnEnter, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_EXIT, self.OnExit, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_GAME_PAUSE, self.OnPause, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_GAME_RESUME, self.OnResume, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_STOP_PIPE_LINE, self.OnEventStopPipeline, self)

end

function CatCardMainCtrl:CheckRunning()
    if self:IsExit() then
        return
    end
    local is_running = false
    local ctrl, ctrl_type
    for k, v in pairs(CatCardConst.Ctrl) do
        ctrl = self:GetCtrl(v)
        if ctrl:IsRunning() then
            ctrl_type = k
            is_running = true
            break
        end
    end
    if self.bll:IsDebugMode() then
        local state_name = self.bll:GetStateName(self.bll:GetStateData():GetState())

        if is_running then
            self.bll:Log(os.clock(), " 当前正在执行的ctrl:", ctrl_type, "   当前state：", state_name)
        else
            self.bll:Log(os.clock(), " 当前处于空闲,当前状态：", state_name)
        end
    end
    self.bll:SetIsRunning(is_running)
end

---@param ctrl_type CatCardConst.Ctrl
---@param is_create boolean
---@return BaseCatCardCtrl
function CatCardMainCtrl:GetCtrl(ctrl_type, is_create)
    local ctrl = self.ctrl_map[ctrl_type]
    if not ctrl and is_create then
        ctrl = require(CatCardConst.CtrlConf[ctrl_type]).new()
        self.ctrl_map[ctrl_type] = ctrl
    end
    return ctrl
end

---初始化
function CatCardMainCtrl:InitCtrl()
    if self.is_init then
        return
    end
    self.is_init = true
    for k, v in pairs(CatCardConst.Ctrl) do
        self:GetCtrl(v, true)
    end
end

---检测状态
function CatCardMainCtrl:CheckState(state, ...)
    if self:IsExit() then
        return
    end
    local state_ctrl = self:GetCtrl(CatCardConst.Ctrl.STATE)
    state_ctrl:Check(state, ...)
end

---检测action
function CatCardMainCtrl:CheckAction(sp_action, ...)
    if self:IsExit() then
        return
    end
    local action_ctrl = self:GetCtrl(CatCardConst.Ctrl.ACTION)
    action_ctrl:Check(sp_action, ...)
end

---检测动画
function CatCardMainCtrl:CheckAnimation(ani_type, ...)
    if self:IsExit() then
        return
    end
    local ani_ctrl = self:GetCtrl(CatCardConst.Ctrl.ANIMATION)
    ani_ctrl:Check(ani_type, ...)
end

---@param pipeline_type CatCard.PipelineType
---@vararg any
function CatCardMainCtrl:CheckPipeline(pipeline_type, ...)
    if self:IsExit() or self.bll:IsExited() then
        return
    end
    local pipeline_ctrl = self:GetCtrl(CatCardConst.Ctrl.PIPELINE)
    pipeline_ctrl:Check(pipeline_type, ...)
end

---@param action_type CatCard.ActionType
---@param action_data CatCard.BaseActionData
function CatCardMainCtrl:CheckPipelineAction(action_type, action_data)
    if self:IsExit() or self.bll:IsExited() then
        return
    end
    local action_ctrl = self:GetCtrl(CatCardConst.Ctrl.PIPELINE_ACTION)
    action_ctrl:Check(action_type, action_data)
end

---修改动画运行状态
function CatCardMainCtrl:ChangeAnimationState(ani_type, running_state, ...)
    if self:IsExit() then
        return
    end
    local ani_ctrl = self:GetCtrl(CatCardConst.Ctrl.ANIMATION)
    ani_ctrl:ChangeAniState(ani_type, running_state, ...)
end

---检测动画
function CatCardMainCtrl:CheckSound(sound_type, ...)
    if self:IsExit() then
        return
    end
    local ani_ctrl = self:GetCtrl(CatCardConst.Ctrl.SOUND)
    ani_ctrl:Check(sound_type, ...)
end

function CatCardMainCtrl:CheckEffect(effect_type, ...)
    if self:IsExit() then
        return
    end
    local ani_ctrl = self:GetCtrl(CatCardConst.Ctrl.EFFECT)
    ani_ctrl:Check(effect_type, ...)
end

function CatCardMainCtrl:IsExit()
    return self.is_exit
end

function CatCardMainCtrl:OnEnter()
    self.is_exit = false
    self.bll = BllMgr.Get("CatCardBLL")
    EventMgr.AddListener(Const.Event.GUIDE_TO_CLIENT, self.OnGuideEvent, self)
    self:EnterCtrl()
end

function CatCardMainCtrl:OnExit(data)
    self.is_exit = true
    if not self.bll:GetStateData():IsShowFinalResult() then
        ---防止喵喵牌入口UI在未退出喵喵牌场景时先显示出来
        TimerMgr.AddTimer(0.1, function()
            for i, v in pairs(CatCardConst.CLOSE_WND_VIEW) do
                UIMgr.Close(v)
            end
        end)
    else
        for i, v in pairs(CatCardConst.CLOSE_WND_VIEW) do
            UIMgr.Close(v)
        end
    end
    self.bll = nil
    self:ExitCtrl()
    EventMgr.RemoveListener(Const.Event.GUIDE_TO_CLIENT, self.OnGuideEvent, self)
end

---OnExit
function CatCardMainCtrl:ExitCtrl()
    for k, v in pairs(self.ctrl_map) do
        v:Exit()
    end
end

---Enter
function CatCardMainCtrl:EnterCtrl()
    for k, v in pairs(self.ctrl_map) do
        v:SetOwner(self)
        v:Enter()
    end
end

CatCardMainCtrl:Init()
return CatCardMainCtrl