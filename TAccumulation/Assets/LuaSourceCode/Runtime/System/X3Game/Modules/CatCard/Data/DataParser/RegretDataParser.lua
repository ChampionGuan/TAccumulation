---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2023/1/10 10:46
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.BaseDataParser
local BaseDataParser = require(CatCardConst.CAT_CARD_BASE_DATA_PARSER_PATH)
---@class CatCard.RegretDataParser:CatCard.BaseDataParser
local RegretDataParser = class("RegretDataParser", BaseDataParser)

function RegretDataParser:ctor()
    BaseDataParser.ctor(self)
end

---@param data {SPAction}
function RegretDataParser:Parse(data)
    local start_order = 0
    local player_type = 0
    if data.PlayerType then
        player_type = data.PlayerType
    else
        player_type = self.bll:GetPlayerType(data.Seat)
    end
    start_order = self:ParseBeginAction(player_type, start_order)
    if not self:IsFinish() then
        local data = self:GetRunningActionData()
        if data then
            start_order = data:GetOrder() + 1
        end
    end
    if data.SPAction then
        start_order = self:ParseAction(data.SPAction, start_order, player_type)
    end
    start_order = self:ParseEndAction(player_type, start_order)
    self:Prepare()
end

function RegretDataParser:ParseAction(spAction, order, player_type)
    local action_list = PoolUtil.GetTable()
    local state = spAction.args[1]
    self.stateData:SetSpState(state)
    if state == CatCardConst.RegretState.BEGINNING then
        action_list = {
            [1] = {
                ActionType = CatCardConst.ActionType.RegretStart,
                Params = spAction
            },
            [2] = {
                ActionType = CatCardConst.ActionType.ChangeDialogueState,
                Params = { CatCardConst.DialogueState.UndoCardCoverUp },
                isParallel = true
            },
            [3] = {
                ActionType = CatCardConst.ActionType.RegretEnd,
            }
        }
    elseif state == CatCardConst.RegretState.CAUGHTSUC_MINECHANGE then
        if #spAction.args == 1 then
            action_list = {
                [1] = {
                    ActionType = CatCardConst.ActionType.RegretSelect,
                },
                [2] = {
                    ActionType = CatCardConst.ActionType.ChangeDialogueState,
                    Params = { CatCardConst.DialogueState.UndoCardSucceedLetItGoUndoTooThinking },
                    isParallel = true
                },
                [3] = {
                    ActionType = CatCardConst.ActionType.ChangeDialogueState,
                    Params = { CatCardConst.DialogueState.UndoCardSucceedLetItGoAfterChange }
                },
                [4] = {
                    ActionType = CatCardConst.ActionType.RegretEnd,
                }
            }
        else
            self.stateData:SetSpState(CatCardConst.RegretState.END)
            action_list = {
                [1] = {
                    ActionType = CatCardConst.ActionType.ChangeDialogueState,
                    Params = { CatCardConst.DialogueState.UndoCardSucceedLetItGoUndoTooRevert }
                },
                [2] = {
                    ActionType = CatCardConst.ActionType.RegretEnd,
                }
            }
        end

    else
        local dialog = ""
        if state == CatCardConst.RegretState.CAUGHTFAILED then
            dialog = CatCardConst.DialogueState.UndoCardFailed
        elseif state == CatCardConst.RegretState.CAUGHTSUC_PRE then
            --dialog = CatCardConst.DialogueState.UndoCardSucceedStopHim
        elseif state == CatCardConst.RegretState.CAUGHTSUC_MINEMAX then
            dialog = CatCardConst.DialogueState.UndoCardSucceedLetItGoNoChange
        elseif state == CatCardConst.RegretState.CAUGHTSUC_MINECANCEL then
            --dialog = CatCardConst.DialogueState.UndoCardSucceedLetItGoNoChange
        end
        self.stateData:SetSpState(CatCardConst.RegretState.END)
        if string.isnilorempty(dialog) then
            action_list = {
                [1] = {
                    ActionType = CatCardConst.ActionType.RegretEnd
                }
            }
        else
            action_list = {
                [1] = {
                    ActionType = CatCardConst.ActionType.ChangeDialogueState,
                    Params = { dialog },
                },
                [2] = {
                    ActionType = CatCardConst.ActionType.RegretEnd
                }
            }
        end
    end
    if self.bll:IsDebugMode() then
        self.bll:LogFormat("解析数据结果：state = %s,[%s]", state, table.dump(action_list, "RegretDataParser"))
    end
    order = BaseDataParser.ParseActionList(self, action_list, order, player_type)
    return order
end

return RegretDataParser