---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/9 22:07
---目标单位选中之后的表现
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.TargetStateAction:CatCard.CatCardBaseAction
local TargetStateAction = class("TargetStateAction", BaseAction)
local GetSelectState

---@param action_data CatCard.TargetStateActionData
function TargetStateAction:Begin(action_data)
    local target_type = action_data:GetTargetType()
    local pos_index = action_data:GetPosIndex()
    local player_type = action_data:GetPlayerType()
    local select_state = action_data:GetSelectState()
    select_state = GetSelectState(select_state, target_type, pos_index, player_type)
    action_data:SetSelectState(select_state)
    if action_data:IsUnselectAll() then
        self:UnselectAllTarget(action_data)
    else
        --可选相关
        self:CheckCanSelect(action_data)
        if action_data:GetTargetType() == CatCardConst.CardType.CARD then
            self:CheckCard(action_data:GetData())
        elseif action_data:GetTargetType() == CatCardConst.CardType.SLOT then
            self:CheckSlot()
        end
    end
    self:End()
end

--region 卡相关操作

---@param data CatCardData
function TargetStateAction:CheckCard(data)
    ---@type CatCard.TargetStateActionData
    local action_data = self:GetData()
    local is_select = action_data:IsSelectStateEnable(CatCardConst.TargetShowState.Select)
    self:SetSelect(is_select)

end

--endregion

--region 格子相关

---@param data SlotData
function TargetStateAction:CheckSlot(data)
    ---@type CatCard.TargetStateActionData
    local action_data = self:GetData()
    local is_show_cat = action_data:IsSelectStateEnable(CatCardConst.TargetShowState.SelectCat)
    self:SetSelect(is_show_cat or action_data:IsSelectStateEnable(CatCardConst.TargetShowState.Select))
    self:SetSelectCat(is_show_cat)
    self:SetSlotPreview(action_data:IsSelectStateEnable(CatCardConst.TargetShowState.Preview), action_data:GetPosIndex())
end

--endregion

---@param action_data CatCard.TargetStateActionData
function TargetStateAction:UnselectAllTarget(action_data)
    self:SetSelect(false)
    self:SetSelect(false, true)
    if action_data:GetTargetType() == CatCardConst.CardType.SLOT then
        self:SetSelectCat(false, action_data:GetPosIndex())
        self:SetSlotPreview(false, action_data:GetPosIndex())
    end
end

---@param action_data CatCard.TargetStateActionData
function TargetStateAction:CheckCanSelect(action_data)
    local is_can_select = action_data:IsSelectStateEnable(CatCardConst.TargetShowState.CanSelect)
    self:SetSelect(is_can_select, true)
end

---@param is_select boolean
---@param is_can_select boolean
function TargetStateAction:SetSelect(is_select, is_can_select)
    ---@type CatCard.TargetStateActionData
    local action_data = self:GetData()
    local card_type = action_data:GetTargetType()
    local pos_idx = action_data:GetPosIndex()
    local player_type = action_data:GetPlayerType()
    if is_can_select then
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_CAN_SELECT, is_select, card_type, pos_idx, player_type)
    else
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_SELECT, is_select, card_type, pos_idx, player_type)
    end
end

---@param is_select boolean
---@param pos_index int
function TargetStateAction:SetSelectCat(is_select, pos_index)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_CAT_SELECT, pos_index, is_select)
end

---@param is_active boolean
---@param pos_index int
function TargetStateAction:SetSlotPreview(is_active, pos_index)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_SLOT_PREVIEW_ACTIVE, is_active, pos_index)
end

---@param cur_state int
---@param state int
---@return boolean
local function IsStateEnable(cur_state, state)
    return cur_state & state == state
end

---@param cur_state int
---@param state
---@param enable
---@return boolean
local function SetStateEnable(cur_state, state, enable)
    if enable then
        cur_state = cur_state | state
    else
        cur_state = cur_state & (~state)
    end
    return cur_state
end

---@param state int
---@return int
GetSelectState = function(state, card_type, pos_index, player_type)
    local selectStateMap = BllMgr.GetCatCardBLL():GetSelectStateMap()
    local state_map = selectStateMap[card_type]
    if not state_map then
        state_map = {}
        selectStateMap[card_type] = state_map
    end
    if card_type == CatCardConst.CardType.CARD then
        if not state_map[player_type] then
            state_map[player_type] = {}
        end
        state_map = state_map[player_type]
    end
    local cur_state = state_map[pos_index]
    if not cur_state then
        cur_state = state
        state_map[pos_index] = cur_state
    else
        if state == CatCardConst.TargetShowState.None then
            cur_state = state
        else
            for k, v in pairs(CatCardConst.DisableSelectStateConf) do
                if IsStateEnable(state, k) then
                    cur_state = SetStateEnable(cur_state, v, false)
                    state = SetStateEnable(state, k, false)
                end
            end
            cur_state = SetStateEnable(cur_state, state, true)
        end
        state_map[pos_index] = cur_state
    end
    return cur_state
end

return TargetStateAction