---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/14 10:59
--- 选卡逻辑
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type BaseCatCardCtrl
local CatCardBaseCtrl = require(CatCardConst.BASE_CTRL_PATH)
---@class CatCardSelectCtrl:BaseCatCardCtrl
local CatCardSelectCtrl = class("CatCardSoundCtrl", CatCardBaseCtrl)

function CatCardSelectCtrl:ctor()
    CatCardBaseCtrl.ctor(self)
    ---@type CatCard.SelectTargetActionData
    self.select = nil
    self.selectTargetOwner = CatCardConst.SelectTargetOwner.Player
    self.selectTargetMode = CatCardConst.SelectTargetMode.Single | CatCardConst.SelectTargetMode.ClickSpaceCancel
    self.selectCall = handler(self, self.OnSelect)
    self.inValidSelectCall = handler(self, self.OnInValidSelect)
    self.customCheckCall = handler(self, self.OnCustomCheck)
end

---@param card_type CatCardConst.CardType
---@param pos_idx int
---@param player_type CatCardConst.PlayerType
function CatCardSelectCtrl:OnSelect(card_type, pos_idx, player_type)
    local pop_st = self.bll:GetStateData():GetPopState()
    if pop_st == CatCardConst.PopCardState.None then
        return
    end
    if card_type == CatCardConst.CardType.SLOT then
        if pop_st == CatCardConst.PopCardState.PopFuc then
        else
            self:UseNumCard()
        end
    end
end

---点击了不可选对象
---@param action CatCard.SelectTargetAction
function CatCardSelectCtrl:OnInValidSelect(cardType, posIndex, playerType,action)
    local pop_st = self.bll:GetStateData():GetPopState()
    if pop_st == CatCardConst.PopCardState.None then
        return
    end

    if cardType ~= CatCardConst.CardType.CARD then
        ---只处理点击了不可选的手牌的情况 点到格子上的话不管
        return
    end

    local data = self.bll:GetData(cardType, posIndex, playerType)

    if not data then
        Debug.LogErrorFormat("CatCardSelectCtrl:OnInValidSelect data为nil,cardType:[%s],posIndex:[%s],playerType:[%s]",cardType,posIndex,playerType)
        return
    end

    if pop_st == CatCardConst.PopCardState.PopFuc then
        if data.player_type == CatCardConst.PlayerType.ENEMY then
            return
        end
        if data.conf.SubClass == CatCardConst.SubType.NORMALCARD then

            ---功能牌阶段点击了数字牌
            local cur_select_card_data = self.bll:GetData( action.lastCardType,action.lastIndex,action.playerType)
            if cur_select_card_data then
                ---当前选中了功能牌 取消功能牌选中
                action:SetClick()
            else
                ---当前没选中任何牌 跳字提示
                local id = CatCardConst.TypeConf[CatCardConst.CardType.CARD].TOUCH_NOT_VALID_NUM_TEXT_ID
                UICommonUtil.ShowMessage(id)
            end
        else

            ---功能牌阶段点击了不可选的功能牌
            ---可能有冰冻buff
            if self.bll:HasBuff(CatCardConst.BuffType.FrozenCard, CatCardConst.PlayerType.PLAYER) then
                local id = CatCardConst.TypeConf[CatCardConst.CardType.CARD].TOUCH_NOT_VALID_FROZEN_TEXT_ID
                UICommonUtil.ShowMessage(id)
            end

        end

    elseif pop_st == CatCardConst.PopCardState.PopNum or pop_st == CatCardConst.PopCardState.PopNumPlus then
        ---数字牌阶段点击了功能牌

        local cur_select_card_data = self.bll:GetData( action.lastCardType,action.lastIndex,action.playerType)

        if cur_select_card_data then
            ---当前选中了数字牌 取消数字牌选中
            action:SetClick()
        else
            if data.player_type == CatCardConst.PlayerType.ENEMY then
                return
            end
            ---当前没选任何牌 跳字提示
            local id = CatCardConst.TypeConf[CatCardConst.CardType.CARD].TOUCH_NOT_VALID_FUNC_TEXT_ID
            UICommonUtil.ShowMessage(id)
        end


    end
end

---自定义点击检查
function CatCardSelectCtrl:OnCustomCheck(cardType, posIndex, playerType)

    local pop_st = self.bll:GetStateData():GetPopState()
    if pop_st == CatCardConst.PopCardState.PopNum or pop_st == CatCardConst.PopCardState.PopNumPlus then

        if cardType == CatCardConst.CardType.SLOT and (not self.bll:GetCurSelectIndex(CatCardConst.CardType.CARD)) then
            ---数字牌阶段 未选中数字牌的情况下 不能选中格子
            return false
        end

    end

    if pop_st  == CatCardConst.PopCardState.PopFuc then
        if not self.bll:GetFuncEffectEndState() then
            return false
        end
    end
    local wanderState = self.bll:GetStateData():GetSpState()
    if wanderState == CatCardConst.WanderingState.WANDERING then
        if cardType == CatCardConst.CardType.SLOT then
            ---@type SlotData
            local slotData = self.bll:GetData(CatCardConst.CardType.SLOT,posIndex)
            if slotData then
                if not slotData:IsOccupied() then
                    return false
                end
            end
        end
    end

    return true
end

---使用数字牌
function CatCardSelectCtrl:UseNumCard()
    local player_type = CatCardConst.PlayerType.PLAYER
    ---@type CatCard.UseCardActionData
    local action_data = self.bll:GetActionData(CatCardConst.ActionType.UseCard, player_type)
    if not action_data then
        return
    end
    local data = self.bll:GetData(CatCardConst.CardType.CARD, self.bll:GetCurSelectIndex(CatCardConst.CardType.CARD), player_type)
    if not data then
        return
    end
    action_data:Set(data:GetId(), data:GetIndex(), self.bll:GetCurSelectIndex(CatCardConst.CardType.SLOT))
    action_data:Begin()
end

---@param isEnable boolean
function CatCardSelectCtrl:OnEventSetSelectEnable(isEnable)
    self:SetSelectEnable(isEnable)
end

---@param isEnable boolean
function CatCardSelectCtrl:SetSelectEnable(isEnable)
    if not isEnable then
        if self.select and self.select:IsRunning() then
            self.select:End()
            self.select = nil
        end
    else
        self:SetSelectEnable(false)
        if not self.select then
            ---@type CatCard.SelectTargetActionData
            self.select = self.bll:GetActionData(CatCardConst.ActionType.SelectTarget, CatCardConst.PlayerType.PLAYER)

            self.select:SetIsShowCanSelect(true)
            self.select:SetIsCanShowPreview(true)

            self.select:SetSelectCall(self.selectCall)
            self.select:SetInvalidSelectCall(self.inValidSelectCall)
            self.select:SetCustomCheckCall(self.customCheckCall)
        end
        self.select:Set(self:GetSelectParam())
        self.select:Begin()

        ---修复进入数字牌阶段时 还没点数字牌 格子的可选特效就会亮起的bug
        local popState = self.bll:GetStateData():GetPopState()
        if popState == CatCardConst.PopCardState.PopNum or popState == CatCardConst.PopCardState.PopNumPlus then
            self.select.action:SetTargetsCanSelect(false, CatCardConst.SelectTargetType.Slot)
        end
    end
end

---@return
function CatCardSelectCtrl:GetSelectParam()
    local state_data = self.bll:GetStateData()
    local select_target_type = CatCardConst.SelectTargetType.Card
    local select_target_filter_type = CatCardConst.SelectTargetFilterType.FilterByOwner
    local select_target_owner = self.selectTargetOwner
    local select_target_mode = self.selectTargetMode
    if state_data:GetPopState() == CatCardConst.PopCardState.PopFuc then
        select_target_filter_type = select_target_filter_type | CatCardConst.SelectTargetFilterType.FuncCard
    else
        select_target_filter_type = select_target_filter_type | CatCardConst.SelectTargetFilterType.NumCard | CatCardConst.SelectTargetFilterType.EmptySlot
        select_target_type = CatCardConst.SelectTargetType.All
    end

    return select_target_type, select_target_filter_type, select_target_owner, select_target_mode

end

---@param st CatCardConst.PopCardState
function CatCardSelectCtrl:OnPopCardStateChange(st)
    if not self.bll:IsState(CatCardConst.PlayerType.PLAYER) then
        return
    end
    if st ~= CatCardConst.PopCardState.None then
        self:SetSelectEnable(self.bll:GetStateData():IsCanPopCard())
    else
        self:SetSelectEnable(false)
    end
end

---重新检测选中逻辑
function CatCardSelectCtrl:CheckSelect()
    self:OnPopCardStateChange(self.bll:GetStateData():GetPopState())
end

function CatCardSelectCtrl:RegisterEvent()
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_SET_SELECT_ENABLE, self.OnEventSetSelectEnable, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_POPSTATE_CHANGE, self.OnPopCardStateChange, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_CHECK_SELECT, self.CheckSelect, self)
end

function CatCardSelectCtrl:Enter()
    CatCardBaseCtrl.Enter(self)
    self.selectTargetOwner = CatCardConst.SelectTargetOwner.Player
    self.selectTargetMode = CatCardConst.SelectTargetMode.Single | CatCardConst.SelectTargetMode.ClickSpaceCancel
    self.selectCall = handler(self, self.OnSelect)
    self.inValidSelectCall = handler(self, self.OnInValidSelect)
    self.customCheckCall = handler(self, self.OnCustomCheck)
    --if self.bll:GetStateData():GetMode() == CatCardConst.ModeType.Func then
    --    self:RegisterEvent()
    --    self:OnPopCardStateChange(self.bll:GetStateData():GetPopState())
    --else
    --    self.bll:CheckPipeline(CatCardConst.ActionPipelineType.Select)
    --end
    self:RegisterEvent()
    self:OnPopCardStateChange(self.bll:GetStateData():GetPopState())
end

function CatCardSelectCtrl:Exit()
    self:SetSelectEnable(false)
    CatCardBaseCtrl.Exit(self)
end

return CatCardSelectCtrl