---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/9 0:54
--- 场上卡牌/格子选中表现逻辑
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.TargetFilterAction
local BaseAction = require(CatCardConst.ActionConf[CatCardConst.ActionType.TargetFilter])
---@class CatCard.SelectTargetAction:CatCard.TargetFilterAction
local SelectTargetAction = class("SelectTargetAction", BaseAction)

function SelectTargetAction:ctor()
    BaseAction.ctor(self)
    ---@type CatCardConst.CardType
    self.lastCardType = nil
    ---@type int
    self.lastIndex = nil
    ---@type CatCardConst.PlayerType
    self.lastPlayerType = nil
    ---@type fun(type:boolean)
    self.checkUseCall = nil

    ---当前是否在播放功能牌选中动效
    self.isFuncCardAnimPlaying = false

    ---缓存的功能牌选中数据
    self.cachedFuncCardSelectData = nil

    ---当前是否在展示功能牌中
    self.isShowingFuncCard = false
end

---@param action_data CatCard.SelectTargetActionData
function SelectTargetAction:Begin(action_data)
    BaseAction.Begin(self, action_data)
    if not self.checkUseCall then
        self.checkUseCall = handler(self, self.OnCheckUseCondition)
    end
    self:SetTargetsCanSelect(true)
end

---@param res boolean
function SelectTargetAction:OnCheckUseCondition(res)
    self:SetBtnUseActive(true, res)
end

---@param active boolean
function SelectTargetAction:SetTargetsPreview(active)
    ---@type  CatCard.SelectTargetActionData
    local action_data = self:GetData()
    if not action_data or not action_data:IsCanShowPreview() then
        return
    end
    ---@type CatCard.SelectTargetActionData
    local select_state = active and CatCardConst.TargetShowState.Preview or CatCardConst.TargetShowState.DisablePreview
    ---@type CatCard.ShowTargetsStateActionData
    local action_data = self.bll:GetActionData(CatCardConst.ActionType.ShowTargetsState, self:GetData():GetPlayerType())
    action_data:Set(CatCardConst.SelectTargetType.Slot, CatCardConst.SelectTargetFilterType.EmptySlot, CatCardConst.SelectTargetOwner.All, select_state)
    action_data:Begin()
    self:SetTargetsCanSelect(active, CatCardConst.SelectTargetType.Slot)
end

---@param active boolean
---@param target_type CatCardConst.SelectTargetType
function SelectTargetAction:SetTargetsCanSelect(active, target_type)
    ---@type  CatCard.SelectTargetActionData
    local self_data = self:GetData()
    if not self_data:IsShowCanSelect() then
        return
    end
    target_type = target_type or self_data:GetTargetType()
    local select_state = active and CatCardConst.TargetShowState.CanSelect or CatCardConst.TargetShowState.DisableCanSelect
    ---@type CatCard.ShowTargetsStateActionData
    local action_data = self.bll:GetActionData(CatCardConst.ActionType.ShowTargetsState, self:GetData():GetPlayerType())
    action_data:Set(target_type, self_data:GetTargetFilterType(), self_data:GetTargetOwner(), select_state)
    action_data:Begin()
end

---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
function SelectTargetAction:SetSelectModelShow(is_show, card_type, index, player_type)
    if not self.bll then
        return
    end
    local card_data = self.bll:GetData(card_type, index, player_type)

    if player_type == CatCardConst.PlayerType.PLAYER
            and card_type == CatCardConst.CardType.CARD
            and (card_data and card_data:GetSubType() == CatCardConst.SubType.FUNCCARD)
            and is_show
            and not self.isShowingFuncCard then

        ---女主选中功能牌 且当前没有展示中的功能牌 需要播放动效
        self:SelectPlayerFuncCard(is_show, card_type, index, player_type)

    else
        ---否则按原来的逻辑处理
        self:SelectModelShow(is_show, card_type, index, player_type)
    end


end

---选中了女主的功能牌
---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
function SelectTargetAction:SelectPlayerFuncCard(is_show, card_type, index, player_type)

    if self.isFuncCardAnimPlaying then
        ---功能牌动效播放中 将点击到的功能牌数据缓存下来
        local data = PoolUtil.GetTable()
        data.is_show = is_show
        data.card_type = card_type
        data.index = index
        data.player_type = player_type
        self.cachedFuncCardSelectData = data
        return
    else
        self.isFuncCardAnimPlaying = true
    end

    ---播放女主功能牌选中动效
    ---@type CatCard.FuncCardSelectAnimActionData
    local action_data = self.bll:GetActionData(CatCardConst.ActionType.FuncCardSelectAnim, player_type, function()


        if not self.cachedFuncCardSelectData then
            ---无缓存的功能牌选中数据 直接展示
            self:SelectModelShow(is_show, card_type, index, player_type)
        else
            ---有缓存的功能牌选中数据
            ---说明在功能牌选中动效期间 玩家点击了其他功能牌
            ---使用最新点击的功能牌数据进行展示
            local data = self.cachedFuncCardSelectData
            self.cachedFuncCardSelectData = nil
            self:SelectModelShow(data.is_show, data.card_type, data.index, data.player_type)
            PoolUtil.ReleaseTable(data)
        end

        self.isFuncCardAnimPlaying = false
        self.isShowingFuncCard = true
    end)
    action_data:Set(index)
    action_data:Begin()
end

---展示选中的物体
---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
function SelectTargetAction:SelectModelShow(is_show, card_type, index, player_type)

    ---@type CatCard.TargetStateActionData
    local action = self.bll:GetActionData(CatCardConst.ActionType.TargetState, player_type)
    local select_state = is_show and CatCardConst.TargetShowState.Select or CatCardConst.TargetShowState.Unselect

    ---@type CatCard.SelectTargetActionData
    local data = self:GetData()

    if data:IsShowCanSelect() then
        if not is_show then
            select_state = select_state | CatCardConst.TargetShowState.CanSelect
        else
            select_state = select_state | CatCardConst.TargetShowState.DisableCanSelect
        end
    end
    if card_type == CatCardConst.CardType.CARD then
        local card_data = self.bll:GetData(card_type, index, player_type)
        if not is_show then
            if card_data then
                local stateData = self.bll:GetStateData()
                if stateData:IsCanPopCard() then --在出牌阶段判断所选卡牌是否是当前模式下可选的
                    local needCardType = 1
                    if stateData:GetPopState() == CatCardConst.PopCardState.PopFuc then
                        needCardType = CatCardConst.CatCardType.Func
                    else
                        needCardType = CatCardConst.CatCardType.Num
                    end
                    select_state = needCardType == card_data:GetSubType() and select_state or  CatCardConst.TargetShowState.DisableCanSelect
                end
            end
            self:SetBtnUseActive(false)
        else
            if card_data then
                -----@type CatCard.UseCardConditionActionData
                local action = self.bll:GetActionData(CatCardConst.ActionType.UseCardCondition, self:GetData():GetPlayerType())
                action:Set(card_data:GetId(), CatCardConst.UseCardType.Select, self.checkUseCall)
                action:Begin()
            else
                self:SetBtnUseActive(false)
            end
        end
    end

    action:Set(card_type, index, select_state)
    action:Begin()
end

---设置使用按钮
---@param is_active boolean
---@param is_can_use boolean
function SelectTargetAction:SetBtnUseActive(is_active, is_can_use)
    local data = self.bll:GetData(self.lastCardType, self.lastIndex, self.lastPlayerType)
    is_active = is_active and data and data:IsFuncCard()
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_FUNC_BTN_USE_ACTIVE, is_active, is_can_use)
end

---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
function SelectTargetAction:SetLastSelect(card_type, index, player_type)
    if self.lastCardType then
        if card_type and card_type == self.lastCardType then
            ---@type CatCard.SelectTargetActionData
            local data = self:GetData()
            if not data:IsModeEnable(CatCardConst.SelectTargetMode.Multi) then
                self.bll:SetCurSelectIndex(self.lastCardType, self.lastIndex, false)
            end
        end
        self:SetSelectModelShow(false, self.lastCardType, self.lastIndex, self.lastPlayerType)
    end
    self.lastCardType = card_type
    self.lastIndex = index
    self.lastPlayerType = player_type
end

---重置重复的选择（可取消选中类型）
---@param card_type CatCardConst.CardType
---@param index int
function SelectTargetAction:ResetLastInfo(card_type, index)
    if self.lastCardType and self.lastIndex and card_type == self.lastCardType and index == self.lastIndex then
        self.lastCardType = nil
        self.lastIndex = nil
        self.lastPlayerType = nil
    end
end

---播放音效
---@param card_type CatCardConst.CardType
function SelectTargetAction:PlaySound(card_type)
    if card_type == CatCardConst.CardType.CARD then
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CARDSELECT)
    else
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CLICKBLOCK)
    end
end

---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
function SelectTargetAction:SetClick(card_type, index, player_type)
    ---@type CatCard.SelectTargetActionData
    local data = self:GetData()
    if not card_type then

        if self.isFuncCardAnimPlaying then
            ---功能牌选中动效播放中 点击空白不处理 否则有bug
            return
        end

        ---点击空白
        if data:IsModeEnable(CatCardConst.SelectTargetMode.ClickSpaceCancel) then
            if data:IsModeEnable(CatCardConst.SelectTargetMode.Multi) then
                self:UnselectAllTarget()
            else
                self:SetLastSelect()
            end
            self.bll:SetCurSelectIndex()
            self:SetTargetsCanSelect(true, CatCardConst.SelectTargetType.Card)
            self:SetTargetsPreview(false)

            self.isShowingFuncCard = false
        end

        return
    end
    if self:IsClickValid(card_type, index, player_type) then
        ---是合法的选中对象
        self:PlaySound(card_type)
        if not data:IsModeEnable(CatCardConst.SelectTargetMode.Multi) then
            if card_type == self.lastCardType and index == self.lastIndex and player_type == self.lastPlayerType then
                return
            end
            ---单选模式下 记录为最后选中数据
            self:SetLastSelect(card_type, index, player_type)
        end
        data:OnSelect(card_type, index, player_type)
        self:SetSelectModelShow(true, card_type, index, player_type)
        if card_type == CatCardConst.CardType.CARD then
            local card_data = self.bll:GetData(card_type, index, player_type)
            if card_data and not card_data:IsFuncCard() then
                ---选中数字牌 亮起格子
                self:SetTargetsPreview(true)
            end
        else
            self:SetTargetsPreview(false)
        end
    else
        if card_type == data:GetTargetType() and player_type == data:GetPlayerType() then
            self:SetSelectModelShow(false, card_type, index, player_type)
        end
    end
end

---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
function SelectTargetAction:OnEventSelectModel(card_type, index, player_type)
    self:SetClick(card_type, index, player_type)
end

function SelectTargetAction:OnAddEventListener()
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_ON_SELECT_MODEL, self.OnEventSelectModel, self)
end

---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
---@return boolean
function SelectTargetAction:IsClickValid(card_type, index, player_type)
    ---@type CatCard.SelectTargetActionData
    local action_data = self:GetData()

    ---筛选类型
    if not self:IsTargetValid(card_type, index, player_type) then
        action_data:OnInvalidSelect(card_type, index, player_type)
        return false
    end

    ---检测是否多选
    if action_data:IsModeEnable(CatCardConst.SelectTargetMode.Multi) then
        if not action_data:IsCountValid(card_type, action_data:GetSelectedCount(card_type) + 1) then
            action_data:OnInvalidSelect(card_type, index, player_type)
            return false
        end
    end

    if action_data:IsModeEnable(CatCardConst.SelectTargetMode.ReselectCancel) then
        if action_data:IsSelect(card_type, index) then
            action_data:OnInvalidSelect(card_type, index, player_type)
            self.bll:SetCurSelectIndex(card_type, index, false)
            self:ResetLastInfo(card_type, index)
            return false
        end
    end

    ---自定义点击检查
    if not action_data:OnCustomCheck(card_type, index, player_type) then
        action_data:OnInvalidSelect(card_type, index, player_type)
        return false
    end

    return true
end

function SelectTargetAction:End()
    ---@type CatCard.SelectTargetActionData
    local action_data = self:GetData()
    if action_data:IsShowCanSelect() then
        self:SetTargetsCanSelect(false)
    end
    if self.lastCardType then
        self:SetLastSelect()
    end
    if action_data:IsCanShowPreview() then
        self:SetTargetsPreview(false)
    end
    BaseAction.End(self)
end

return SelectTargetAction