---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/8/31 17:05
---
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@class CatCardBaseAni
local CatCardBaseAni = class("CatCardBaseAni")

function CatCardBaseAni:ctor()
    ---@type CatCard.CatCardLogicCtrl
    self.logic_ctrl = nil
end

function CatCardBaseAni:IsRunning()
    return self.is_running
end

function CatCardBaseAni:SetOwner(owner)
    self.owner = owner
    self.logic_ctrl = self.owner:GetCtrl(CatCardConst.Ctrl.LOGIC)
end

function CatCardBaseAni:SetIsRunning(is_running)
    self.is_running = is_running
    self.bll:CheckRunning()
end

function CatCardBaseAni:Execute(...)
    self:Play(...)
end

---@param bll CatCardBLL
function CatCardBaseAni:SetBll(bll)
    self.bll = bll
end

function CatCardBaseAni:Enter()
    self:SetBll(BllMgr.Get("CatCardBLL"))
end

function CatCardBaseAni:Exit()
    self:Kill()
    GameUtil.ClearTarget(self)
end

---暂停动画
function CatCardBaseAni:Pause()
    if self:IsRunning() or self:IsInPlaying() then
        if self.ani_map then
            for model, v in pairs(self.ani_map) do
                GameObjectUtil.SetLayer(model, Const.LayerMask.DEFAULT, true)
                for st, ani in pairs(v) do
                    if ani.sequence then
                        ani.sequence:Pause()
                    end
                end
            end
        end
    end
end

---重新启动动画
function CatCardBaseAni:Resume()
    if self:IsRunning() or self:IsInPlaying() then
        if self.ani_map then
            for model, v in pairs(self.ani_map) do
                GameObjectUtil.SetLayer(model, Const.LayerMask.RT, true)
                for st, ani in pairs(v) do
                    if ani.sequence then
                        ani.sequence:Play()
                    end
                end
            end
        end
    end
end

function CatCardBaseAni:Kill(is_execute_call)
    if self:IsRunning() or self:IsInPlaying() then
        if is_execute_call == nil then
            is_execute_call = false
        end
        if self.ani_map then
            for k, v in pairs(self.ani_map) do
                local trans = GameObjectUtil.GetComponent(k, nil, "Transform")
                if trans then
                    trans:DOKill(false)
                end
                for st, ani in pairs(v) do
                    if ani.sequence then
                        ani.sequence:Kill()
                    end
                    if is_execute_call then
                        self:OnAniEnd(k, st)
                    end
                end
            end
        end
        table.clear(self.ani_map)
        self:SetIsRunning(false)
    end
end

---开始播放
function CatCardBaseAni:Play(animation_state, target, call_back, ...)
    if self:IsRunning() then
        return
    end
    if not target then
        if call_back then
            call_back()
        end
        return
    end
    self:SetIsRunning(true)
    if not self.ani_map then
        self.ani_map = {}
    end
    if not self.ani_map[target] then
        self.ani_map[target] = {}
    end
    if not self.ani_map[target][animation_state] then
        self.ani_map[target][animation_state] = {}
    end
    if call_back then
        self:AddAniCall(target, animation_state, call_back, ...)
    end

    if animation_state == CatCardConst.AnimationState.MOVE then
        self:MoveModel(target, ...)
    elseif animation_state == CatCardConst.AnimationState.ANIMATION then
        self:PlayModelAni(target, ...)
    elseif animation_state == CatCardConst.AnimationState.SCALE then
        self:ScaleModel(target, ...)
    elseif animation_state == CatCardConst.AnimationState.ROTATION then
        self:RotationModel(target, ...)
    elseif animation_state == CatCardConst.AnimationState.BEIZER then
        self:BezierMoveModel(target, ...)
    else
        self:OnAniEnd(target, animation_state)
    end
end

---播放动画
---@param ani_name string or table 支持动画列表
function CatCardBaseAni:PlayModelAni(model, ani_name, is_no_force, ani_call)
    if self.bll:IsSkipAniState() then
        self:OnAniEnd(model, CatCardConst.AnimationState.ANIMATION, ani_name[#ani_name])
        return
    end
    if not ani_name then
        self:OnAniEnd(model, CatCardConst.AnimationState.ANIMATION)
        return
    end
    if type(ani_name) == "table" then
        if #ani_name > 0 then
            local ani_list = {}
            table.insertto(ani_list, ani_name)
            local name = table.remove(ani_list, 1)
            self:PlayModelAni(model, name, is_no_force, function()
                if #ani_list == 0 then
                    PoolUtil.ReleaseTable(ani_list)
                    self:OnAniEnd(model, CatCardConst.AnimationState.ANIMATION, name)
                else
                    self:PlayModelAni(model, ani_list, is_no_force)
                end
            end)
        else
            self:OnAniEnd(model, CatCardConst.AnimationState.ANIMATION)
        end
        return
    end
    local state_machine = GameObjectUtil.GetComponent(model, "", "X3Animator")

    if not state_machine then
        self:OnAniEnd(model, CatCardConst.AnimationState.ANIMATION)
        return
    end
    local is_force = true
    if is_no_force then
        is_force = false
    end

    local ani_dt = 0
    local normalizedTimeOffset = is_force and 0 or -1
    local is_success = state_machine:CrossfadeWithLoopable(ani_name, normalizedTimeOffset)
    if is_success then
        ani_dt = state_machine:GetStateLength(ani_name)
    end
    if ani_call then
        TimerMgr.AddScaledTimer(ani_dt, ani_call,self)
    else
        TimerMgr.AddScaledTimer(ani_dt, function()
            self:OnAniEnd(model, CatCardConst.AnimationState.ANIMATION, ani_name)
        end,self)
    end
end

---移动
---@param model UnityEngine.GameObject
---@param start_pos UnityEngine.Vector3
---@param end_pos
---@param speed number
function CatCardBaseAni:MoveModel(model, start_pos, end_pos, speed, ease_type)
    local transform = GameObjectUtil.GetComponent(model, nil, "Transform")
    local distance = CS.UnityEngine.Vector3.Distance(start_pos, end_pos)
    local dt = distance / speed
    if self.bll:IsDebugMode() then
        self.bll:Log("[MoveModel]:", dt, ":", distance, ":", speed)
    end
    ease_type = ease_type or CatCardConst.MOVE_EASY_TYPE
    GameObjectUtil.SetPosition(transform, start_pos)
    if self.bll:IsSkipAniState() then
        GameObjectUtil.SetPosition(transform, end_pos)
        self:OnAniEnd(model, CatCardConst.AnimationState.MOVE)
        return
    end
    local sequence = CS.DG.Tweening.DOTween.Sequence()
    sequence:Append(transform:DOMove(end_pos, dt):SetEase(ease_type))
    sequence:AppendCallback(function()
        self:OnAniEnd(model, CatCardConst.AnimationState.MOVE)
    end)
    sequence:Play()
    sequence:SetAutoKill(true)
    self.ani_map[model][CatCardConst.AnimationState.MOVE].sequence = sequence
    self.ani_map[model][CatCardConst.AnimationState.MOVE].dt = dt
end

---贝塞尔运动
---@param model UnityEngine.GameObject
---@param bezier_pos_list Vector3[]
---@param speed number
---@param ease_type number
---@param dis number 曲线运动距离
function CatCardBaseAni:BezierMoveModel(model, bezier_pos_list, speed, ease_type, dis)
    if self.bll:IsSkipAniState() then
        self:OnAniEnd(model, CatCardConst.AnimationState.BEIZER)
        return
    end
    local transform = GameObjectUtil.GetComponent(model, nil, "Transform")
    ease_type = ease_type or CS.DG.Tweening.Ease.Linear
    dis = dis or 0
    local dt = dis / speed
    local path_list = PoolUtil.GetTable()
    table.insert(path_list, bezier_pos_list[1])
    table.insert(path_list, bezier_pos_list[1])
    table.insert(path_list, bezier_pos_list[1])
    table.insert(path_list, bezier_pos_list[#bezier_pos_list])
    table.insert(path_list, bezier_pos_list[2])
    table.insert(path_list, bezier_pos_list[#bezier_pos_list])
    local sequence = CS.DG.Tweening.DOTween.Sequence()
    sequence:Append(transform:DOPath(path_list, dt, CS.DG.Tweening.PathType.CubicBezier):SetEase(ease_type))
    sequence:AppendCallback(function()
        self:OnAniEnd(model, CatCardConst.AnimationState.BEIZER)
    end)
    sequence:Play()
    sequence:SetAutoKill(true)
    PoolUtil.ReleaseTable(path_list)
    self.ani_map[model][CatCardConst.AnimationState.BEIZER].sequence = sequence
    self.ani_map[model][CatCardConst.AnimationState.BEIZER].dt = dt

end

---缩放
---@param model UnityEngine.GameObject
---@param start_scale UnityEngine.Vector3
---@param end_scale UnityEngine.Vector3
---@param dt number
function CatCardBaseAni:ScaleModel(model, start_scale, end_scale, dt, easy_type)
    easy_type = easy_type or CatCardConst.SCALE_EASY_TYPE
    local transform = GameObjectUtil.GetComponent(model, nil, "Transform")
    dt = dt or CatCardConst.CARD_SCALE_DT
    GameObjectUtil.SetScale(transform, start_scale)
    if self.bll:IsSkipAniState() then
        GameObjectUtil.SetScale(transform, end_scale)
        self:OnAniEnd(model, CatCardConst.AnimationState.SCALE)
        return
    end
    local sequence = CS.DG.Tweening.DOTween.Sequence()
    sequence:Append(transform:DOScale(end_scale, dt):SetEase(easy_type))
    sequence:AppendCallback(function()
        self:OnAniEnd(model, CatCardConst.AnimationState.SCALE)
    end)
    sequence:Play()
    sequence:SetAutoKill(true)
    self.ani_map[model][CatCardConst.AnimationState.SCALE].sequence = sequence
end

---反转
---@param model UnityEngine.GameObject
---@param start_euler_angle UnityEngine.Vector3
---@param end_euler_angle UnityEngine.Vector3
---@param dt number
function CatCardBaseAni:RotationModel(model, start_euler_angle, end_euler_angle, dt, easy_type)
    easy_type = easy_type or CatCardConst.ROTATION_EASY_TYPE
    local transform = GameObjectUtil.GetComponent(model, nil, "Transform")
    dt = dt or CatCardConst.CARD_ROTATION_DT
    GameObjectUtil.SetLocalEulerAngles(transform, start_euler_angle)
    if self.bll:IsSkipAniState() then
        GameObjectUtil.SetLocalEulerAngles(transform, end_euler_angle)
        self:OnAniEnd(model, CatCardConst.AnimationState.ROTATION)
        return
    end
    local sequence = CS.DG.Tweening.DOTween.Sequence()
    sequence:Append(transform:DOLocalRotate(end_euler_angle, dt):SetEase(easy_type))
    sequence:AppendCallback(function()
        self:OnAniEnd(model, CatCardConst.AnimationState.ROTATION)
    end)
    sequence:Play()
    sequence:SetAutoKill(true)
    self.ani_map[model][CatCardConst.AnimationState.ROTATION].sequence = sequence
end

---获取移动的时间
function CatCardBaseAni:GetMoveDt(model, default_dt)
    local dt = default_dt
    if not model then
        return dt
    end
    local ani_map = self.ani_map[model]
    if ani_map then
        ani_map = ani_map[CatCardConst.AnimationState.MOVE]
        if ani_map then
            dt = ani_map.dt
        end
    end
    if not dt then
        dt = default_dt
    end
    return dt
end

function CatCardBaseAni:AddAniCall(model, animation_st, call_back, ani_name)
    local ani_map = self.ani_map[model][animation_st]
    if animation_st == CatCardConst.AnimationState.ANIMATION then
        if type(ani_name) == "table" then
            if #ani_name > 0 then
                local ani_map = self.ani_map[model][CatCardConst.AnimationState.ANIMATION]
                if not ani_map.animation_list then
                    ani_map.animation_list = {}
                end
                ani_map.animation_list[ani_name[#ani_name]] = call_back
            end
        else
            local ani_map = self.ani_map[model][CatCardConst.AnimationState.ANIMATION]
            if not ani_map.animation_list then
                ani_map.animation_list = {}
            end
            ani_map.animation_list[ani_name] = call_back
        end
    else
        ani_map.end_call = call_back
    end

end

---获取动画时间
function CatCardBaseAni:GetStateDuration(model, ani_name)
    local state_machine = GameObjectUtil.GetComponent(model, "", "X3Animator")
    return state_machine and state_machine:GetStateLength(ani_name) or 0
end

---是否还有动作正在执行
function CatCardBaseAni:IsInPlaying()
    return not self:IsTableEmpty(self.ani_map)
end

---清理数据
function CatCardBaseAni:ClearAni(target, animation_state, ani_name)
    local map = self.ani_map and self.ani_map[target] or nil
    if map then
        map[animation_state] = nil
        if self:IsTableEmpty(map) then
            self.ani_map[target] = nil
        end
    end
end

function CatCardBaseAni:IsTableEmpty(t)
    return table.isnilorempty(t)
end

---动画结束
function CatCardBaseAni:OnAniEnd(target, animation_state, ani_name)
    if not self.bll then return end
    if self.bll:IsExited() then return end
    local ani = (self.ani_map and self.ani_map[target]) and self.ani_map[target][animation_state] or nil
    if not ani_name then
        self:ClearAni(target, animation_state)
    end
    self:SetIsRunning(self:IsInPlaying())
    if ani then
        local end_call = ani.end_call
        if ani_name then
            if ani.animation_list then
                end_call = ani.animation_list[ani_name]
                ani.animation_list[ani_name] = nil
                if self:IsTableEmpty(ani.animation_list) then
                    self:ClearAni(target, animation_state)
                end
            else
                self:ClearAni(target, animation_state)
            end
            self:SetIsRunning(self:IsInPlaying())
        end
        if end_call then
            end_call(target)
        end
    end
end

return CatCardBaseAni