---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2023/1/8 12:48
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.RobShowViewAction:CatCard.CatCardBaseAction
local RobShowViewAction = class("RobShowViewAction", BaseAction)

---@param action_data CatCard.RobShowViewActionData
function RobShowViewAction:Begin(action_data)
    self.stateData = self.bll:GetStateData()
    self.actionData = action_data
    self.logicCtrl:InitRobNodePos()
    self:SetEmptyClickEnable(false)
    self:SetRobViewActive(false)
    self:PlayShowCardAni(true, function()
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_ROBCARDINCENTER)
        self:SetRobViewActive(true)
        self:SetCardCanSelect(true)
        self.bll:SetTouchEnable(true)
    end)
    self:UnSelectAllModels()
end

---播放显示卡动画
function RobShowViewAction:PlayShowCardAni(is_show, call_back)
    local end_parents
    if is_show then
        local card_type = CatCardConst.CardType.CARD
        local player_type = CatCardConst.PlayerType.ENEMY
        local datas = self.bll:GetDataList(card_type, player_type)
        local index, model
        self.start_parents = {}
        self.end_parents = {}
        self.show_models = {}
        ---@type CatCardBaseLogic[]
        self.select_models = {}
        for k, v in pairs(datas) do
            index = v:GetIndex()
            v:SetIsTouchEnable(true)
            ---@type CatCardBaseLogic
            model = self.logicCtrl:GetModel(card_type, index, player_type)
            local tar_model = model:GetMoveTarget()
            self.show_models[index] = tar_model
            self.select_models[index] = model
            self.start_parents[index] = GameObjectUtil.GetComponent(tar_model, nil, "Transform").parent.gameObject
            self.end_parents[index] = self.logicCtrl:GetRobNode(index)
        end
        PoolUtil.ReleaseTable(datas)
        self:SetTouchEnable(false, CatCardConst.CardType.CARD, CatCardConst.PlayerType.PLAYER)
        self:SetModelsLayer(Const.LayerMask.RT)
    end
    end_parents = is_show and self.end_parents or self.start_parents
    self.bll:CheckAnimation(CatCardConst.AnimationType.ROB_SHOW_CARD, self.show_models, end_parents, CatCardConst.ROB_CARD_MOVE_SPEED, function()
        if not is_show then
            self:SetModelsLayer(Const.LayerMask.DEFAULT)
        end
        if call_back then
            call_back()
        end
    end)

end

---播放获取卡动画
function RobShowViewAction:PlayGetCardAni(callback)
    local player_type = CatCardConst.PlayerType.PLAYER
    local card_index = self.bll:GetValidPosIndex(player_type, CatCardConst.SpecialType.GET_CARD)
    local cur_select_index = self.bll:GetCurSelectIndex(CatCardConst.CardType.CARD)
    local stack_node = self.logicCtrl:GetRobNode(cur_select_index)
    local model = table.remove(self.show_models, cur_select_index)
    GameObjectUtil.SetActive(model, false)
    self.logicCtrl:SetModelsLayer({ model }, Const.LayerMask.DEFAULT)
    self:PlayShowCardAni(false)
    local card_id = self.stateData:GetRobCardId()
    self.stateData:SetRobCardId(0)
    if card_id == 0 then
        Debug.LogErrorWithTag(GameConst.LogTag.CatCard, "select rob card id is nil！")
        callback()
        return
    end
    ---@type CatCard.GetCardActionData
    local getAction = self.bll:GetActionData(CatCardConst.ActionType.GetCard, player_type, callback)
    getAction:Set(card_id, card_index)
    getAction:SetStackPosNode(stack_node)
    getAction:Begin()
end

function RobShowViewAction:SetTouchEnable(is_touch_enable, card_type, player_type)
    local datas = self.bll:GetDataList(card_type, player_type)
    for k, v in pairs(datas) do
        v:SetIsTouchEnable(is_touch_enable)
    end
    PoolUtil.ReleaseTable(datas)
end

function RobShowViewAction:SetCardCanSelect(is_can_select)
    self.logicCtrl:SetRobNodeCanSelect(is_can_select)
end

function RobShowViewAction:SetModelsLayer(layer)
    self.logicCtrl:SetModelsLayer(self.show_models, layer)
end

---显示抢卡相关
function RobShowViewAction:SetRobViewActive(is_active)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_ROB_NODE_SELECT, false)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_TOUCH_LOCK, is_active)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.ROB, is_active)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MAIN_VIEW_ACTIVE, not is_active)
end

function RobShowViewAction:UnSelectAllModels()
    self:SetEmptyClickEnable(true)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ON_SELECT_MODEL)
    self:SetEmptyClickEnable(false)
end

function RobShowViewAction:SetEmptyClickEnable(is_enable)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_TOUCH_EMPTY_ENABLE, is_enable)
end

function RobShowViewAction:ReceiveGetCardRp()
    self:SetRobViewActive(false)
    self.select_models[self.select_index]:SetSelect(false)
    self:PlayGetCardAni(function()
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_MODELS, CatCardConst.CardType.CARD, true)
        self:End()
    end)
end

function RobShowViewAction:RobSelectEvent(res)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.TIPS, false)
    if res == 1 then
        self.bll:CheckAction(CatCardConst.SpecialType.NET_WORK, CatCardConst.NetworkType.MIAOSPROBGETCARD)
    else
        self:UnSelectAllModels()
        self:SetCardCanSelect(false)
        self:SetRobViewActive(false)
        local dialogueData = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, CatCardConst.PlayerType.PLAYER, function()
            self:PlayShowCardAni(false, function()
                self:End()
            end)
        end)
        dialogueData:SetState(CatCardConst.DialogueState.GetManCardGiveUp)
        dialogueData:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
        dialogueData:Begin()
    end
end

function RobShowViewAction:SelectRobModelEvent(card_type, index, player_type)
    if not card_type then
        return
    end
    if card_type == CatCardConst.CardType.SLOT then
        return
    end
    self.select_index = index
    self.bll:SetCurSelectIndex(card_type, index, true)
    for i, v in pairs(self.select_models) do
        v:SetSelect(i == index)
    end
end

function RobShowViewAction:OnAddEventListener()
    EventMgr.AddListener(CatCardConst.Event.ROB_GET_CARD_MSG_EVENT, self.ReceiveGetCardRp, self)
    EventMgr.AddListener(CatCardConst.Event.ROB_SELECT_EVENT, self.RobSelectEvent, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_ON_SELECT_MODEL, self.SelectRobModelEvent, self)
end

function RobShowViewAction:End()
    table.clear(self.start_parents)
    table.clear(self.end_parents)
    table.clear(self.show_models)
    table.clear(self.select_models)
    self:SetEmptyClickEnable(true)
    self:SetRobViewActive(false)
    self:SetTouchEnable(false, CatCardConst.CardType.CARD, CatCardConst.PlayerType.ENEMY)
    self:SetTouchEnable(true, CatCardConst.CardType.CARD, CatCardConst.PlayerType.PLAYER)
    self.stateData:SetSpState(CatCardConst.RobState.END)
    self.bll:SetCurSelectIndex()
    self.bll:SetTouchEnable(false)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ON_SELECT_MODEL)
    BaseAction.End(self)
end

return RobShowViewAction