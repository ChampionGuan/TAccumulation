---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/8 9:57
---数据解析基类
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@class CatCard.BaseDataParser
local BaseDataParser = class("BaseDataParser")

function BaseDataParser:ctor()
    ---@type CatCard.BaseActionData[]
    self.actionDataList = {}
    ---@type fun(type:CatCard.BaseActionData)
    self.finishCall = nil
    ---@type CatCardBLL
    self.bll = BllMgr.GetCatCardBLL()
    self.stateData = self.bll:GetStateData()
end

---@param player_type CatCardConst.PlayerType
---@param order int
---@return int
function BaseDataParser:ParseBeginAction(player_type, order)
    local action = self.bll:GetActionData(CatCardConst.ActionType.PipelineBegin, player_type)
    action:SetOrder(order)
    action:SetIsCanBreak(false)
    self:Add(action)
    return order + 1
end

---@param player_type CatCardConst.PlayerType
---@param order int
---@return int
function BaseDataParser:ParseEndAction(player_type, order)
    local action = self.bll:GetActionData(CatCardConst.ActionType.PipelineEnd, player_type)
    action:SetOrder(order)
    --action:SetIsCanBreak(false)
    self:Add(action)
    return order + 1
end

---@param dialogueState string
---@param player_type CatCardConst.PlayerType
---@param order int
function BaseDataParser:ParseDialogueAction(dialogueState, player_type, order)
    if not string.isnilorempty(dialogueState) then
        order = order + 1
        local show_data = self.bll:GetActionData(CatCardConst.ActionType.RefreshShow, player_type)
        show_data:SetOrder(order)
        self:Add(show_data)

        order = order + 1
        ---@type CatCard.ChangeDialogueStateActionData
        local action_data = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, player_type)
        action_data:SetOrder(order)
        action_data:SetState(dialogueState)
        action_data:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
        self:Add(action_data)
    end
    return order
end

--region 数据解析
---@param action pbcmessage.MiaoAction
---@param order int
---@return int
function BaseDataParser:ParseAction(action, order)
    order = order or 0
    local player_type = self.bll:GetPlayerType(action.Seat)
    local action_type = self.bll:GetActionType(action.ActionType, true)
    if action_type then
        local action_data = self.bll:GetActionData(action_type, player_type)
        action_data:SetCardId(action.CardId)
        action_data:SetOrder(order or 0)
        action_data:SetParam(action)
        self:Add(action_data)
    end
    return order + 1
end

function BaseDataParser:ParseActionList(action_list, order, player_type)
    local order = order
    for _, action in ipairs(action_list) do
        local action_type = action.ActionType
        local action_data = self.bll:GetActionData(action_type, player_type)
        if action_data then
            action_data:SetOrder(order)
            action_data:SetParam(action.Params)
            if action_type == CatCardConst.ActionType.ChangeDialogueState then
                action_data:SetState(action.Params[1])
                if action.isWait ~= nil then
                    action_data:SetIsWait(action.isWait)
                end
                action_data:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
            end
            if action.isParallel then
                action_data:SetIsParallel(true)
            end
            self:Add(action_data)
            order = order + 1
        end
    end
    PoolUtil.ReleaseTable(action_list)
    return order
end

---@param effect pbcmessage.MiaoEffect
---@param order int
---@return int
function BaseDataParser:ParseEffect(effect, order)
    order = order or 0
    local player_type = self.bll:GetPlayerType(effect.Seat)
    local action_type = self.bll:GetActionType(effect.EffectType)
    if action_type then
        local action_data = self.bll:GetActionData(action_type, player_type)
        if action_data then
            if effect.CardId and effect.CardId ~= 0 then
                local check_state_action_data = self.bll:GetActionData(CatCardConst.ActionType.CheckCardStackAction, player_type)
                check_state_action_data:SetOrder(order)
                self:Add(check_state_action_data)
                order = order + 1
            end
            action_data:SetCardId(effect.CardId)
            action_data:SetOrder(order)
            action_data:SetEffectType(effect.EffectType)
            action_data:SetParam(effect.Params)
            self:Add(action_data)
        end
    end
    return order + 1
end

---@param actionList pbcmessage.MiaoAction[]
---@param order int
function BaseDataParser:ParseActions(actionList, order)
    order = order or 0
    if not table.isnilorempty(actionList) then
        for k, v in ipairs(actionList) do
            if v.ActionType == CatCardConst.MiaoActionType.PlayFuncCard then
                local data = self.bll:GenData(CatCardConst.CardType.CARD, v.CardId, 0)
                if data:IsFuncCard() then
                    if data:GetEffectId() ~= CatCardConst.FuncCardType.VETOCARD then
                        local player_type = self.bll:GetPlayerType(v.Seat)
                        if player_type == CatCardConst.PlayerType.ENEMY then
                            ---@type CatCard.ShowCardActionData
                            local action_data = self.bll:GetActionData(CatCardConst.ActionType.ShowCardAction, player_type)
                            action_data:Set(data:GetId(), true, true, self.bll:GetCardCount() + 1)
                            action_data:SetOrder(order)
                            order = order + 1
                            self:Add(action_data)
                        end
                        ---@type CatCard.CheckCardStackActionData
                        local action_data = self.bll:GetActionData(CatCardConst.ActionType.CheckCardStackAction, player_type)
                        action_data:Set(data:GetId())
                        action_data:SetIsCanShowCard(false)
                        action_data:SetOrder(order)
                        self:Add(action_data)
                    end
                    self.bll:ReleaseData(data)
                    break
                else
                    self.bll:ReleaseData(data)
                end
            end
        end
    end
    return order + 1
end

---处理数据排序
function BaseDataParser:Prepare()
    local actionList = self:GetActionDataList()
    if #actionList >= 2 then
        table.sort(actionList, self.OnActionSort)
    end
end

--endregion

--region 外部调用
---@param data pbcmessage.PlayMiaoCardReply | pbcmessage.MiaoPlayFuncCardReply
function BaseDataParser:Parse(data)
    local start_order = 0
    local player_type = self.bll:GetPlayerType(data.Seat)
    start_order = self:ParseBeginAction(player_type, start_order)
    if not table.isnilorempty(data.Actions) then
        start_order = self:ParseActions(data.Actions, start_order)
    end
    if not self:IsFinish() then
        local data = self:GetRunningActionData()
        if data then
            start_order = data:GetOrder() + 1
        end
    end
    local is_player_pop_func = false  --是否女主出功能牌
    local isPassDialog = false
    if data.Action then
        start_order = self:ParseAction(data.Action, start_order)
        if data.Action.ActionType == CatCardConst.MiaoActionType.PlayFuncCard and data.Action.Seat == CatCardConst.SeatType.PLAYER then
            is_player_pop_func = true
        end
    else
        isPassDialog = true
    end
    if table.nums(data.Effects) > 0 then
        if is_player_pop_func then
            local is_add_veto_wait_action = true
            for i, v in pairs(data.Effects) do
                if v.EffectType == CatCardConst.FuncEffectType.VetoQuery then
                    is_add_veto_wait_action = false
                    break
                end
            end
            if is_add_veto_wait_action then
                if self.bll:CheckRoleHasFuncCard() then
                    local effectData = PoolUtil.GetTable()
                    effectData.EffectType = CatCardConst.FuncEffectType.VetoQuery
                    effectData.CardId = -1
                    effectData.Seat = CatCardConst.SeatType.ENEMY
                    effectData.Params = { data.Action.CardId }
                    effectData.ConversationID = 0
                    start_order = self:ParseEffect(effectData, start_order)
                    PoolUtil.ReleaseTable(effectData)
                end
            end
        end

        --顺序保证在其他动效之前
        for _, effect in pairs(data.Effects) do
            --功能牌全局动效触发
            if effect.CardId ~= 0 and effect.EffectType ~= CatCardConst.FuncEffectType.SkipFrozen then
                local tempData = self.bll:GenData(CatCardConst.CardType.CARD, effect.CardId, 0)
                local funcCardType = CatCardConst.FuncEffectTypeFuncCardTypeDic[effect.EffectType]
                if funcCardType and funcCardType == tempData:GetEffectId() then
                    start_order = start_order + 1
                    ---@type CatCard.EffectActionData
                    local effectActionData = self.bll:GetActionData(CatCardConst.ActionType.EffectAction, player_type)
                    effectActionData:SetFuncCardType(funcCardType)
                    effectActionData:SetShowType(CatCardConst.EffectShowType.Global)
                    effectActionData:SetState(CatCardConst.EffectState.SHOW)
                    effectActionData:SetOrder(start_order)
                    self:Add(effectActionData)
                    self.bll:ReleaseData(tempData)
                    break
                end
                self.bll:ReleaseData(tempData)
            end
        end

        local is_close_discard = false
        for i, v in pairs(data.Effects) do
            if table.containsvalue(CatCardConst.DiscardMutual, v.EffectType) then
                is_close_discard = true
                break
            end
        end
        if is_close_discard then
            start_order = start_order + 1
            local discardData = self.bll:GetActionData(CatCardConst.ActionType.CheckDiscard, player_type)
            discardData:SetOrder(start_order)
            self:Add(discardData)
        end
        local is_pass_refresh = false
        for k, v in ipairs(data.Effects) do
            --todo buff删除和贪心喵暂时不播生效剧情
            if v.EffectType == CatCardConst.FuncEffectType.DelBuff or v.EffectType == CatCardConst.FuncEffectType.DiscardQuery then
                isPassDialog = true
            end

            start_order = self:ParseEffect(v, start_order)
        end
        if not isPassDialog then
            start_order = self:ParseDialogueAction(CatCardConst.PlayerTypeConf[player_type].func_effect_dialogue, player_type, start_order)
        end
    end
    start_order = self:ParseEndAction(player_type, start_order)
    self:Prepare()
end

---@return CatCard.BaseActionData
function BaseDataParser:GetRunningActionData()
    for k, v in ipairs(self:GetActionDataList()) do
        if v:IsRunning() and not v:IsParallel() then
            return v
        end
    end
    return nil
end

---@param finishCall fun(type:CatCard.BaseActionData)
function BaseDataParser:SetFinishCall(finishCall)
    self.finishCall = finishCall
end

---@return boolean
function BaseDataParser:IsFinish()
    return table.isnilorempty(self.actionDataList)
end

---@return CatCard.BaseActionData[]
function BaseDataParser:GetActionDataList()
    return self.actionDataList
end

---@return CatCard.BaseActionData
function BaseDataParser:GetValidAction()
    if self:IsFinish() then
        return nil
    end
    for k, v in ipairs(self:GetActionDataList()) do
        if not v.IsRunning then
            Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard, "actionData==%s", v.GetActionType and v:GetActionType())
        else
            if not v:IsRunning() then
                return v
            end
        end
    end
end

---@param bll CatCardBLL
function BaseDataParser:SetBll(bll)
    self.bll = bll
end
--endregion

--region 内部接口
---@param actionData CatCard.BaseActionData
function BaseDataParser:Add(actionData)
    actionData:SetFinishCall(self.finishCall)
    table.insert(self.actionDataList, actionData)
end

---@param actionInfo CatCard.BaseActionData
function BaseDataParser:Insert(actionInfo)
    local actionData = actionInfo.ActionData
    actionData:SetFinishCall(self.finishCall)
    local pos = table.nums(self.actionDataList) - 1
    if actionInfo.Pos then
        pos = actionInfo.Pos
    end

    table.insert(self.actionDataList, pos, actionData)
end

---@param actionData CatCard.BaseActionData
function BaseDataParser:Remove(actionData)
    table.removebyvalue(self.actionDataList, actionData)
end

---清理所有数据
function BaseDataParser:Clear()
    for k, v in pairs(self.actionDataList) do
        self.bll:ReleaseActionData(v)
    end
    table.clear(self.actionDataList)
end

---清理未运行的action
function BaseDataParser:BreakAllAction()
    local res = PoolUtil.GetTable()
    for k, v in pairs(self.actionDataList) do
        if not v:IsRunning() then
            if v:IsCanBreak() then
                self.bll:ReleaseActionData(v)
                table.insert(res, v)
            else
                v:SetIsBreak(true)
            end
        end
    end
    for k, v in pairs(res) do
        self:Remove(v)
    end
    PoolUtil.ReleaseTable(res)
end

---@param a CatCard.BaseActionData
---@param b CatCard.BaseActionData
function BaseDataParser.OnActionSort(a, b)
    if not a:GetOrder() or not b:GetOrder() then
        return false
    end
    if a:GetOrder() ~= b:GetOrder() then
        return a:GetOrder() < b:GetOrder()
    end
    return false
end
--endregion
return BaseDataParser