---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/8/27 15:23
---
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
local BaseLogic = require(CatCardConst.BASE_LOGIC_PATH)
---@class CatSlotLogic:CatCardBaseLogic
local CatSlotLogic = class("CatSlotLogic", BaseLogic)
local isPlaySound = false

function CatSlotLogic:SetLayer(layer)
    self.super.SetLayer(self, layer)
    if layer and layer == Const.LayerMask.RT then
        for k, v in pairs(CatCardConst.NO_CHANE_LAYER_MODELS) do
            GameObjectUtil.SetLayer(self:GetComponent(v), Const.LayerMask.DEFAULT, true)
        end
    end
end

function CatSlotLogic:OnPlaySoundEnd()
    isPlaySound = false
end

---获取落点pos
function CatSlotLogic:GetMoveTargetPos()
    if not self.move_target_pos then
        local transform = self:GetComponent(CatCardConst.SLOT_CARD_MOVE_POS, "Transform")
        self.move_target_pos = transform and transform.position or Vector3.zero
    end
    return self.move_target_pos
end

function CatSlotLogic:GetScreenPos()
    self.move_screen_pos = self.bll:GetSlotPosByIndex(self:GetPosIndex())
    return self.move_screen_pos
end

function CatSlotLogic:GetEffectPos()
    if not self.effect_pos then
        local transform = self:GetComponent(CatCardConst.SLOT_CAT_EFFECT_POS, "Transform")
        if transform then
            self.effect_pos = transform.position
        else
            self.effect_pos = self:GetMoveTargetPos()
        end
    end
    return self.effect_pos
end

function CatSlotLogic:GetSlotStack(player_type)
    local pos_name = player_type == CatCardConst.PlayerType.PLAYER and CatCardConst.SLOT_CARD_MOVE_POS or CatCardConst.SLOT_CARD_NPC_MOVE_POS
    return self:GetComponent(pos_name)
end

---@return Transform
function CatSlotLogic:GetEffectParent(name)
    name = string.isnilorempty(name) and "cupmat" or name
    return self:GetComponent(name, "Transform")
end

---获取cat的模型
---@param type_name string "CAT","CUP"
function CatSlotLogic:GetModelByType(type_name)
    local conf = self:GetTypeConf()[type_name]
    if conf then
        local model = self:GetModel(conf.name)
        if model then
            return model[1]
        end
    end
    return nil
end

function CatSlotLogic:GetAnimationDt(model, ani_name)
    local state_machine = GameObjectUtil.GetComponent(model, "", "X3Animator")
    return state_machine:GetStateLength(ani_name)
end

---设置猫被选中
function CatSlotLogic:SetCatSelect(is_pick, callback)
    if self.is_pick == is_pick or not self:GetData():IsOccupied() then
        if callback then
            callback()
        end
        return
    end
    local cat_model = self:GetModelByType("CAT")
    if not cat_model then
        if callback then
            callback()
        end
        return
    end

    self.is_pick = is_pick
    self.callback = callback
    local anim = is_pick and CatCardConst.CatAnimation.PICK or CatCardConst.CatAnimation.PUT_DOWN
    self.bll:CheckAnimation(CatCardConst.AnimationType.DEFAULT, CatCardConst.AnimationState.ANIMATION, cat_model, nil, anim)
    TimerMgr.Discard(self.ani_timer)
    self.ani_timer = TimerMgr.AddScaledTimer(self:GetAnimationDt(cat_model, anim), self.OnAniEnd, self)
end

function CatSlotLogic:OnAniEnd()
    local callback = self.callback
    self.callback = nil
    local cat_model = self:GetModelByType("CAT")
    local ani_name = self.is_pick and CatCardConst.CatAnimation.PICK_IDLE or self:GetData():GetCatAnimation()
    self.bll:CheckAnimation(CatCardConst.AnimationType.DEFAULT, CatCardConst.AnimationState.ANIMATION, cat_model, nil, ani_name)
    if callback then
        callback()
    end
end

---slotData
function CatSlotLogic:Refresh(data, is_check_local_state, ignore_effect, is_force_replace)
    self.super.Refresh(self, data)
    self.is_check_local_state = is_check_local_state
    if not is_check_local_state then
        self.is_pick = false
        TimerMgr.DiscardTimerByTarget(self)
    end
    if self:GetData() then
        if is_force_replace then
            self:HideModel()
        end
        self:RefreshModels(ignore_effect)
    else
        self:HideModel()
    end
    self.is_check_local_state = nil
end

function CatSlotLogic:RefreshModels(ignore_effect)
    ---初始化静态模型
    self:RefreshLocalModel(ignore_effect)
    ---初始化服务器model
    self:RefreshServerModel(ignore_effect)
end

function CatSlotLogic:AddModelToPool(name, model_name, model)
    if not model_name or not model then
        return
    end
    PoolUtil.ReleaseTable(self.models[name])
    self.models[name] = nil
    self.super.AddModelToPool(self, model_name, model)
end

function CatSlotLogic:HideModel()
    for k, v in pairs(self.models) do
        self:AddModelToPool(k, v[2], v[1])
    end
end

function CatSlotLogic:RefreshLocalModel(ignore_effect)
    self:RefreshModelsByConf(false, nil, nil, ignore_effect)
end

function CatSlotLogic:RefreshServerModel(ignore_effect)
    local slot_data = self:GetData()
    local card_id = slot_data:GetCardId()
    local is_hide = false
    if not card_id or card_id == 0 then
        is_hide = true
    end
    local card_data = nil
    if not is_hide then
        card_data = self.bll:GenData(CatCardConst.CardType.CARD, card_id)
    end
    self:RefreshModelsByConf(true, is_hide, card_data, ignore_effect)
    self.bll:ReleaseData(card_data)
end

function CatSlotLogic:GetCheckList(is_server)
    if not CatCardConst.ServerMap then
        local server_map = PoolUtil.GetTable()
        local local_map = PoolUtil.GetTable()
        for k, v in pairs(self:GetTypeConf()) do
            if type(v) == "table" then
                if v.is_dynamic then
                    table.insert(server_map, v)
                else
                    table.insert(local_map, v)
                end
            end
        end
        CatCardConst.ServerMap = server_map
        CatCardConst.LocalMap = local_map
    end
    return is_server and CatCardConst.ServerMap or CatCardConst.LocalMap
end

function CatSlotLogic:RefreshModelsByConf(is_server, is_hide, card_data, ignore_effect)
    local model, get_func, model_name, reload, is_check
    local slot_data = self:GetData()
    local is_check_local_state = self.is_check_local_state
    for k, v in pairs(self:GetCheckList(is_server)) do
        is_check = true
        if is_check then
            ---如果检测local状态
            if is_check_local_state then
                if v.ignore_local_state ~= nil then
                    if self.bll:GetStateData():GetSpState() == v.ignore_local_state then
                        is_check = false
                    end
                end
            end
        end
        if is_check then
            reload = false
            model = self:GetModel(v.name)
            if is_hide then
                if model then
                    model_name = model[2]
                    model = model[1]
                    self:AddModelToPool(v.name, model_name, model)
                end
            else
                get_func = slot_data[v.get_model_func_name]
                model_name = get_func(is_server and card_data or slot_data)
                if v.is_force_replace or v.is_replace then
                    if model then
                        if v.is_force_replace or model_name ~= model[2] then
                            reload = true
                            self:AddModelToPool(v.name, model[2], model[1])
                        else
                            model = model[1]
                        end
                    end
                end
                if not model or reload then
                    model = self:LoadModel(model_name)
                    if model then
                        local parent = self:GetComponent(v.name, "Transform")
                        local parentObj = self:GetComponent(v.name)
                        GameObjectUtil.SetParent(GameObjectUtil.GetComponent(model, nil, "Transform"), parent)
                        self:ResetModel(model)
                        GameObjectUtil.SetLayer(model, parentObj.layer, true)
                        local temp = PoolUtil.GetTable()
                        table.insert(temp, model)
                        table.insert(temp, model_name)
                        self.models[v.name] = temp
                        if v.is_play_sound and not isPlaySound then
                            isPlaySound = true
                            TimerMgr.AddTimerByFrame(1, self.OnPlaySoundEnd, self)
                            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, v.sound)
                        end
                        if v.is_play_effect and not ignore_effect then
                            self:PlayUIEffect(v.effect, true)
                            TimerMgr.AddScaledTimer(v.effect_dt, function()
                                if self.bll then
                                    self:PlayUIEffect(v.effect, false)
                                end
                            end, self)
                        end
                    end
                end
                if model and v.is_play_ani then
                    local ani_name = slot_data[v.get_ani_func_name](slot_data)
                    if ani_name then
                        self.bll:CheckAnimation(CatCardConst.AnimationType.DEFAULT, CatCardConst.AnimationState.ANIMATION, model, nil, ani_name)
                    end
                end
            end

        end
    end
end

function CatSlotLogic:PlayUIEffect(effect_name, is_active)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_CHECK_UI_EFFECT, is_active and CatCardConst.EffectState.SHOW or CatCardConst.EffectState.HIDE, self:GetPosIndex(), effect_name, self:GetScreenPos(), true)
end

return CatSlotLogic