---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hongyun.
--- DateTime: 2022/7/18 14:40
---

---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")

---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)

---男主随机选择格子效果的Action
---@class CatCard.RandomSelectSlotAction:CatCard.CatCardBaseAction
local RandomSelectSlotAction = class("RandomSelectSlotAction", BaseAction)

---@param actionData CatCard.RandomSelectSlotActionData
function RandomSelectSlotAction:Begin(actionData)

    ---功能牌类型
    local funcCardType = actionData:GetFuncCardType()

    ---最终格子
    local finalSlot = actionData:GetFinalSlot()

    ---可选格子列表
    local selectableSlots = self:GetSelectableSlots(funcCardType)
    if not selectableSlots then
        self:End()
        return
    end
    local selectableNum = #selectableSlots
    self.randomTime, self.randomNum = actionData:GetRandomInfo(selectableNum)

    ---随机格子数量
    local randomNum = math.min(self.randomNum, selectableNum)

    ---生成的随机格子列表
    self.randomSlots = self:GenRandomSlots(selectableSlots, randomNum, finalSlot)

    ---首先选中第一个
    self.timer = 0
    self.curIndex = 1
    self.preSlot = nil
    self:SelectSlot(self.randomSlots[self.curIndex], true)

    ---运行timer
    self.timerId = TimerMgr.AddTimer(0, self.Update, self, -1)


end

-----根据功能牌类型使用TargetFilterAction获取可选的格子列表
function RandomSelectSlotAction:GetSelectableSlots(funcCardType)
    ---@type CatCardConst.FuncCardTypeConf
    local conf = CatCardConst.FuncCardTypeConf[funcCardType]

    local playerType = self:GetData():GetPlayerType()

    ---@type CatCard.TargetFilterActionData
    local targetFilterActionData = self.bll:GetActionData(CatCardConst.ActionType.TargetFilter, playerType)

    local selectTargetOwner = CatCardConst.SelectTargetOwner.All

    if conf.target_owner_type then
        selectTargetOwner = self.bll:ConvertSelectTargetOwner(conf.target_owner_type, playerType)
    end

    targetFilterActionData:Set(CatCardConst.SelectTargetType.Slot, conf.target_filter_type, selectTargetOwner)
    targetFilterActionData:Begin()

    local map = targetFilterActionData:GetTargetMap()

    local result = {}
    if not map[CatCardConst.CardType.SLOT] then
        --Debug.LogErrorFormat("targetMap[CatCardConst.CardType.SLOT]为nil,功能牌类型:%s",funcCardType)
        --Debug.LogErrorTable(map)
        return
    end

    for i, v in pairs(map[CatCardConst.CardType.SLOT]) do
        table.insert(result, i)
    end

    targetFilterActionData:End()

    return result
end

---从可选格子列表中生成随机格子列表
---随机规则：不能有连续重复格子，最后一个随机格子不能与最终格子相同
function RandomSelectSlotAction:GenRandomSlots(slots, randomNum, finalSlot)

    if #slots == 1 then
        ---可选格子列表只有1个格子
        return slots
    end

    local result = {}
    local preSlot = nil

    for i = 1, randomNum do

        if preSlot then
            ---有前一个随机格子 就先从slots里删掉
            table.removebyvalue(slots, preSlot)
        end

        ---从slots里随机一个格子出来
        local randomIndex = math.random(1, #slots)
        local randomSlot = slots[randomIndex]
        table.insert(result, randomSlot)

        if preSlot then
            ---随机结束后将删掉的preSlot重新加入到slots
            table.insert(slots, preSlot)
        end

        ---更新preSlot
        preSlot = randomSlot
    end

    ---生成随机格子结束 检查最后一个格子是否与finalSlot相同
    local lastRandomSlot = preSlot
    if lastRandomSlot == finalSlot then
        ---相同的话 就再随机一个与最后一个格子不同的新格子
        table.removebyvalue(slots, lastRandomSlot)
        local randomIndex = math.random(1, #slots)
        local randomSlot = slots[randomIndex]
        table.insert(slots, lastRandomSlot)

        ---新格子作为最后1个格子
        table.insert(result, randomSlot)

        ---将原本的第1个格子删掉
        table.remove(result, 1)
    end

    ---将最终格子插入到末尾
    table.insert(result, finalSlot)

    return result
end

---模拟男主选中指定格子效果
function RandomSelectSlotAction:SelectSlot(slot, isShow)

    --Debug.LogErrorFormat("模拟男主选中指定格子效果,slot:%s,isShow:%s",slot,tostring(isShow))

    local state = CatCardConst.EffectState.SHOW
    if not isShow then
        state = CatCardConst.EffectState.HIDE
    end
    if isShow then
        self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_RANDOMSELECT)
    end
    ---箭头特效
    ---@type CatCard.EffectActionData
    local action_data = BllMgr.GetCatCardBLL():GetActionData(CatCardConst.ActionType.EffectAction, CatCardConst.PlayerType.ENEMY)
    action_data:Set(state, CatCardConst.Effect.SLOT_PRE_SELECT, slot, CatCardConst.CardType.SLOT)
    action_data:Begin()

    ---选中特效(选中格子的勾选效果和模拟男主选择的箭头不用同时出现)
    --EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_SELECT, isShow,CatCardConst.CardType.SLOT,slot)

    self.preSlot = slot

end

function RandomSelectSlotAction:Update()
    local deltaTime = TimerMgr.GetCurTickDelta()
    self.timer = self.timer + deltaTime

    if self.timer >= self.randomTime then
        self.timer = 0

        ---间隔时间到了 选中随机列表的下一个格子
        self.curIndex = self.curIndex + 1

        if self.curIndex > #self.randomSlots then
            ---结束随机
            self:SelectSlot(self.preSlot, false)
            TimerMgr.Discard(self.timerId)
            self:End()
            return
        end

        self:SelectSlot(self.preSlot, false)
        self:SelectSlot(self.randomSlots[self.curIndex], true)
    end
end

return RandomSelectSlotAction