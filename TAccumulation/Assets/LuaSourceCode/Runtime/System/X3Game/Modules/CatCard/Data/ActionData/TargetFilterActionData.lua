---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/10 10:05
--- 目标过滤器
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.BaseActionData
local BaseActionData = require(CatCardConst.BASE_ACTION_DATA_PATH)
---@class CatCard.TargetFilterActionData:CatCard.BaseActionData
local TargetFilterActionData = class("TargetFilterActionData",BaseActionData)

--region 初始化
function TargetFilterActionData:ctor()
    BaseActionData.ctor(self)

    ---目标类型
    ---@type CatCardConst.SelectTargetType
    self.targetType = CatCardConst.SelectTargetType.All

    ---目标过滤类型
    ---@type CatCardConst.SelectTargetFilterType
    self.targetFilterType = CatCardConst.SelectTargetFilterType.None

    ---目标所属类型
    ---@type CatCardConst.SelectTargetOwner
    self.targetOwner = CatCardConst.SelectTargetOwner.All
    
    ---@type table<CatCardConst.CardType,int>
    self.targetMap = nil
end

--region Set

---@param selectMode CatCardConst.SelectTargetMode
function TargetFilterActionData:SetSelectMode(selectMode)
    self.selectMode = selectMode
end

---@param targetType CatCardConst.SelectTargetType
function TargetFilterActionData:SetTargetType(targetType)
    self.targetType = targetType
end

---@param targetFilterType CatCardConst.SelectTargetFilterType
function TargetFilterActionData:SetTargetFilterType(targetFilterType)
    self.targetFilterType = targetFilterType
end

---@param targetOwner CatCardConst.SelectTargetOwner
function TargetFilterActionData:SetTargetOwnerType(targetOwner)
    self.targetOwner = targetOwner
end

---@param targetMap table<CatCardConst.CardType,int>
function TargetFilterActionData:SetTargetMap(targetMap)
    self.targetMap = targetMap
end

--region Get

---@return table<CatCardConst.CardType,int>
function TargetFilterActionData:GetTargetMap()
    return self.targetMap
end

---@return CatCardConst.SelectTargetType
function TargetFilterActionData:GetTargetType()
    return self.targetType
end

---@return CatCardConst.SelectTargetFilterType
function TargetFilterActionData:GetTargetFilterType()
    return self.targetFilterType
end

---@param filterType CatCardConst.SelectTargetFilterType
---@return boolean
function TargetFilterActionData:IsFilterEnable(filterType)
    return self.targetFilterType & filterType == filterType
end

---@return CatCardConst.SelectTargetOwner
function TargetFilterActionData:GetTargetOwner()
    return self.targetOwner
end

---@return table
function TargetFilterActionData:GetCardTypeMap()
    return CatCardConst.SelectTargetTypeConf[self:GetTargetType()]
end


---@param cardType CatCardConst.CardType
---@return boolean
function TargetFilterActionData:IsTargetTypeEnable(cardType)
    if not cardType then
        return false
    end
    local conf = self:GetCardTypeMap()
    return conf and conf[cardType]
end

---@param cardType CatCardConst.CardType
---@param posIndex int
---@param playerType CatCardConst.PlayerType
---@return boolean
function TargetFilterActionData:IsTargetValid(cardType,posIndex,playerType)
    if not self:IsTargetTypeEnable(cardType) or (playerType~=nil and self:GetPlayerType()~=playerType) then
        return false
    end
    return self.targetMap and self.targetMap[cardType] and self.targetMap[cardType][posIndex]
end

---筛选目标是否为空
---@return boolean
function TargetFilterActionData:IsTargetsEmpty()
    return table.isnilorempty(self.targetMap)
end


--endregion

---@param targetType CatCardConst.SelectTargetType
---@param targetFilterType CatCardConst.SelectTargetFilterType
---@param targetOwner CatCardConst.SelectTargetOwner
function TargetFilterActionData:Set(targetType,targetFilterType,targetOwner)
    self:SetTargetType(targetType or self.targetType)
    self:SetTargetFilterType(targetFilterType or self.targetFilterType)
    self:SetTargetOwnerType(targetOwner or self.targetOwner)
end

---@param func fun(type:CatCardConst.CardType,type:int,type:CatCardConst.PlayerType)
function TargetFilterActionData:Foreach(func)
    if not func then
        return
    end
    for card_type,list in pairs(self.targetMap) do
        local player_type = card_type == CatCardConst.CardType.CARD and self:GetPlayerType() or nil
        for idx,_ in pairs(list) do
            local data = self.bll:GetData(card_type,idx,player_type)
            if data then
                func(card_type,data:GetIndex(),player_type)
            end
        end
    end
end

--region 内部逻辑

function TargetFilterActionData:OnInit()
    self:SetTargetType(CatCardConst.SelectTargetType.All)
    self:SetTargetFilterType(CatCardConst.SelectTargetFilterType.None)
    self:SetTargetOwnerType(CatCardConst.SelectTargetOwner.All)
end

function TargetFilterActionData:OnClear()
    if self.targetMap then
        for k,v in pairs(self.targetMap) do
            PoolUtil.ReleaseTable(v)
        end
        PoolUtil.ReleaseTable(self.targetMap)
    end
end
--endregion

return TargetFilterActionData