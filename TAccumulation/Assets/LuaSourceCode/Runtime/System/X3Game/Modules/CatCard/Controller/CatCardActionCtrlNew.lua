---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/6/2 11:33
---
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type BaseCatCardCtrl
local CatCardBaseCtrl = require(CatCardConst.BASE_CTRL_PATH)
---@class CatCard.CatCardActionCtrl:BaseCatCardCtrl
local CatCardActionCtrl = class("CatCardActionCtrl", CatCardBaseCtrl)

function CatCardActionCtrl:ctor()
    CatCardBaseCtrl.ctor(self)
    self.pool = nil
end

function CatCardActionCtrl:Enter()
    CatCardBaseCtrl.Enter(self)
    ---@type CatCard.CatCardBaseAction[]
    self.runningActions = PoolUtil.GetTable()
end

---@class CatCard.ActionPool
---@field pool Pool
---@field template CatCard.CatCardBaseAction
---@param action_type CatCard.ActionType
---@return CatCard.ActionPool
function CatCardActionCtrl:GetPool(action_type)
    if not self.pool then
        self.pool = {}
        self.poolGet = handler(self, self.OnActionCreate)
        self.poolRelease = handler(self, self.OnActionRelease)
    end
    local pool = self.pool[action_type]
    if not pool then
        pool = {}
        pool.pool = PoolUtil.Get(self.poolGet, self.poolRelease)
        if not CatCardConst.ActionConf[action_type] then
            Debug.LogError("no config action" .. action_type)
            return
        end
        pool.template = require(CatCardConst.ActionConf[action_type])
        self.pool[action_type] = pool
    end
    return pool
end

---@param action CatCard.CatCardBaseAction
function CatCardActionCtrl:Release(action)
    local pool = self:GetPool(action:GetType())
    if pool then
        pool.pool:Release(action)
    end
    table.removebyvalue(self.runningActions, action)
end

---@param action_type CatCard.ActionType
function CatCardActionCtrl:OnActionCreate(action_type)
    local pool = self:GetPool(action_type)
    ---@type CatCard.CatCardBaseAction
    return pool.template.new()
end

---@param action CatCard.CatCardBaseAction
function CatCardActionCtrl:OnActionRelease(action)
    action:Clear()
end

---@param action_type CatCard.ActionType
---@return CatCard.CatCardBaseAction
function CatCardActionCtrl:GetAction(action_type)
    ---@type CatCard.CatCardBaseAction
    local action = nil
    local pool = self:GetPool(action_type)
    action = pool.pool:Get(action_type)
    action:SetType(action_type)
    action:SetOwner(self)
    action:SetBll(self.bll)
    table.insert(self.runningActions, action)
    return action
end

---@param action_type  CatCard.ActionType
---@param action_data CatCard.BaseActionData
function CatCardActionCtrl:Check(action_type, action_data)
    local action = self:GetAction(action_type)
    if action then
        action:Execute(action_data)
    end
end

function CatCardActionCtrl:Exit()
    local temp = PoolUtil.GetTable()
    table.insertto(temp, self.runningActions)
    for i, v in pairs(temp) do
        if v:IsRunning() then
            v:Exit()
        end
    end
    PoolUtil.ReleaseTable(temp)
    PoolUtil.ReleaseTable(self.runningActions)
    temp = nil
    self.runningActions = nil
    CatCardBaseCtrl.Exit(self)
end

return CatCardActionCtrl