---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/5/31 17:30
---

---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@class CatCard.CatCardBaseAction
local CatCardBaseAction = class("CatCardBaseAction")

function CatCardBaseAction:ctor()
    ---@type boolean
    self.isRunning = false
    ---@type CatCard.CatCardActionCtrl
    self.owner = nil
    ---@type CatCard.CatCardLogicCtrl
    self.logicCtrl = nil
    ---@type CatCard.BaseActionData
    self.actionData = nil
    ---@type CatCard.ActionType
    self.actionType = nil
    ---本action动态加载的模型，方便action结束的时候统一销毁
    ---@type table<string,GameObject>
    self.modelMap = nil
    ---@type CatCardBLL
    self.bll = nil
end

--region 子类需要实现的接口
---开始表演
---@param action_data CatCard.BaseActionData
function CatCardBaseAction:Begin(action_data)

end

---结束，子类一定要执行，否则无法结束
---@param isExit boolean
function CatCardBaseAction:End(isExit)
    self:OnRemoveEventListener()
    if not self.actionData then
        Debug.LogErrorFormat("[喵喵牌] action[%s] 数据错误 actonData is nil", self.__cname)
        return
    end
    if self.bll:IsDebugMode() then
        self.bll:Log(string.format("[喵喵牌]:结束执行action:[%s]", self.__cname))
    end
    self:SetIsRunning(false)
    local actionData = self.actionData
    self.actionData = nil
    self:ReleaseSelf(isExit or actionData:IsAutoRelease())
    if actionData then
        if isExit then
            actionData:Release()
        else
            actionData:Finish()
        end
    end
end

function CatCardBaseAction:OnAddEventListener()

end

function CatCardBaseAction:OnRemoveEventListener()
    EventMgr.RemoveListenerByTarget(self)
end

function CatCardBaseAction:OnPause()

end

function CatCardBaseAction:OnResume()

end

---释放
---@param isAutoRelease boolean
function CatCardBaseAction:ReleaseSelf(isAutoRelease)
    if self.modelMap then
        for model_name, model_list in pairs(self.modelMap) do
            for _, model in pairs(model_list) do
                if isAutoRelease then
                    self:ReleaseModel(model_name, model)
                else
                    self:AddModelToTemp(model_name, model)
                end
            end
            PoolUtil.ReleaseTable(model_list)
        end
        PoolUtil.ReleaseTable(self.modelMap)
    end
    self.owner:Release(self)
end

---清理所有
function CatCardBaseAction:Clear()
    GameUtil.ClearTarget(self)
end
--endregion

--region 通用基础接口，后续可以扩展

---获取model
---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
---@return CatCardBaseLogic
function CatCardBaseAction:GetModel(card_type, index, player_type)
    return self.logicCtrl:GetModel(card_type, index, player_type)
end

---@param card_type CatCardConst.CardType
---@param index int
---@param player_type CatCardConst.PlayerType
---@return CatCardBaseLogic
function CatCardBaseAction:RefreshModel(card_type, index, player_type)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_MODEL, card_type, index, player_type)
end

---加载模型
---@param model_name string
---@return GameObject
function CatCardBaseAction:LoadModel(model_name)
    local model = self.logicCtrl:LoadModel(model_name)
    if model then
        if not self.modelMap then
            self.modelMap = PoolUtil.GetTable()
        end
        if not self.modelMap[model_name] then
            self.modelMap[model_name] = PoolUtil.GetTable()
        end
        local mode_list = self.modelMap[model_name]
        table.insert(mode_list, model)
    end
    return model
end

---释放model
---@param model_name string
---@param model GameObject
function CatCardBaseAction:ReleaseModel(model_name, model)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL, model_name, model)
end

---获取模型牌堆节点
---@param sub_type CatCardConst.SubType
function CatCardBaseAction:GetStackNode(sub_type)
    return self.logicCtrl:GetStackPosNode(sub_type)
end

---@param sub_type CatCardConst.SubType
---@param card_type CatCardConst.CardType
---@param pos_index int
---@param player_type CatCardConst.PlayerType
---@return GameObject
function CatCardBaseAction:GetSlotStackNodeByType(sub_type, card_type, pos_index, player_type)
    return self.logicCtrl:GetSlotStackNodeByType(sub_type, card_type, pos_index, player_type)
end

---@param card_type CatCardConst.CardType
---@param pos_index int
---@param player_type CatCardConst.PlayerType
---@return GameObject
function CatCardBaseAction:GetModelParent(card_type, pos_index, player_type)
    return self.logicCtrl:GetModelParent(card_type, pos_index, player_type)
end

---@param card_type CatCardConst.CardType
---@param player_type CatCardConst.PlayerType
---@return CatCardBaseLogic[]
function CatCardBaseAction:GetModels(card_type, player_type)
    return self.logicCtrl:GetModels(card_type, player_type)
end

---@param model_name string
---@param model GameObject
function CatCardBaseAction:AddModelToTemp(model_name, model)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_TEMP, model_name, model)
end

---@param model_name string
---@param model GameObject
function CatCardBaseAction:AddModelToShow(model_name, model)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_SHOW, model_name, model)
end

---@param card_type CatCardConst.CardType
---@param idx int
---@param player_type CatCardConst.PlayerType
function CatCardBaseAction:RemoveModel(card_type, idx, player_type)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REMOVE_MODEL, card_type, idx, player_type)
end

---取消所有选中以及可选
function CatCardBaseAction:UnselectAllTarget()
    table.clear(self.bll:GetSelectStateMap())
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_SELECT, false, CatCardConst.CardType.CARD, nil, CatCardConst.PlayerType.PLAYER)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_SELECT, false, CatCardConst.CardType.SLOT)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_CAN_SELECT, false, CatCardConst.CardType.CARD, nil, CatCardConst.PlayerType.PLAYER)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_CAN_SELECT, false, CatCardConst.CardType.SLOT)
end


--endregion

--region 自定义接口
---是否正在running
---@return boolean
function CatCardBaseAction:IsRunning()
    return self.isRunning
end

---设置running
---@param is_running boolean
function CatCardBaseAction:SetIsRunning(is_running)
    self.isRunning = is_running
    local data = self:GetData()
    if data then
        data:SetIsRunning(is_running)
    end
end

---@return CatCard.BaseActionData
function CatCardBaseAction:GetData()
    return self.actionData
end

---@param isPause boolean
function CatCardBaseAction:SetPause(isPause)
    if self.actionData then
        self.actionData:SetPause(isPause)
    end
end

---@return boolean
function CatCardBaseAction:IsPause()
    return self.actionData and self.actionData:IsPause()
end

---@param action_type CatCard.ActionType
function CatCardBaseAction:SetType(action_type)
    self.actionType = action_type
end

---@return CatCard.ActionType
function CatCardBaseAction:GetType()
    return self.actionType
end

function CatCardBaseAction:Pause()
    if not self:IsPause() then
        self:SetPause(true)
        self:OnResume()
    end
end

function CatCardBaseAction:Resume()
    if self:IsPause() then
        self:SetPause(false)
        self:OnResume()
    end
end

--endregion

--region 扩展方法，被特定外部调用，本类不需要关注
---@param actionData CatCard.BaseActionData
function CatCardBaseAction:Execute(actionData)
    if self.bll:IsDebugMode() then
        self.bll:Log(string.format("[喵喵牌]:开始执行action:[%s]", self.__cname))
    end
    self.actionData = actionData
    actionData:SetOwner(self)
    self:SetIsRunning(true)
    self:OnAddEventListener()
    self:Begin(actionData)
end

---@param owner CatCardActionCtrl
function CatCardBaseAction:SetOwner(owner)
    self.owner = owner
    self.logicCtrl = self.owner:GetCtrl(CatCardConst.Ctrl.LOGIC)
end

---@param type CatCardConst.Ctrl
---@return BaseCatCardCtrl
function CatCardBaseAction:GetCtrl(type)
    return self.owner:GetCtrl(type)
end

---@param bll CatCardBLL
function CatCardBaseAction:SetBll(bll)
    ---@type CatCardBLL
    self.bll = bll
end

function CatCardBaseAction:Enter()
    self:SetBll(BllMgr.GetCatCardBLL())
end

function CatCardBaseAction:Exit()
    local actionData = self.actionData
    self:ReleaseSelf(true)
    if actionData and not actionData:IsReleased() then
        actionData:Release()
    end
end
--endregion

return CatCardBaseAction