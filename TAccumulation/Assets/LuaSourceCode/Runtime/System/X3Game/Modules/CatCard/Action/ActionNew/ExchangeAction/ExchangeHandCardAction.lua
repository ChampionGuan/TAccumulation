---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/12/28 19:40
---换牌动画action
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.ExchangeHandCardAction:CatCard.CatCardBaseAction
local ExchangeHandCardAction = class("ExchangeHandCardAction", BaseAction)

---@param action_data CatCard.ExchangeHandCardActionData
function ExchangeHandCardAction:Begin(action_data)
    self.stateData = self.bll:GetStateData()
    self.is_regret = self.stateData:GetSpState() == CatCardConst.ExchangeState.UNDO_SUCCESS
    self:PlayChangeAction()
end

function ExchangeHandCardAction:PlayChangeAction()
    ---双方数据已经发生变化
    local card_type = CatCardConst.CardType.CARD
    local speed = CatCardConst.CARD_SPEED
    local enemy_models, e_parent_models, pool_model_map, player_models, p_parent_models
    enemy_models, e_parent_models, pool_model_map = self:GetMoveModels(card_type, CatCardConst.PlayerType.ENEMY, CatCardConst.PlayerType.PLAYER, true)
    player_models, p_parent_models = self:GetMoveModels(card_type, CatCardConst.PlayerType.PLAYER, CatCardConst.PlayerType.ENEMY)
    self.logicCtrl:SetModelsLayer(enemy_models, Const.LayerMask.RT)
    self.logicCtrl:SetModelsLayer(player_models, Const.LayerMask.RT)
    local pool_models = PoolUtil.GetTable()
    for k, v in pairs(pool_model_map) do
        table.insert(pool_models, k)
    end
    self.logicCtrl:SetModelsLayer(pool_models, Const.LayerMask.RT)
    PoolUtil.ReleaseTable(pool_models)
    self.bll:CheckAnimation(CatCardConst.AnimationType.EXCHANGE_CARD, { enemy_models, player_models }, { e_parent_models, p_parent_models }, speed, function()
        self.logicCtrl:SetModelsLayer(enemy_models, Const.LayerMask.DEFAULT)
        self.logicCtrl:SetModelsLayer(player_models, Const.LayerMask.DEFAULT)
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_MODELS, CatCardConst.CardType.CARD, true)
        self:End()
    end)
end

---获取移动的model
function ExchangeHandCardAction:GetMoveModels(card_type, player_type, parent_type, is_need_create)
    local models = {}
    local parent_models = {}
    local zero_pos, one_pos, pool_model_map
    if is_need_create then
        zero_pos = GameUtil.GetVector(0, 0, 0)
        one_pos = GameUtil.GetVector(1, 1, 1)
        pool_model_map = {}
    end
    for index, model in pairs(self:GetModels(card_type, player_type)) do
        model = model:GetMoveTarget()
        if is_need_create then
            local data = self.bll:GetData(card_type, index, parent_type)
            if data then
                local model_name = data:GetCardModel()
                local temp = self:LoadModel(model_name)
                GameObjectUtil.SetParent(GameObjectUtil.GetComponent(temp, nil, "Transform"), GameObjectUtil.GetComponent(model, nil, "Transform").parent)
                self.logicCtrl:ResetModel(temp)
                if pool_model_map then
                    pool_model_map[temp] = model_name
                end
                GameObjectUtil.SetActive(model, false)
                model = temp
            else
                self.bll:LogFormat("data is nil! card_type =%s, index=%s,parent_type", card_type, index, parent_type)
            end

        end
        models[index] = model
        parent_models[index] = self.logicCtrl:GetModelParent(card_type, index, parent_type)
    end
    return models, parent_models, pool_model_map
end

return ExchangeHandCardAction