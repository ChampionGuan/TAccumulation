---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/8/27 15:43
---
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@class CatCardBaseLogic:GameObjectCtrl
local BaseLogic = class("BaseLogic",GameObjectCtrl)

function BaseLogic:ctor()
    ---@type boolean
    self.is_select = nil
    ---@type boolean
    self.is_can_select = nil
    ---@type CatCardConst.CardType
    self.card_type = nil
    ---@type CatCardConst.PlayerType
    self.player_type = nil
    ---@type int
    self.pos_index = nil
    ---@type CatCardBLL
    self.bll = nil
    ---@type fun(type:string,type:string):GameObject
    self.load_func = nil
    ---@type CatCard.CatCardLogicCtrl
    self.logic_ctrl = nil
    ---@type int
    self.layer = Const.LayerMask.DEFAULT
end

function BaseLogic:SetType(card_type,player_type)
    self.card_type = card_type
    self.player_type = player_type
end

function BaseLogic:SetLayer(layer)
    self.layer = layer
    if layer ~= nil then
        GameObjectUtil.SetLayer(self.gameObject,layer,true)
    end
end

function BaseLogic:GetLayer()
    return self.layer
end

function BaseLogic:GetPlayerType()
    return self.player_type
end

function BaseLogic:GetType()
    return self.card_type
end

function BaseLogic:AsyncInit()
    if self.async_init then return end
    self.async_init = true
    self:GetOriginPos()
end

function BaseLogic:SetBll(bll)
    ---@type CatCardBLL
    self.bll = bll
end

function BaseLogic:GetMovePos()
    if not self.move_pos then
        self.move_pos = self:GetOriginPos()+self.transform.up * CatCardConst.MODEL_SELECT_SLOT_OFFSET
    end
    return self.move_pos
end

function BaseLogic:SetPosIndex(pos_index)
    self.pos_index = pos_index
end

function BaseLogic:GetPosIndex()
    return self.pos_index
end

function BaseLogic:SetPosition(pos)
    if not pos then
        pos = self:GetOriginPos()
    end
    GameObjectCtrl.SetPosition(self,"",pos)
end

function BaseLogic:GetPosition()
    return GameObjectUtil.GetPosition(self.transform)
end

function BaseLogic:GetOriginPos()
    if not self.origin_pos then
        self.origin_pos = self:GetPosition()
    end
    return self.origin_pos
end

function BaseLogic:SetSelect(is_select)
    if self.is_select ~= is_select then
        self.is_select = is_select
        self:DoSelect(is_select)
    end
end

function BaseLogic:SetCanSelect(is_can_select)
    if self.is_can_select ~= is_can_select then
        self.is_can_select = is_can_select
        self:DoCanSelect(is_can_select)
    end
end

function BaseLogic:DoCanSelect(is_can_select)
    self:SetCanSelectEffectActive(is_can_select)
end

function BaseLogic:DoSelect(is_select)
    self:SetSelectEffectActive(is_select)
end

function BaseLogic:GetEffectParent()
    return nil
end

function BaseLogic:GetEffectName()
    local effect_name = CatCardConst.SelectEffectMap[self:GetPosIndex()]
    if not effect_name then
        effect_name = string.concat( CatCardConst.Effect.SLOT_SELECTED,self:GetPosIndex())
        CatCardConst.SelectEffectMap[self:GetPosIndex()] = effect_name
    end
    return effect_name
end

function BaseLogic:GetCanSelectEffectName()
    local effect_name = CatCardConst.CanSelectEffectMap[self:GetPosIndex()]
    if not effect_name then
        effect_name = string.concat( CatCardConst.Effect.SLOT_CAN_SELECT,self:GetPosIndex())
        CatCardConst.CanSelectEffectMap[self:GetPosIndex()] = effect_name
    end
    return effect_name
end

function BaseLogic:GetEffectParam()
    return self:GetEffectName(),self:GetEffectParent()
end

function BaseLogic:GetCanSelectEffectParam()
    return self:GetCanSelectEffectName(),self:GetEffectParent()
end


function BaseLogic:SetSelectEffectActive(is_active)

    ---@type CatCardData
    local card_data = self:GetData()
    if card_data and card_data:GetType() == CatCardConst.CardType.CARD and card_data:GetSubType() == CatCardConst.SubType.FUNCCARD then
        ---功能牌被选中展示时不显示选中特效
        return
    end

    local effect_state = is_active and CatCardConst.EffectState.SHOW or CatCardConst.EffectState.HIDE
    self.bll:CheckEffect(CatCardConst.EffectType.DEFAULT,effect_state,self:GetEffectParam())
end

---设置可选择特效的显示
function BaseLogic:SetCanSelectEffectActive(is_active)

    ---@type CatCardData
    local card_data = self:GetData()
    if card_data and card_data:GetType() == CatCardConst.CardType.CARD and card_data:GetSubType() == CatCardConst.SubType.FUNCCARD then
        ---功能牌需要根据是否可使用来处理是否显示可选择特效
        local action = self.bll:GetActionData(CatCardConst.ActionType.UseCardCondition,card_data:GetPlayerType())
        local res = false
        action:Set(card_data:GetId(),CatCardConst.UseCardType.Select,function (ok)
            res = ok
        end)
        action:Begin()

        if not res then
            ---不满足使用条件的功能牌 可选中特效固定隐藏
            is_active = false
        end

    end

    local effect_state = is_active and CatCardConst.EffectState.SHOW or CatCardConst.EffectState.HIDE
    self.bll:CheckEffect(CatCardConst.EffectType.DEFAULT,effect_state,self:GetCanSelectEffectParam())
end

function BaseLogic:Move()
    self:SetPosition(self:GetMovePos())
end

function BaseLogic:MoveBack()
    self:SetPosition(self:GetOriginPos())
end

function BaseLogic:Init()
    self.models = {}
    self.zero_pos = GameUtil.GetVector(0,0,0)
    self.one_pos = GameUtil.GetVector(1,1,1)
end

---当前是否是有效的
function BaseLogic:IsValid()
    return self:GetPosIndex()~=nil
end


function BaseLogic:GetData()
    return self.bll:GetData(self:GetType(),self:GetPosIndex(),self:GetPlayerType())
end

function BaseLogic:GetType()
    return self.card_type
end

function BaseLogic:GetTypeConf()
    return CatCardConst.TypeConf[self:GetType()]
end

function BaseLogic:Refresh(pos_index)
    self:SetPosIndex(pos_index)
    if not self.sync_init then
        TimerMgr.AddScaledTimer(0.06,self.AsyncInit,self)
    end
end

function BaseLogic:ResetModel(model,rotationZ)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_RESET_MODEL,model,rotationZ)
end

function BaseLogic:AddModelToPool(model_name,model)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ADD_MODEL_TO_POOL,model_name,model)
end

function BaseLogic:SetLoadModelFunc(load_func)
    self.load_func = load_func
end

---@param logic_ctrl CatCard.CatCardLogicCtrl
function BaseLogic:SetLogicCtrl(logic_ctrl)
    self.logic_ctrl = logic_ctrl
end

---@param sub_type CatCardConst.SubType
---@param card_type CatCardConst.CardType
---@param pos_index int
---@param player_type CatCardConst.PlayerType
---@return GameObject
function BaseLogic:GetSlotStackNodeByType(sub_type,card_type,pos_index,player_type)
    return self.logic_ctrl:GetSlotStackNodeByType(sub_type,card_type,pos_index,player_type)
end

function BaseLogic:LoadModel(model_name)
    return self.load_func(model_name)
end

function BaseLogic:GetModel(name)
    return name and self.models[name] or nil
end

function BaseLogic:IsTouchEnable()
    return self:GetData() and self:GetData():IsTouchEnable()
end

function BaseLogic:SetTouchEnable(is_enable)
    self.is_touch_enable = is_enable
end

function BaseLogic:SetNodeName(node_name)
    self.node_name = node_name
    self:SetName(node_name)
end

function BaseLogic:GetNodeName()
    return self.node_name
end

return BaseLogic