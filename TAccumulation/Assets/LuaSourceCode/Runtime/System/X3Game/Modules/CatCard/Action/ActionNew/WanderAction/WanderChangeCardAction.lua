---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/12/20 20:08
---神游交换Slot
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
---@class CatCard.WanderChangeCardAction:CatCard.CatCardBaseAction
local WanderChangeCardAction = class("WanderChangeCardAction", BaseAction)

---@param action_data CatCard.WanderChangeCardActionData
function WanderChangeCardAction:Begin(action_data)
    self.stateData = self.bll:GetStateData()
    self.from_index = action_data:GetFrom()
    self.to_index = action_data:GetTo()
    self.is_play_sound = action_data:IsPlaySound()
    local res = self.stateData:GetActionRes()
    self.is_revert = res == CatCardConst.WanderingType.SWITCHFAILED or self.stateData:GetSpState() == CatCardConst.WanderingState.ENDED
    self.slot_scores = {}
    self:PlaySwitchAnimation()
end

function WanderChangeCardAction:PlaySwitchAnimation()
    local func = function()
        ---@type SlotData
        local from_slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.from_index)
        ---@type SlotData
        local to_slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.to_index)
        if not from_slot_data or not to_slot_data then
            Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard, "data is nil from_index=%s,to_index = %s", self.from_index, self.to_index)
            self:End()
            return
        end
        ---@type CatSlotLogic
        local from_model = self.logicCtrl:GetModel(CatCardConst.CardType.SLOT, self.from_index)
        ---@type CatSlotLogic
        local to_model = self.logicCtrl:GetModel(CatCardConst.CardType.SLOT, self.to_index)

        local from_ani = self.is_revert and from_slot_data:GetCatAnimation(true) or to_slot_data:GetCatAnimation()
        local to_ani = self.is_revert and to_slot_data:GetCatAnimation(true) or from_slot_data:GetCatAnimation()
        from_slot_data:SetCatAnimation(from_ani)
        to_slot_data:SetCatAnimation(to_ani)
        local is_revert = self.is_revert
        from_model = from_model:GetModelByType("CAT")
        to_model = to_model:GetModelByType("CAT")
        --Debug.LogFormatWithTag(GameConst.LogTag.CatCard, "is_revert = %s,from_ani=%s,to_ani=%s,from_index=%s,to_index=%s", self.is_revert and 1 or 0, from_ani, to_ani, self.from_index, self.to_index)
        if self.is_play_sound then
            self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, CatCardConst.Sound.SYSTEM_MIAO_CHANGE)
        end
        self.bll:CheckAnimation(CatCardConst.AnimationType.SWITCH_CARD, from_model, to_model, CatCardConst.CAT_SWITCH_SPEED, function()
            EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_ALL_SELECT_CATS_IS_PICK, false, function()
                if self.is_play_sound then
                    self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, from_slot_data:GetSound(is_revert))
                    self.bll:CheckSound(CatCardConst.SoundType.DEFAULT, to_slot_data:GetSound(is_revert))
                end
                EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.DEFAULT, CatCardConst.CardType.SLOT, self.from_index)
                EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_MODEL_LAYER, Const.LayerMask.DEFAULT, CatCardConst.CardType.SLOT, self.to_index)
                self:RefreshModels()
                if self.actionData:IsCheckScore() then
                    self:CheckScore(from_slot_data, to_slot_data)
                else
                    from_slot_data:SetCatAnimation(nil)
                    to_slot_data:SetCatAnimation(nil)
                    self:End()
                end
            end)
        end, is_revert)
    end
    if not self.is_revert then
        func()
    else
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_ALL_SELECT_CATS_IS_PICK, true, func)
    end
end

function WanderChangeCardAction:RefreshModels()
    local selects = self.bll:GetSelectIndexs(CatCardConst.CardType.SLOT)
    for k, v in pairs(selects) do
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_MODEL, CatCardConst.CardType.SLOT, v, nil, true)
    end
end

---@param from_slot_data SlotData
---@param to_slot_data SlotData
function WanderChangeCardAction:CheckScore(from_slot_data, to_slot_data)
    local diff_score1 = 0
    local diff_score2 = 0
    local pre_player_type = from_slot_data:GetOccupyPlayer(true)
    local cur_player_type = from_slot_data:GetOccupyPlayer()
    if cur_player_type ~= pre_player_type then
        diff_score1 = self.bll:GetScore(cur_player_type) - self.bll:GetScore(cur_player_type, true)
        diff_score2 = self.bll:GetScore(pre_player_type) - self.bll:GetScore(pre_player_type, true)
    else
        diff_score1 = self.bll:GetScoreBySlotIdx(self.from_index) - to_slot_data:GetScoreByCardId(to_slot_data:GetCardId(true))
        diff_score2 = self.bll:GetScoreBySlotIdx(self.to_index) - from_slot_data:GetScoreByCardId(from_slot_data:GetCardId(true))
    end
    local idx = 2
    local function fun()
        idx = idx - 1
        if idx <= 0 then
            if self.is_revert then
                self.stateData:SetSpState(CatCardConst.WanderingState.ENDED)
            end
            EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_SCORE)
            self:End()
        end
    end
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SHOW_SCORE, self.is_revert and self.to_index or self.from_index, self.is_revert and diff_score1 * -1 or diff_score1, cur_player_type, fun)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SHOW_SCORE, self.is_revert and self.from_index or self.to_index, self.is_revert and diff_score2 * -1 or diff_score2, pre_player_type, fun)
end

function WanderChangeCardAction:ShowScore()

end

return WanderChangeCardAction