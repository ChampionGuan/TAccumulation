---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/12/30 18:53
---悔牌选择
---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
-----@type CatCard.CatCardBaseAction
local BaseAction = require(CatCardConst.BASE_ACTION_PATH_NEW)
-----@class CatCard.RegretSelectAction:CatCard.CatCardBaseAction
local RegretSelectAction = class("RegretSelectAction", BaseAction)

function RegretSelectAction:Begin(action_data)
    self.playerType = CatCardConst.PlayerType.PLAYER
    self.cardId = 0
    self.slotIndex = 0
    self.actionState = CatCardConst.RegretState.CAUGHTSUC_MINECHANGE
    self.stateData = self.bll:GetStateData()
    if self.bll:IsCanAction(self.playerType, CatCardConst.SpecialType.REGRET) then
        self.bll:SetCurSelectIndex()
        self.selectCall = handler(self, self._SelectCardEvent)
        self:_SetCardSelectEnable(true)
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_TIPS, self:GetTips())
    else
        self.actionState = CatCardConst.RegretState.CAUGHTSUC_MINEMAX
        self:SendRegretMsg()
    end
end

function RegretSelectAction:_SelectCardEvent(card_type, pos_index, player_type)
    ---@type CatCardData
    local data = self.bll:GetData(card_type, pos_index, player_type)
    if card_type == CatCardConst.CardType.CARD then
        if data then
            self.cardId = data:GetId()
            if not self.selectSlot then
                self:_SetSlotSelectEnable(true)
            end
        end
    else
        if data and data:IsOccupied(CatCardConst.PlayerType.PLAYER) then
            self.slotIndex = data:GetIndex()
        end
    end
    EventMgr.Dispatch(CatCardConst.Event.REGRET_WAITING_PLAYER_SELECT)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_TIPS, self:GetTips())
end

function RegretSelectAction:_SetCardSelectEnable(active)
    self.bll:SetTouchEnable(active)
    if active then
        ---@type CatCard.SelectTargetActionData
        self.select = self.bll:GetActionData(CatCardConst.ActionType.SelectTarget, CatCardConst.PlayerType.PLAYER)
        self.select:SetIsShowCanSelect(true)
        self.select:SetIsCanShowPreview(false)
        self.select:SetSelectCall(self.selectCall)
        local targetMode = CatCardConst.SelectTargetMode.Single
        self.select:Set(CatCardConst.SelectTargetType.Card, CatCardConst.SelectTargetFilterType.NumCard, CatCardConst.SelectTargetOwner.Player, targetMode)
        self.select:Begin()
    else
        if self.select then
            self.select:End()
            self.select = nil
        end
    end
end

function RegretSelectAction:_SetSlotSelectEnable(active)
    if active then
        ---@type CatCard.SelectTargetActionData
        self.selectSlot = self.bll:GetActionData(CatCardConst.ActionType.SelectTarget, CatCardConst.PlayerType.PLAYER)
        self.selectSlot:SetIsShowCanSelect(true)
        self.selectSlot:SetIsCanShowPreview(false)
        self.selectSlot:SetSelectCall(self.selectCall)
        local targetMode = CatCardConst.SelectTargetMode.Single
        self.selectSlot:Set(CatCardConst.SelectTargetType.Slot, CatCardConst.SelectTargetFilterType.FilterByOwner | CatCardConst.SelectTargetFilterType.OccupySlot, CatCardConst.SelectTargetOwner.Player, targetMode)
        self.selectSlot:Begin()
    else
        if self.selectSlot then
            self.selectSlot:End()
            self.selectSlot = nil
        end
    end
end

function RegretSelectAction:SendRegretMsg()
    local cardId, slotIndex
    if self.actionState == CatCardConst.RegretState.CAUGHTSUC_MINECHANGE then
        cardId = self.cardId
        slotIndex = self.slotIndex
    end
    self.bll:CheckAction(CatCardConst.SpecialType.NET_WORK, CatCardConst.NetworkType.MIAOSPUNDO, nil, self.actionState, cardId, slotIndex)
    self:GetData():SetIsBreak(true)
    self:End()
end

function RegretSelectAction:TipSelectResultEvent(flag)
    if flag == 1 then
        --确认
        if self.bll:IsCanRegret() then
            --表演过程中不允许操作手牌
            self.bll:SetTouchEnable(false)
            self:PlayRegretAni(false, self.playerType, function()
                self.bll:SetTouchEnable(true)
                self:SendRegretMsg()
            end)
            EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_VIEW_ACTIVE, CatCardConst.ViewType.TIPS, false)
        else
            UICommonUtil.ShowMessage(self:GetTips())
        end
    else
        --放弃
        self.actionState = CatCardConst.RegretState.CAUGHTSUC_MINECANCEL
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_ON_SELECT_MODEL)
        EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_SET_TOUCH_EMPTY_ENABLE, false)
        local playDialog = self.bll:GetActionData(CatCardConst.ActionType.ChangeDialogueState, CatCardConst.PlayerType.PLAYER, function()
            self:SendRegretMsg()
        end)
        playDialog:SetState(CatCardConst.DialogueState.UndoCardSucceedLetItGoNoChange)
        playDialog:SetDialogueCtrlState(CatCardConst.DialogueCtrlState.Start)
        playDialog:Begin()
    end
end

function RegretSelectAction:GetTips()
    local text_id = ""
    if self.bll:IsCanRegret(CatCardConst.CardType.CARD) then
        if self.bll:IsCanRegret(CatCardConst.CardType.SLOT) then
            text_id = UITextConst.UI_TEXT_6445
        else
            text_id = UITextConst.UI_TEXT_6444
        end
    else
        text_id = UITextConst.UI_TEXT_6443
    end
    return text_id
end

function RegretSelectAction:PlayRegretAni(is_revert, player_type, callback)
    self.playerType = player_type
    local is_play_ui_ani = false
    if player_type == CatCardConst.PlayerType.ENEMY and not is_revert then
        is_play_ui_ani = true
    end
    self.slotIndex = self.bll:GetCurSelectIndex(CatCardConst.CardType.SLOT)
    self.cardIndex = self.bll:GetCurSelectIndex(CatCardConst.CardType.CARD)
    local slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slotIndex)
    if slot_data then
        self.cardId = slot_data:GetCardId()
    end
    self.bll:CheckAnimation(CatCardConst.AnimationType.REGRET_CARD, is_revert, callback, player_type, self.slotIndex, self.cardId, self.cardIndex, is_play_ui_ani)
    self.bll:SetCurSelectIndex()
end

function RegretSelectAction:ChangeCardData()
    local slot_data = self.bll:GetData(CatCardConst.CardType.SLOT, self.slotIndex)
    local card_data = self.bll:GetData(CatCardConst.CardType.CARD, self.cardIndex, self.playerType)
    local card_id = slot_data:GetCardId()
    card_data:SetId(card_id)
    slot_data:SetCardId(self.cardId)
    EventMgr.Dispatch(CatCardConst.Event.CAT_CARD_REFRESH_MODELS, CatCardConst.CardType.CARD, false, self.playerType)
end

function RegretSelectAction:OnAddEventListener()
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_TIP_SELECT_RESULT, self.TipSelectResultEvent, self)
    EventMgr.AddListener(CatCardConst.Event.REGRET_CHANGE_CARD_DATA_EVENT, self.ChangeCardData, self)
end

function RegretSelectAction:End()
    self:_SetCardSelectEnable(false)
    self:_SetSlotSelectEnable(false)
    self.bll:SetCurSelectIndex()
    BaseAction.End(self)
end

return RegretSelectAction