---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by canghai.
--- DateTime: 2023/1/4 11:07
---

---@type CatCardConst
local CatCardConst = require("Runtime.System.X3Game.Modules.CatCard.Data.CatCardConst")
---@type BaseCatCardCtrl
local CatCardBaseCtrl = require(CatCardConst.BASE_CTRL_PATH)
---@class CatCardDialogueCtrl:BaseCatCardCtrl
local CatCardDialogueCtrl = class("CatCardDialogueCtrl", CatCardBaseCtrl)
---@type table<CatCardConst.DialogueStateRelationShip, function>
local DialogueStateRelationShipFuncDic
---@type table<CatCardConst.DialogueCtrlState, function>
local DialogueCtrlStateFuncDic
local EMPTY_CALLBACK = function()  end
local EMPTY_DIALOGUE_STATE = "EMPTY_STATE"

function CatCardDialogueCtrl:ctor()
    CatCardBaseCtrl.ctor(self)
    ---@type string[] 播放列表
    self._playStateQueue = nil
    ---@type function[] 播放回调列表
    self._playStateCallbackQueue = nil
    ---@type boolean 是否强制切换，强制切换在切状态时不会将等待的剧情加入播放队列
    self._isForce = false
    ---@type boolean 是否已经enter
    self._isEntered = false
    ---@type boolean 是否正在触发 invoke
    self._isInvoking = false
    ---@type number Invoke连续触发的次数，防止卡死
    self._InvokeCount = 0
    ---@type cfg.CatCardDialogueState[] 读取的时候是列（newState）对行（oldState）产生关系
    self._dialogueStateConfig = nil
    ---@type cfg.CatCardStateIgnoreList[]
    self._stateIgnoreList = nil
end

---@private
function CatCardDialogueCtrl:Clear()
    table.clear(self._playStateQueue)
    table.clear(self._playStateCallbackQueue)
end

function CatCardDialogueCtrl:Enter()
    self:InitData()
    self._isEntered = true
    self:_RegisterEvent()
    self.super.Enter(self)
end

function CatCardDialogueCtrl:Exit()
    self.super.Exit(self)
    self._isEntered = false
    --清理
    self:Clear()
end

function CatCardDialogueCtrl:InitData()
    self._playStateQueue = {}
    self._playStateCallbackQueue = {}
    self._isEntered = false
    self._InvokeCount = 0
    self._dialogueStateConfig = LuaCfgMgr.GetAll("CatCardDialogueState")
    self._stateIgnoreList = LuaCfgMgr.GetAll("CatCardStateIgnoreList")
end

function CatCardDialogueCtrl:OnPause()
    GamePlayMgr.GetController():GamePlayPause()
end

function CatCardDialogueCtrl:OnResume()
    GamePlayMgr.GetController():GamePlayResume()
end

--region Dialogue State
---@param newState string 状态名
---@param dialogueCtrlState CatCardConst.DialogueCtrlState 控制状态
---@param callback function 回调方法
function CatCardDialogueCtrl:ChangeDialogueState(newState, dialogueCtrlState, callback)
    if not self._isEntered then
        return
    end

    if self.bll:IsDateDebugMode() then
        self.bll:LogDateFormat("外界切换 %s", newState)
    end
    DialogueCtrlStateFuncDic[dialogueCtrlState](self, newState, callback)
end

---在当前PlayState播放完成后触发NextState
---@private
function CatCardDialogueCtrl:_GotoNextState()
    --触发以前播放的剧情的回调并且清理
    self:_InvokeCallback()

    --收到事件切换下一个状态
    if #self._playStateQueue > 0 then
        local playState = self._playStateQueue[1]
        if self.bll:IsDateDebugMode() then
            self.bll:LogDateFormat("GotoNextState: 切换到等待的 %s ", playState)
        end
        --默认强切
        GamePlayMgr.GetController():ChangeState(playState, true, true)
    end
end

---触发回调
---@private
---@param isClear boolean
---@return function
function CatCardDialogueCtrl:_InvokeCallback(isClear)
    isClear = isClear or false
    if isClear == true then
        for _, callback in ipairs(self._playStateCallbackQueue) do
            callback()
        end

        table.clear(self._playStateQueue)
        --清理已经注册的 action
        table.clear(self._playStateCallbackQueue)
    else
        local playState = self._playStateQueue[1]
        if playState then
            --先清理再触发
            local callback = self._playStateCallbackQueue[1]
            if self.bll:IsDateDebugMode() then
                self.bll:LogDateFormat("InvokeCallback 触发了 %s 的回调", playState)
            end
            if not callback then
                if self.bll:IsDateDebugMode() then
                    self.bll:LogDateFormat("%s 的 callback为空，同帧Change了两次相同的State")
                end
            else
                callback()
            end
            if self.bll:IsDateDebugMode() then
                self.bll:LogDateFormat("从队列中删除了 %s 的回调", playState)
            end
            self:_RemoveState(playState)
        else
            if self.bll:IsDateDebugMode() then
                self.bll:LogDateFormat("InvokeCallback 未知的回调")
            end
        end
    end
end

---@private
---@param playState string
---@param newState string
---@return CatCardConst.DialogueStateRelationShip
function CatCardDialogueCtrl:_CalculateDialogueStateRelationShip(playState, newState)
    --在白名单中的不判断关系
    if self._stateIgnoreList[newState] or self._stateIgnoreList[playState] then
        return CatCardConst.DialogueStateRelationShip.Wait
    end
    
    if not self._dialogueStateConfig[playState] then
        Debug.LogErrorFormat("PlayState: %s 尚未在【CatCardDialogueState】 定义", playState)
        return CatCardConst.DialogueStateRelationShip.Wait
    end
    
    local state = self._dialogueStateConfig[playState][newState]
    if not state then
        Debug.LogErrorFormat("NewState: %s 尚未在【CatCardDialogueState】 中与 PlayState: %s 建立关系", 
                newState, playState)
    end
    
    if #self._playStateQueue > 1 then
        if state ==  CatCardConst.DialogueStateRelationShip.Wait then
            return CatCardConst.DialogueStateRelationShip.Discard
        end
    end
    
    return state
end

---设置剧情黑板中的数据
---@param variableType CatCardConst.DialogueVariable
---@param value any
function CatCardDialogueCtrl:SetDialogueVariable(variableType, value)
    if not self:IsDialogueVariableTypeExist(variableType) then
        Debug.LogErrorFormat("【CatCardDialogueCtrl】 DialogueVariable中不存在该值： %s", variableType)
        return
    end
    DialogueManager.Get("GamePlay"):ChangeVariableState(variableType, value)
end

---从剧情黑板中获取数据
---@param variableType CatCardConst.DialogueVariable
---@return any 
function CatCardDialogueCtrl:GetDialogueVariable(variableType)
    if not self:IsDialogueVariableTypeExist(variableType) then
        Debug.LogErrorFormat("【CatCardDialogueCtrl】 DialogueVariable中不存在该值： %s", variableType)
        return
    end

    return DialogueManager.Get("GamePlay"):GetVariableState(variableType)
end

---检查 variableType 是否存在
---@private
---@param variableType CatCardConst.DialogueVariable
---@return boolean
function CatCardDialogueCtrl:IsDialogueVariableTypeExist(variableType)
    if type(variableType) ~= "number" then
        return false
    end

    for _,t in pairs(CatCardConst.DialogueVariable) do
        if t == variableType then
            return true
        end
    end
    
    return false
end

--endregion

--region Local
DialogueStateRelationShipFuncDic = {
    ---@param ctrl CatCardDialogueCtrl
    ---@param playState string
    ---@param newState string
    ---@param callback function
    [CatCardConst.DialogueStateRelationShip.Discard] = function(ctrl, playState, newState, callback)
        --Discard直接触发结束回调
        if ctrl.bll:IsDateDebugMode() then
            ctrl.bll:LogDateFormat("%s 已经被丢弃并执行回调", newState)
        end
        callback()
    end,

    ---@param ctrl CatCardDialogueCtrl
    ---@param playState string
    ---@param newState string
    ---@param callback function
    [CatCardConst.DialogueStateRelationShip.Interrupt] = function(ctrl, playState, newState, callback)
        if #ctrl._playStateQueue > 1 then
            --先取出waitState
            local waitState = table.remove(ctrl._playStateQueue)
            local waitStateCallback = table.remove(ctrl._playStateCallbackQueue)

            --强切newState
            if ctrl.bll:IsDateDebugMode() then
                ctrl.bll:LogDateFormat("%s 打断了 %s 的播放", newState, playState)
            end
            ctrl:_InsertStateWithCallback(newState, callback)
            GamePlayMgr.GetController():ChangeState(EMPTY_DIALOGUE_STATE, true, true)

            --将waitState加回
            if ctrl.bll:IsDateDebugMode() then
                ctrl.bll:LogDateFormat("%s 继续等待播放", waitState)
            end
            ctrl:_InsertStateWithCallback(waitState, waitStateCallback)
        else
            if ctrl.bll:IsDateDebugMode() then
                ctrl.bll:LogDateFormat("%s 打断了 %s 的播放", newState, playState)
            end
            ctrl:_InsertStateWithCallback(newState, callback)
            GamePlayMgr.GetController():ChangeState(EMPTY_DIALOGUE_STATE, true, true)
        end
    end,

    ---@param ctrl CatCardDialogueCtrl
    ---@param playState string
    ---@param newState string
    ---@param callback function
    [CatCardConst.DialogueStateRelationShip.Wait] = function(ctrl, playState, newState, callback)
        --加入等待
        if ctrl.bll:IsDateDebugMode() then
            ctrl.bll:LogDateFormat("%s 加入等待队列", newState)
        end
        ctrl:_InsertStateWithCallback(newState, callback)
    end,
}

DialogueCtrlStateFuncDic = {
    ---@param ctrl CatCardDialogueCtrl
    ---@param newState string 状态名
    ---@param callback function 回调方法
    [CatCardConst.DialogueCtrlState.Start] = function(ctrl, newState, callback)
        local playCount = #ctrl._playStateQueue
        if playCount < 1 then
            --当前没有剧情
            ctrl:_InsertStateWithCallback(newState, callback)
            --默认强切
            GamePlayMgr.GetController():ChangeState(newState, true, true)
        else
            if playCount <= 1 then
                local playState = ctrl._playStateQueue[1]
                local result = ctrl:_CalculateDialogueStateRelationShip(playState, newState)
                DialogueStateRelationShipFuncDic[result](ctrl, playState, newState, callback)
            elseif playCount <= 2 then --有一个在等待
                local playState = ctrl._playStateQueue[1]
                local result = ctrl:_CalculateDialogueStateRelationShip(playState, newState)
                --这里如果是打断会触发GotoNextState，原本wait的State会append，在等待后触发
                DialogueStateRelationShipFuncDic[result](ctrl, playState, newState, callback)
            else
                Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard, "【CatCardDialogueCtrl】 playStateQueue 的数量异常，GoToNext没有正常触发，当前为%s!!!", playCount)
            end
        end
    end,
    ---@param ctrl CatCardDialogueCtrl
    ---@param newState string 状态名
    ---@param callback function 回调方法
    [CatCardConst.DialogueCtrlState.Pause] = function(ctrl, newState, callback)
        ctrl:OnPause()
        callback()
    end,
    ---@param ctrl CatCardDialogueCtrl
    ---@param newState string 状态名
    ---@param callback function 回调方法
    [CatCardConst.DialogueCtrlState.Resume] = function(ctrl, newState, callback)
        ctrl:OnResume()
        callback()
    end,
    ---@param ctrl CatCardDialogueCtrl
    ---@param stopState string 状态名
    ---@param callback function 回调方法
    [CatCardConst.DialogueCtrlState.Stop] = function(ctrl, stopState, callback)
        local playCount = #ctrl._playStateQueue
        if playCount < 1 then
            callback()
            return
        end
        
        local playState = ctrl._playStateQueue[1]
        if stopState == nil then
            stopState = playState
        end
        
        if playCount < 2 then
            if playState == stopState then
                --强切
                GamePlayMgr.GetController():ChangeState(EMPTY_DIALOGUE_STATE, true, true)
            end
        elseif playCount < 3 then
            local waitState = ctrl._playStateQueue[2]
            if playState ~= stopState then
                if waitState == stopState then
                    ctrl:_RemoveState(waitState)
                end
            else
                --先取出原先的剧情
                local waitCallback = ctrl:_RemoveState(waitState)
                
                --打断原先的剧情
                DialogueStateRelationShipFuncDic[CatCardConst.DialogueStateRelationShip.Interrupt](ctrl, playState, waitState, waitCallback)
            end
        else
            Debug.LogErrorFormatWithTag(GameConst.LogTag.CatCard, "【CatCardDialogueCtrl】 playStateQueue 的数量异常，GoToNext没有正常触发，当前为%s!!!", playCount)
        end
        callback()
    end,
    ---@param ctrl CatCardDialogueCtrl
    ---@param newState string 状态名
    ---@param callback function 回调方法
    [CatCardConst.DialogueCtrlState.Clear] = function(ctrl, newState, callback)
        --清理前触发回调
        ctrl:_InvokeCallback()
        --清理队列
        ctrl:Clear()
        --结束剧情
        GamePlayMgr.GetController():ClearDelayConversationList()
        GamePlayMgr.GetController():ChangeState(EMPTY_DIALOGUE_STATE, true, true)
        callback()
    end,
}
--endregion

--region Event
---@private
function CatCardDialogueCtrl:_RegisterEvent()
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_DIALOGUE_GOTO_NEXT_STATE_EVENT, self._GotoNextState, self)
    EventMgr.AddListener(CatCardConst.Event.CAT_CARD_DIALOGUE_SET_VARIABLE_EVENT, self.SetDialogueVariable, self)
end
--endregion Event Over

--region Util
---@private
---@param state string
---@param callback function
function CatCardDialogueCtrl:_InsertStateWithCallback(state, callback)
    table.insert(self._playStateQueue, state)
    table.insert(self._playStateCallbackQueue, callback)
end

---@private
---@param state string
---@return function
function CatCardDialogueCtrl:_RemoveState(state)
    local callback
    local index = 0
    for i, s in ipairs(self._playStateQueue) do
        if s == state then
             index = i
        end
    end

    if index ~= 0 then
        table.remove(self._playStateQueue, index)
        callback = table.remove(self._playStateCallbackQueue, index)
    end
    return callback == nil and EMPTY_CALLBACK or callback
end
--endregion Util Over

return CatCardDialogueCtrl