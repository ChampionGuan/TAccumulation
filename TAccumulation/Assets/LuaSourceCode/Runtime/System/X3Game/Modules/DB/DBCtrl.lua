---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhanbo.
--- DateTime: 2022/11/9 15:14
---
---@class DBCtrl
local DBCtrl = class("DBCtrl")

---构造函数
function DBCtrl:ctor()
    ---@type string
    self.dbPath = nil
    ---@type string
    self.tableName = nil
    ---@type DBHelper
    self.helper = nil
    ---@type int
    self.tableMaxId = nil
    self.sharedValue = {}
end

---@param dbHelper DBHelper
function DBCtrl:SetDBHelper(dbHelper)
    self.helper = dbHelper
end

-----设置数据库路径
-----@param dbPath string
--function DBCtrl:SetDBPath(dbPath)
--    if (not self.dbPath) or (self.dbPath ~= dbPath) then
--        self.dbPath = dbPath
--        ---dbPath不一样,需要重新创建helper
--        self.helper = nil
--    end
--end

---设置表名
---@param tableName string
function DBCtrl:SetTableName(tableName)
    self.tableName = tableName
end

---表是否存在
---@return bool
function DBCtrl:ExistTable()
    if string.isnilorempty(self.tableName) then
        Debug.LogError("[DBCtrl:ExistTable] tableName is nil.")
        return false
    end
    if self:_GetHelper():ExistTable(self.tableName) then
        return true
    end
    return false
end

---增加一行数据
---@param data table
function DBCtrl:Add(data)
    local id = self:_GetNextMaxId()
    self:_GetHelper():Add(self.tableName, id, data)
end

---添加多行数据
---@param dataList table[]
function DBCtrl:AddValues(dataList)
    self:_GetHelper():AddValues(self.tableName, dataList)
end

---删除表
function DBCtrl:DeleteTable()
    if string.isnilorempty(self.tableName) then
        Debug.LogError("[DBCtrl:DeleteTable] tableName is nil.")
        return
    end
    self:_GetHelper():DropTable(self.tableName)
end

---清空表格数据(注意表格仍然存在)
function DBCtrl:ClearTable()
    if string.isnilorempty(self.tableName) then
        Debug.LogError("[DBCtrl:ClearTable] tableName is nil.")
        return
    end
    self:_GetHelper():ClearTable(self.tableName)
end

---删除一行或者多行数据
---@param condition table
function DBCtrl:DeleteByCondition(condition)
    if string.isnilorempty(condition) then
        Debug.LogError("[DBCtrl:DeleteByCondition] condition is nil.")
        return
    end
    self:_GetHelper():DeleteByCondition(self.tableName, condition)
end

---根据条件更新数据
---@param data table
function DBCtrl:UpdateByCondition(data, condition)
    local datas = self:GetByCondition(self.tableName, condition)
    if not datas then
        return
    end
    for i = 1, #datas do
        local dbData = datas[i]
        for k, v in pairs(data) do
            dbData[k] = v
        end
        ---datas[i] = dbData
        self:_GetHelper():Update(self.tableName, dbData.id, dbData)
    end
end

---根据条件添加或者更新数据
---@param data table
---@param condition table
function DBCtrl:AddOrUpdateByCondition(data, condition)
    local datas = self:GetByCondition(self.tableName, condition)
    if not datas then
        self:Add(data)
        return
    end
    for i = 1, #datas do
        local dbData = datas[i]
        for k, v in pairs(data) do
            dbData[k] = v
        end
        ---datas[i] = dbData
        self:_GetHelper():Update(self.tableName, dbData.id, dbData)
    end
end

---获取所有数据
---@return table[]|nil 字典Map
function DBCtrl:GetAll()
    local exists = self:ExistTable()
    if not exists then
        return nil
    end
    return self:_GetHelper():GetAll(self.tableName)
end

---通过条件获取数据列表
---@param condition table
---@return table[]|nil 字典Map
function DBCtrl:GetByCondition(condition)
    if not condition then
        return nil
    end
    return self:_GetHelper():GetByCondition(self.tableName, condition)
end

---执行Sql语句
---@param sql string
function DBCtrl:_ExeSql(sql)
    self:_GetHelper():ExeSql(sql)
end

---@return DBHelper
function DBCtrl:_GetHelper()
    if not self.helper then
        Debug.LogError("[DBCtrl:_GetHelper] helper is nil.")
        return
    end
    return self.helper
end

---创建表
---@param defaultValue table<number, table> @ [101]={field1=1,field2=2}
function DBCtrl:_CreateTable(tableName, defaultValue)
    self:_GetHelper():CreateTable(tableName, defaultValue)
end

---获取table的最大的Id
function DBCtrl:_GetNextMaxId()
    if not self.tableMaxId then
        self.tableMaxId = self:_GetHelper():GetLastInsertId(self.tableName)
    end
    self.tableMaxId = self.tableMaxId + 1
    return self.tableMaxId
end

---供外部调用,清理内部数据
function DBCtrl:Clear()
    self.dbPath = nil
    self.tableName = nil
    self.helper = nil
    self.tableMaxId = nil
end

return DBCtrl