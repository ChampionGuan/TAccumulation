---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by changkong.
--- DateTime: 2021/8/14 12:19
---
local TimelineExtInfoType = typeof(CS.TimelineExtInfo)
local PlayableDirectorType = typeof(CS.UnityEngine.Playables.PlayableDirector)
local ComplexPlayableInstance = CS.ComplexPlayableInstance

local X3TimelineUtility = CS.X3.X3TimelineUtility
-- 已知对象池配套的onDiscard方法，此处已经通过别的方式清理过了，没有添加这个方法
---@class Timeline
local Timeline = XECS.class("Timeline", nil, true, 6)
local ClockFeature = require("Runtime.System.X3Game.Modules.Timeline.Feature.ClockFeature")
TimelineUtil = require("Runtime.System.X3Game.Modules.Timeline.Feature.TimelineUtil").new()

---@param owner TimelineMgr
---@param timelineType TimelineType
---@param context ITimelineContext
function Timeline:ctor(owner, timelineType, context)
    self:_Reset()
    -- timeline类型
    self.timelineType = timelineType
    -- timeline管理类
    self.owner = owner
    -- timeline context
    self.context = context
    self.timelineState = TimelineState.Created
    -- 时间组件（必备组件，不开放给外面配置，所以不定义到TimelineType2Features中，Timeline直接require使用）
    ---@type TimelineClockFeature
    self.clock = ClockFeature.new(self, context)
    self.clock:Create()
    table.insert(self.features, self.clock)

    ---@type table<TimelineFeatureType, TimelineBaseFeature>
    local featureTypes = TimelineType2Features[timelineType]
    for _, featureType in ipairs(featureTypes) do
        local featurePath = TimelineFeatureType2ClassPath[featureType]
        ---@type TimelineBaseFeature
        local feature = require(featurePath).new(self, context)
        feature:Create()
        table.insert(self.features, feature)
        self.type2FeatureDict[featureType] = feature
    end
end

function Timeline:_Reset()
        -- timeline类型
    self.timelineType = nil
    -- timeline管理类
    self.owner = nil
    -- timeline context
    self.context = nil
    ---@type TimelineBaseFeature[]
    self.features = {}
    -- 时间组件（必备组件，不开放给外面配置，所以不定义到TimelineType2Features中，Timeline直接require使用）
    ---@type TimelineClockFeature
    self.clock = nil
    ---@type table<TimelineFeatureType, TimelineBaseFeature>
    self.type2FeatureDict = {}
    ---@type TimelineState timeline状态
    self.timelineState = TimelineState.Destroy
    ---@type string timeline资源路径（可能是相对路径，也可能是绝对路径）
    self.resPath = nil
    ---@type GameObject timeline资源对象
    self.resObj = nil
    ---@type CS.TimelineExtInfo timeline额外数据
    self._timelineExtInfo = nil
    ---@type CS.UnityEngine.Playables.PlayableDirector playable组件
    self._director = nil
    ---@type CS.UnityEngine.Timeline.TimelineAsset
    self._timelineAsset = nil
    ---@type float 持续时间
    self.duration = 0
    ---@type boolean 是否跟随创建者
    self._isFollowCreator = false
    ---@type bool 是否播放时间已结束
    self.isTimeEnd = false
    ---@type function 播放完成的回调
    self.onStopCall = nil
    ---@type bool 结束标记
    self.isMarkCanEnd = true
    ---@type bool 是否由时间结束
    self.isStopByTime = false
    ---@type bool 是否自动销毁
    self.isAutoDestroy = true
    ---@type GameObject 强制绑定的对象
    self.forceBindObj = nil
    ---@type GameObject 男主
    self.manObj = nil
    ---@type GameObject 女主
    self.womanObj = nil
    ---@type GameObject 怪物
    self.monsterObj = nil
    ---@type EventLine 战斗用的事件timeline
    self.battleEventLine = nil
    ---@type ViewActor  战斗的所有者
    self.battleOwnerActor = nil
    ---@type bool 是否表演模式
    self.isPerform = false
    ---@type PerformConfig 表演模式配置
    self.performCfg = nil
    ---@type bool 是否使用Battle加载接口
    self.isUseBattleResLoader = false
    ---@type float 缓存的时间
    self.cacheTime = nil
    ---@type boolean 是否有材质子轨道
    self._hasCreatureMaterialAnim = false
    ---@type CS.ComplexPlayableInstance
    self._complexPlayableIns = nil
end

------------------------------------------------- 设置属性 -------------------------
-- 设置timeline路径
function Timeline:SetResPath(path)
    self.resPath = path
end

function Timeline:GetResPath()
    return self.resPath
end

-- 设置timelineObj对象
function Timeline:SetResObj(obj)
    self.resObj = obj
end

function Timeline:GetResObj()
    return self.resObj
end

---@return CS.TimelineExtInfo
function Timeline:GetTimelineExtInfo()
    return self._timelineExtInfo
end

---@return CS.UnityEngine.Playables.PlayableDirector
function Timeline:GetPlayableDirector()
    return self._director
end

function Timeline:GetTimelineAsset()
    return self._timelineAsset
end

function Timeline:IsFollowCreator()
    return self._isFollowCreator
end

-- 设置是否含有材质子轨道
function Timeline:SetHasCreatureMaterialAnim(has)
    self._hasCreatureMaterialAnim = has
end

---@return boolean
function Timeline:HasCreatureMaterialAnim()
    return self._hasCreatureMaterialAnim
end

---@type CS.MaterialPlayableInstance
function Timeline:AddPlayableIns(playableIns)
    if not self._complexPlayableIns then
        self._complexPlayableIns = ComplexPlayableInstance()
    end
    self._complexPlayableIns:AddPlayableIns(playableIns)
end

-- 设置绑定对象
---@param obj GameObject
function Timeline:SetForceBindObj(obj)
    self.forceBindObj = obj
end

function Timeline:GetForceBindObj()
    return self.forceBindObj
end

-- 设置女主
function Timeline:SetWoman(obj)
    self.womanObj = obj
end

-- 设置男主
function Timeline:SetMan(obj)
    self.manObj = obj
end

-- 设置怪物
function Timeline:SetMonster(obj)
    self.monsterObj = obj
end

-- 是否表演模式
function Timeline:SetIsPerform(isPerform)
    self.isPerform = isPerform
end

-- 设置表演模式配置
---@param cfg PerformConfig 表演配置
function Timeline:SetPerformConfig(cfg)
    self.performCfg = cfg
end

function Timeline:GetPerformConfig()
    return self.performCfg
end

-- 是否自动销毁设置：适用于结束时hold的表演
function Timeline:SetIsAutoDestroy(isAuto)
    self.isAutoDestroy = isAuto
end

-- 设置播放完成回调
function Timeline:SetStopCall(func)
    self.onStopCall = func
end

-- 设置时间缩放
---@param scale float 缩放比例
---@param duration float 持续时间，nil一直持续
function Timeline:SetTimeScale(scale, duration)
    self.clock:SetScale(scale, duration)
    if self.timelineState == TimelineState.Playing then
        X3TimelineUtility.SetSimpleAudioSpeed(self._timelineAsset, scale)
    end
end

function Timeline:GetTimeScale()
    return self.clock:GetScale()
end

--设置时间
---@param time float 当前时间
function Timeline:SetTime(time)
    self.clock:SetPlayTime(time)
end

function Timeline:SetDuration(duration)
    self.duration =    duration
end

-- 获取时间
---@param float
function Timeline:GetTime()
    return self.clock:GetPlayTime()
end

-- 返回本次缩放后的tick时间
---@return float 播放时间
function Timeline:GetScaleDeltaTime()
    return self.clock:GetScaleDeltaTime()
end

-- 设置循环播放
---@param isRepeat boolean 是否循环播放
function Timeline:SetRepeat(isRepeat)
    self.clock:SetRepeat(isRepeat)
end

-- 设置eventTimeLine
---@param eventLine EventLine
function Timeline:SetBattleEventTimeline(eventLine)
    self.battleEventLine = eventLine
end

function Timeline:GetBattleEventTimeline()
    return self.battleEventLine
end

-- 设置battleOwner
---@param ownerActor ViewActor
function Timeline:SetBattleOwner(ownerActor)
    self.battleOwnerActor = ownerActor
end

function Timeline:GetBattleOwner()
    return self.battleOwnerActor
end

function Timeline:SetUseBattleResLoader(isBattle)
    self.isUseBattleResLoader = isBattle
end

--------------------------------------------------- 外部接口 ----------------------------------------------
-- 构建
function Timeline:Build()
    if self.timelineState ~= TimelineState.Created then
        return
    end
    self.timelineState = TimelineState.Builded

    -- 各个feature获取并设置资源
    for _, feature in ipairs(self.features) do
        local success = feature:BeforeBuild()
        if not success then
            self.context:LogError("timeline before build 失败！")
            self:Destroy()
            return
        end
    end

    -- 检查基本资源是否正确，顺便设置一些属性
    local result = self:__SetAndCheckAssetValid()
    if not result then
        self.context:LogError("timeline 资源有问题，build 失败！")
        self:Destroy()
        return
    end

    -- 主要是绑定轨道逻辑
    for _, feature in ipairs(self.features) do
        feature:Build()
    end

    -- 处理材质动画
    for _, feature in ipairs(self.features) do
        local success = feature:AfterBuild()
        if not success then
            self.context:LogError("timeline after build 失败！")
            self:Destroy()
            return
        end
    end
end

-- 设置并检测timeline基本资源是否ok
function Timeline:__SetAndCheckAssetValid()
    local _timelineObj = self:GetResObj()
    if not _timelineObj then
        return false
    end
    self._timelineExtInfo = _timelineObj:GetComponent(TimelineExtInfoType)
    if self._timelineExtInfo == nil then
        return false
    end
    self._director = _timelineObj:GetComponent(PlayableDirectorType)
    if not self._director then
        self.context:LogError("错误：Timeline上没有PlayableDirector组件！");
        return false
    end

    self._timelineAsset = self._director.playableAsset
    if not self._timelineAsset then
        self.context:LogError("错误：Timeline的PlayableDirector上没有指定playableAsset！");
        return false
    end
    self.duration = self._director.duration
    self._isFollowCreator = self._timelineExtInfo.isFollowActorForTimeline
    return true
end

-- 播放
function Timeline:Play()
    if self.timelineState ~= TimelineState.Builded then
        return
    end
    self.timelineState = TimelineState.Playing
    for _, feature in ipairs(self.features) do
        feature:BeforePlay()
    end
    local playTime = self.clock:GetPlayTime()
    self._director.time = playTime
    self._director:Play()
    local timeScale = self.clock:GetScale()
    X3TimelineUtility.SetSimpleAudioSpeed(self._timelineAsset, timeScale)
    X3TimelineUtility.SetDirectorTimeScale(self._director, playTime)
    self.owner:__PlayTimeline(self)
end

-- 更新
---@param deltaTime float 帧间隔时间
function Timeline:Tick(deltaTime)
    if self.timelineState ~= TimelineState.Playing then
        return
    end

    if not self.isTimeEnd then
        for _, feature in ipairs(self.features) do
            if feature._OnTick then
                feature:_OnTick(deltaTime)  -- 为了省点堆栈调用
            end
        end

        local playTime = self.clock:GetPlayTime()
        if self.cacheTime ~= playTime then
            -- 每帧需要设置C#相关属性，集中调用
            X3TimelineUtility.SetDirectorManualTime(self._director, playTime, self._complexPlayableIns)
        end
        self.cacheTime = playTime
        self.isTimeEnd = playTime >= self.duration

        if self.isTimeEnd then
            self:__TryAutoDestroy()
            self:__InvokeStopCall()
        end
    end
end

-- 获取Feature
---@param type TimelineFeatureType
---@return TimelineBaseFeature
function Timeline:GetFeature(type)
    local feature = self.type2FeatureDict[type]
    return feature
end

-- 标记可以结束（不一定真的结束，可能受到时间和标记双重影响）
function Timeline:MarkCanStop()
    if self.timelineState ~= TimelineState.Playing then
        return
    end

    self.isMarkCanEnd = true  -- 标记为可以结束
    if self.isStopByTime and (not self.isTimeEnd) then
        -- 随时间结束，并且时间还没结束的情况下，打断不随时间结束的轨道
        for _, feature in ipairs(self.features) do
            feature:Interrupt()
        end
    end
    self:__TryAutoDestroy()
end

-- 真正的销毁
function Timeline:Destroy()
    if self.timelineState == TimelineState.Destroy then
        return
    end
    self.timelineState = TimelineState.Destroy

    if self._complexPlayableIns then
        self._complexPlayableIns:Destory()
    end

    if self._director then
        self._director:Stop()
    end
    
    for _, feature in ipairs(self.features) do
        feature:Destroy()
    end
    self:__InvokeStopCall()
    self:_Reset()
    self:discard()
end

function Timeline:IsDestroyed()
    return self.timelineState == TimelineState.Destroy
end
--------------------------- 内部实现 ---------------------------
-- 尝试自动结束
function Timeline:__TryAutoDestroy()
    if self.isMarkCanEnd and self.isAutoDestroy then
        if self.isStopByTime then
            if self.isTimeEnd then
                self:Destroy()
            end
        else
            self:Destroy()
        end
    end
end

function Timeline:__InvokeStopCall()
    if self.onStopCall then
        local call = self.onStopCall
        self.onStopCall = nil
        call()
    end
end

return Timeline