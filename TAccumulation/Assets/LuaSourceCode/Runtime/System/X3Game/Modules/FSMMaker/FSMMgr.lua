---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/8/17 22:08
--- FSMMgr

---@type FSM.FSMMgr
local fsmMgr = require(FSMConst.MgrPath).new()

---@class X3Game.FSMMgr
local FSMMgr = {}

---@type FSM.FSMContext
local defaultContext = nil

---@type FSM.FSMBlackboard
local playgroundBlackboard = nil

---@type Log
local logger = nil

---@type FSM.FSMDelegate
local fsmDelegate = nil

--region 启动操作接口

---根据枚举创建
---@param fsmPath FSM.FSMPath
---@param owner table
---@param fsmContext FSM.FSMContext
---@param blackboardDataMap table<string,FSMVarValueType> 启动的时候填充黑板数据使用
---@return int
function FSMMgr.Start(fsmPath, owner, fsmContext, blackboardDataMap)
    if string.isnilorempty(fsmPath) then
        Debug.LogError("[FSMMgr.Start] failed fsmPath is nil")
        return
    end
    if fsmContext then
        fsmContext:SetOwner(owner)
        local _owner = fsmContext.owner
        fsmContext:Set(logger, _owner or FSMMgr, FSMMgr, EventMgr, fsmDelegate)
    end
    fsmContext = fsmContext or defaultContext
    if fsmContext:IsDebug() then
        Debug.LogFormat("[FSMMgr.Start]:%s", fsmPath)
    end
    return fsmMgr:Create(fsmPath, owner, fsmContext, playgroundBlackboard, blackboardDataMap)
end

---根据名称创建
---@param name string
---@param owner table
---@param fsmContext FSM.FSMContext
---@param blackboardDataMap table<string,FSMVarValueType> 启动的时候填充黑板数据使用
---@return int
function FSMMgr.StartByName(name, owner, fsmContext, blackboardDataMap)
    if string.isnilorempty(name) then
        Debug.LogError("[FSMMgr.StartByName] failed name is nil or empty")
        return -1
    end
    if not FSMPath[name] then
        Debug.LogErrorFormat("[FSMMgr.StartByName] failed FSMType[%s] not exist!!!", name)
        return -1
    end
    return FSMMgr.Start(FSMPath[name], owner, fsmContext, blackboardDataMap)
end
--endregion


--region FSM 相关操作接口
---@param id int
---@param destroy boolean 是否销毁,默认是true
function FSMMgr.Stop(id, destroy)
    local fsm = fsmMgr:GetFSM(id)
    if fsm ~= nil then
        if destroy ~= nil then
            destroy = true
        end
        if destroy then
            fsmMgr:Destroy(id)
        else
            fsm:Stop()
        end
        if fsmDelegate then
            fsmDelegate:OnStopFSM(id)
        end
        Debug.LogFormat("[FSMMgr.Stop] id=[%s,%s]", id, fsm.name)
    else
        Debug.LogWarningFormat("[FSMMgr.Stop] failed id=[%s] not exist!!!", id)
    end
end

---重新开始
---@param id int
---@param resetVariables boolean 是否重置黑板数据
function FSMMgr.Restart(id, resetVariables)
    local fsm = fsmMgr:GetFSM(id)
    if fsm then
        fsm:Restart(resetVariables)
    end
end

---@param id int
---@param isPaused boolean
function FSMMgr.Pause(id, isPaused)
    if id then
        local fsm = fsmMgr:GetFSM(id)
        if fsm then
            fsm:Pause(isPaused)
        else
            Debug.LogErrorFormat("[FSMMgr.Pause] failed fsm[%s] not exist!!!", id)
        end
        return
    end
    fsmMgr:Pause(isPaused)
end

---@param id int
---@param varName string
---@param value FSMVarValueType
function FSMMgr.SetVariableValue(id, varName, value)
    local fsm = fsmMgr:GetFSM(id)
    if fsm then
        return fsm:SetVariableValue(varName, value)
    end
    Debug.LogWarning("[FSMMgr.SetVariableValue] failed fsm[%s] not exist!!!", id)
end

---@param id int
---@param varName string
---@return FSMVarValueType
function FSMMgr.GetVariableValue(id, varName)
    local var = FSMMgr.GetVariable(id, varName)
    if var then
        return var:GetValue()
    end
    Debug.LogWarning("[FSMMgr.GetVariableValue] failed var[%s] not exist!!!", varName)
end

---@param id int
---@param varName string
---@return FSM.FSMVar | FSM.FSMVarArray
function FSMMgr.GetVariable(id, varName)
    local fsm = fsmMgr:GetFSM(id)
    if fsm then
        return fsm:GetVariable(varName)
    end
    Debug.LogWarning("[FSMMgr.GetVariable] failed fsm[%s] not exist!!!", id)
    return nil
end

---添加变量
---@param name string
---@param varType FSM.FSMVarType
---@param value FSMVarValueType
---@param subVarType FSM.FSMVarType
---@param readonly boolean
---@return FSM.FSMVar | FSM.FSMVarArray
function FSMMgr.SetVariable(id, name, value, varType, subVarType, readonly)
    local fsm = fsmMgr:GetFSM(id)
    if fsm then
        return fsm:SetVariable(name, value, varType, subVarType, readonly)
    end
    Debug.LogWarning("[FSMMgr.AddVariable] failed fsm[%s] not exist!!!", id)
    return nil
end

---@param varName string
---@param value FSMVarValueType
function FSMMgr.SetGlobalVariableValue(varName, value)
    local var = FSMMgr.GetGlobalVariable(varName)
    if var then
        var:SetValue(value)
    else
        Debug.LogWarning("[FSMMgr.SetGlobalVariable] failed var[%s] not exist!!!", varName)
    end
end

---@param varName string
---@return FSMVarValueType
function FSMMgr.GetGlobalVariableValue(varName)
    local var = FSMMgr.GetGlobalVariable(varName)
    if var then
        return var:GetValue()
    else
        Debug.LogWarning("[FSMMgr.GetGlobalVariableValue] failed var[%s] not exist!!!", varName)
    end
end

---@param varName string
---@return FSM.FSMVar | FSM.FSMVarArray
function FSMMgr.GetGlobalVariable(varName)
    local var = playgroundBlackboard:GetVariable(varName)
    if var then
        return var
    else
        Debug.LogWarning("[FSMMgr.GetGlobalVariable] failed var[%s] not exist!!!", varName)
    end
end

---添加变量
---@param name string
---@param varType FSM.FSMVarType
---@param value FSMVarValueType
---@param subVarType FSM.FSMVarType
---@param readonly boolean
---@return FSM.FSMVar | FSM.FSMVarArray
function FSMMgr.SetGlobalVariable(name, value, varType, subVarType, readonly)
    return playgroundBlackboard:SetVariable(name, value, varType, subVarType, readonly)
end

---切换状态
---@param id int
---@param stateName string
function FSMMgr.ChangeState(id, stateName)
    local fsm = fsmMgr:GetFSM(id)
    if fsm then
        fsm:ChangeState(stateName)
    else
        Debug.LogWarning("[FSMMgr.ChangeState] failed fsm[%s] not exist!!!", id)
    end
end

---发送事件 如果不传id，将广播给所有FSM
---@param eventName string
---@param id
function FSMMgr.FireEvent(eventName, id)
    fsmMgr:FireEvent(eventName, id)
end

--endregion


--region 底层调用
---@private
function FSMMgr.Update()
    fsmMgr:Update()
end

---@private
function FSMMgr.LateUpdate()
    fsmMgr:LateUpdate()
end

---@private
function FSMMgr.FixedUpdate()
    fsmMgr:FixedUpdate()
end

---@private
function FSMMgr.Clear()
    playgroundBlackboard:Reset()
    fsmMgr:Clear()
    CS.PapeGames.FSMMaker.Runtime.FSMMgr.SetDelegate(nil)
end

---@private
function FSMMgr.Init()
    --region 日志
    logger = Debug.CreateLog("FSM")
    --endregion

    --region Context
    ---@type FSM.FSMPath
    FSMPath = require("Config.System.AutoGenerated.FSMType")
    defaultContext = require("Runtime.System.X3Game.Modules.FSMMaker.Context.X3GameFSMContext").new()

    --endregion

    --region  全局Blackboard
    playgroundBlackboard = FSMHelper.CreateComponent(FSMConst.FSMComponent.FSMBlackboard)
    local reader = FSMHelper.CreateComponent(FSMConst.FSMComponent.FSMReader)
    reader:SetBasic(nil, nil, nil, defaultContext)
    reader:ParseBlackboard(playgroundBlackboard, require("Config.System.FSMMaker.Blackboard", true, true))
    FSMHelper.ReleaseComponent(reader)
    --endregion

    --region Delegate
    ---@type FSM.FSMDelegate
    fsmDelegate = require(FSMConst.FSMDelegatePath).new()
    fsmDelegate:SetFSMMgr(FSMMgr, fsmMgr, defaultContext)
    CS.PapeGames.FSMMaker.Runtime.FSMMgr.SetDelegate(fsmDelegate)
    --endregion

    defaultContext:Set(logger, FSMMgr, FSMMgr, EventMgr, fsmDelegate)
end

function FSMMgr.Destroy()
    CS.PapeGames.FSMMaker.Runtime.FSMMgr.SetDelegate(nil)
    fsmDelegate:Destroy()
end

--endregion

return FSMMgr

