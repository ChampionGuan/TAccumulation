---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2021/12/6 14:44
---

---@class DialogueSettingData
local DialogueSettingData = class("DialogueSettingData")
---@type MultiConditionCtrl
local MultiConditionCtrl = require("Runtime.System.X3Game.Modules.Common.MultiConditionCtrl")


---@class DialogueSettingEnum
local DialogueSettingEnum = {
    Review = 1, --回顾
    Skip = 2, --跳过
    Pause = 3, --暂停按钮
    PlaySpeed = 4, --变速
    LongSkip = 5, --长按跳过
    Photo = 6, -- 拍照
    Auto = 7
}

---构造函数
function DialogueSettingData:ctor()
    ---@type boolean 是否显示退出按钮
    self.showExitButton = false
    ---@type MultiConditionCtrl 是否显示暂停按钮
    self.needShowPauseButton = MultiConditionCtrl.new()
    self:SetShowPauseButton(false)
    ---@type MultiConditionCtrl 是否显示变速按钮
    self.needShowSpeedButton = MultiConditionCtrl.new()
    self:SetShowPlaySpeedButton(false)
    ---@type MultiConditionCtrl 是否显示回顾按钮
    self.needShowReviewButton = MultiConditionCtrl.new()
    self:SetShowReviewButton(true)
    ---@type MultiConditionCtrl 是否显示自动按钮
    self.needShowAutoButton = MultiConditionCtrl.new()
    self:SetShowAutoButton(true)
    ---@type MultiConditionCtrl 隐藏拍照按钮
    self.needShowPhotoButton = MultiConditionCtrl.new()
    self:SetShowPhotoButton(false)
    --基础按钮总控
    ---@type boolean 是否显示所有基础按钮
    self.showAllBaseButton = true

    ---@type boolean 是否开启节点预加载模式
    self.useNodeGraph = false
    ---@type boolean 是否可以收藏
    self.canFavorite = true
    ---@type boolean BGM加速
    self.speedUpBGM = true

    ---主界面用
    ---@type boolean 是否自动停止CutScene
    self.autoStopCutScene = false
    ---@type boolean 自动关闭白屏
    self.autoCloseWhiteScreen = false

    ---@type boolean 是否显示2D点击背景
    self.showClickBg = true

    ---@type boolean 收到CutScene事件帧自动结束Dialogue
    self.endDialogueCTSCpl = false
    ---@type boolean 收到CutScene事件帧截屏
    self.captureTextureByCTSCpl = false
    ---@type fun 退出的回调
    self.exitHandler = nil
    ---@type string 退出的提示语
    self.exitString = nil
    ---@type fun 退出的点击函数，如果有，则代替默认的执行
    self.exitClickHandler = nil
end

---初始化函数
function DialogueSettingData:SetToDefault()
    self.needShowPauseButton:Clear()
    self.needShowSpeedButton:Clear()
    self.needShowReviewButton:Clear()
    self.needShowAutoButton:Clear()
    self.needShowPhotoButton:Clear()
    self:SetShowExitButton(false)
    self:SetShowPauseButton(false)
    self:SetShowPlaySpeedButton(false)
    self:SetShowReviewButton(true)
    self:SetShowAutoButton(true)
    self:SetShowPhotoButton(false)

    self:SetUseNodeGraph(false)
    self:SetCanFavorite(true)
    self:SetSpeedUpBGM(true)

    ---主界面用
    self:SetAutoStopCutScene(false)
    self:SetAutoCloseWhiteScreen(false)

    --视频电话使用
    self:SetShowAllBaseButton(true)
    self:SetShowClickBg(true)

    self:SetEndDialogueByCTSCpl(false)
    self:SetCaptureTextureByCTSCpl(false)
    self.exitHandler = nil
    self.exitString = nil
    self.exitClickHandler = nil
end

---同步Setting数据
---@param settingData DialogueSettingData
function DialogueSettingData:CopyFrom(settingData)
    if settingData then
        self:SetShowExitButton(settingData:GetShowExitButton())
        self:SetShowPauseButton(settingData:GetShowPauseButton())
        self:SetShowPlaySpeedButton(settingData:GetShowPlaySpeedButton())
        self:SetShowReviewButton(settingData:GetShowReviewButton())
        self:SetShowAutoButton(settingData:GetShowAutoButton())
        self:SetShowPhotoButton(settingData:GetShowPhotoButton())
        self:SetUseNodeGraph(settingData:GetUseNodeGraph())
        self:SetCanFavorite(settingData:GetCanFavorite())
    end
end

---从一个Vector2Int复写设置，基本是从表里读出来的
---@param settingList
function DialogueSettingData:OverrideSettingFromList(settingList)
    for _, vector2Int in pairs(settingList) do
        local key = vector2Int:GetValue().x
        local value = vector2Int:GetValue().y
        self:SetShowButtonByKey(key, value == 1)
    end
end

---
function DialogueSettingData:SetShowButtonByKey(buttonKey, value, visibleKey)
    if buttonKey == DialogueSettingEnum.Review then
        self:SetShowReviewButton(value, visibleKey)
    elseif buttonKey == DialogueSettingEnum.Pause then
        self:SetShowPauseButton(value, visibleKey)
    elseif buttonKey == DialogueSettingEnum.PlaySpeed then
        self:SetShowPlaySpeedButton(value, visibleKey)
    elseif buttonKey == DialogueSettingData.Photo then
        self:SetShowPhotoButton(value, visibleKey)
    elseif buttonKey == DialogueSettingData.Auto then
        self:SetShowAutoButton(value, visibleKey)
    end
end

---设置是否显示退出按钮
---@param value boolean
function DialogueSettingData:SetShowExitButton(value)
    self.showExitButton = value
    EventMgr.Dispatch("DialogueBLL.showExitButton")
end

---设置是否显示退出按钮
---@return boolean
function DialogueSettingData:GetShowExitButton()
    return self.showExitButton
end

---设置是否显示暂停按钮
---@param value boolean
---@param key string
function DialogueSettingData:SetShowPauseButton(value, key)
    if key == nil then
        key = "Default"
    end
    self.needShowPauseButton:SetIsRunning(key, value)
    EventMgr.Dispatch("DialogueBLL.showPauseButton")
end

---是否显示自动按钮
---@return boolean
function DialogueSettingData:GetShowPauseButton()
    return self.needShowPauseButton:IsRunning() and self.showAllBaseButton
end

---设置显示变速按钮
---@param value boolean
---@param key string
function DialogueSettingData:SetShowPlaySpeedButton(value, key)
    if key == nil then
        key = "Default"
    end
    self.needShowSpeedButton:SetIsRunning(key, value)
    EventMgr.Dispatch("DialogueBLL.showPlaySpeedButton")
end

---是否显示变速按钮
---@return boolean
function DialogueSettingData:GetShowPlaySpeedButton()
    return self.needShowSpeedButton:IsRunning() and self.showAllBaseButton
end

---设置是否显示回顾按钮
---@param value boolean
---@param key string
function DialogueSettingData:SetShowReviewButton(value, key)
    if key == nil then
        key = "Default"
    end
    self.needShowReviewButton:SetIsRunning(key, value)
    EventMgr.Dispatch("DialogueBLL.showReviewButton")
end

---是否显示回顾按钮
---@return boolean
function DialogueSettingData:GetShowReviewButton()
    return self.needShowReviewButton:IsRunning() and self.showAllBaseButton
end

---设置显示变速按钮
---@param value boolean
---@param key string
function DialogueSettingData:SetShowAutoButton(value, key)
    if key == nil then
        key = "Default"
    end
    self.needShowAutoButton:SetIsRunning(key, value)
    EventMgr.Dispatch("DialogueBLL.showAutoButton")
end

---是否显示变速按钮
---@return boolean
function DialogueSettingData:GetShowAutoButton()
    return self.needShowAutoButton:IsRunning() and self.showAllBaseButton
end

---设置显示拍照按钮
---@param value boolean
function DialogueSettingData:SetShowPhotoButton(value, key)
    if key == nil then
        key = "Default"
    end
    self.needShowPhotoButton:SetIsRunning(key, value)
    EventMgr.Dispatch("DialogueBLL.showPhotoButton")
end

---是否显示拍照按钮
---@return boolean
function DialogueSettingData:GetShowPhotoButton()
    return self.needShowPhotoButton:IsRunning() and self.showAllBaseButton
end

---设置是否开启节点预加载模式
---@param value boolean
function DialogueSettingData:SetUseNodeGraph(value)
    self.useNodeGraph = value
end

---是否开启了节点预加载模式
---@return boolean
function DialogueSettingData:GetUseNodeGraph()
    return self.useNodeGraph
end

---设置是否可以收藏
---@param value boolean
function DialogueSettingData:SetCanFavorite(value)
    self.canFavorite = value
end

---获取是否可以收藏
---@return boolean
function DialogueSettingData:GetCanFavorite()
    return self.canFavorite
end

---设置是否加速BGM
---@param value boolean
function DialogueSettingData:SetSpeedUpBGM(value)
    self.speedUpBGM = value
end

---获取是否加速BGM
---@return boolean
function DialogueSettingData:GetSpeedUpBGM()
    return self.speedUpBGM
end

---是否显示基础按钮
---@param value boolean
function DialogueSettingData:SetShowAllBaseButton(value)
    self.showAllBaseButton = value
    EventMgr.Dispatch("DialogueBLL.showAllBaseButton")
end

---是否显示点击背景
---@return boolean
function DialogueSettingData:GetShowClickBg()
    return self.showClickBg
end

---设置显示点击背景
---@param value boolean
function DialogueSettingData:SetShowClickBg(value)
    self.showClickBg = value
end

---设置是否自动停止CutScene
---@param value boolean
function DialogueSettingData:SetAutoStopCutScene(value)
    self.autoStopCutScene = value
end

---是否自动停止CutScene
---@return boolean
function DialogueSettingData:GetAutoStopCutScene()
    return self.autoStopCutScene
end

---是否自动关闭白屏
---@param value boolean
function DialogueSettingData:SetAutoCloseWhiteScreen(value)
    self.autoCloseWhiteScreen = value
end

---是否自动关闭白屏
---@return boolean
function DialogueSettingData:GetAutoCloseWhiteScreen()
    return self.autoCloseWhiteScreen
end

---收到CutScene事件帧自动结束Dialogue
---@param value boolean
function DialogueSettingData:SetEndDialogueByCTSCpl(value)
    self.endDialogueCTSCpl = value
end

---收到CutScene事件帧自动结束Dialogue
---@return boolean
function DialogueSettingData:GetEndDialogueByCTSCpl()
    return self.endDialogueCTSCpl
end

---收到CutScene事件帧截屏
---@param value boolean
function DialogueSettingData:SetCaptureTextureByCTSCpl(value)
    self.captureTextureByCTSCpl = value
end

---收到CutScene事件帧截屏
---@return boolean
function DialogueSettingData:GetCaptureTextureByCTSCpl()
    return self.captureTextureByCTSCpl
end

---获取退出按钮的点击回调，如果存在，则会直接接管点击，不走默认回调
---@return fun
function DialogueSettingData:GetExitClickHandler()
    return self.exitClickHandler
end

---获取退出按钮弹窗点击确定后的回调
---@return fun
function DialogueSettingData:GetExitHandler()
    return self.exitHandler
end

---获取退出按钮弹窗点击后显示的字符串
---@return string
function DialogueSettingData:GetExitString()
    return self.exitString
end

---
function DialogueSettingData:Dispose()
    self.needShowPauseButton:ReleaseToPool()
    self.needShowSpeedButton:ReleaseToPool()
    self.needShowReviewButton:ReleaseToPool()
    self.needShowAutoButton:ReleaseToPool()
    self.needShowPhotoButton:ReleaseToPool()
end

return DialogueSettingData