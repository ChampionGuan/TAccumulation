---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/11/9 12:24
---

---@class AnimCacheData 剧情快播用的动画缓存，为了减少快播时的CTS播放
local AnimCacheData = class("AnimCacheData")

local DirectorWrapType = CS.UnityEngine.Playables.DirectorWrapMode
local CutSceneCollector = CS.PapeGames.CutScene.CutSceneCollector

---
function AnimCacheData:ctor()
    self.defaultState = {}
    ---是否正在播放CTS类型的Anim（非通用动作库）
    self.isPlayingCTSAnim = false
    self.lastState = {}
end

---缓存动作
---@param ins GameObject
---@param stateName string 状态名
---@param assetPath string CTS路径
---@param useComAnimState bool 是否使用通用表演库
---@param directorWrapMode DirectorWrapMode 播放模式
---@param setDefault bool 是否设置为默认动作
---@param setPerformPosition bool 是否继承Pos
---@return bool 是否已缓存
function AnimCacheData:CacheAnim(ins, stateName, assetPath, useComAnimState, useComDefaultParam,
                                 crossFadeTime, directorWrapMode, setDefault, setPerformPosition)
    local isAnimatorCTS = self:IsAnimatorCTS(stateName, useComAnimState, assetPath)
    local result = false
    if useComAnimState and useComDefaultParam then
        local cfg = BllMgr.GetDialogueBLL():GetComAnimState(stateName)
        if cfg then
            crossFadeTime = cfg.Crossfade
            directorWrapMode = DirectorWrapType.__CastFrom(cfg.PlayType)
            setDefault = cfg.IsDefault
            setPerformPosition = cfg.CarryPos
        end
    end
    if isAnimatorCTS then
        if directorWrapMode ~= DirectorWrapType.None then
            --如果角色正在播放通用CTS类型的Anim，则需要播放一个通用动作顶掉
            if self.isPlayingCTSAnim == false then
                self.lastState.stateName = stateName
                self.lastState.assetPath = assetPath
                self.lastState.useComAnimState = useComAnimState
                self.lastState.useComDefaultParam = useComDefaultParam
                self.lastState.crossFadeTime = crossFadeTime
                self.lastState.directorWrapMode = directorWrapMode
                self.lastState.setPerformPosition = setPerformPosition
                if setDefault then
                    self.defaultState.stateName = stateName
                    self.defaultState.assetPath = assetPath
                    self.defaultState.useComAnimState = useComAnimState
                    self.defaultState.useComDefaultParam = useComDefaultParam
                    self.defaultState.directorWrapMode = directorWrapMode
                    self.defaultState.setPerformPosition = setPerformPosition
                end
                result = true
            else
                --不缓存，让x3Animator播放一下顶掉动作
                local x3Animator = GameObjectUtil.EnsureCSComponent(ins, typeof(CS.X3Game.X3Animator))
                x3Animator:Stop(true)
                result = false
                self.isPlayingCTSAnim = false
            end
        else
            table.clear(self.lastState)
            result = true
        end
    else
        self.isPlayingCTSAnim = true
        table.clear(self.lastState)
        if setDefault then
            table.clear(self.defaultState)
        end
    end
    return result
end

---如果播放到了AnimStateClear，就需要清理动作
function AnimCacheData:ClearCachedAnim()
    table.clear(self.defaultState)
    table.clear(self.lastState)
end

---
---@param ins GameObject
function AnimCacheData:ResetCachedAnim(ins)
    local x3Animator = GameObjectUtil.EnsureCSComponent(ins, typeof(CS.X3Game.X3Animator))
    if GameObjectUtil.IsNull(x3Animator) == false then
        --恢复默认动作
        if self.defaultState and string.isnilorempty(self.defaultState.stateName) == false then
            if self.defaultState.useComAnimState then
                x3Animator.DataProviderEnabled = true
                x3Animator:AddState(self.defaultState.stateName, "")
                x3Animator.DataProviderEnabled = false
            else
                local releaseMode = AutoReleaseMode.Scene
                local asset = Res.LoadWithAssetPath(self.defaultState.assetPath, releaseMode)
                x3Animator:AddState(self.defaultState.stateName, asset, self.defaultState.setPerformPosition)
            end
        end
        --恢复最后一个动作
        if self.lastState and string.isnilorempty(self.lastState.stateName) == false then
            if self.lastState.useComAnimState then
                x3Animator.DataProviderEnabled = true
                x3Animator:AddState(self.lastState.stateName, "")
                x3Animator.DataProviderEnabled = false
            else
                local releaseMode = AutoReleaseMode.Scene
                local asset = Res.LoadWithAssetPath(self.lastState.assetPath, releaseMode)
                x3Animator:AddState(self.lastState.stateName, asset, self.lastState.setPerformPosition)
            end
            if self.lastState.useComAnimState and self.lastState.useComDefaultParam then
                x3Animator:Crossfade(self.lastState.stateName)
            else
                x3Animator:Crossfade(self.lastState.stateName, self.lastState.crossFadeTime, self.lastState.directorWrapMode)
                if self.setDefault then
                    x3Animator:SetDefaultState(self.stateName)
                end
            end
        end
        --TODO 无脑播放会导致有事件帧的动作也重新播
        if string.isnilorempty(x3Animator.CurStateName) or x3Animator.CurStateName == x3Animator.DefaultStateName then
            local defaultStateName = x3Animator.DefaultStateName
            x3Animator:ResetCtsStates()
            x3Animator:SetDefaultState(defaultStateName)
            if string.isnilorempty(x3Animator.CurStateName) then
                x3Animator:PlayDefault()
            end
        end
    end
end

---
---@param stateName string
---@param assetPath string
---@return bool
function AnimCacheData:IsAnimatorCTS(stateName, useComAnimState, assetPath)
    if string.isnilorempty(assetPath) then
        if useComAnimState then
            local cfg = BllMgr.GetDialogueBLL():GetComAnimState(stateName)
            if cfg then
                stateName = cfg.SourcePath
            end
        end
        assetPath = CutSceneCollector.GetPath(stateName)
    end
    return string.startswith(assetPath, "Assets/Build/Art/Drama/Performance/Share") ~= nil
end

return AnimCacheData