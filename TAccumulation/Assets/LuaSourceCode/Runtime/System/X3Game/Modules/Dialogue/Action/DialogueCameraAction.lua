---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/1/13 17:39
---

---@class DialogueCameraAction:DialogueBaseAction
local DialogueCameraAction = class("DialogueCameraAction", require("Runtime.System.X3Game.Modules.Dialogue.Action.DialogueBaseAction"), nil ,true)

---ActionInit
---@param cfg
function DialogueCameraAction:OnInit(cfg)
    self.super.OnInit(self, cfg)
    ---@type DynamicTarget 父容器
    self.parent = cfg.parent
    ---@type Vector3 摄像机位置
    self.cameraPosition = cfg.cameraPosition
    ---@type Quaternion 摄像机旋转
    self.cameraRotation = cfg.cameraRotation
    ---@type float FOV
    self.fieldOfView = cfg.fieldOfView
    ---@type DialogueEnum.CameraChangeType 进入方式
    self.cameraInType = cfg.cameraInType
    ---@type float 过度时长
    self.cameraInDuration = cfg.cameraInType == DialogueEnum.CameraChangeType.TweenTo and cfg.cameraInDuration or 0
    ---@type DialogueEnum.CameraChangeType 动画轨迹播放完毕后的回归方式
    self.cameraOutType = cfg.cameraOutType
    ---@type float 回归时长
    self.cameraOutDuration = cfg.cameraOutType == DialogueEnum.CameraChangeType.TweenTo and cfg.cameraOutDuration or 0
    ---@type CS.Cinemachine.CinemachineVirtualCamera
    self.cvm = nil
    ---@type CS.UnityEngine.GameObject
    self.cameraGO = nil
    ---@type Vector3 记录下初始位置，tweenOut用
    self.oriPosition = nil
    ---@type Quaternion 记录下初始旋转，tweenOut用
    self.oriRotation = nil
    ---@type float 记录下初始Fov，tweenOut用
    self.oriFov = 0
    ---@type Vector3 记录下Tween初始位置, lerp用
    self.tweenStartPosition = nil
    ---@type Quaternion 记录下Tween初始旋转，lerp用
    self.tweenStartRotation = nil
    ---@type float 记录下Tween初始fov，lerp用
    self.tweenStartFov = nil
    ---@type boolean 渐入动画是否完成
    self.tweenInCpl = false
    ---@type boolean 渐出动画是否开始
    self.tweenOutStarted = false
    ---@type boolean 由于Cinemachine的机制，相机行为必须下一帧销毁
    self.endFrame = 0
end

---ActionPreload
function DialogueCameraAction:OnPreload()
    --ResBatchLoader.AddTaskWithAssetPath("Assets/Build/Res/GameObjectRes/Camera/CameraAnimationState.prefab")
end

---ActionEnter
function DialogueCameraAction:OnEnter()
    self.cameraGO = self.pipeline:LoadCamera()
    GameObjectUtil.SetActive(self.cameraGO, true)
    self.cvm = self.cameraGO:GetComponent("CinemachineVirtualCamera")
    self.duration = self.cameraInDuration + self.cameraOutDuration

    local mainCamera = GlobalCameraMgr.GetUnityMainCamera()
    self.oriPosition = GameObjectUtil.GetPosition(mainCamera)
    self.oriRotation = GameObjectUtil.GetRotation(mainCamera)
    self.oriFov = GlobalCameraMgr.GetCameraFOV()

    if self.cameraInType == DialogueEnum.CameraChangeType.TweenTo then
        self.tweenStartPosition = self.oriPosition
        self.tweenStartRotation = self.oriRotation
        self.tweenStartFov = self.oriFov
    else
        self.tweenInCpl = true
        self:SetCameraProperty()
    end
    EventMgr.Dispatch("CameraTimelinePlayed", self.pipeline:GetUniqueId())
end

---设置摄像机属性
function DialogueCameraAction:SetCameraProperty()
    GameObjectUtil.SetPosition(self.cvm, self.cameraPosition)
    GameObjectUtil.SetRotation(self.cvm, self.cameraRotation)
    local lens = self.cvm.m_Lens
    lens.FieldOfView = self.fieldOfView
    self.cvm.m_Lens = lens
end

---Process函数
---@param progress float
---@return DialogueEnum.UpdateActionState
function DialogueCameraAction:OnProcess(progress)
    if self.endFrame ~= 0 and self.endFrame < TimerMgr.GetFrameCount() then
        if self.cameraGO then
            self.pipeline:DestroyCamera()
            self.cameraGO = nil
            return DialogueEnum.UpdateActionState.Running
        else
            return DialogueEnum.UpdateActionState.Complete
        end
    end
    local tweenInNormalizedTime = (self.cameraInDuration > 0) and (self.curTime / self.cameraInDuration) or 0
    if self.cameraInType == DialogueEnum.CameraChangeType.TweenTo and
            not self.tweenInCpl and tweenInNormalizedTime >= 0 then
        if tweenInNormalizedTime <= 1 then
            self:CameraTween(self.cameraPosition, self.cameraRotation, self.fieldOfView, tweenInNormalizedTime)
        else
            self.tweenInCpl = true
            self:SetCameraProperty()
        end
    end

    local tweenOutNormalizedTime = (self.cameraOutDuration > 0) and ((self.curTime - self.cameraInDuration) / self.cameraOutDuration) or 0
    if self.cameraOutType == DialogueEnum.CameraChangeType.TweenTo and tweenOutNormalizedTime >= 0 then
        if self.tweenOutStarted == false then
            self.tweenStartPosition = self.oriPosition
            self.tweenStartRotation = self.oriRotation
            self.tweenStartFov = self.oriFov
            self.tweenOutStarted = true
        end
        self:CameraTween(self.oriPosition, self.oriRotation, self.oriFov, tweenOutNormalizedTime)
    end
    if self.super.OnProcess(self, progress) == DialogueEnum.UpdateActionState.Complete then
        self.endFrame = TimerMgr.GetFrameCount()
    end
    return DialogueEnum.UpdateActionState.Running
end

---@param targetPosition Vector3
---@param targetRotation Quaternion
---@param targetFov float
---@param normalizedTime float
function DialogueCameraAction:CameraTween(targetPosition, targetRotation, targetFov, normalizedTime)
    local position = Vector3.Lerp(self.tweenStartPosition, targetPosition, normalizedTime)
    local rotation = Quaternion.Lerp(self.tweenStartRotation, targetRotation, normalizedTime)
    local fov = self.tweenStartFov + (targetFov - self.tweenStartFov) * normalizedTime
    GameObjectUtil.SetPosition(self.cvm, position)
    GameObjectUtil.SetRotation(self.cvm, rotation)
    local lens = self.cvm.m_Lens
    lens.FieldOfView = fov
    self.cvm.m_Lens = lens
end

---ActionExit
function DialogueCameraAction:OnExit()
    self.pipeline:DestroyCamera()
end

return DialogueCameraAction
