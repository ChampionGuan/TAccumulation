---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 峻峻.
--- Date: 2020-07-17 11:29:45
---

DialogueUtil = require("Runtime.System.X3Game.Modules.Dialogue.Util.DialogueUtil")
DialogueEnum = require("Runtime.System.X3Game.Modules.Dialogue.DialogueEnum")
DialogueConst = require("Runtime.System.X3Game.Modules.Dialogue.DialogueConst")
---@class DialogueManager
local DialogueManager = class("DialogueManager")

local DialogueActionFactory = require("Runtime.System.X3Game.Modules.Dialogue.Action.DialogueActionFactory")
local DialogueNodeFactory = require("Runtime.System.X3Game.Modules.Dialogue.NodeController.DialogueNodeFactory")
local DialogueController = require("Runtime.System.X3Game.Modules.Dialogue.Controller.DialogueController")
local DialogueDatabase = require("Runtime.System.X3Game.Modules.Dialogue.DialogueDatabase")

---@type table<string, float> 上次使用某个Database的时间戳
local databaseTimestamp = {}
---@type table<string, DialogueDatabase> 剧情数据缓存
local databaseCache = {}
---@type string[]
local needUnloadDatabase = {}
---@type table<string, DialogueController> DialogueController池，每个业务逻辑可以有自己的一个DialogueController，互不干扰
local dialogueControllerDict = {}
---@type table<string, DialogueSystem>
local dialogueUsingDict = {}
---@type int pipeline唯一Id，全局自++
local pipelineUniqueId = 0
---@type boolean 是否预加载初始场景
local preloadStartScene = true
---@type int 剧情播放唯一Id，全局自++
local dialoguePlayId = 0

---@type DialogueSystem[]
local uiController = {}
---@type MultiConditionCtrl
local wwisePlotPauseCtrl = nil
---@type bool UI是否开启了
local isUIOpened = false
---@type int 剧情配置存活时间
local dialogueCfgLifeTime = 300
---@type int 剧情卸载检查间隔
local unloadCheckTime = 30
---@type int 卸载时间记录
local unloadTime = 0
---@type bool 自动化测试用Mode
local autoTestMode = false
---@type GameObject 2D转场用Prefab
local transition2DGO = nil
---@type DialogueSVCHelper 剧情SVC预热Helper
local svcHelper = nil

--region
function DialogueManager.Init()
    local controller = DialogueManager.InitByName("Default")
    controller:CreateDefaultSystem()
    wwisePlotPauseCtrl = require("Runtime.System.X3Game.Modules.Common.MultiConditionCtrl").new()
    DialogueActionFactory.Init()
    DialogueNodeFactory.Init()
    svcHelper = require("Runtime.System.X3Game.Modules.Dialogue.DialogueSVCHelper")
    svcHelper:Init()
end

---临时DialogueSystem，为了兼容之前的调用
---@return DialogueSystem
function DialogueManager.GetDefaultDialogueSystem()
    return DialogueManager.GetDefaultDialogueController():GetDefaultSystem()
end

---默认DialogueController
---@return DialogueController
function DialogueManager.GetDefaultDialogueController()
    return DialogueManager.Get("Default")
end
--endregion

---获取pipeline唯一Id
---@return int
function DialogueManager.GetPipelineUniqueId()
    pipelineUniqueId = pipelineUniqueId + 1
    return pipelineUniqueId
end

---获取唯一PlayId
---@return int
function DialogueManager.GetPlayId()
    dialoguePlayId = dialoguePlayId + 1
    return dialoguePlayId
end

---设置是否预加载初始场景
---@param value boolean
function DialogueManager.SetPreloadStartScene(value)
    preloadStartScene = value
end

---返回DialogueController
---@return table<string, DialogueController>
function DialogueManager.GetDialogueControllers()
    return dialogueControllerDict
end

---创建一个DialogueController
---@param name string
---@return DialogueController
function DialogueManager.InitByName(name)
    if dialogueControllerDict[name] == nil then
        dialogueControllerDict[name] = DialogueController.new(name)
    end
    return dialogueControllerDict[name]
end

---获取一个存在的DialogueController，方便跨模块获取DialogueController
---@param name string
---@return DialogueController
function DialogueManager.Get(name)
    return dialogueControllerDict[name]
end

---清理一个DialogueController
---@param name string
function DialogueManager.ClearByName(name)
    if dialogueControllerDict[name] ~= nil then
        dialogueControllerDict[name]:ClearDialogueAll()
        dialogueControllerDict[name]:Destroy()
    end
    dialogueControllerDict[name] = nil
end

---退出剧情（不会执行End回调）
---@param name string
function DialogueManager.Exit(name)
    if dialogueControllerDict[name] ~= nil then
        dialogueControllerDict[name]:ExitDialogueAll()
    end
end

---给业务提供一个直接初始化DialogueSystem的接口，忽略Controller这一层
---@param name string key，用来区分不同业务
---@param dialogueInfoId int 剧情Id 对应DialogueInfoId
---@param randomSeed int 剧情里使用的随机种子
---@param needCreateActors boolean 是否需要初始化角色
---@param onInitComplete fun 初始化完成回调
---@param uiProgressWeight float UI进度条权重
---@return DialogueSystem
function DialogueManager.InitDialogue(name, dialogueInfoId, randomSeed, needCreateActors, onInitComplete, uiProgressWeight)
    local controller = DialogueManager.InitByName(name)
    return controller:InitDialogue(dialogueInfoId, randomSeed, needCreateActors, onInitComplete, uiProgressWeight)
end

--region Database
---加载剧情配置
---@param name
---@return DialogueDatabase
function DialogueManager.LoadDatabase(name)
    local cfg = LuaCfgMgr.Get(string.concat("DialogueCfg.", name), 1)
    if cfg then
        if databaseCache[name] == nil then
            local database = DialogueDatabase.new()
            database:Init(name)
            databaseCache[name] = database
        end
        databaseTimestamp[name] = CS.UnityEngine.Time.unscaledTime
        return databaseCache[name]
    else
        return nil
    end
end

---卸载剧情配置资源
---@param name string 剧情名
function DialogueManager.UnloadDatabase(name)
    if databaseCache[name] then
        databaseCache[name]:Dispose()
        databaseCache[name] = nil
        databaseTimestamp[name] = nil
    end
end

---卸载剧情配置资源
---@param name string 剧情名
function DialogueManager.ReloadDatabase(name)
    if databaseCache[name] then
        databaseCache[name]:Reload()
    end
end

---卸载剧情的Lua配置
---@param force boolean 强制卸载
function DialogueManager.UnloadUnusedDatabase(force)
    if force == nil then force = false end
    --卸载不需要的缓存资源
    local isDirty = false
    for key,_ in pairs(databaseCache) do
        local curTimestamp = CS.UnityEngine.Time.unscaledTime
        if dialogueUsingDict[key] == nil and (force or curTimestamp - databaseTimestamp[key] > dialogueCfgLifeTime) then
            needUnloadDatabase[key] = true
            isDirty = true
        end
    end
    if isDirty then
        for key,_ in pairs(needUnloadDatabase) do
            DialogueManager.UnloadDatabase(key)
        end
        table.clear(needUnloadDatabase)
    end
end

---卸载无用资源
function DialogueManager.UnloadUnusedAsset()
    DialogueManager.UnloadUnusedDatabase(true)
    DialogueActionFactory.ReleasePool()
    DialogueNodeFactory.ReleasePool()
end
--endregion

---剧情Tick
function DialogueManager.Update()
    Profiler.BeginSample("DialogueManager.Update")
    local timeScale = Application.GetTimeScale()
    ---防止切后台导致第一帧过来UnscaledTime过大的问题，但是Tick时间又不想被TimeScale影响
    local deltaTime = timeScale > 0 and TimerMgr.GetCurTickDelta() / timeScale or TimerMgr.GetCurTickDelta(true)
    for _, dialogueController in pairs(dialogueControllerDict) do
        dialogueController:Update(deltaTime)
    end
    unloadTime = unloadTime + deltaTime
    if unloadTime >= unloadCheckTime then
        unloadTime = 0
        DialogueManager.UnloadUnusedDatabase(false)
    end
    svcHelper:Update(deltaTime)
    Profiler.EndSample("DialogueManager.Update")
end

---全局Dialogue暂停时间接口
function DialogueManager.PauseTime()
    for _, controller in pairs(dialogueControllerDict) do
        controller:PauseTime("Manager")
    end
end

---全局Dialogue继续时间接口
function DialogueManager.ResumeTime()
    for _, controller in pairs(dialogueControllerDict) do
        controller:ResumeTime("Manager")
    end
end

---打开剧情UI
---@param dialogueSystem DialogueSystem
function DialogueManager.OpenUI(dialogueSystem)
    local index = table.indexof(uiController, dialogueSystem)
    if index == false then
        table.insert(uiController, #uiController + 1, dialogueSystem)
    else
        table.remove(uiController, index)
        table.insert(uiController, #uiController + 1, dialogueSystem)
    end
    if isUIOpened == false and UIMgr.IsOpened("Dialog") == false then
        Debug.LogFormat("[DialogueSystem]OpenUI")
        UIMgr.Open("Dialog", true)
    else
        EventMgr.Dispatch("UIControllerChanged")
    end
end

---关闭剧情UI
---@param dialogueSystem DialogueSystem
function DialogueManager.CloseUI(dialogueSystem)
    local index = table.indexof(uiController, dialogueSystem)
    if index ~= false then
        if index == #uiController then
            table.remove(uiController, index)
            if #uiController == 0 then
                Debug.LogFormat("[DialogueSystem]CloseUI")
                isUIOpened = false
                DialogueManager.DestroyMotionPrefab()
                UIMgr.Close("Dialog")
            else
                EventMgr.Dispatch("UIControllerChanged")
            end
        else
            table.remove(uiController, index)
        end
    end
end

---获取现在主控UI的剧情控制器
---@return DialogueSystem
function DialogueManager.GetUIController()
    local length = #uiController
    return length > 0 and uiController[length] or DialogueManager.GetDefaultDialogueSystem()
end

---UI是否开启了
---@return boolean
function DialogueManager.GetUIOpened()
    return isUIOpened
end

---当DialogUI真的开启的时候置为true
---@param value boolean
function DialogueManager.SetUIOpened(value)
    isUIOpened = value
end

---获取动效的UIPrefab
---@param transitionType DialogueEnum.TransitionType
---@return GameObject
function DialogueManager.CreateMotionPrefab(transitionType)
    if GameObjectUtil.IsNull(transition2DGO) then
        if transitionType == DialogueEnum.TransitionType.DarkScreenFadeIn
                or transitionType == DialogueEnum.TransitionType.DarkScreenFadeOut then
            transition2DGO = UIMgr.LoadDynamicUIPrefab(PrefabConst.Dialogue_2DChange_Black)
        else
            transition2DGO = UIMgr.LoadDynamicUIPrefab(PrefabConst.Dialogue_2DChange_White)
        end
        EventMgr.Dispatch("DialogueUIAddGameObject", transition2DGO, "OCX_panel_Transition")
    end
    return transition2DGO
end

---销毁动效Prefab
function DialogueManager.DestroyMotionPrefab()
    if GameObjectUtil.IsNull(transition2DGO) == false then
        Res.DiscardGameObject(transition2DGO)
        transition2DGO = nil
    end
end

--region PreloadBatch
---C#Call过来的，所以会带个self
---@param name string
function DialogueManager.RequestBatch(self, name, collector)
    local dialogueId = tonumber(name)
    if dialogueId ~= nil then
        local dialogueInfo = LuaCfgMgr.Get("DialogueInfo", dialogueId)
        --TODO 这个标记位想办法处理下，只有特约在用，特约从节点进入的时候不希望加载场景
        if preloadStartScene then
            if string.isnilorempty(dialogueInfo.StartScene) == false then
                collector:AddSceneTask(dialogueInfo.StartScene)
            end
        end
        local database = DialogueManager.LoadDatabase(dialogueInfo.Name)
        DialogueUtil.RequestBatch(database, collector)
    else
        --子节点预加载 name为“SpecialDate_ST_01-Dialogue-10000”
        local dialogueName = string.split(name, "-")
        local database = DialogueManager.LoadDatabase(dialogueName[1])
        DialogueUtil.RequestNodeBatch(database, database:GetNodeGraph(name), collector, true)
    end
end

---C#Call过来的，所以会带个self
---@param name string
---@param params string[] 预留参数
---@return float 预估剩余时间，单位秒
function DialogueManager.EstimateRemainingTime(self, name, params)
    local dialogueId = tonumber(name)
    local remainingTime = Mathf.Infinity
    local dialogueSystem
    if dialogueId ~= nil then
        local dialogueInfo = LuaCfgMgr.Get("DialogueInfo", dialogueId)
        dialogueSystem = dialogueUsingDict[dialogueInfo.Name]
    else
        local dialogueName = params[0]
        dialogueSystem = dialogueUsingDict[dialogueName]
    end
    if dialogueSystem then
        remainingTime = dialogueSystem:EstimateRemainingTime(name, params)
    end
    return remainingTime
end

---注册Dialogue的使用
---@param name string
---@param dialogueSystem DialogueSystem
function DialogueManager.RegisterDialogueUsing(name, dialogueSystem)
    dialogueUsingDict[name] = dialogueSystem
end

---取消注册Dialogue的使用
---@param name string
function DialogueManager.UnregisterDialogueUsing(name)
    dialogueUsingDict[name] = nil
    databaseTimestamp[name] = CS.UnityEngine.Time.unscaledTime
end

---预热SVC
---@param list string[]
function DialogueManager.WarmupSVC(list)
    if list then
        for i, v in ipairs(list) do
            svcHelper:Load(v)
        end
    end
end

---清理预热的SVC
function DialogueManager.ClearWarmupSVC()
    svcHelper:Clear()
end
--endregion

---清除所有
function DialogueManager.Clear()
    UIMgr.Close(UIConf.Dialog)
    for _, controller in pairs(dialogueControllerDict) do
        controller:ClearDialogueAll()
        controller:Destroy()
    end
    table.clear(dialogueControllerDict)
    DialogueActionFactory.Clear()
    DialogueNodeFactory.Clear()
    svcHelper:Clear()
end

---创建Action
---@param type int
---@return DialogueBaseAction
function DialogueManager.CreateAction(type)
    return DialogueActionFactory.CreateAction(type)
end

---释放一个Action
---@param action DialogueBaseAction
function DialogueManager.ReleaseAction(action)
    DialogueActionFactory.ReleaseAction(action)
end

---创建Action
---@param conditionType DialogueEnum.DialogueConditionType
---@return NodeController
function DialogueManager.CreateNodeController(conditionType)
    return DialogueNodeFactory.CreateNodeController(conditionType)
end

---释放一个Action
---@param controller NodeController
function DialogueManager.ReleaseNodeController(controller)
    DialogueNodeFactory.ReleaseNodeController(controller)
end

---暂停Wwise
---@param dialogueInfoId int
function DialogueManager.PausePlot(dialogueInfoId)
    local isRunning = wwisePlotPauseCtrl:IsRunning()
    wwisePlotPauseCtrl:SetIsRunning(dialogueInfoId, true)
    if isRunning ~= wwisePlotPauseCtrl:IsRunning() then
        WwiseMgr.PausePlot()
    end
end

---继续Wwise
---@param dialogueInfoId int
function DialogueManager.ResumePlot(dialogueInfoId)
    if wwisePlotPauseCtrl:IsRunning() then
        wwisePlotPauseCtrl:SetIsRunning(dialogueInfoId, false)
        if not wwisePlotPauseCtrl:IsRunning() then
            WwiseMgr.ResumePlot()
        end
    end
end

--region EditorDebug用代码,C#端主动调用
---@type table<string, CS.PapeGames.DialogueEditor.DialogueSystem.DialogueBranchSettingData>
local branchSettingDict = { }

---设置剧情Debug分支选项
---@param databaseName string
---@param setting DialogueBranchSettingData
function DialogueManager.SetBranchSettingData(databaseName, setting)
    branchSettingDict[databaseName] = setting
end

---是否有配置分支Debug
---@param databaseName string
---@return boolean
function DialogueManager.HasBranchSettingData(databaseName)
    return branchSettingDict[databaseName] ~= nil
end

---是否排除了指定Link
---@param databaseName string
---@param link Link
---@return boolean
function DialogueManager.IsMutedLink(databaseName, link)
    if DialogueManager.HasBranchSettingData(databaseName) then
        local branchSetting = branchSettingDict[databaseName]
        return branchSetting:IsMutedLink(link.originConversationID, link.originDialogueID, link.destinationConversationID, link.destinationDialogueID)
    end
    return false
end

---获取指定的Link
---@param database DialogueDatabase
---@param nodeUniqueId int 节点唯一Id
---@return Link 返回指定的节点
function DialogueManager.GetSettedLink(database, nodeUniqueId)
    if DialogueManager.HasBranchSettingData(database.name) then
        local branchSetting = branchSettingDict[database.name]
        local settedLinkUniqueId = branchSetting:GetSettedLink(nodeUniqueId)
        if settedLinkUniqueId > 0 then
            local dialogueEntry = database:GetDialogueEntryByUniqueID(nodeUniqueId)
            for _, link in pairs(dialogueEntry.outgoingLinks) do
                if link.destinationConversationID == math.floor(settedLinkUniqueId / 10000) and link.destinationDialogueID == settedLinkUniqueId % 10000 then
                    return link
                end
            end
        end
    end
    return nil
end

---
function DialogueManager.ClearBranchSettingData()
    table.clear(branchSettingDict)
end
--endregion

---返回长按跳过
---@return boolean
function DialogueManager.GetDebugCanLongPressSkip()
    return BllMgr.GetDialogueBLL():GetDebugCanLongPressSkip()
end

---返回长按可跳过单个选项
---@return boolean
function DialogueManager.GetLongPressSkipBranch()
    return BllMgr.GetDialogueBLL():GetLongPressSkipBranch()
end

---设置自动测试模式
---@param value
function DialogueManager.SetAutoTestMode(value)
    autoTestMode = value
    Debug.LogFormat("[DialogueSystem]切换自动测试模式-%s", value)
end

---自动测试模式
---@return boolean
function DialogueManager.GetAutoTestMode()
    return autoTestMode
end

return DialogueManager