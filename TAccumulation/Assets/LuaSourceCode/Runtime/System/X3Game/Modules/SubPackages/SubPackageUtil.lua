---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by PC.
--- DateTime: 2021/4/7 14:43
---

---@class SubPackage.SubPackageUtil
local SubPackageUtil = class("SubPackageUtil")
local this = SubPackageUtil

local cs_respatch_util = CS.ResourcesPacker.Runtime.RuntimeUtils
local DownloadUtil = CS.X3Game.Download.DownloadUtils

---@class SubPackage.PackageDownloadState
PackageDownloadState = {
    None = 1,
    Downloading = 2,
    Pause = 3,
    Wait = 4,
    Finished = 5,
    Failed = 6
}

local KB = 1024
local MB = 1048576
local GB = 1073741824

---模拟流量环境
local DEBUG_CARRIER_DATA = false

---模拟没有空间
local DEBUG_NO_SPACE = false

---@class
ResDownloadGroupType = {
    None = CS.ResourcesPacker.Runtime.ResDownloadGroupType.None,
    Download = CS.ResourcesPacker.Runtime.ResDownloadGroupType.Download,
    Extract = CS.ResourcesPacker.Runtime.ResDownloadGroupType.Extract
}
local ResPatchManager = CS.ResourcesPacker.Runtime.ResPatchManager

local subModuleTab = {}

function SubPackageUtil.Init()
    local subModule_Cfg = LuaCfgMgr.GetAll("SubModule")
    for k, v in pairs(subModule_Cfg) do
        local strTab = string.split(v.TableName, "|")
        local type = strTab[2]
        if subModuleTab[v.Type] == nil then
            subModuleTab[v.Type] = {}
        end
        if subModuleTab[v.Type][v.SubType] == nil then
            subModuleTab[v.Type][v.SubType] = {}
        end
        local tab = subModuleTab[v.Type][v.SubType]
        for i, v1 in ipairs(v.KeyArray) do
            if type == "int" then
                tab[tonumber(v1)] = v.ID
            else
                tab[v1] = v.ID
            end
        end
    end
end

function SubPackageUtil.Clear()
end

---检测功能对应的分包资源是否已经下载 如果下载执行回调，如果没有下载进入下载分包流程
---@param type Define.SubPackageType
---@param subType Define.SupPackageSubType
---@param key  any  对应的功能ID
---@param callBack function 执行回调
function SubPackageUtil.EnterSystem(type, subType, key, callBack)
    if SubPackageDownloadMgr.IsEnable() then
        if subModuleTab[type] == nil then
            callBack()
            return
        end
        if subModuleTab[type][subType] == nil then
            callBack()
            return
        end
        local subModuleID = subModuleTab[type][subType][key]
        local subPackage_CfgData = LuaCfgMgr.Get("SubModule", subModuleID)
        local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
        if subPackage_CfgData == nil or this.GetFinishWithPackageIDs(packageIDs) then
            callBack()
            return
        else
            ---主线特约类型热更检查
            local moduleData = LuaCfgMgr.Get("Module", subPackage_CfgData.ModuleID)
            local packageIDTabs = this.GetPackageIDsWithSubModuleIDTab(moduleData.SubModule)
            local taskID = string.concat("moduleID", subPackage_CfgData.ModuleID)
            local isHave, size = DownloadMgr:GetDownloadTaskTotalSize(taskID)
            if not isHave then
                size = this.GetTotalSizeWithPackageIDs(packageIDTabs)
            end
            local tips = UITextHelper.GetUIText(UITextConst.UI_TEXT_30820, this.GetFormatSize(size))
            UICommonUtil.ShowMessageBox(tips,
                    { { btn_type = GameConst.MessageBoxBtnType.CANCEL },
                      { btn_type = GameConst.MessageBoxBtnType.CONFIRM, btn_call = function()
                          DownloadMgr.CheckDownload(size, function()
                              DownloadMgr:AddDownloadTask(string.concat("moduleID", subPackage_CfgData.ModuleID), packageIDTabs, true, subPackage_CfgData.ModuleID)
                              UICommonUtil.ShowMessage(UITextConst.UI_TEXT_30842)
                          end)
                      end } })
        end
    else
        if callBack ~= nil then
            callBack()
        end
    end
end

--- 检测资源是否存在
---@param type Define.SubPackageType
---@param subType Define.SupPackageSubType
---@param key  int 对应的功能ID
---@return  bool  资源是否下载
function SubPackageUtil.IsHaveSubPackage(type, subType, key)
    if not SubPackageDownloadMgr.IsEnable() then
        return true
    end
    if subModuleTab[type] == nil or subModuleTab[type][subType] == nil or subModuleTab[type][subType][key] == nil then
        return true
    end
    local subModuleID = subModuleTab[type][subType][key]
    local subPackage_CfgData = LuaCfgMgr.Get("SubModule", subModuleID)
    if subPackage_CfgData == nil then
        return true
    end
    local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
    return this.GetFinishWithPackageIDs(packageIDs)
end

--- 下载对应分包 用于零散下载 开放下载接口
---@param type Define.SubPackageType   分包下载类型
---@param subType Define.SupPackageSubType 分包下载子类型
---@param key     number  对应的功能ID
function SubPackageUtil.DownloadPackage(type, subType, key)
    local subModuleID = subModuleTab[type][subType][key]
    local subPackage_CfgData = LuaCfgMgr.Get("SubModule", subModuleID)
    local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
    local moduleData = LuaCfgMgr.Get("Module", subPackage_CfgData.ModuleID)
    if moduleData.Type == PackageDownloadType.Single then
        DownloadMgr:AddDownloadTask(string.concat("moduleID", subPackage_CfgData.ModuleID), packageIDs, true, subPackage_CfgData.ModuleID)
    else
        DownloadMgr:AddDownloadTask(string.concat("autoModuleID", subModuleID), packageIDs, true, subPackage_CfgData.ModuleID)
    end
end

--- 获取下载ID
---@param type Define.SubPackageType   分包下载类型
---@param subType Define.SupPackageSubType 分包下载子类型
---@param key     number  对应的功能ID
function SubPackageUtil.GetTaskID(type, subType, key)
    ---XTBUG-30234
    if (not (subModuleTab[type] and subModuleTab[type][subType] and subModuleTab[type][subType][key])) then
        return -1
    end
    local subModuleID = subModuleTab[type][subType][key]
    local subPackage_CfgData = LuaCfgMgr.Get("SubModule", subModuleID)
    if (not subPackage_CfgData) then
        return -1
    end
    local moduleData = LuaCfgMgr.Get("Module", subPackage_CfgData.ModuleID)

    if moduleData.Type == PackageDownloadType.Single then
        return string.concat("moduleID", subPackage_CfgData.ModuleID)
    else
        return string.concat("autoModuleID", subModuleID)
    end
end

--- 暂停对应分包 用于零散下载 开放下载接口
---@param type Define.SubPackageType   分包下载类型
---@param subType Define.SupPackageSubType 分包下载子类型
---@param key     number  对应的功能ID
function SubPackageUtil.PausePackage(type, subType, key)
    local subModuleID = subModuleTab[type][subType][key]
    local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
    for i, v in ipairs(packageIDs) do
        DownloadMgr:PausePackage(v)
    end
end

--- 暂停对应分包 用于零散下载 开放下载接口
---@param subModuleID int   分包下载ID
function SubPackageUtil.PausePackageByPackageID(subModuleID)
    local subPackage_CfgData = LuaCfgMgr.Get("SubModule", subModuleID)
    DownloadMgr:PauseDownloadTask(string.concat("moduleID", subPackage_CfgData.ModuleID))
end
--- 暂停对应分包 用于零散下载 开放下载接口 (思念横卡)
---@param subModuleID int   分包下载ID
function SubPackageUtil.PauseAutoPackageByPackageID(subModuleID)
    DownloadMgr:PauseDownloadTask(string.concat("autoModuleID", subModuleID))
end
--- 删除对应分包 用于零散下载 开放下载接口 (思念横卡)
---@param subModuleID int   分包下载ID
function SubPackageUtil.DeleteAutoPackageByPackageID(subModuleID)
    DownloadMgr:DeleteDownloadTask(string.concat("autoModuleID", subModuleID))
end

--- 获取当前分包状态
---@param type Define.SubPackageType   分包下载类型
---@param subType Define.SupPackageSubType 分包下载子类型
---@param key     number  对应的功能ID
---@return SubPackage.PackageDownloadState  PackageDownloadState  分包下载状态
function SubPackageUtil.GetPackageState(type, subType, key)
    if not SubPackageDownloadMgr.IsEnable() then
        return PackageDownloadState.Finished
    end
    if subModuleTab[type] == nil or subModuleTab[type][subType] == nil or subModuleTab[type][subType][key] == nil then
        return PackageDownloadState.Finished
    end
    local subModuleID = subModuleTab[type][subType][key]
    if not SubPackageDownloadMgr.IsValidWithSubModuleIDs({ subModuleID }) then
        return PackageDownloadState.Finished
    end
    local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
    return this.GetPackageIDsState(packageIDs)
end

--- 获取当前分包ID
---@param type Define.SubPackageType   分包下载类型
---@param subType Define.SupPackageSubType 分包下载子类型
---@param key     number  对应的功能ID
---@return  number 分包ID
function SubPackageUtil.GetSubModuleID(type, subType, key)
    if subModuleTab[type] == nil or subModuleTab[type][subType] == nil or subModuleTab[type][subType][key] == nil then
        return 0
    end
    local subModuleID = subModuleTab[type][subType][key]
    return subModuleID or -1
end

--region DEBUG
---DEBUG接口 本地是否有剩余空间
function SubPackageUtil.ChangeNoSpaceDebugState(v)
    DEBUG_NO_SPACE = v
end

function SubPackageUtil.GetNoSpaceDebugState()
    return DEBUG_NO_SPACE
end

---DEBUG接口 是否为流量环境
function SubPackageUtil.ChangeCarrierDataDebugState(v)
    DEBUG_CARRIER_DATA = v
end

function SubPackageUtil.GetCarrierDataDebugState()
    return DEBUG_CARRIER_DATA
end

--endregion

---cs 接口
---获取磁盘剩余空间
function SubPackageUtil.GetDiskFreeSpace()
    ---DEBUG功能，且真机也需要
    if (DEBUG_NO_SPACE) then
        return 0
    end

    if cs_respatch_util == nil then
        return 0
    end
    return cs_respatch_util.GetDiskFreeSpace()
end

function SubPackageUtil.CheckNetworkIsWifi()
    ---DEBUG功能，且真机也需要
    local gmEnable = GameHelper.CheckDebugMode(GameConst.DebugMode.GM_MODE)
    if (gmEnable and DEBUG_CARRIER_DATA) then
        return false
    end

    if cs_respatch_util == nil then
        return false
    end
    return cs_respatch_util.CheckNetworkIsWifi()
end

---Util
function SubPackageUtil.CheckHaveFreeSpace(size)
    local freeSize = SubPackageUtil.GetDiskFreeSpace()
    local finishDownloadSize = freeSize - math.floor(size / 1048576)
    return finishDownloadSize > SubPackageDownloadMgr.MIN_SURPLUS_SPACE
end

---@param moduleDatas table<cfg.Module>
---@param langArg Locale.Language | bool
---@return int
function SubPackageUtil.GetTotalSizeWithModuleDatas(moduleDatas, langArg)
    local totalSize = 0
    if moduleDatas == nil then
        return totalSize
    end
    for _, moduleData in ipairs(moduleDatas) do
        totalSize = totalSize + this.GetTotalSizeWithSubModuleIDs(moduleData.SubModule, langArg)
    end
    return totalSize
end

---@param subModuleIDs table<int>
---@param langArg Locale.Language | bool
function SubPackageUtil.GetTotalSizeWithSubModuleIDs(subModuleIDs, langArg)
    local packageIDs = this.GetPackageIDsWithSubModuleIDTab(subModuleIDs, langArg)
    return this.GetTotalSizeWithPackageIDs(packageIDs)
end

---@param packageIDs table<int>
---@return int
function SubPackageUtil.GetTotalSizeWithPackageIDs(packageIDs)
    local totalSize = 0
    for _, v in ipairs(packageIDs) do
        totalSize = totalSize + DownloadMgr.GetChildPackageSize(v)
    end
    return totalSize
end

---获取指定moduleDatas已下载的数据大小
---@param moduleDatas table<cfg.Module>
---@param langArg Locale.Language | bool 校验指定语音，全语音(true)，或当前语音（false）
---@return int
function SubPackageUtil.GetLocalSizeWithModuleDatas(moduleDatas, langArg)
    local totalSize = 0
    if moduleDatas == nil then
        return totalSize
    end
    for _, moduleData in ipairs(moduleDatas) do
        totalSize = totalSize + this.GetLocalSizeWithSubModuleIDs(moduleData.SubModule, langArg)
    end
    return totalSize
end

---获取subModuleID集合的本地已下载大小
---@param subModuleIDs table<int>
---@param langArg Locale.Language | bool 校验指定语音，全语音(true)，或当前语音（false）
function SubPackageUtil.GetLocalSizeWithSubModuleIDs(subModuleIDs, langArg)
    local packageIDs = this.GetPackageIDsWithSubModuleIDTab(subModuleIDs, langArg)
    return this.GetLocalSizeWithPackageIDs(packageIDs)
end

---获取指定packageIDs的本地大小（去除冗余+已下载完成）
---@param packageIDs table<int>
---@return int
function SubPackageUtil.GetLocalSizeWithPackageIDs(packageIDs)
    local checkList = {}
    for _, v in ipairs(packageIDs) do
        if (DownloadMgr.HasDownloadedPkgTag(v)) then
            table.insert(checkList, v)
        end
    end
    local compressSize, contentSize = DownloadMgr.GetChildrenPackagesSize(checkList)
    return contentSize
end

---获取下载的package是否存在多个语言版本
---@param moduleDatas table<cfg.Module>
---@return bool 是否已经下载了多个语言版本
function SubPackageUtil.GetIsMulLocalWithModuleData(moduleData)
    if (not (moduleData and moduleData.SubModule)) then
        return
    end
    local isMul = false
    for _, subModuleID in pairs(moduleData.SubModule) do
        local multiLanguagePackage = SubPackageDownloadMgr.GetMultiLanguagePackageWithSubModuleID(subModuleID)
        local downloadNum = 0
        for _, packageData in ipairs(multiLanguagePackage.languagePackageList) do
            if DownloadMgr.HasDownloadedPkgTag(packageData.packageID) then
                downloadNum = downloadNum + 1
            end
        end
        if downloadNum > 1 then
            isMul = true
            break
        end
        downloadNum = 0
        for _, packageData in ipairs(multiLanguagePackage.voicePackageList) do
            if DownloadMgr.HasDownloadedPkgTag(packageData.packageID) then
                downloadNum = downloadNum + 1
            end
        end
        if downloadNum > 1 then
            isMul = true
            break
        end
    end

    return isMul;
end

function SubPackageUtil.GetDiskSizeWithModuleID(moduleID)
    local totalSize = 0
    local zipSize = 0
    local module_CfgData = LuaCfgMgr.Get("Module", moduleID)
    if module_CfgData ~= nil then
        for _, subModuleID in ipairs(module_CfgData.SubModule) do
            local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
            for _, packageID in ipairs(packageIDs) do
                local packageSize, packageZipSize = DownloadMgr.GetChildPackageSize(packageID)
                totalSize = totalSize + packageSize
                zipSize = zipSize + packageZipSize
            end
        end
    end
    return totalSize, zipSize
end

---@param moduleData cfg.Module
---@return SubPackage.PackageDownloadState
function SubPackageUtil.GetModuleState(moduleData)
    local downloadState = PackageDownloadState.None
    local packageIDs = this.GetPackageIDsWithSubModuleIDTab(moduleData.SubModule)
    downloadState = this.GetPackageIDsState(packageIDs)
    return downloadState
end

function SubPackageUtil.GetDownloadState(type, subType, key)
    local taskID = SubPackageUtil.GetTaskID(type, subType, key)
    if taskID == -1 then
        ---如果不存在SubPackage那么久不是分包资源，直接返回完成
        return PackageDownloadState.Finished
    end
    local taskState = DownloadMgr:GetDownloadTaskState(taskID)
    if taskState == PackageDownloadState.None then
        local subModuleID = subModuleTab[type][subType][key]
        local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
        taskState = this.GetPackageIDsState(packageIDs)
    end
    return taskState
end

---@param packageIDs table<int>
---@return SubPackage.PackageDownloadState
function SubPackageUtil.GetPackageIDsState(packageIDs)
    local downloadState = PackageDownloadState.None
    for _, v in ipairs(packageIDs) do
        local state = DownloadMgr:GetPackageState(v)
        if state == PackageDownloadState.Downloading then
            return PackageDownloadState.Downloading
        elseif state == PackageDownloadState.Pause then
            return PackageDownloadState.Pause
        elseif state == PackageDownloadState.Failed then
            return PackageDownloadState.Failed
        elseif state == PackageDownloadState.Wait then
            return PackageDownloadState.Wait
        end
        downloadState = state
    end
    return downloadState
end

---@param moduleData cfg.Module
---@return int 下载size
function SubPackageUtil.GetModuleDownloadSize(moduleData)
    local packageIDs = this.GetPackageIDsWithSubModuleIDTab(moduleData.SubModule)
    return DownloadMgr:GetDownloadSizeByPackageIDs(packageIDs)
end

---@param moduleDatas table<cfg.Module>
---@return int 下载size
function SubPackageUtil.GetDownloadSizeWithModuleDatas(moduleDatas)
    local downloadSIze = 0
    for i, moduleData in ipairs(moduleDatas) do
        downloadSIze = downloadSIze + SubPackageUtil.GetModuleDownloadSize(moduleData)
    end
    return downloadSIze
end

function SubPackageUtil.GetDownloadSpeed()
    return DownloadMgr:GetDownloadSpeed()
end

---subModuleIDs 是否下载完成
---@param subModuleIDs table<int>
---@param langType Locale.Language
---@return bool
function SubPackageUtil.GetFinishModelWithSubModuleIDs(subModuleIDs)
    local packageIDs = this.GetPackageIDsWithSubModuleIDTab(subModuleIDs)
    return this.GetFinishWithPackageIDs(packageIDs)
end

---subModuleID 是否下载完成
---@param subModuleID int
---@param langType Locale.Language
---@return bool
function SubPackageUtil.GetFinishModelWithSubModuleID(subModuleID)
    local packageIDs = this.GetPackageIDsWithSubModuleID(subModuleID)
    return this.GetFinishWithPackageIDs(packageIDs)
end

---@param packageIDs table<int>
---@return  bool isFinish
function SubPackageUtil.GetFinishWithPackageIDs(packageIDs)
    local isFinish = true
    local finishCount = 0
    for i, v in ipairs(packageIDs) do
        if v ~= 0 then
            local haveDownLoad = DownloadMgr.HasDownloadedPkgTag(v)
            isFinish = isFinish and haveDownLoad
            if haveDownLoad then
                finishCount = finishCount + 1
            end
        end
    end
    return isFinish, finishCount
end

---删除package
---@param packageIDs table<int>
---@return bool isFinish
function SubPackageUtil.DelPackageIDs(packageIDs)
    local taskID = SubPackageUtil.GetMD5WithPackageIDs(packageIDs)
    local isFinish = DownloadMgr:DeleteDownloadTask(taskID)
    if not isFinish then
        isFinish = SubPackageDownloadMgr.DelPackageIDs(packageIDs)
    end
    return isFinish
end
---删除语音包
---@param languageID number
---@param zipType Define.SubPackageZipType
---@return bool isFinish
function SubPackageUtil.DelPackageIDsWithLangType(languageID, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    local taskID = BllMgr.GetSystemSettingBLL():GetLanguageText(languageID, zipType == Define.SubPackageZipType.Language)
    local isFinish = DownloadMgr:DeleteDownloadTask(taskID)
    if not isFinish then
        local packs = SubPackageUtil.GetAllLanguagePackageIDs(languageID, zipType)
        isFinish = SubPackageDownloadMgr.DelPackageIDs(packs)
    end
    return isFinish
end
---下载packageIDs
---@param packageIDs table<int>
---@return string taskID
function SubPackageUtil.GetDownloadTaskID(packageIDs)
    local taskID = SubPackageUtil.GetMD5WithPackageIDs(packageIDs)
    return taskID
end

---获取下载量格式化
function SubPackageUtil.GetFormatSize(size)
    size = size or 0
    local number = 0
    local unit = "b"
    if size == 0 then
        number = 0
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30808)
    elseif size < MB * 0.1 then
        number = 0.1
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30808)
    elseif size > MB * 0.1 and size < GB then
        number = size / MB
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30808)
    else
        number = size / GB
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30813)
    end
    return string.format("%.1f%s", number, unit)
end

---获取下载速度格式化
function SubPackageUtil.GetSpeedFormatSize(size)
    local number = 0
    local unit = "b"
    if size == 0 then
        number = 0
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30809)
    elseif size < KB * 0.1 then
        number = 0.1
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30809)
    elseif size > KB * 0.1 and size < MB then
        number = size / KB
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30809)
    elseif size > MB and size < GB then
        number = size / MB
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30808)
    else
        number = size / GB
        unit = UITextHelper.GetUIText(UITextConst.UI_TEXT_30813)
    end
    return string.format("%.1f%s", number, unit)
end

---@param packageIDs table<int>
---@return string
function SubPackageUtil.GetMD5WithPackageIDs(packageIDs)
    local stringContent = ""
    table.sort(packageIDs, function(a, b)
        return a > b
    end)
    for i, v in ipairs(packageIDs) do
        stringContent = string.concat(stringContent, DownloadMgr.GetPackageMD5(v))
    end
    return DownloadUtil.GetStringMD5(stringContent)
end

---分包多语言
---下载packageIDs
---@param packageIDs table<int>
---@param taskID string
---@return string taskID
function SubPackageUtil.DownloadPackages(taskID, packageIDs)
    DownloadMgr:AddDownloadTask(taskID, packageIDs, true)
end

---分包多语言
---下载packageIDs
---@param langType Locale.Language
---@param checkDownloading bool 是否检查下载中的
---@param zipType Define.SubPackageZipType
---@return string taskID
function SubPackageUtil.DownloadPackagesByLanguageID(langType, checkDownloading, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    local packageIDs = this.GetUnFinishPackageIDsByTable(langType, checkDownloading, zipType)
    local taskID = BllMgr.GetSystemSettingBLL():GetLanguageText(langType, zipType == Define.SubPackageZipType.Language)
    --SubPackageDownloadMgr.AddPackageByLanguageChange(langType, Define.SubPackageZipType.Sound)

    SubPackageUtil.DownloadPackages(taskID, packageIDs)
end
---分包多语言

---获取多语言的taskID
---@param langType Locale.Language
---@param zipType Define.SubPackageZipType
---@return string taskID
function SubPackageUtil.GetLanguageTaskId(langType, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    return this.GetDownloadTaskID(this.GetNeedDownloadPackageIDsWithLangType(langType, zipType))
end

---获取多语言语音包还差多少没下
---@param languageId Locale.Language
---@param checkDownloading bool 是否检查下载中的
---@param zipType Define.SubPackageZipType
function SubPackageUtil.GetLanguagePackLeaveSize(languageId, checkDownloading, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    return this.GetLanguagePackSize(languageId, checkDownloading, zipType) - this.GetLanguageDownloadSize(languageId, zipType)
end

---获取多语言语音包大小
---@param langType Locale.Language
---@param checkDownloading bool 是否检查下载中的
---@param zipType Define.SubPackageZipType
---@return string
function SubPackageUtil.GetLanguagePackSize(langType, checkDownloading, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    local packageIDs = this.GetNeedDownloadPackageIDsWithLangType(langType, zipType, checkDownloading)
    return this.GetTotalSizeWithPackageIDs(packageIDs)
end
---获取多语言语音包已经下载的大小
---@param langType Locale.Language
---@param zipType Define.SubPackageZipType
function SubPackageUtil.GetLanguageDownloadSize(langType, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    local packageIDs = this.GetNeedDownloadPackageIDsWithLangType(langType, zipType)
    return DownloadMgr:GetDownloadSizeByPackageIDs(packageIDs)
end

---@param langType Locale.Language
---@return table 返回没下载过的packageIDs
---@param checkDownloading bool 是否检查下载中的
---@param zipType Define.SubPackageZipType
function SubPackageUtil.GetUnFinishPackageIDsByTable(langType, checkDownloading, zipType)
    if not zipType then
        zipType = Define.SubPackageZipType.Sound
    end
    local packageIDs = this.GetNeedDownloadPackageIDsWithLangType(langType, zipType, checkDownloading)
    return DownloadMgr:GetUnFinishPackageIDsByTable(packageIDs)
end

----分包多语言

---@param subModuleID int
---@param langType Locale.Language
function SubPackageUtil.GetPackageIDsWithSubModuleID(subModuleID)
    return SubPackageDownloadMgr.GetNeedDownloadPackageIDsWithSubModuleID(subModuleID)
end

---@param subModuleIDTab table<int>
---@param langArg Locale.Language | bool 校验指定语音，全语音(true)，或当前语音（false）
function SubPackageUtil.GetPackageIDsWithSubModuleIDTab(subModuleIDTab, langArg)
    return SubPackageDownloadMgr.GetNeedDownloadPackageIDsWithSubModuleIDTab(subModuleIDTab, langArg)
end

---获取需要下载对应语言包的语音语言包ID列表
---@param langType Locale.Language
---@param zipType Define.SubPackageZipType
---@param checkDownloading bool 是否检查下载中的
---@return table<int>
function SubPackageUtil.GetNeedDownloadPackageIDsWithLangType(langType, zipType, checkDownloading)
    local packageIDs = SubPackageDownloadMgr.GetNeedDownloadPackageIDsWithLangType(langType, zipType)
    if checkDownloading then
        local downloadPackageIds = this.GetDownloadTaskPackageIDs(langType, zipType)
        local oldPackageIDsLength = #packageIDs
        for i = 1, #downloadPackageIds do
            --去重
            local have = false
            for j = 1, oldPackageIDsLength do
                if packageIDs[j] == downloadPackageIds[i] then
                    have = true
                end
            end
            if not have then
                packageIDs[#packageIDs + 1] = downloadPackageIds[i]
            end
        end
    end
    return packageIDs
end

---获取所有下载任务对应的多语言包
---@param langType Locale.Language
---@param zipType Define.SubPackageZipType
---@return int[]
function SubPackageUtil.GetDownloadTaskPackageIDs(langType, zipType)
    local subModuleIDTab = DownloadMgr:GetAllDownloadTaskSubModuleIDs()
    return SubPackageDownloadMgr.GetPackageIDsWithSubModuleIDs2LangType(subModuleIDTab, langType, zipType)
end

---获取所有可下载任务对应的多语言包
---@param langType Locale.Language
---@param zipType Define.SubPackageZipType
---@return int[]
function SubPackageUtil.GetAllLanguagePackageIDs(langType, zipType)
    local moduleDatas = LuaCfgMgr.GetAll("Module")
    local subModuleIDTab = { 0 } ---加0是把A包的也加上了
    for k, v in pairs(moduleDatas) do
        for i, j in ipairs(v.SubModule) do
            subModuleIDTab[#subModuleIDTab + 1] = j
        end
    end
    return SubPackageDownloadMgr.GetPackageIDsWithSubModuleIDs2LangType(subModuleIDTab, langType, zipType)
end

function SubPackageUtil.GetAutoTaskId(id)
    return string.concat("autoModuleID", id)
end

SubPackageUtil.Init()

return SubPackageUtil

