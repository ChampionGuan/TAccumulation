---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jianxin.
--- DateTime: 2022/12/8 16:20
---


---@class ScatteredDownloadData
---@field type  Define.SubPackageType
---@field subType  Define.SupPackageSubType
---@field value any
---@field callback function
---@field finishCb function

---下载组件base
---@class ScatteredDownloadBase:UICtrl
local ScatteredDownloadBase = class("ScatteredDownloadBase", UICtrl)

function ScatteredDownloadBase:ctor()
    ---@type ScatteredDownloadData
    self.data = nil
    ---@type SubPackage.PackageDownloadState
    self.downloadState = nil
    ---@type int
    self.subModuleID = 0
    ---@type table<int>
    self.packageIDs = {}
    ---@type int 下载进度
    self.downloadProcess = 0
end

---@param data ScatteredDownloadData
function ScatteredDownloadBase:InitData(data)
    self.data = data
    self:InitUI()
    if SubPackageDownloadMgr.IsEnable() then
        self.subModuleID = SubPackageUtil.GetSubModuleID(self.data.type, self.data.subType, self.data.value)
        if self.subModuleID == -1 then
            self.downloadState = PackageDownloadState.Finished
            self:RefreshUI(self.downloadState)
        else
            local subModules = { self.subModuleID }
            if (SubPackageDownloadMgr.IsValidWithSubModuleIDs(subModules) and (not SubPackageUtil.GetFinishModelWithSubModuleIDs(subModules))) then
                self.tickID = TimerMgr.AddTimer(0.2, self.Tick, self, true)
                self.packageIDs = SubPackageUtil.GetPackageIDsWithSubModuleID(self.subModuleID)
                self.downloadState = SubPackageUtil.GetDownloadState(self.data.type, self.data.subType, self.data.value)
                self.totalSize = SubPackageUtil.GetTotalSizeWithPackageIDs(self.packageIDs)
                self.downloadSize = DownloadMgr:GetDownloadSizeByPackageIDs(self.packageIDs)
                if self.downloadState ~= PackageDownloadState.None then
                    local value = math.floor((self.downloadSize / self.totalSize) * 100)
                    self.downloadProcess = value
                    self:OnDownloading(value)
                end
                self:Tick()
                self:AddListener()
            else
                self.downloadState = PackageDownloadState.Finished
                self:RefreshUI(self.downloadState)
            end
        end
    else
        self.downloadState = PackageDownloadState.Finished
        self:RefreshUI(self.downloadState)
    end
    if self.downloadState == PackageDownloadState.Finished then
        if self.tickID ~= nil then
            TimerMgr.Discard(self.tickID)
        end
    end
end

function ScatteredDownloadBase:AddListener()
    EventMgr.AddListener("SubPackageMgr_PackageDownload_UI_Downloading", self.Downloading, self)
    EventMgr.AddListener("SubPackageMgr_PackageDownload_UI_Finish", self.Finish, self)
    EventMgr.AddListener("SubPackageMgr_PackageDownload_Failed", self.OnDownloadFail, self)
end

function ScatteredDownloadBase:Downloading(packageID, downloadSize, totalSize)
    if table.indexof(self.packageIDs, packageID) ~= false then
        self.totalSize = SubPackageUtil.GetTotalSizeWithPackageIDs(self.packageIDs)
        self.downloadSize = DownloadMgr:GetDownloadSizeByPackageIDs(self.packageIDs)
        local value = math.floor((self.downloadSize / self.totalSize) * 100)
        self.downloadProcess = value
        --Debug.Log("___________", self.downloadProcess)
        self:OnDownloading(value)
    end
end

function ScatteredDownloadBase:OnDownloadFail(packageID)
    if table.indexof(self.packageIDs, packageID) ~= false then
        self:OnFailed(self.downloadProcess)
    end
end

function ScatteredDownloadBase:Finish(packageID)
    if self:ContainsID(packageID) then
        self:Tick()
    end
end

function ScatteredDownloadBase:ContainsID(packageID)
    return table.indexof(self.packageIDs, packageID) ~= false
end

function ScatteredDownloadBase:Tick()
    self.downloadState = SubPackageUtil.GetDownloadState(self.data.type, self.data.subType, self.data.value)
    ---先刷新UI再执行callback -jianxin
    self:RefreshUI(self.downloadState)
    if self.downloadState == PackageDownloadState.Finished then
        TimerMgr.Discard(self.tickID)
        ---任务下载一个任务会有多个语言包下载，需要等到全部下载完再执行callback -jianxin
        if self.data.finishCb ~= nil then
            self.data.finishCb()
            self.data.finishCb = nil
        end
    end
end

function ScatteredDownloadBase:DownloadPackage()
    local size = SubPackageUtil.GetTotalSizeWithPackageIDs(self.packageIDs)
    self:CheckDownload(size, function()
        SubPackageUtil.DownloadPackage(self.data.type, self.data.subType, self.data.value)
    end)
end

function ScatteredDownloadBase:CheckDownload(size, confirmCallBack)
    DownloadMgr.CheckDownload(size, confirmCallBack)
end

---按钮回调
function ScatteredDownloadBase:OnClickDownload()
    if self.downloadState ~= PackageDownloadState.Downloading then
        self:DownloadPackage()
    end
end

function ScatteredDownloadBase:OnClickPause()
    if self.downloadState == PackageDownloadState.Downloading or self.downloadState == PackageDownloadState.Wait then
        SubPackageUtil.PausePackageByPackageID(self.subModuleID)
    end
end

function ScatteredDownloadBase:OnClickNormal()
    if self.downloadState == PackageDownloadState.Finished then
        if self.data.callback ~= nil then
            self.data.callback()
        end
    end
end

---继承实现
---UI初始化
function ScatteredDownloadBase:InitUI()

end

---刷新UI状态
---@param downloadState SubPackage.PackageDownloadState
function ScatteredDownloadBase:RefreshUI(downloadState)

end

---进度更新
function ScatteredDownloadBase:OnDownloading(processValue)

end

---下载失败
function ScatteredDownloadBase:OnFailed(processValue)

end

return ScatteredDownloadBase