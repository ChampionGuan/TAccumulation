---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by deling.
--- DateTime: 2023/9/5 11:53
---

---DownloadTask的组结构
---@class DownloadGroup
local DownloadGroup = class("DownloadGroup")

function DownloadGroup:ctor()
    self.subModuleStateList = {}
    self.packages = {}
end

---
function DownloadGroup:Init(taskIdArg, packages, isNowDownload, moduleID, downloadType)
    self.downloadType = downloadType
    self.packages = packages
    table.clear(self.subModuleStateList)
    if(downloadType == PackageDownloadType.Single) then
        self.subModuleStateList[taskIdArg] = nil
        DownloadMgr:AddDownloadTask(taskIdArg, packages, isNowDownload, moduleID, self)
    elseif(downloadType == PackageDownloadType.List) then
        for i = 1, #taskIdArg do
            --table.insert(self.subModuleStateList, taskIdArg[i])
            local taskId = taskIdArg[i]
            self.subModuleStateList[taskId] = PackageDownloadState.None

            --这里无需判断已下载状态，因为前置逻辑也依赖已下载状态
            --local downloaded = SubPackageUtil.GetFinishModelWithSubModuleID(self.subModuleDic[taskId])
            DownloadMgr:AddDownloadTask(taskId, packages[taskId], isNowDownload, moduleID, self)
        end
    end
end


function DownloadGroup:InitWithSingle(taskId, downloadType)
    self.downloadType = downloadType
    self.subModuleStateList[taskId] = PackageDownloadState.None
end

function DownloadGroup:OnFailedPackage(failedCount, downloadState, taskId, isNormalDownload)
    local showTips = false
    --Debug.LogError("self:GetDownloadStateByType() " , self:GetDownloadStateByType(), " taskId ", taskId)
    if(self.downloadType == PackageDownloadType.List and self:GetDownloadStateByType() == PackageDownloadState.Failed) then
        showTips = true
    elseif self.downloadType == PackageDownloadType.Single then
        showTips = true
    end
    if(showTips) then
        if UIMgr.IsOpened(UIConf.DownloadWnd) and downloadState == PackageDownloadState.Failed then
            if failedCount == 1 then
                UICommonUtil.ShowMessage(UITextConst.UI_TEXT_30854)
            else
                UICommonUtil.ShowMessage(UITextConst.UI_TEXT_30858)
            end
        elseif UIMgr.IsOpened(UIConf.SystemSettingWnd) and downloadState == PackageDownloadState.Failed then
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_37233)
        else
            UICommonUtil.ShowMessage(UITextConst.UI_TEXT_30860)
        end
        EventMgr.Dispatch("DownloadMgr_DownloadTask_DownloadFailed", taskId)
        DownloadMgr:UpdateErrorTask(taskId, true, isNormalDownload)
    end
end

---需要从moduleitem中逐步把逻辑移出来
---按下载类型处理
function DownloadGroup:GetDownloadStateByType()
    if self.downloadType == PackageDownloadType.List then
        local downloading = false
        local pause = false
        local failed = false
        local wait = false
        local hasDownload = false
        for taskId, _ in pairs(self.subModuleStateList) do
            local state = DownloadMgr:GetDownloadTaskState(taskId)
            self.subModuleStateList[taskId] = state
            if((not downloading) and state == PackageDownloadState.Downloading) then
                downloading = true
            elseif (not pause) and  state == PackageDownloadState.Pause then
                pause = true
            elseif (not failed) and state == PackageDownloadState.Failed then
                failed = true
            elseif (not wait) and state == PackageDownloadState.Wait then
                wait = true
            elseif state == PackageDownloadState.None then
                ---这里看看用资源状态记一个列表
                if((not hasDownload) and SubPackageUtil.GetFinishModelWithSubModuleID(self.packages[taskId])) then
                    hasDownload = true
                end
            end
        end

        if(downloading) then
            return PackageDownloadState.Downloading
        elseif wait then
            return PackageDownloadState.Wait
        elseif pause then
            return PackageDownloadState.Pause
        elseif hasDownload and not failed then
            return PackageDownloadState.Pause
        elseif failed then
            return PackageDownloadState.Failed
        end
        return PackageDownloadState.None
    end
end

function DownloadGroup:GetDownloadType()
    return self.downloadType
end

return DownloadGroup