---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/11/4 12:12
---
---@class SDKParam
local SDKParam = class("SDKParam")
local SDKDefine = require("Runtime.System.X3Game.Modules.SDK.SDKDefine")


---@class LoginInfo
---@field ret int 返回状态
---@field msg string  登录信息
---@field nid string 账号Id
---@field token string 账号token，会过期
---@field refresh_token string 刷新token接口参数，游客和第三方登录不要使用此参数刷新登录态
---@field isnew int 是否新注册 (0或1)
---@field roleid int 白名单id
---@field youth_msg SDKYouthInfo  防沉迷信息，如果异常情况下没返回此字段，可在防沉迷监听中获取

---@class SDKYouthInfo
---@field limitType SDKDefine.LimitType 返回状态
---@field is_guest int  是否游客账号
---@field hasrealinfo int 是否实名制用户
---@field is_holiday int 是否节假日
---@field onlinetoday int 当日累计在线时长。单位秒
---@field remaintoday int 当日剩余在线时长。单位秒
---@field loginbanbeg string 宵禁开始时间,宵禁中传，格式为yyyy-MM-dd HH:mm:ss
---@field loginbanend string 宵禁结束时间,宵禁中传，格式为yyyy-MM-dd HH:mm:ss
---@field authstatus SDKDefine.RealNameStatus 宵禁结束时间,宵禁中传，格式为yyyy-MM-dd HH:mm:ss
---@field ret int 获取防沉迷信息返回码
---@field msg string  获取防沉迷信息返回描述

---初始化
function SDKParam.InitParam()
    local param = {}
    param["clientId"] = ServerUrl.clientId
    param["clientKey"] = ServerUrl.clientKey
    param["apiUrl"] = ServerUrl.cmsUrl
    local sdkRegion = SDKParam.GetSDKRegion()
    if sdkRegion then
        param["region"] = tostring(sdkRegion)
    end
    local url = "papersdk://api/game/init"
    local paramStr = JsonUtil.Encode(param)
    return url, paramStr
end

---获取Region
function SDKParam.GetSDKRegion()
    local sdkRegion = nil
    local clientRegion = Locale.GetRegion()
    local formatString = "%s%s"
    local platformName = Application.IsIOSMobile() and SDKDefine.SDKRegion.PlatformName.IOS or SDKDefine.SDKRegion.PlatformName.Android
    if clientRegion == Locale.Region.ChinaMainland then
        return sdkRegion
    elseif clientRegion == Locale.Region.ChinaOther then
        sdkRegion = SDKDefine.SDKRegion[string.format(formatString, "ChinaOther", platformName)]
    elseif clientRegion == Locale.Region.EuropeAmericaAsia then
        sdkRegion = SDKDefine.SDKRegion[string.format(formatString, "EuropeAmericaAsia", platformName)]
    elseif clientRegion == Locale.Region.Japan then
        sdkRegion = SDKDefine.SDKRegion[string.format(formatString, "Japan", platformName)]
    elseif clientRegion == Locale.Region.SouthKorea then
        sdkRegion = SDKDefine.SDKRegion[string.format(formatString, "SouthKorea", platformName)]
    end
    return sdkRegion
end

---获取设备信息
function SDKParam.GetDeviceInfoParam()
    local url = "papersdk://api/tlog/getdeviceinfo"
    return url, nil
end

---登录
function SDKParam.LoginParam()
    --local param = {}
    --param["accountType"] = 3 --IOS另行处理
    local url = "papersdk://api/account/youth/login"
    --local paramStr = JsonUtil.Encode(param)
    return url, nil
end

---检测进入游戏验证
function SDKParam.CheckEnterGame(nid, token)
    local url = "papersdk://api/account/youth/checklogin"
    local param = {}
    param["nid"] = nid
    param["token"] = token
    local paramStr = JsonUtil.Encode(param)
    return url, paramStr
end
--防沉迷
function SDKParam.AntiAddictionParam()
    local url = "papersdk://api/account/antiaddiction"
    return url, nil
end

function SDKParam.SearchRealNameParam(nid, token)
    local param = {}
    param["nid"] = nid --账号Id
    param["token"] = token --账号token
    local paramStr = JsonUtil.Encode(param)
    local url = "papersdk://api/account/realnameinfo"
    return url, paramStr
end

--function SDKParam.RealNameParam(nid,token,realName,realID)
--    local param = {}
--    param["nid"] = nid --账号Id
--    param["token"] = token --账号token
--    param["realName"] = realName --姓名
--    param["realId"] = realID --身份证
--
--    local paramStr = JsonUtil.Encode(param)
--    local url = "papersdk://api/account/bind/realname"
--    return url,paramStr
--end

function SDKParam.ShowRealNameDialogParam()
    local url = "papersdk://api/account/bind/realname/ui"
    return url, nil
end

function SDKParam.ShowTouristBindDialogParam(bindSource)
    local param = {}
    param["source"] = bindSource --账号Id
    local paramStr = JsonUtil.Encode(param)
    local url = "papersdk://api/account/bind/guest/ui"
    return url, paramStr
end

--region 充值
---@param itemSkus table<string> 渠道消耗类商品ID集合，数组元素类型为string
---@param subsSkus table<string> 渠道订阅类商品ID集合，数组元素类型为string，Android不支持订阅类商品
function SDKParam.SearchProductInfoParam(itemSkus, subsSkus)
    local url = "papersdk://api/pay/productinfo"
    local param = PoolUtil.GetTable()
    param["itemSkus"] = itemSkus
    param["subsSkus"] = subsSkus
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

function SDKParam.BuyProductParam(nid, productId, productName, productDesc, money, channelProductId, currency)
    local serverId = GrpcMgr.GetMetaData("ZoneID")
    local param = PoolUtil.GetTable()
    param["openId"] = tostring(nid)  ---账号Id
    param["roleId"] = tostring(SelfProxyFactory.GetPlayerInfoProxy():GetUid()) --角色ID
    param["zoneId"] = tostring(serverId) ---角色所在大区id
    param["money"] = tostring(money) ---金额（单位元，可带小数）
    param["productId"] = tostring(productId) ---游戏商品Id
    param["productName"] = tostring(productName) ---商品名称
    param["productDesc"] = tostring(productDesc) ---商品描述
    param["serverId"] = tostring(serverId) ---服务器Id
    param["channelProductId"] = tostring(channelProductId) ---没有渠道商品id的话传productId，比如：叠纸官方Android； 其他按实际情况传值，比如： iOS（去苹果开发者后台配置的商品id）
    param["currency"] = currency
    param["payMethod"] = 1
    local region = Locale.GetRegion()
    if region == Locale.Region.Japan then
        param["age"] = BllMgr.GetChargeBLL():GetAge()
    end
    local extDetail = {}
    extDetail["type"] = "ali"
    param["extDetail"] = extDetail
    local url = "papersdk://api/pay/buy"
    local paramStr = JsonUtil.Encode(param)
    Debug.LogTable(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

function SDKParam.OrderCompleteParam(orderId, channelOrderId)
    local param = PoolUtil.GetTable()
    local url = "papersdk://api/pay/ordercomplete"
    param["orderId"] = orderId
    param["channelOrderId"] = channelOrderId
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

--endregion
function SDKParam.SubmitDataParam(type)
    local proxy = SelfProxyFactory.GetPlayerInfoProxy()
    local serverData = BllMgr.Get("LoginBLL"):GetSelectedServer()
    local param = {}
    param["dataType"] = type --上报类型，见上述数据上报类型
    param["roleId"] = proxy:GetUid() --角色ID
    param["roleName"] = proxy:GetName() --角色名称
    param["roleLevel"] = proxy:GetLevel() --角色等级
    local loginData = proxy:GetLoginData()
    if serverData then
        param["serverId"] = serverData.Id --角色所在服务器id
        param["serverName"] = serverData.Name --角色所在服务器名称
        param["zoneId"] = serverData.Id --角色所在大区id
        param["zoneName"] = serverData.Name --角色所在大区名称

        loginData:SetServerId(serverData.Id)
        loginData:SetServerName(serverData.Name)
        loginData:SetZoneId(serverData.Id)
        loginData:SetZoneName(serverData.Name)
    else
        param["serverId"] = loginData:GetServerId() --角色所在服务器id
        param["serverName"] = loginData:GetServerName() --角色所在服务器名称
        param["zoneId"] = loginData:GetZoneId() --角色所在大区id
        param["zoneName"] = loginData:GetZoneName() --角色所在大区名称
    end
    local url = "papersdk://api/account/submitdata"
    local paramStr = JsonUtil.Encode(param)
    return url, paramStr
end

function SDKParam.LogoutParam()
    local url = "papersdk://api/account/logout"
    return url, nil
end

function SDKParam.OpenLog()
    local url = "papersdk://api/debug/openlog"
    return url, nil
end

--region  自定义UI
function SDKParam.UIConfigParam()
    local url = string.concat(CS.UnityEngine.Application.persistentDataPath, "/SDKUITexture/")
    local suffix = "@3x.png"
    local param = {}
    param["backIcon"] = string.concat(url, "backIcon", suffix)                       --返回按钮的图片路径
    param["exitIcon"] = string.concat(url, "exitIcon", suffix)                        --退出按钮的图片路径
    param["phoneIcon"] = string.concat(url, "phoneIcon", suffix)                      --手机账号类型的图片路径
    param["emailIcon"] = string.concat(url, "emailIcon", suffix)                      --邮箱账号类型的图片路径
    param["guestIcon"] = string.concat(url, "guestIcon", suffix)                      --游客账号类型的图片路径
    param["otherPhoneIcon"] = string.concat(url, "otherPhoneIcon", suffix)            --其他手机图片路径
    param["passwordLoginIcon"] = string.concat(url, "passwordLoginIcon", suffix)      --密码登录图片路径
    param["messageLoginIcon"] = string.concat(url, "messageLoginIcon", suffix)        --短信登录图片路径
    param["enterGameIcon"] = string.concat(url, "enterGameIcon", suffix)              --进入游戏图片路径
    param["switchAccountIcon"] = string.concat(url, "switchAccountIcon", suffix)      --切换账号图片路径
    param["guestLoginIcon"] = string.concat(url, "guestLoginIcon", suffix)            --快速体验图片路径
    param["loginTipBackground"] = string.concat(url, "loginTipBackground.9", ".png")  --登录成功提示背景图片路径
    param["buttonBackground"] = string.concat(url, "buttonBackground", suffix)        --主按钮图片背景
    param["accountDeleteIcon"] = string.concat(url, "accountDeleteIcon", suffix)      --账号删除图片路径
    param["unclickableButtonBackground"] = string.concat(url, "unclickableButtonBackground", suffix)  --主按钮图片背景不可点击
    param["verifyCodeBackground"] = string.concat(url, "verifyCodeBackground", suffix) --获取验证码背景图片路径
    param["dialogBackground"] = string.concat(url, "dialogBackground.9", ".png")  --弹窗背景(除了登录成功提示)图片路径
    param["agreeIcon"] = string.concat(url, "agreeIcon", suffix)                      --勾选图片路径
    param["disagreeIcon"] = string.concat(url, "disagreeIcon", suffix)                --未勾选图片路径
    param["customerServiceIcon"] = string.concat(url, "customerServiceIcon", suffix)
    param["refreshIcon"] = string.concat(url, "refreshIcon", suffix)
    param["verifyCodeColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)       --验证码获取和倒计时文字颜色（十六进制）
    param["protocolColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5191)         --协议文字颜色 （十六进制）
    param["buttonColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)            --文字按钮颜色（十六进制）
    param["otherAccountColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)     --其他账号登录文字颜色（十六进制）
    param["registerColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)         --立即注册文字颜色 （十六进制）
    param["forgetPasswordColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)    --忘记密码文字颜色（十六进制）
    param["loginButtonColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5193)
    param["protocolCommonColor"] = UITextHelper.GetUIText(UITextConst.UI_TEXT_5189)
    if Locale.GetRegion() ~= Locale.Region.ChinaMainland then
        if Application.IsIOSMobile() then
            param["accountOrder"] = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.OVERSEALOGINIOSACCOUNTTYPE)
        else
            param["accountOrder"] = LuaCfgMgr.Get("SundryConfig", X3_CFG_CONST.OVERSEALOGINANDROIDACCOUNTTYPE)
        end
    end
    url = "papersdk://api/account/login/ui/config"
    local paramStr = JsonUtil.Encode(param)
    return url, paramStr
end

--endregion

---同意隐私协议
function SDKParam.UserAgreement(isAgree)
    local url = "papersdk://api/account/useragreement"
    local param = {}
    param.agreed = isAgree
    local paramStr = JsonUtil.Encode(param)
    return url, paramStr
end

---注冊登录态失效全局监听
function SDKParam.LoginInvalid()
    local url = "papersdk://api/account/login/invalid"
    return url, nil
end

---注册H5回调消息
function SDKParam.WebViewNotification()
    local url = "papersdk://view/webview/jsNotification"
    return url, nil
end
---注册网页关闭消息
function SDKParam.WebViewCloseNotification()
    local url = "papersdk://view/webview/closed"
    return url, nil
end

---获取验证码
---@param account string  手机号或者邮箱号
---@param type int  账号类型 1 为手机 2为邮箱
function SDKParam.AccountCode(account, type)
    local url = "papersdk://api/account/code"
    local param = PoolUtil.GetTable()
    param["account"] = account
    param["type"] = type
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---校验验证码
---@param account string  手机号或者邮箱号
---@param type int  账号类型 1 为手机 2为邮箱
---@param code int  验证码
function SDKParam.AccountVerifyCode(account, type, code)
    local url = "papersdk://api/account/verifycode"
    local param = PoolUtil.GetTable()
    param["account"] = account
    param["type"] = type
    param["code"] = code
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---获取cms配置信息
function SDKParam.GetConfig()
    local conf = {}
    conf.ClientID = m_ClientID
    conf.ClientKey = m_ClientKey
    conf.URL = m_ApiUrl
    return conf
end

---打开内嵌webView
---@param webUrl string  请求打开的web地址
---@param isLogin string  是否允许web获取登录信息  1允许获取，其它传参不允许
---@param pushStyle string  页面进入样式 1 从下到上(iOS 无动画效果) ，2从右到左，默认为从下到上
---@param extra string  游戏透传字段 jsonString  透传字段，SDK不做校验，web前端调用sdk提供的方法时会透传给web
function SDKParam.OpenWebView(webUrl, isLogin, pushStyle, extra)
    local url = "papersdk://view/webview"
    local param = PoolUtil.GetTable()
    param["url"] = webUrl
    param["isLogin"] = isLogin
    param["pushStyle"] = pushStyle
    param["extra"] = extra
    param["style"] = "view"
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

function SDKParam.HideWebView()
    local url = "papersdk://view/webview/hide"
    return url, nil
end

function SDKParam.ShowWebView()
    local url = "papersdk://view/webview/show"
    return url, nil
end

function SDKParam.SendMessageToWebView(jsonString)
    local url = "papersdk://view/webview/toJs"
    local param = PoolUtil.GetTable()
    param["args"] = jsonString
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---@param permissionType PlatformConst.PermissionType
---@return SDKDefine.PermissionType
local function GetSDKPermissionTypeConst(permissionType)
    if permissionType == PlatformConst.PermissionType.READ_CALENDAR then
        return SDKDefine.PermissionType.READ_CALENDAR
    elseif permissionType == PlatformConst.PermissionType.WRITE_CALENDAR then
        return SDKDefine.PermissionType.WRITE_CALENDAR
    elseif permissionType == PlatformConst.PermissionType.READ_CALL_LOG then
        return SDKDefine.PermissionType.READ_CALL_LOG
    elseif permissionType == PlatformConst.PermissionType.WRITE_CALL_LOG then
        return SDKDefine.PermissionType.WRITE_CALL_LOG
    elseif permissionType == PlatformConst.PermissionType.PROCESS_OUTGOING_CALS then
        return SDKDefine.PermissionType.PROCESS_OUTGOING_CALS
    elseif permissionType == PlatformConst.PermissionType.CAMERA then
        return SDKDefine.PermissionType.CAMERA
    elseif permissionType == PlatformConst.PermissionType.READ_CONTACTS then
        return SDKDefine.PermissionType.READ_CONTACTS
    elseif permissionType == PlatformConst.PermissionType.WRITE_CONTACTS then
        return SDKDefine.PermissionType.WRITE_CONTACTS
    elseif permissionType == PlatformConst.PermissionType.GET_ACCOUNTS then
        return SDKDefine.PermissionType.GET_ACCOUNTS
    elseif permissionType == PlatformConst.PermissionType.ACCESS_FINE_LOCATION then
        return SDKDefine.PermissionType.ACCESS_FINE_LOCATION
    elseif permissionType == PlatformConst.PermissionType.ACCESS_COARSE_LOCATION then
        return SDKDefine.PermissionType.ACCESS_COARSE_LOCATION
    elseif permissionType == PlatformConst.PermissionType.RECORD_AUDIO then
        return SDKDefine.PermissionType.RECORD_AUDIO
    elseif permissionType == PlatformConst.PermissionType.READ_PHONE_STATE then
        return SDKDefine.PermissionType.READ_PHONE_STATE
    elseif permissionType == PlatformConst.PermissionType.READ_PHONE_NUMBERS then
        return SDKDefine.PermissionType.READ_PHONE_NUMBERS
    elseif permissionType == PlatformConst.PermissionType.CALL_PHONE then
        return SDKDefine.PermissionType.CALL_PHONE
    elseif permissionType == PlatformConst.PermissionType.ANSWER_PHONE_CALLS then
        return SDKDefine.PermissionType.ANSWER_PHONE_CALLS
    elseif permissionType == PlatformConst.PermissionType.ADD_VOICEMAIL then
        return SDKDefine.PermissionType.ADD_VOICEMAIL
    elseif permissionType == PlatformConst.PermissionType.USE_SIP then
        return SDKDefine.PermissionType.USE_SIP
    elseif permissionType == PlatformConst.PermissionType.BODY_SENSORS then
        return SDKDefine.PermissionType.BODY_SENSORS
    elseif permissionType == PlatformConst.PermissionType.SEND_SMS then
        return SDKDefine.PermissionType.SEND_SMS
    elseif permissionType == PlatformConst.PermissionType.RECEIVE_SMS then
        return SDKDefine.PermissionType.RECEIVE_SMS
    elseif permissionType == PlatformConst.PermissionType.RECEIVE_WAP_PUSH then
        return SDKDefine.PermissionType.RECEIVE_WAP_PUSH
    elseif permissionType == PlatformConst.PermissionType.RECEIVE_MMS then
        return SDKDefine.PermissionType.RECEIVE_MMS
    elseif permissionType == PlatformConst.PermissionType.READ_EXTERNAL_STORAGE then
        return SDKDefine.PermissionType.WRITE_EXTERNAL_STORAGE
    elseif permissionType == PlatformConst.PermissionType.WRITE_EXTERNAL_STORAGE then
        return SDKDefine.PermissionType.WRITE_EXTERNAL_STORAGE
    elseif permissionType == PlatformConst.PermissionType.Notification then
        return SDKDefine.PermissionType.Notification
    elseif permissionType == PlatformConst.PermissionType.IOS_IDFA then
        return SDKDefine.PermissionType.IOS_IDFA
    elseif permissionType == PlatformConst.PermissionType.IOS_NETWORK_STATE then
        return SDKDefine.PermissionType.IOS_IDFA
    end
end

---ios和安卓不同
---@param permissionType PlatformConst.PermissionType
---@return string
local function GetPermissionConst(permissionType)
    permissionType = GetSDKPermissionTypeConst(permissionType)
    if not Application.IsIOSMobile() then
        return permissionType
    end
    if permissionType == SDKDefine.PermissionType.CAMERA then
        ---相机
        return SDKDefine.PermissionTypeIOS.CAMERA
    elseif permissionType == SDKDefine.PermissionType.Notification then
        ---通知
        return SDKDefine.PermissionTypeIOS.Notification
    elseif permissionType == SDKDefine.PermissionType.WRITE_EXTERNAL_STORAGE or permissionType == SDKDefine.PermissionType.READ_EXTERNAL_STORAGE then
        ---相册
        return SDKDefine.PermissionTypeIOS.ALBUM
    elseif permissionType == SDKDefine.PermissionType.RECORD_AUDIO then
        ---麦克风
        return SDKDefine.PermissionTypeIOS.Microphone
    elseif permissionType == SDKDefine.PermissionType.IOS_IDFA then
        ---IOS广告
        return SDKDefine.PermissionTypeIOS.IDFA
    elseif permissionType == SDKDefine.PermissionType.IOS_NETWORK_STATE then
        ---IOS网络状态
        return SDKDefine.PermissionType.IOS_NETWORK_STATE
    else
        Debug.LogError("ios无该权限", permissionType)
    end
end
---请求权限
---@param  permissionType  SDKDefine.PermissionType
function SDKParam.PermissionRequest(permissionType)
    local url = "papersdk://api/permission/request"
    local param = PoolUtil.GetTable()
    param["permission"] = GetPermissionConst(permissionType)
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end
---@param  permissionType  SDKDefine.PermissionType
function SDKParam.CheckPermission(permissionType)
    local url = "papersdk://api/permission/check"
    local param = PoolUtil.GetTable()
    param["permission"] = GetPermissionConst(permissionType)
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end


---@class DateComponents
---@field year string  触发年份，如2022
---@field month string  触发月份1-12
---@field day string  触发日期
---@field hour string 触发小时0-23，24小时制
---@field minute string 分钟0-59
---@field second string 秒0-59
---@field weekday string 传入参数1-7 ，注意1为星期日，2为星期一,3为星期二...

---注册本地通知
---@param title string  通知主标题
---@param subtitle string  本地通知副标题
---@param body string  本地通知内容
---@param timeInterval int  注册通知到通知触发的时间间隔(单位s) 该事件触发一次
---@param dateTime DateComponents  按特定时间重复触发
---@param extra  string  通知扩展内容 json字符串，用户点击通知时可通过该字段存储的信息做相关业务处理
---@param iconName  string  通知小图标（Android专用），图标要放在apk包体里，不能运行时动态下发
function SDKParam.RegisterNotification(title, subtitle, body, timeInterval, dateTime, extra, iconName)
    local url = "papersdk://api/notification/register"
    local param = PoolUtil.GetTable()
    param["title"] = title
    param["subtitle"] = subtitle
    param["body"] = body
    param["timeInterval"] = timeInterval
    param["dateTime"] = dateTime
    param["extra"] = extra
    param["iconName"] = iconName
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---通过id删除注册的本地通知
---@param removeIds string  通知ids 字符串类型，多个用逗号(,)隔开
function SDKParam.RemoveNotificationWithIds(removeIds)
    local url = "papersdk://api/notification/removeWithIds"
    local param = PoolUtil.GetTable()
    param["removeIds"] = removeIds
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---删除所有注册的本地通知
function SDKParam.RemoveAllNotification()
    local url = "papersdk://api/notification/removeAll"
    return url, nil
end

---打开用户上报面板
function SDKParam.OpenReportUI(typeList)
    local url = "papersdk://api/reportUI"
    local param = PoolUtil.GetTable()
    param["typeList"] = typeList
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

function SDKParam.GetOSSUpLoadParam(channelId, filePath, ext, category, fileName)
    local url = "papersdk://api/oss/upload"
    local param = PoolUtil.GetTable()
    param["channelid"] = channelId
    param["filepath"] = filePath
    param["ext"] = ext
    param["category"] = category
    param["filename"] = fileName
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---网络检测接口
function SDKParam.OpenReportUIV2(customerServiceLink)
    local url = "papersdk://api/reportUI/v2"
    local path = string.concat(CS.UnityEngine.Application.persistentDataPath, "/SDKUITexture/")
    local suffix = "@3x.png"
    local param = PoolUtil.GetTable()
    param.customerServiceLink = customerServiceLink
    param.customerServiceEmail = LuaCfgMgr.Get("URL", X3_CFG_CONST.CUSTOMERSERVICEEMAIL).URLJump
    param.basicCloseIcon = string.concat(path, "basicCloseIcon", suffix)
    param.basicBgIcon = string.concat(path, "basicBgIcon", suffix)
    param.basicProgressIcon = string.concat(path, "basicProgressIcon", suffix)
    param.basicBackIcon = string.concat(path, "basicBackIcon", suffix)
    param.checkButtonIcon = string.concat(path, "checkButtonIcon", suffix)
    param.checkingHeadTipIcon = string.concat(path, "checkingHeadTipIcon", suffix)
    param.checkingStateCheckIcon = string.concat(path, "checkingStateCheckIcon", suffix)
    param.checkingStateDoneIcon = string.concat(path, "checkingStateDoneIcon", suffix)
    param.checkingStateWrongIcon = string.concat(path, "checkingStateWrongIcon", suffix)
    param.checkingCopyIcon = string.concat(path, "checkingCopyIcon", suffix)
    param.checkingLoadingIcon = string.concat(path, "checkingLoadingIcon", suffix)
    param.diagnosisHeadIcon = string.concat(path, "diagnosisHeadIcon", suffix)
    param.basicTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5192)
    param.checkTipTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5194)
    param.checkButtonTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5193)
    param.checkingSuperTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5192)
    param.checkingSubTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5194)
    param.checkingQuestionTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)
    param.checkingLoadingTipColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5189)
    param.checkingHeadTipNumberColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)
    param.checkingCopyTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5193)
    param.diagnosisHeadTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5194)
    param.diagnosisTitleColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5189)
    param.diagnosisContentColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5194)
    param.checkingServiceColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)
    param.checkingHeadTipLineColor = UITextHelper.GetUIText(UITextConst.UI_TEXT_5190)
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---打开手机设置
function SDKParam.OpenSetting()
    local url = "papersdk://api/permission/opensettings"
    return url, nil
end

---分享
---@param type SDKDefine.ShareType 分享类型
---@param shareId int 分享Id，用于区分分享事件
---@param text string 纯文本时候的文本内容
---@param picturePath string 图片地址
---@param title string 分享标题
---@param description string 描述信息
---@param thumbImageUrl string 缩略图地址，图片大小不超过32KB
---@param webUrl string 链接地址
---@param superTopic string 微博超话。微博分享时，添加此字段就是超话分享， 不添加此字段就是普通分享。长度不能超过150
---@param superSection string 微博超话版块名.微博超话分享时可选字段。其它分享不需要
function SDKParam.Share(type, shareId, text, picturePath, title, description, thumbImageUrl, webUrl, superTopic, superSection, imageList)
    local url = "papersdk://api/share"
    local param = PoolUtil.GetTable()
    param["type"] = type
    param["shareId"] = shareId
    param["text"] = text
    param["picturePath"] = picturePath
    param["title"] = title
    param["description"] = description
    param["thumbImageUrl"] = thumbImageUrl
    param["webUrl"] = webUrl
    param["superTopic"] = superTopic
    param["superSection"] = superSection
    param["imageList"] = imageList
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end
---跳转关注界面
---@param type SDKDefine.FollowType 跳转类型，微博为1，B站为2
---@param bilibiliId string 官方账号空间id
---@param wbPage string 微博页
function SDKParam.Follow(type, bilibiliId, wbPage, weiboUid)
    local url = "papersdk://api/share/follow"
    local param = PoolUtil.GetTable()
    param["type"] = type
    param["bilibiliId"] = bilibiliId
    param["wbPage"] = wbPage
    param["weiboUid"] = weiboUid
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end
---唤醒第三方应用
---@param type SDKDefine.WakeUpType 跳转类型，微信为1，QQ为2，QQ群为3
---@param qqUin string QQ群号,当type为3,iOS端为必填参数
---@param qqKey string QQ官网生成的key,当type为3,Android端为必填参数
function SDKParam.WakeUp(type, qqUin, qqKey)
    local url = "papersdk://api/share/wakeup"
    local param = PoolUtil.GetTable()
    param["type"] = type
    param["qqUin"] = qqUin
    param["qqKey"] = qqKey
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end
---质量分析拼接接口
function SDKParam.TLogJoin(name, parameters)
    local url = "papersdk://api/tlog/join"
    local param = PoolUtil.GetTable()
    param["name"] = name
    param["parameters"] = parameters
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---质量分析纯API接口
function SDKParam.TLogSend(parameters)
    local url = "papersdk://api/tlog/send"
    local param = PoolUtil.GetTable()
    param["parameters"] = parameters
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---获取qos的参数
function SDKParam.GetQosLoginJoinParam(loginStage, updataStage, eventResult, packageSize, packageNum)
    local data = PoolUtil.GetTable()
    data.gameSvrId = 0
    data.eventId = 0
    data.clientColderVersion = tostring(CS.UnityEngine.Application.version)
    data.clientHotVersion = PlayerPrefs.GetString("resVersion", "")
    data.vopenId = ""
    data.roleName = ""
    data.vroleId = tostring(SelfProxyFactory.GetPlayerInfoProxy():GetUid())
    data.packageSize = packageSize or 0
    data.packageNumber = packageNum or 0
    data.loginState = loginStage or -1
    data.eventResult = eventResult ~= nil and tostring(eventResult) or "0"
    data.loginTime = 0
    data.eventValue6 = updataStage ~= nil and tostring(updataStage) or ""
    data.eventValue7 = ""
    data.eventValue8 = tostring(os.time() * 1000)
    data.eventValue9 = ""
    data.eventValue10 = ""
    local selectServer = BllMgr.GetLoginBLL():GetSelectedServer()
    if selectServer then
        data.gameSvrId = selectServer.Id
    end
    local nId = SDKMgr.GetNid()
    if nId ~= nil then
        data.vopenId = tostring(nId)
    end
    if CS.X3Game.GameMgr.GetQosEventId then
        data.eventId = CS.X3Game.GameMgr.GetQosEventId()
    end
    if CS.X3Game.GameMgr.GetQosTime then
        data.loginTime = CS.X3Game.GameMgr.GetQosTime()
    end
    local name = SelfProxyFactory.GetPlayerInfoProxy():GetName()
    if name then
        data.roleName = name
    end
    local paramStr = JsonUtil.Encode(data)
    return paramStr
end

---设置语言
---@param languageType string 语言（0跟随系统，1英语，2简体中文，3繁体中文，4韩语，5日语）
function SDKParam.Language()
    local url = "papersdk://api/game/language"
    local param = PoolUtil.GetTable()
    local sdkLangType = SDKParam.GetLanguageType()
    Debug.LogWithTag(GameConst.LogTag.SDKLog, "sdkLangType :", sdkLangType)
    param["languageType"] = sdkLangType
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

function SDKParam.GetLanguageType()
    local languageType = SDKDefine.LanguageType.None
    local curLanguage = Locale.GetLang()
    if curLanguage == Locale.Language.EN_US then
        languageType = SDKDefine.LanguageType.EN_US
    elseif curLanguage == Locale.Language.ZH_CN then
        languageType = SDKDefine.LanguageType.ZH_CN
    elseif curLanguage == Locale.Language.ZH_TW then
        languageType = SDKDefine.LanguageType.ZH_TW
    elseif curLanguage == Locale.Language.KO_KR then
        languageType = SDKDefine.LanguageType.KO_KR
    elseif curLanguage == Locale.Language.JA_JP then
        languageType = SDKDefine.LanguageType.JA_JP
    end
    return languageType
end

---初始化AiHelp
function SDKParam.InitAiHelpParam()
    local url = "papersdk://api/aiHelp/initAndStartMsgCountListener"
    local param = PoolUtil.GetTable()
    local userConfig = PoolUtil.GetTable()
    param["userConfig"] = userConfig
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    PoolUtil.ReleaseTable(userConfig)
    Debug.LogWithTag(GameConst.LogTag.SDKLog,"InitAiHelpParam:",paramStr)
    return url, paramStr
end

---更新AiHelp的用戶信息
function SDKParam.UpdateAiHelpUserInfoParam()
    local url = "papersdk://api/aiHelp/updateUserInfo"
    local param = PoolUtil.GetTable()
    local userConfig = PoolUtil.GetTable()
    local nid = SDKMgr.GetNid()
    local roleId = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    if nid ~= nil then
        userConfig.userId = string.concat(nid, "|", roleId)
    end
    userConfig.userName = SelfProxyFactory.GetPlayerInfoProxy():GetName()
    userConfig.serverId = GrpcMgr.GetMetaData("ZoneID")
    param["userConfig"] = userConfig
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    PoolUtil.ReleaseTable(userConfig)
    Debug.LogWithTag(GameConst.LogTag.SDKLog,"UpdateAiHelpUserInfoParam:",paramStr)
    return url, paramStr
end

--- 打开AiHelp功能页面
---https://developer.papegames.com/docs/sdk/sdk_aihelp
function SDKParam.OpenAiHelpUIParam()
    local url = "papersdk://api/aiHelp/openUI"
    local param = PoolUtil.GetTable()
    param["aiHelpType"] = SDKDefine.AiHelpType.Customer
    local conversationConfig = PoolUtil.GetTable()
    conversationConfig.conversationIntent = 1
    conversationConfig.welcomeMessage = UITextHelper.GetUIText(UITextConst.UI_TEXT_36007)
    conversationConfig.alwaysShowHumanSupportButtonInBotPage = true
    param["conversationConfig"] = conversationConfig
    local fAQConfig = PoolUtil.GetTable()
    fAQConfig.fAQSectionType = 1
    param["fAQConfig"] = fAQConfig
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    PoolUtil.ReleaseTable(conversationConfig)
    PoolUtil.ReleaseTable(fAQConfig)
    return url, paramStr
end

function SDKParam.GetTrackParam(eventName, eventValue, eventType)
    local url = "papersdk://api/track"
    local param = PoolUtil.GetTable()
    param["eventName"] = eventName
    param["eventValue"] = JsonUtil.Encode(eventValue)
    param["eventType"] = eventType
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

---@param needRunInBackground bool 是否开启保护(iOS专用)
---@param title string 下载完成通知标题
---@param body  string    下载完成通知内容
---@param downloadingTitle string 下载中通知标题(Android专用)
---@param downloadingBody  string 下载中通知内容(Android专用)
function SDKParam.GetKeepLiveParam(needRunInBackground, title, body, downloadingTitle, downloadingBody)
    local url = "papersdk://api/download/keepAlive"
    local param = PoolUtil.GetTable()
    param["needRunInBackground"] = needRunInBackground
    param["title"] = title
    param["body"] = body
    param["downloadingTitle"] = downloadingTitle
    param["downloadingBody"] = downloadingBody
    local paramStr = JsonUtil.Encode(param)
    PoolUtil.ReleaseTable(param)
    return url, paramStr
end

function SDKParam.GetExitParam()
    local url = "papersdk://api/game/exit"
    return url, nil
end

function SDKParam.GetAppUpdateParam()
    local url = "papersdk://api/game/app/update"
    return url, nil
end

return SDKParam
