---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by kan.
--- DateTime: 2022/3/26 10:54
---

local LocalPhotoDB = {}


local FieldType = X3DataConst.X3DataField.PhotoData
local DataType = X3DataConst.X3Data.PhotoData

---上传云端后，将本地状态置掉
local UploadStateEnum = {
    --Default = -1,
    Local = 0,  ---- 上传状态应只分0和1，此枚举用于本地备份，故只为0
    HasUpload = 999 ---此状态为已上传，留在本地的文件状态
}

---8.11by dl 我再也不想看数字索引了，整个枚举不行么
--local colNameEnum = {
--    Name = "Name", --照片名
--    Mode = "Mode", --模式
--    MaleID = "MaleID", --所属男主ID 没有为-1
--    FemaleID = "FemaleID", --所属女主ID 没有为-1
--    PictureNum = "PictureNum", --照片张数 单张照片1, 大头贴拼图为4
--    NumOfPeople = "NumOfPeople", --人数 单人 1 双人 2 其他 4
--    UploadState = "UploadState", --是否上传 --上传状态 UploadStateEnum
--    ParentID = "ParentID", --如果为头像则此字段为ID
--    PlayerID = "PlayerID", --所属账户
--    TimeStamp = "TimeStamp", --保存时间戳
--    ActionString = "ActionString", --照片使用的动作列表 --- 是_链接的string
--    DressString = "DressString", --照片使用的饰品列表
--    ServerPhotoName = "ServerPhotoName"           ----上传云端后，本地照片不应该删除，
--}

local isInit = false

---初始化数据库
function LocalPhotoDB.Init()
    isInit = true
end

function LocalPhotoDB.CheckInit()
    if (not isInit) then
        Debug.LogWarning("No Init Local Photo DB!")
        LocalPhotoDB.Init()
        return
    end
end

function LocalPhotoDB.GetID(name)
    LocalPhotoDB.CheckInit();
    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()

    local condition = {
        [FieldType.Name] = name,
        [FieldType.PlayerID] = playerID,
    }
    local data = X3DataMgr.GetByCondition(DataType, condition)

    ---名称是唯一的
    if(data) then
        return name
    else
        return -1
    end
end

---新增本地相册
---@param name string 照片名
---@param mode int 模式
---@param maleID int 所属男主ID
---@param femaleID int 所属男主ID
---@param pictureNum int 照片张数   1为单张 2为拼图
---@param numOfPeople int 照片人数  1为单人照 2为合照
---@param parentID int 头像所属的照片ID
---@param actionString string 动作拼接string
---@param decorationString string 拼接string
---@param md5String string 照片文件的md5String
--function LocalPhotoDB.AddPhoto(name, mode, maleID, femaleID, pictureNum, numOfPeople, parentID, actionString, decorationString, md5String)
function LocalPhotoDB.AddPhoto(baseData)
    LocalPhotoDB.CheckInit();

    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
    local serverTime = GrpcMgr.GetServerTime().Ticks
    local parentID = baseData.parentID or 0

    local source = {
        Name = baseData.name,
        Mode = baseData.mode,
        MaleID = baseData.maleID,
        FemaleID = baseData.femaleID,
        PictureNum = baseData.pictureNum,
        NumOfPeople = baseData.numOfPeople,
        UploadState = UploadStateEnum.Local,
        ParentID = parentID,
        PlayerID = playerID,
        TimeStamp = serverTime,
        ActionString = baseData.actionString,
        DressString = baseData.decorationString,
        ServerPhotoName = "0",
        Md5String = baseData.md5String
    }
    ---@type X3Data.PhotoData
    local data = X3DataMgr.AddByPrimary(DataType, source, baseData.name)
    return data
end
---
---@param updateState int 状态，已上传但保留本地的为999
function LocalPhotoDB.SelectPhoto(mode, roleID, numOfPeople, updateState)
    LocalPhotoDB.CheckInit();

    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()

    local condition = {
    }
    if mode ~= -1 then
        condition[FieldType.Mode] = mode
    end
    if roleID ~= -1 then
        if(roleID == 0) then
            condition[FieldType.FemaleID] = roleID
        else
            condition[FieldType.MaleID] = roleID
        end
    end

    if numOfPeople ~= GameConst.PhotoMode.All then
        condition[FieldType.NumOfPeople] = numOfPeople
    end
    --if updateState ~= -1 then
    --    condition[FieldType.UploadState] = updateState
    --end
    condition[FieldType.PlayerID] = playerID
    condition[FieldType.UploadState] = UploadStateEnum.Local
    local resultList = PoolUtil.GetTable()
    X3DataMgr.GetAll(DataType, resultList, function(data)
        local result = LocalPhotoDB.CheckPhotoDataValue(data, condition)
        return result and true or false
    end, function(a, b)
        return a:GetTimeStamp() > b:GetTimeStamp()
    end)

    local result = {}
    for i = 1, #resultList do
        ---@type X3Data.PhotoData
        local data = resultList[i]
        local roleId = data:GetNumOfPeople() == GameConst.PhotoMode.Double and data:GetMaleID() or (data:GetMaleID() ~= -1 and data:GetMaleID() or data:GetFemaleID())
        table.insert(result, LocalPhotoDB.GetDataStruct(data:GetPrimaryValue(), data:GetPrimaryValue(), UploadStateEnum.Local, data:GetTimeStamp(),
        0, data:GetMode(), roleId, data:GetNumOfPeople() == GameConst.PhotoMode.Double, data:GetPictureNum()))
    end

    PoolUtil.ReleaseTable(resultList)
    return result
end

---@param data X3Data.PhotoData
function LocalPhotoDB.CheckPhotoDataValue(data, conditionTable)

    if(data and conditionTable) then
        local result = true
        for index, value in pairs(conditionTable) do
            if(index == FieldType.Mode) then
                result = data:GetMode() == value
            elseif index == FieldType.FemaleID then
                result = data:GetFemaleID() == value
            elseif index == FieldType.MaleID then
                result = data:GetMaleID() == value
            elseif index == FieldType.NumOfPeople then
                result = data:GetNumOfPeople() == value
            elseif index == FieldType.PlayerID then
                result = data:GetPlayerID() == value
            elseif index == FieldType.UploadState then
                result = data:GetUploadState() == value
            end

            if(not result) then
                return result
            end
        end
        return result
    else
        Debug.LogError("CheckPhotoDataValue error ", data)
    end
end

--function LocalPhotoDB.SelectPhotoByName(id)
--    LocalPhotoDB.CheckInit();
--
--    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()
--
--    --local str = string.format("SELECT * FROM %s  WHERE ", getTableName())
--    --str = string.format(" %s ID = %s AND ", str, id)
--    --str = string.format(" %s %s = %s ", str, colNameEnum.PlayerID, playerID)
--    --
--    --local mDataTable = DBMgr:QueryTable(str)
--    local condition = {
--        [FieldType.Name] = name,
--        [FieldType.PlayerID] = playerID,
--    }
--    local data = X3DataMgr.GetByCondition(FieldType, condition)
--
--    return LocalPhotoDB.GetDataStructByDataTable(mDataTable)
--end

function LocalPhotoDB.SelectPhotoByName(photoName)
    LocalPhotoDB.CheckInit();

    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()

    local condition = {
        [FieldType.Name] = photoName,
        [FieldType.PlayerID] = playerID,
    }
    local data = X3DataMgr.GetByCondition(DataType, condition)
    if(not data) then
        Debug.LogWarning("SelectPhotoByName ERROR ", photoName)
        return nil
    end

    return LocalPhotoDB.GetDataStructByDataTable(data)
end

---获取云端图片名对应的x3data数据--常规业务请使用SelectPhotoByServerName
---@return X3Data.PhotoData
function LocalPhotoDB.GetX3DataByServerName(serverName)
    serverName = UrlImgMgr.GetFileNameWithPath(serverName)
    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()

    local condition = {
        [FieldType.ServerPhotoName] = serverName,
        [FieldType.PlayerID] = playerID,
    }
    local data = X3DataMgr.GetByCondition(DataType, condition)
    if(not data) then
        Debug.LogWarning("SelectPhotoByServerName ERROR ", serverName)
    end
    return data
end

---获取与云端关联的本地数据
function LocalPhotoDB.SelectPhotoByServerName(serverName)
    LocalPhotoDB.CheckInit();

    local data = LocalPhotoDB.GetX3DataByServerName(serverName)
    return LocalPhotoDB.GetDataStructByDataTable(data)
end

function LocalPhotoDB.GetDataStructByDataTable(mDataTable)
    LocalPhotoDB.CheckInit();
    ---@type X3Data.PhotoData
    local data = mDataTable
    if(data) then
        local result = {Name = data:GetPrimaryValue(), modeID = data:GetMode(), MaleID = data:GetMaleID(), FemaleID = data:GetFemaleID(),
                        Num = data:GetPictureNum(), NoP = data:GetNumOfPeople(),
                        Time = data:GetTimeStamp(), ActionString = data:GetActionString(), DressString = data:GetDressString(), Md5String = data:GetMd5String()}

        return result
    else
        Debug.LogError("GetDataStructByDataTable ERROR")
    end
end

---获取照片本地结构 ---这个函数猛猛有问题，早点统一吧
---@param id int ID
---@param name string 照片名
---@param state int 照片状态
---@param time int 保存时间戳
---@param source int 本地为0，远端为1
---@param mode int 模式枚举
---@param roleId int
---@param isGroup bool 是否为双人
---@param picNum int 人数（临时苟下）
---@param fullUrl string 完整Url路径
---@return table 照片结构
function LocalPhotoDB.GetDataStruct(id, name, state, time, source, mode, roleId, isGroup, picNum, fullUrl)
    local struct = {}
    struct.ID = id
    struct.Name = name
    struct.State = state
    struct.Time = time
    struct.Source = source
    struct.Mode = mode
    struct.RoleId = roleId
    struct.IsGroup = isGroup
    if(picNum) then
        struct.picNum = picNum
    end
    if fullUrl then
        struct.FullUrl = fullUrl
    end
    return struct
end

function LocalPhotoDB.GetLocalPhotoCount()
    LocalPhotoDB.CheckInit();

    local playerID = SelfProxyFactory.GetPlayerInfoProxy():GetUid()

    --local str = string.format(" SELECT COUNT(*) FROM  %s  WHERE ", getTableName())
    --str = string.format(" %s %s = %s ", str, colNameEnum.PlayerID, playerID)
    --local result = DBMgr:ExecuteScalar(str)
    --local condition = {
    --    [FieldType.ServerPhotoName] = serverName,
    --    [FieldType.PlayerID] = playerID,
    --}
    local result = X3DataMgr.Count(DataType, function(data)
        return data:GetPlayerID() == playerID
    end)

    if result == nil then
        return -1
    end
    return tonumber(result)
end

---上传时建立绑定关系，但是服务器可能会秒拒，导致服务器数据中并没有这个关系，所以这里不能真正设置回包后的状态，只是先建立数据上的关系（proto上应该加下本地名字的）
function LocalPhotoDB.BindingServerName(localName, serverFileName)
    serverFileName = UrlImgMgr.GetFileNameWithPath(serverFileName)
    ---@type X3Data.PhotoData
    local data = X3DataMgr.Get(DataType, localName)
    if(data) then
        data:SetServerPhotoName(serverFileName)
    end
end

---设置上传状态 -
---@return X3Data.PhotoData
function LocalPhotoDB.SetUpdateFlag(id, serverFileName, toServer)
    LocalPhotoDB.CheckInit();

    local photoID = id or -1
    local state = toServer and UploadStateEnum.HasUpload or UploadStateEnum.Local
    ---需要设置本地照片与云端文件的关联关系 ---不要清除，还有用
    local resultName = toServer and serverFileName or "0"
    ---@type X3Data.PhotoData
    local data = nil
    if photoID ~= -1 then
        local condition = {
            [FieldType.Name] = photoID,
        }
        data = X3DataMgr.GetByCondition(DataType, condition)
    else
        local condition = {
            [FieldType.ServerPhotoName] = serverFileName,
        }
        data = X3DataMgr.GetByCondition(DataType, condition)
    end
    if(data) then
        if (toServer) then
            data:SetServerPhotoName(UrlImgMgr.GetFileNameWithPath(serverFileName))
            data:SetFullUrl(serverFileName)
        end
        data:SetUploadState(state)
        return data
    else
        Debug.LogWarning("SetUpdateFlag data ERROR ", resultName, " serverFileName ", serverFileName)
    end
end

---
function LocalPhotoDB.CheckAddCloudData(serverDataList)
    if((not serverDataList)) then
        return false
    end

    local condition = {
    }
    condition[FieldType.UploadState] = UploadStateEnum.HasUpload
    local resultList = PoolUtil.GetTable()
    X3DataMgr.GetAll(DataType, resultList, function(data)
        local result = LocalPhotoDB.CheckPhotoDataValue(data, condition)
        return result and true or false
    end, function(a, b)
        return a:GetTimeStamp() > b:GetTimeStamp()
    end)
    --Debug.LogError("resultList ", #resultList)
    --查询本地已上传的云端照片
    local checkList = {}
    for i = 1, #resultList do
        ---@type X3Data.PhotoData
        local data = resultList[i]
        local serverName = UrlImgMgr.GetFileNameWithPath(data:GetServerPhotoName())
        checkList[serverName] = true;
    end
    --Debug.LogError("checkList ", #checkList)
    --Debug.LogErrorTable(checkList)
    for _, data in pairs(serverDataList) do
        --Debug.LogError(" —— ", _)
        --Debug.LogErrorTable(data)
        local serverFileName = UrlImgMgr.GetFileNameWithPath(data.Url)
        if(not checkList[serverFileName]) then
            local x3Data = BllMgr.GetPhotoSystemBLL():GetX3DataDataWithServerData(data)
            X3DataMgr.AddByPrimary(DataType, x3Data, serverFileName)
            --Debug.LogError(" 检查出需要新增本地的： ", data.Url)
        end
    end

    PoolUtil.ReleaseTable(resultList)
end

---删除本地ID
---@param id int 照片ID
function LocalPhotoDB.DelPhoto(id, serverFileName)
    --Debug.LogError("LocalPhotoDB.DelPhotoByName ", id)
    LocalPhotoDB.CheckInit();

    --local str = string.format("DELETE FROM %s", getTableName())
    --str = string.format(" %s WHERE ID = %s", str, id)
    --DBMgr:ExecuteSql(str)

    if(not id) then
        local data = LocalPhotoDB.GetX3DataByServerName(serverFileName)
        if(data) then
            id = data:GetPrimaryValue()
        end
    end

    local result = X3DataMgr.Remove(DataType, id)
    if(not result) then
        Debug.LogError("DelPhoto ERROR ", id)
    end
end

---删除本地ID
---@param imgName string 照片ID
function LocalPhotoDB.DelPhotoByName(imgName)
    --Debug.LogError("LocalPhotoDB.DelPhotoByName ", imgName)
    LocalPhotoDB.CheckInit();

    --local str = string.format("DELETE FROM %s", getTableName())
    --str = string.format(" %s WHERE %s = '%s'", str, colNameEnum.Name, imgName)
    --DBMgr:ExecuteSql(str)
    local result = X3DataMgr.Remove(DataType, imgName)
    if(not result) then
        Debug.LogError("DelPhotoByName ERROR ", imgName)
    end
end

---拍照埋点使用
--function LocalPhotoDB.FormatTableToString(tb)
--    local fullString = nil
--    if (tb and #tb > 0) then
--        for i = 1, #tb do
--            local v = tb[i]
--            if (type(v) == "string") then
--                if (not fullString) then
--                    fullString = v
--                else
--                    fullString = string.concat(fullString, "_", v)
--                end
--            end
--        end
--    end
--    return fullString or "0"  ---写入sql时不能为空字符串
--end

return LocalPhotoDB