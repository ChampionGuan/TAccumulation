---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by muchen.
--- DateTime: 2022/11/30 17:29
---@class RebootState
local BaseGameState = require("Runtime.System.X3Game.Modules.GameStateMgr.BaseGameState")
local RebootState = class("RebootState", BaseGameState)

function RebootState:ctor()
	BaseGameState.ctor(self)
	---
	self.rebootFinishState = nil
end

---@param prevStateName string
---@param isForceReboot boolean 是否强制重启
---@param finishState string 重启完进入的State
function RebootState:OnEnter(prevStateName, isForceReboot , finishState)
	RebootState.super.OnEnter(RebootState)
	---是否强制卸载lua
	if Const.ForceReboot == true then
		isForceReboot = true
	end
	---设置清理黑名单
	UIMgr.SetWhiteListWhenCloseSysPanels({UIConf.LoadingWnd})

	local xluaUtil = require("Runtime.Common.BuildIn.xlua.util")
	CS.PapeGames.X3.CoroutineProxy.Instance:StartCoroutine(
		xluaUtil.cs_generator(function()
			coroutine.yield(nil)
			
			CS.PapeGames.X3UI.MotionMgr.Clear()
			GameHelper.SetGlobalTouchEnable(false)
			CS.PapeGames.CutScene.CutSceneCtrl.DestroyContext()
			---清除字符串缓存
			CS.TMPro.TMP_SpriteUtility.Clear()
			Res.Unload(CS.PapeGames.CutScene.CutSceneUI.RecallPrefab)
			CS.UnityEngine.Resources.UnloadUnusedAssets()
			---防止CTS创建出来的资源被清理
			local ctsGameObjectList = CutSceneMgr.GetCTSInsPool()
			if ctsGameObjectList ~= nil then
				for i = 0, ctsGameObjectList.Count - 1 do
					local gameObj = ctsGameObjectList[i]
					if gameObj ~= nil and not GameObjectUtil.IsNull(gameObj) then
						GameObjectUtil.DontDestroyOnLoad(gameObj)
					end
				end
			end
			Res.LoadScene("Empty")
			print("RebootState:OnEnter")

			if not isForceReboot then
				---logout 清理所有全局变量
				GameMgr.ClearAllGlobalLua()
			else
				---patch Destroy所有全局变量
				GameMgr.DestroyAllGlobalLua()
			end
			---延缓一帧, 等待界面关闭
			coroutine.yield(nil)
			---这里往下不要调用lua任何全局变量, 防止重新lazy访问全局变量Init
			---设置游戏重启状态
			CS.X3Game.GameMgr.SetGameReboot(true)
			START_STATE = finishState
			GAME_FORCE_REBOOT = isForceReboot
			GAME_FIRST_START = false
			CS.X3Game.GameMgr.Reboot(isForceReboot)
		end))
end
---@param enable bool 是否显示loading
---@param gameState string GameState如果是login不起loading
function RebootState:SetLoadingEnable(enable,gameState)
    if gameState ~= GameState.Login then
        UICommonUtil.SetLoadingEnable(GameConst.LoadingType.Common, enable)
    end
end

function RebootState:OnExit(nextStateName)
	RebootState.super.OnExit(RebootState)
	
end

return RebootState
