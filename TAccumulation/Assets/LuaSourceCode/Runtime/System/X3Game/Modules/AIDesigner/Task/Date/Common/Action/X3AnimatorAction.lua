---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2021/6/23 10:45
---

local AIAction = require("Runtime.Plugins.AIDesigner.Base.AITask").AIAction

---Category:Date/Common
---@class X3AnimatorAction:AIAction
---@field useComAnimState Boolean 使用通用表演库
---@field useComDefaultParam Boolean 使用表演库默认配置
---@field stateName string 状态名
---@field stateType int 动作状态类型 0=AnimationClip，1=ProceduralAnimationClip，2=CTS
---@field assetPath string 资源路径
---@field crossFadeTime float CrossFade时间
---@field directorWrapMode int 0=Hold,1=Loop,2=None
---@field setDefault Boolean 设置成默认状态
---@field inheritTransform Boolean 继承角色POS的形式调用X3Animator播放动画状态
local X3AnimatorAction = class("X3AnimatorAction", AIAction)

local DirectorWrapType = CS.UnityEngine.Playables.DirectorWrapMode

function X3AnimatorAction:OnEnter()
    ---@type X3Animator
    self.x3Animator = self:GetAnimator()
    ---@type boolean 播放完毕
    self.playCpl = false
    ---@type fun X3Animator播放完成回调
    self.stateCplHandler = handler(self, self.PlayCpl)
    ---@type fun X3Animator结束回调，有时候会被别的动作顶掉
    self.stateFinishHandler = handler(self, self.FinishCpl)
    if self.x3Animator then
        local directorWrapMode = DirectorWrapType.__CastFrom(self.directorWrapMode)
        if self.useComAnimState then
            self.x3Animator.DataProviderEnabled = true
            self.x3Animator:AddState(self.stateName, "")
            self.x3Animator.DataProviderEnabled = false
        else
            local assetPath = self.assetPath
            if self.stateType == DialogueEnum.AnimStateType.CutScene then
                assetPath = CS.PapeGames.CutScene.CutSceneCollector.GetPath(self.assetPath)
            end
            local asset = Res.LoadWithAssetPath(assetPath, AutoReleaseMode.EndOfFrame)
            if self.stateType == DialogueEnum.AnimStateType.AnimationClip then
                self.x3Animator:AddState(self.stateName, asset)
            elseif self.stateType == DialogueEnum.AnimStateType.ProceduralAnimationClip then
                self.x3Animator:AddState(self.stateName, asset)
            elseif self.stateType == DialogueEnum.AnimStateType.CutScene then
                self.x3Animator:AddState(self.stateName, asset, self.inheritTransform)
            end
        end
        self.x3Animator:AddStateCompleteListener(self.stateCplHandler)
        self.x3Animator:AddStateFinishListener(self.stateFinishHandler)

        if self.useComAnimState and self.useComDefaultParam then
            self.x3Animator:Crossfade(self.stateName)
        else
            self.x3Animator:Crossfade(self.stateName, self.crossFadeTime, directorWrapMode)
            if self.setDefault then
                self.x3Animator:SetDefaultState(self.stateName)
            end
        end
    end
end

---@return AITaskState
function X3AnimatorAction:OnUpdate()
    if self.x3Animator then
        if self.playCpl then
            return AITaskState.Success
        else
            return AITaskState.Running
        end
    else
        return AITaskState.Failure
    end
end

---@param stateName string
function X3AnimatorAction:PlayCpl(stateName)
    if self.stateName == stateName then
        self.x3Animator:RemoveStateCompleteListener(self.stateCplHandler)
        self.x3Animator:RemoveStateFinishListener(self.stateFinishHandler)
        self.playCpl = true
    end
end

---@param stateName string
function X3AnimatorAction:FinishCpl(stateName)
    if self.stateName == stateName then
        self.x3Animator:RemoveStateCompleteListener(self.stateCplHandler)
        self.x3Animator:RemoveStateFinishListener(self.stateFinishHandler)
        self.playCpl = true
    end
end

---@return X3Animator
function X3AnimatorAction:GetAnimator()
    local x3Animator = nil
    local variableActor = self.tree:GetVariable("Avatar")
    if variableActor ~= nil then
        x3Animator = variableActor:GetComponent("X3Animator")
        if x3Animator == nil then
            x3Animator = variableActor:AddComponent("X3Animator")
        end
    end
    return x3Animator
end

---
function X3AnimatorAction:OnDestroy()
    if GameObjectUtil.IsNull(self.x3Animator) == false then
        self.x3Animator:RemoveStateFinishListener(self.stateFinishHandler)
        self.x3Animator:RemoveStateCompleteListener(self.stateCplHandler)
    end
end

return X3AnimatorAction