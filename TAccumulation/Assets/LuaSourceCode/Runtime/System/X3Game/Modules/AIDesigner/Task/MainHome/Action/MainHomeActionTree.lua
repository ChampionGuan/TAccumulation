---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/3/1 20:13
---@type MainHome.MainHomeConst
local MainHomeConst = require("Runtime.System.X3Game.Modules.MainHome.Data.MainHomeConst")
local AIAction = require("Runtime.System.X3Game.Modules.AIDesigner.Task.MainHome.Action.MainHomeBaseAIAction")
---管理主界面交互
---Category:MainHome
---@class MainHomeActionTree:MainHomeBaseAIAction
local MainHomeActionTree = class("MainHomeActionTree", AIAction)
function MainHomeActionTree:OnAwake()
    AIAction.OnAwake(self)
    ---@type table<string,AITree>
    self.treeMap = {}
    self.treeNameMap = {}
    self.runningTreeList = {}
    self.breakList = nil
    self.dialogueRunningMap = {}
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_AI_SET_ACTION_TREE_RUNNING, self.OnEventSetActionTreeRunning, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_AI_SET_ACTION_RUNNING, self.OnEventSetActionRunning, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_AI_PLAY_ACTION_DIALOGUE, self.OnEventPlayDialogue, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_DIALOGUE_END, self.OnEventDialogueEnd, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_AI_SET_WAITING_SHOW, self.OnEventWaitingAction, self)
    EventMgr.AddListener(MainHomeConst.Event.MAIN_HOME_FORCE_FINISH_ACTION, self.OnEventForceFinishAction, self)
end

---@param actionId int
---@param isCreate boolean
---@return AITree
function MainHomeActionTree:GetTree(actionId, isCreate)
    local tree = self.runningTreeList[actionId]
    if not tree and isCreate then
        local ai = self.actionDataProxy:GetAI(actionId)
        local treeList = self.treeMap[ai]
        if table.isnilorempty(treeList) then
            tree = AIMgr.CreateTree(MainHomeConst.DEFAULT_ACTION_AI, nil, true)
            local preTreeName, breakTree, postTreeName = self.actionDataProxy:GetActionTreeName(actionId)
            if not string.isnilorempty(preTreeName) then
                tree:SetVariable("preTreeName", self:GetTreeName(preTreeName))
                tree:SetVariable("breakTree", self:GetTreeName(breakTree))
                tree:SetVariable("postTreeName", self:GetTreeName(postTreeName))
            end
            tree:AddVariable("DialogueController", AIVarType.Object, self.bll:GetDialogueCtrl())
        else
            tree = table.remove(treeList)
        end
        self:CopyTreeValue(tree, actionId)
    end
    return tree
end

---需要重新拼接
---@param treeName string
function MainHomeActionTree:GetTreeName(treeName)
    if not self.treeNameMap[treeName] then
        treeName = string.concat(MainHomeConst.AI_ACTION_TREE_DIR, treeName)
        self.treeNameMap[treeName] = treeName
    end
    return treeName
end

function MainHomeActionTree:OnUpdate()
    local state = AITaskState.Success
    for k, v in pairs(self.runningTreeList) do
        v:Tick()
        state = AITaskState.Running
    end
    return state
end

function MainHomeActionTree:SetIsActionTreeRunning(actionId, isRunning)
    if isRunning then
        self:Begin(actionId)
    else
        self:End(actionId)
    end
end

---设置树参数
---@param tree AITree
---@param actionId int
function MainHomeActionTree:CopyTreeValue(tree, actionId)
    tree:SetVariable("actionId", actionId)
    tree:SetVariable("isRunning", true)
    ---@type AIArrayVar
    local treeBreakList = tree:GetVariables()["breakList"]
    local breakList = self.breakList
    self.breakList = nil
    if treeBreakList then
        treeBreakList:Clear()
    end
    if breakList then
        for k, v in pairs(breakList) do
            treeBreakList:AddChildValue(v)
        end
        PoolUtil.ReleaseTable(breakList)
    end
end

---执行action
---@param actionId int
function MainHomeActionTree:Begin(actionId)
    if not self.runningTreeList[actionId] then
        local tree = self:GetTree(actionId, true)
        self.runningTreeList[actionId] = tree
        self:SetTreeEnable(tree, true)
        tree:ForceTick()
    end
end

---结束action
---@param actionId int
function MainHomeActionTree:End(actionId)
    local tree = self:GetTree(actionId)
    if tree then
        self.runningTreeList[actionId] = nil
        self:SetTreeEnable(tree, false)
        local ai = self.actionDataProxy:GetAI(actionId)
        local list = self.treeMap[ai]
        if not list then
            list = PoolUtil.GetTable()
            self.treeMap[ai] = list
        end
        table.insert(list, tree)
    end
end

---@param tree AITree
---@param isEnable boolean
function MainHomeActionTree:SetTreeEnable(tree, isEnable)
    if tree then
        tree.__dontShowOnEditor = not isEnable
    end
end

---@param actionId int
---@param isRunning boolean
---@param breakList int[]
function MainHomeActionTree:OnEventSetActionTreeRunning(actionId, isRunning, breakList)
    if self.breakList then
        PoolUtil.ReleaseTable(self.breakList)
    end
    self.breakList = breakList
    self:SetIsActionTreeRunning(actionId, isRunning)
    if not isRunning then
        self.bll:SetActionRunning(actionId, isRunning)
        self.bll:SetActionShowRunning(actionId, isRunning)
    end
end

---检测剧情
---@param tree AITree
function MainHomeActionTree:CheckDialogueSetting(tree)
    ---@type AIArrayVar
    local dialogueSetting = tree:GetVariables()["dialogueSetting"]
    if dialogueSetting then
        local localDialogueSetting = self.actionDataProxy:GetDialogueSetting()
        for k = 1, dialogueSetting:Count() do
            local v = dialogueSetting:GetChildValue(k)
            if v then
                PoolUtil.ReleaseTable(v)
            end
        end
        dialogueSetting:Clear()
        for k, v in pairs(localDialogueSetting) do
            dialogueSetting:AddChildValue(v)
        end
        PoolUtil.ReleaseTable(localDialogueSetting)
    end
end

---播放剧情
---@param actionId int
---@param dialogueId int
---@param conversation string
---@param nodeId int
function MainHomeActionTree:OnEventPlayDialogue(actionId, dialogueId, conversation, nodeId)
    local tree = self:GetTree(actionId)
    if tree then
        self:CheckDialogueSetting(tree)
        tree:SetVariable("dialogueId", dialogueId)
        tree:SetVariable("conversationName", conversation)
        tree:SetVariable("isPlayDialogue", true)
        tree:SetVariable("nodeId", nodeId or 0)
        self.dialogueRunningMap[actionId] = true
        self.bll:SetHandlerRunning(MainHomeConst.HandlerType.ActionDialoguePlaying, true)
    end
end

---@param actionId int
---@param isWaiting
function MainHomeActionTree:OnEventWaitingAction(actionId, isWaiting)
    if not actionId then
        return
    end
    local tree = self:GetTree(actionId)
    if tree then
        tree:SetVariable("waitting", isWaiting)
    end
end

---强制完成Action
---@param actionId int
function MainHomeActionTree:OnEventForceFinishAction(actionId , forceFinish)
    if not actionId then
        return
    end
    local tree = self:GetTree(actionId)
    if tree then
        tree:SetVariable("forceFinishAction", forceFinish)
    end
end

---剧情播放结束
---@param actionId int
function MainHomeActionTree:OnEventDialogueEnd(actionId)
    if self.dialogueRunningMap[actionId] then
        self.dialogueRunningMap[actionId] = nil
        self.bll:SetHandlerRunning(MainHomeConst.HandlerType.ActionDialoguePlaying, not table.isnilorempty(self.dialogueRunningMap))
    end
end

---@param actionId int
---@param isRunning boolean
---@param breakList int[]
---@param breakType int
function MainHomeActionTree:OnEventSetActionRunning(actionId, isRunning, breakList, breakType)
    if not isRunning then
        local tree = self:GetTree(actionId)
        if tree then
            local breakActionType
            if breakList then
                breakActionType = self.actionDataProxy:GetActionType(breakList[1])
            end
            tree:SetVariable("breakActionType", breakActionType)
            tree:SetVariable("breakType", breakType)
            tree:SetVariable("isRunning", isRunning)
        end
    else
        EventMgr.Dispatch(MainHomeConst.Event.MAIN_HOME_AI_SET_ACTION_TREE_RUNNING, actionId, isRunning, breakList)
    end
end

function MainHomeActionTree:OnDestroy()
    for k, v in pairs(self.runningTreeList) do
        self:SetIsActionTreeRunning(k, false)
    end
    for _, v in pairs(self.treeMap) do
        for _, n in pairs(v) do
            AIMgr.RemoveTree(n)
        end
    end
    self.treeMap = {}
    self.runningTreeList = {}
    AIAction.OnDestroy(self)
end

return MainHomeActionTree