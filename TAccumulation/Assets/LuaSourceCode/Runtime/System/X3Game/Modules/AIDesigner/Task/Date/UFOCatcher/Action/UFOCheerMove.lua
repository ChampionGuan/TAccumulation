---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2022/6/14 11:19
---

local AIAction = require("Runtime.Plugins.AIDesigner.Base.AITask").AIAction

---Category:Date/UFOCatcher
---@class UFOCheerMove:AIAction
local UFOCheerMove = class("UFOCheerMove", AIAction)

function UFOCheerMove:OnEnter()
    ---@type GameObject
    self.body = self.tree:GetVariable("clawBody")
    ---@type ClawController
    self.clawController = self.tree:GetVariable("UFOCatcherController").clawController
    ---@type float
    self.deltaTime = 0
    ---@type boolean
    self.isDebuff = false
    ---@type float
    self.needMoveTime = 0
    ---@type Vector3
    self.targetPos = Vector3.zero
    ---@type Vector3
    self.commandDirection = Vector3.zero

    ---@type cfg.UFOCatcherSPAction
    local cheerBuffData = BllMgr.GetUFOCatcherBLL():UFOCatcherSPAction()
    self.isDebuff = cheerBuffData.BuffFucPara0[1] > 0
    self.needMoveTime = cheerBuffData.BuffFucPara0[1] / 1000
    local aiTarget = BllMgr.GetUFOCatcherBLL():GetAITarget()
    if GameObjectUtil.IsNull(aiTarget) == false then
        self.commandDirection = BllMgr.GetUFOCatcherBLL():GetCheerMoveDirection(self.isDebuff)
    end
end

---@return AITaskState
function UFOCheerMove:OnUpdate()
    self.deltaTime = self.deltaTime + TimerMgr.GetCurTickDelta()
    self.clawController:MoveClawByWorldDirection(self.commandDirection.x, self.commandDirection.z)
    if self.deltaTime < self.needMoveTime then
        return AITaskState.Running
    end
    return AITaskState.Success
end

return UFOCheerMove