---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xiaofang.
--- DateTime: 2022/11/24 15:27
---@class ScoreStoryAvgController
local ScoreStoryAvgController = class("ScoreStoryAvgController")
---@type ScoreStoryConst
local ScoreStoryConst = require("Runtime.System.X3Game.UI.UIView.ScoreStoryChapterWnd.Data.ScoreStoryConst")

function ScoreStoryAvgController:ctor()
    self.virtualCamera = nil
    self.dialogId = 0
    self.conversation = 0
end

---@param legendItem X3Data.LegendItem
---@param secData X3Data.LegendSection
---@param callBack function
function ScoreStoryAvgController:Enter(legendItem, secData, callBack)
    self.secData = secData
    self.legendItem = legendItem
    self.legendCfg = LuaCfgMgr.Get("LegendStoryInfo", legendItem:GetPrimaryValue())
    self.secCfg = LuaCfgMgr.Get("LegendStorySection", secData:GetPrimaryValue())
    self.dialogId = self.secCfg.DialogueID
    self.conversation = self.secCfg.ConversationName
    self.secAmount = table.nums(legendItem:GetSectionData())
    self.curNum = self.secCfg.Num
    self.callBack = callBack
    self.bll = BllMgr.GetScoreStoryBLL()
    if UIMgr.IsOpened(UIConf.ScoreStoryChapterWnd) then
        SelfProxyFactory.GetLegendProxy():SetParams(self.legendCfg.RoleID)
    end
    self:InitDialogue()
end

function ScoreStoryAvgController:InitDialogue()
    self.virtualCamera = GlobalCameraMgr.CreateVirtualCamera(CameraModePath.AutoSyncMode)
    self.dialogueController = DialogueManager.InitByName("ScoreStoryAvg")
    self.system = self.dialogueController:InitDialogue(self.dialogId, Mathf.Random(1, 10000), nil, function()
        local callback = function()
            if self.curNum == self.secAmount and self.legendItem:GetStateType() < X3DataConst.StoryStateType.StoryStateTypeFinish then
                self.bll:Send_StoryFinishRequest(X3DataConst.StoryType.Legend, self.legendItem:GetPrimaryValue())
                self.legendItem:SetStateType(X3DataConst.StoryStateType.StoryStateTypeFinish)
            end
            RedPointMgr.Save(Define.LegendRedState.ReadFinish, X3_CFG_CONST.RED_SCORESTORY_CHAPTER_NEW, self.secData:GetPrimaryValue())
            self:ExitAvg()
        end
        if self.nodeId then
            local conver_id, node_id = math.modf(self.nodeId / 10000)
            node_id = math.floor(node_id * 10000)
            self.dialogueController:StartDialogueById(self.dialogId, conver_id, node_id, nil, callback)
        else
            self.dialogueController:StartDialogueByName(self.dialogId, self.conversation, nil, nil, callback)
        end
    end)
    self.system:RegisterExitHandler(handler(self, self.BackScoreStoryAvg), UITextHelper.GetUIText(UITextConst.UI_TEXT_38050))
    local settingData = self.system:GetSettingData()
    settingData:SetShowReviewButton(true)
    settingData:SetShowPauseButton(true)
    settingData:SetShowClickBg(false)
    settingData:SetShowPhotoButton(true)
    settingData:SetUseNodeGraph(true)
    if self.secData:GetIsNew() then
        --设置小节已读
        RedPointMgr.Save(Define.LegendRedState.HaveRead, X3_CFG_CONST.RED_SCORESTORY_CHAPTER_NEW, self.secData:GetPrimaryValue())
        RedPointMgr.UpdateCount(X3_CFG_CONST.RED_SCORESTORY_CHAPTER_NEW, 0, self.secData:GetPrimaryValue())
        self.secData:SetIsNew(false)
    else
        settingData:SetShowPlaySpeedButton(true)
    end
    UIMgr.Open(UIConf.ScoreStoryAvgWnd, self.secData)
end

function ScoreStoryAvgController:BackScoreStoryAvg()
    if self.bll:GetAvgCtrl() then
        self:ExitAvg()
    end
end

---@param isAuto bool
function ScoreStoryAvgController:AutoChange(isAuto)
    self.system:SwitchAuto(isAuto)
end

function ScoreStoryAvgController:ExitAvg()
    self.isExit = true
    if self.callBack then
        self.callBack()
        self.callBack = nil
    end
    self.legendItem:SetLastReadSection(self.secData:GetPrimaryValue())
    local roleLegend = SelfProxyFactory.GetLegendProxy():GetRoleLegendData(self.legendCfg.RoleID)
    SelfProxyFactory.GetLegendProxy():UpdateLegendItemData(roleLegend, self.legendItem)
    self.bll:SetLegendBackID(self.legendItem:GetPrimaryValue())
    UICommonUtil.SetLoadingEnableWithOpenParam({ MoveInCallBack = function()
        GameStateMgr.Switch(GameState.MainHome)
        UIMgr.Close(UIConf.ScoreStoryAvgWnd)
    end, IsPlayMoveOut = true }, GameConst.LoadingType.MainHome, true)
end

function ScoreStoryAvgController:Exit()
    self.bll:Send_StoryUpdateRequest(X3DataConst.StoryType.Legend, self.legendItem:GetPrimaryValue(), self.secData:GetPrimaryValue(), 0)
    SelfProxyFactory.GetLegendProxy():CheckTLog()
    DialogueManager.ClearByName("ScoreStoryAvg")
    if self.virtualCamera then
        GlobalCameraMgr.DestroyVirtualCamera(self.virtualCamera)
    end
    self.bll:ResetAvgCtrl()
    CS.PapeGames.Timeline.ControlObjInstancePool.UnSpawnAllObject()
    EventMgr.RemoveListenerByTarget(self)
end

return ScoreStoryAvgController