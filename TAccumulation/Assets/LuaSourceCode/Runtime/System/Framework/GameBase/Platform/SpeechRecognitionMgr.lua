---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by junjun003.
--- DateTime: 2023/11/21 17:26
---

---@class SpeechRecognitionUtility
local SpeechRecognitionMgr = {}
local CS_Utility = CS.X3Game.Platform.SpeechRecognitionUtility
---@type AudioSessionUtil
local AudioSessionUtil = require("Runtime.System.X3Game.Modules.AudioSession.AudioSessionUtil")
---@type AudioSessionConst
local AudioSessionConst = require("Runtime.System.X3Game.Modules.AudioSession.AudioSessionConst")
---@type AudioRecordUtil
local AudioRecordUtil = require("Runtime.System.X3Game.Modules.AudioRecord.AudioRecordUtil")
---@type table<fun(index:int)> 回调列表
local callbackList = nil
---@type int
local keyLength = 0
---@type int
local volume = nil
---@type bool 运行状态，防止频繁点击结束时延帧导致的错误开启
local isRunning = false
---@type fun(errorCode:int)
local startCallback = nil

local VoiceBufferUtility = CS.X3Game.Platform.VoiceBufferUtility

SpeechRecognitionMgr.PermissionType = {
    Unknown = -1, --没有申请过，未知
    Success = 0, --权限获取成功
    Fail = 1, --权限获取失败
}

---启动回调的错误码
SpeechRecognitionMgr.ErrorCode = {
    Success = 0, ---成功
    AlreadyRunning = 1, ---已经在运行中
    AlreadyStarting = 2, ---已经在启动中
    MicNotExists = 3, ---无可用的录音设备
    SetCategoryFailed = 4, ---设置AudioSessionCategory失败
    Cancelled = 5, ---被取消了（启动过程中调用了Stop()）
    Unknown = 6, ---未知
    NoPermission = 7, ---未获得录音权限
}
SpeechRecognitionMgr.PermissionState = SpeechRecognitionMgr.PermissionType.Unknown

---初始化
function SpeechRecognitionMgr.Init()
    CS_Utility.Delegate = SpeechRecognitionMgr
    callbackList = {}
    local cfgAll = LuaCfgMgr.GetAll("DialogueVoiceRecognition")
    --需要加一个Unknown
    keyLength = table.nums(cfgAll) + 1
    AudioRecordUtil.InitAndroidDevice()
end

---开始语音识别检测
---@param cb fun(errorCode:int) 请求回调
function SpeechRecognitionMgr.Start(cb)
    isRunning = true
    DevicePermissionUtility.RequestPermissionHaveTips(PlatformConst.PermissionType.RECORD_AUDIO, function(requestGranted)
        if (not requestGranted) then
            SpeechRecognitionMgr.PermissionState = SpeechRecognitionMgr.PermissionType.Fail
            if cb then
                cb(SpeechRecognitionMgr.ErrorCode.NoPermission)
            end
        else
            SpeechRecognitionMgr.PermissionState = SpeechRecognitionMgr.PermissionType.Success
            if isRunning then
                SpeechRecognitionMgr.InternalStart(cb)
            end
        end
    end)
end

---真的开始录音
---@param cb fun(errorCode:int) 请求回调
function SpeechRecognitionMgr.InternalStart(cb)
    if Application.IsIOSMobile() then
        VoiceBufferUtility.ReadBufferSize = 1066*3;
        VoiceBufferUtility.BufferSizeInBytes = 1066*3*10;
        local setErrorCountFunc = CS.X3Game.Platform.PFAudioRecordUtility.SetMaxErrorCountAndMaxRebootNum
        if setErrorCountFunc ~= nil then
            setErrorCountFunc(10,5)
        end
    end
    Debug.LogFormat("语音识别开始")
    startCallback = cb
    AudioSessionUtil.EnterRecordMode((AudioSessionConst.CategoryOptions.AllowBluetooth | AudioSessionConst.CategoryOptions.DefaultToSpeaker),
            AudioSessionConst.Mode.VoiceChat,
            function(isMute)
                ---如果有声音，静音
                if isMute then
                    volume = WwiseMgr.GetVolume()
                    WwiseMgr.SetVolume(0)
                end
            end,
            function(result)
                if result == AudioSessionConst.EnterRecordErrorCode.Success then
                    CS_Utility.ExeStartSR(SpeechRecognitionMgr.StartCallback, keyLength)
                else
                    if cb then
                        cb(SpeechRecognitionMgr.ErrorCode.MicNotExists)
                    end
                end
            end)
end

---语音识别开始
---@param errorCode int
function SpeechRecognitionMgr.StartCallback(errorCode)
    if (errorCode ~= 0) then
        Debug.LogErrorFormat("启动语音识别失败：%s", errorCode)
    end
    ---执行回调
    if startCallback then
        startCallback(errorCode)
        startCallback = nil
    end
end

---
function SpeechRecognitionMgr.Stop()
    Debug.LogFormat("语音识别停止")
    CS_Utility.ExeClose()
    AudioSessionUtil.ExitRecordMode()
    if volume then
        WwiseMgr.SetVolume(volume)
        volume = nil
    end
end

---添加侦听
---@param callback fun(index:int)
function SpeechRecognitionMgr.AddListener(callback)
    EventMgr.AddListener("Game_Focus", SpeechRecognitionMgr.OnGameFocus)
    if table.indexof(callbackList, callback) == false then
        table.insert(callbackList, callback)
    end
end

---移除侦听
---@param callback fun(index:int)
function SpeechRecognitionMgr.RemoveListener(callback)
    table.removebyvalue(callbackList, callback)
    if #callbackList == 0 then
        EventMgr.RemoveListener("Game_Focus", SpeechRecognitionMgr.OnGameFocus)
    end
end

---
---@param focus boolean
function SpeechRecognitionMgr.OnGameFocus(focus)
    if SpeechRecognitionMgr.PermissionState == SpeechRecognitionMgr.PermissionType.Fail then
        return
    end

    if focus then
        SpeechRecognitionMgr.Start()
    else
        SpeechRecognitionMgr.Stop()
    end
end

--region 从C#调过来的，会带个Self
function SpeechRecognitionMgr.OnStart(self)

end

---
---@param result int
function SpeechRecognitionMgr.OnStop(self, result)

end

---
---@param result int
function SpeechRecognitionMgr.OnUpdateResult(self, result)
    Debug.LogFormat("语音识别成功-%s", result)
    local len = #callbackList
    for i = len, 1, -1 do
        pcall(callbackList[i], result)
    end
end
--endregion

---
function SpeechRecognitionMgr.Clear()
    CS_Utility.Delegate = nil
    table.clear(callbackList)
    EventMgr.RemoveListener("Game_Focus", SpeechRecognitionMgr.OnGameFocus)
end

return SpeechRecognitionMgr