---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/7/10 11:05
---
---所有bll都需要继承BaseBll方便统一处理逻辑

---@class BllMgr
BllMgr = require("Config.System.AutoGenerated.BllConf")
local DIR_ROOT = "Runtime.System.X3Game.Data.Bll."
---@type table<string,BaseBll>
local BLL_MAP = {}
local NAME_TO_PATH = {}
local BLL_CLEAR_CACHE = {}
local GetFilePath, ResetBll, InitBll, Load

--- 获取本地bll
---@param bll_name string 路径名
---@return UseArgString1
function BllMgr.Get(bll_name)
    if string.isnilorempty(bll_name) then
        Debug.LogWarning("---BllMgr.Get--failed--- bll_name is nil", bll_name)
        return nil
    end
    return Load(bll_name)
end

---卸载本地bll
---@param bll_name string 路径名，起始位置:Module
function BllMgr.UnLoad(bll_name)
    if not bll_name then
        return
    end
    LuaUtil.UnLoadLua(GetFilePath(bll_name))
    ResetBll(bll_name)
    BLL_MAP[bll_name] = nil
end

---清理所有bll数据，重新统一初始化
function BllMgr.Reset()
    if not BLL_MAP then
        return
    end
    for k, _ in pairs(BLL_MAP) do
        ResetBll(k)
        InitBll(k)
    end
end

---断线重连
function BllMgr.OnReconnect()
    for k,v in pairs(BLL_MAP) do
        v:OnReconnect()
    end
end

---卸载所有bll（动态热更新的时候使用）
function BllMgr.Clear()
    if not BLL_MAP then
        return
    end
    for k, bll in pairs(BLL_MAP) do
        ResetBll(k)
        BLL_CLEAR_CACHE[k] = bll
    end
    table.clear(BLL_MAP)
end

---初始化所有Init
function BllMgr.Init()
    if not BLL_MAP then
        return
    end
    for k, _ in pairs(BLL_MAP) do
        InitBll(k)
    end
end

---清理bll数据
---@param bll_name string
ResetBll = function(bll_name)
    if bll_name == nil then
        return
    end
    local bll = BLL_MAP[bll_name]
    if bll then
        bll:OnClear()
    end
end

---初始化bll
---@param bll_name string
InitBll = function(bll_name)
    if not bll_name then
        return
    end
    local bll = BllMgr.Get(bll_name)
    if bll then
        bll:OnInit()
    end
end

---@private
---加载本地bll
---@param bll_name string
---@return table
Load = function(bll_name)
    if bll_name == nil then
        Debug.LogWarning("---BllMgr.Load--failed---", bll_name)
        return nil
    end
    local bll = BLL_MAP[bll_name]
    if not bll then
        bll = BLL_CLEAR_CACHE[bll_name]
        if not bll then
            bll = require(GetFilePath(bll_name))
            if bll then
                if UNITY_EDITOR then
                    if type(bll) == "boolean" then
                        Debug.LogError(bll_name, " Return [boolean] but we need [table] please check your code !!! ")
                        return nil
                    end
                end
                --todo直接卸载静态文件，bll只会存在一份，必须禁止其他地方require，否则获取的就不是同一份数据
                BllMgr.UnLoad(bll_name)
                --bll = bll.new()
                BLL_MAP[bll_name] = bll
                bll:ctor()
                InitBll(bll_name)
            else
                Debug.LogError(bll_name, "  not Return  please check your code !!! ")
            end
        else
            BLL_MAP[bll_name] = bll
            BLL_CLEAR_CACHE[bll_name] = nil
            InitBll(bll_name)
        end
    end
    return bll
end

---获取路径
---@param file_name string
---@return string
GetFilePath = function(file_name)
    if file_name == nil then
        return file_name
    end
    local f_path = NAME_TO_PATH[file_name]
    if string.isnilorempty(f_path) then
        f_path = string.concat(DIR_ROOT, file_name)
        NAME_TO_PATH[file_name] = f_path
    end
    return f_path
end

local function Init()
    BLL_MAP = {}
end

Init()

return BllMgr