---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by pc.
--- DateTime: 2020/10/27 20:53
---
---统一查找组件相关逻辑
---@class LuaCompHelper
local LuaCompHelper = {}
---@type string
local TRANSFORM_TYPE = "Transform"
---@type string
local GAME_OBJECT_TYPE = "GameObject"
---@type string
local OBJ_LINKER = "ObjLinker"
---@type X3Game.UIUtility
local UIUtility = CS.X3Game.UIUtility
---@type CSTypeConst
local CSTypeConst = require("Runtime.System.Framework.GameBase.LuaComp.CSTypeConst")
---@type table
local CACHE_MAP = {}
---@type table
local CACHE_POOL = nil
---@type table
local LUA_CAMP_POOL = { }
---@type boolean
local IS_INIT = false
---@type int
local CHECK_FRAME = 30

---根据类型获取组件名称
---@param type_str
---@return string,string lua_type_name,cs_type_name
local function GetCompName(type_str)
    -- todo 后面如果扩展比较多的话，可以考虑更高效的查找方案
    for k, v in pairs(CSTypeConst) do
        if type_str == v.CSType then
            return v.LuaType, v.CSType
        end
    end
    return nil, type_str
end

---获取lua组件缓存池
---@param lua_type_name string
---@param is_create boolean
local function GetLuaCmpPool(lua_type_name, is_create)
    if not lua_type_name then
        Debug.LogWarning("[LuaCompHelper.GetLuaCmpPool]--failed ", lua_type_name)
        return nil
    end
    local lua_cmp_pool = LUA_CAMP_POOL[lua_type_name]
    if not lua_cmp_pool and is_create then
        lua_cmp_pool = PoolUtil.Get(function()
            local lua_cmp = require(lua_type_name).new()
            lua_cmp.__lua_type_name = lua_type_name
            return lua_cmp
        end, function(lua_cmp)
            table.clear(lua_cmp)
            lua_cmp.__lua_type_name = lua_type_name
        end)
        LUA_CAMP_POOL[lua_type_name] = lua_cmp_pool
    end
    return lua_cmp_pool
end

---获取lua组件
---@param lua_type_name string
---@return table lua_cmp 对象
local function GetLuaComponent(lua_type_name)
    if lua_type_name then
        return GetLuaCmpPool(lua_type_name, true):Get()
    end
    return nil
end

---@param obj UnityEngine.Object
local function Release(obj)
    xlua.release(obj)
end

---获取cs组件
---@param obj UnityEngine.GameObject
---@param cs_type_name string
---@return UnityEngine.Component
local function GetCSComponent(obj, cs_type_name)
    if obj and cs_type_name then
        if cs_type_name == TRANSFORM_TYPE or cs_type_name == UComponentType.Transform then
            return obj.transform
        elseif cs_type_name == GAME_OBJECT_TYPE or cs_type_name == UComponentType.GameObject then
            return obj
        end
        return UIUtility.GetComponent(obj, nil, cs_type_name)
    end
end

---根据gameObject获取缓存
---@param obj UnityEngine.GameObject
---@return _cache_comp,int
local function GetCacheByObj(obj)
    local cache, index
    for k, v in pairs(CACHE_MAP) do
        if v.obj == obj then
            cache = v
            index = k
            break
        end
    end
    return cache, index
end

---根据gameObject获取缓存组件
---@param obj UnityEngine.GameObject
---@return table 组件列表
local function GetComponentsByObj(obj)
    local cache = GetCacheByObj(obj)
    return cache and cache.comps or nil
end

---根据类型获取组件
---@param type_name string
---@param obj UnityEngine.GameObject
---@return table | UnityEngine.Component 组件对象
local function GetComponentByObj(obj, type_name)
    local comps = GetComponentsByObj(obj)
    return comps and comps[type_name] or nil
end

---将lua组件加入缓存对象
---@param lua_cmp table
local function AddLuaCompToCache(lua_cmp)
    if not lua_cmp then
        return
    end
    local lua_type_name = lua_cmp.__lua_type_name
    local lua_cmp_pool = GetLuaCmpPool(lua_type_name)
    if lua_cmp_pool then
        lua_cmp:OnClear()
        lua_cmp_pool:Release(lua_cmp)
    end
end

---清理组件
---@param components table[]
---@param is_gameObject boolean
local function RemoveComponents(components, is_gameObject)
    if components then
        for k, v in pairs(components) do
            if type(v) == "table" then
                AddLuaCompToCache(v)
            else
                if is_gameObject then
                    LuaCompHelper.RemoveCache(v)
                else
                    Release(v)
                end
            end
        end
    end
end

---@class _cache_comp
---@field objs GameObject[]
---@field comps Object[]
---@field obj GameObject
---创建cache
---@param obj GameObject
---@return _cache_comp
local function CreateCache(obj)
    if not CACHE_POOL then
        CACHE_POOL = PoolUtil.Get(function()
            local cache = {}
            cache.objs = {}
            cache.comps = {}
            return cache
        end, function(cache)
            Release(cache.obj)
            cache.obj = nil
            RemoveComponents(cache.comps)
            RemoveComponents(cache.objs, true)
            table.clear(cache.comps)
            table.clear(cache.objs)
        end)
    end
    local cache = CACHE_POOL:Get()
    cache.obj = obj
    table.insert(CACHE_MAP, cache)
    return cache
end

---@param cache _cache_comp
local function ReleaseCache(cache)
    if CACHE_POOL and cache then
        CACHE_POOL:Release(cache)
    end
end

---将gameobject加入缓存池
---@param obj UnityEngine.GameObject
---@param type_name string
---@param cmp table | UnityEngine.Component
---@return boolean
local function AddCache(obj, type_name, cmp)
    local cache = GetCacheByObj(obj)
    if not cache then
        cache = CreateCache(obj)
    end
    if cache.comps[type_name] then
        Debug.LogError("[AddCache]--cmp has exist:", obj, ":", type_name, ":", cmp)
        return false
    end
    cache.comps[type_name] = cmp
    return true
end

---根据index清除缓存
---@param index int
local function RemoveCacheByIndex(index)
    if not index then
        return
    end
    local cache = CACHE_MAP[index]
    if cache then
        CACHE_MAP[index] = nil
        ReleaseCache(cache)
    end
end

---清理所有缓存
local function ClearAllCache()
    table.clear(CACHE_MAP)
end

---获取组件
---@param obj UnityEngine.GameObject
---@param type_str string
---@param no_log boolean 是否打印日志
---@return table|UnityEngine.Component
local function GetComponent(obj, type_str, no_log)
    if not obj then
        return nil
    end
    local lua_type_name, cs_type_name = GetCompName(type_str)
    local cmp = GetComponentByObj(obj, lua_type_name and lua_type_name or cs_type_name)
    if cmp then
        return cmp
    end
    cmp = GetLuaComponent(lua_type_name)
    local cs_cmp = GetCSComponent(obj, cs_type_name)
    if cmp and cs_cmp then
        cmp:Init(cs_cmp)
        AddCache(obj, lua_type_name, cmp)
        return cmp
    end
    if cs_cmp then
        AddCache(obj, cs_type_name, cs_cmp)
    else
        if not no_log then
            Debug.LogErrorFormat("[local function GetComponent] failed [%s] type not find on target [%s]", type_str, obj)
        end
    end
    return cs_cmp
end

---根据路径查找
---@param trans UnityEngine.Transform
---@param path string
---@param is_recursion boolean 是否需要递归查找
---@return Transform
local function GetNodeByPath(trans, path, is_recursion)
    if not string.isnilorempty(path) and trans then
        if is_recursion then
            trans = UIUtility.FindChildRecursion(trans, path)
        else
            trans = trans:Find(path)
        end
        return trans
    end
    return trans
end

---根据ObjLinker查找
---@param obj_linker PapeGames.X3.ObjLinker
---@param name string
---@return UnityEngine.GameObject
local function GetNodeByLinker(obj_linker, name)
    if string.isnilorempty(name) then
        return obj_linker
    end
    if  not string.find(name, "/", 1, true) then
        name = string.hash(name)
    end
    return UIUtility.GetOCX(obj_linker, name)
end

---根据名称查找gmaeObject
---@param root_obj UnityEngine.GameObject
---@param name string 名称或者是路径
---@param is_recursion boolean 是否需要递归查找
---@return UnityEngine.GameObject
local function GetGameObject(root_obj, name, is_recursion)
    if string.isnilorempty(name) then
        return root_obj
    end
    local obj
    local cache = GetCacheByObj(root_obj)
    if cache then
        obj = cache.objs[name]
    end
    if obj then
        if not GameObjectUtil.IsNull(obj) then
            return obj
        end
        obj = nil
    end
    local linker = GetComponent(root_obj, OBJ_LINKER, true)
    if linker then
        obj = GetNodeByLinker(linker, name)
    end
    if not obj then
        local trans = GetNodeByPath(root_obj.transform, name, is_recursion)
        if trans then
            obj = trans.gameObject
        end
    end
    if obj then
        cache = GetCacheByObj(root_obj)
        if cache then
            cache.objs[name] = obj
        else
            AddCache(root_obj, GAME_OBJECT_TYPE, root_obj)
            cache = GetCacheByObj(root_obj)
            cache.objs[name] = obj
        end
    end
    return obj
end

---检测无效组件，回收利用
---每隔1s检测一次
local remove_list = {}
local function Check()
    table.clear(remove_list)
    for k, v in pairs(CACHE_MAP) do
        if GameObjectUtil.IsNull(v.obj) then
            table.insert(remove_list, k)
        end
    end
    if #remove_list > 0 then
        for k, v in pairs(remove_list) do
            RemoveCacheByIndex(v)
        end
    end
    GameObjectCtrl.CheckValidCtrl()
end

---初始化
local function Init()
    if IS_INIT then
        return
    end
    IS_INIT = true
    TimerMgr.AddTimerByFrame(CHECK_FRAME, Check, nil, true, TimerMgr.UpdateType.LATE_UPDATE)
end

---根据名称或者路径获取obj对应节点名称name下的相关组件类型
---@param obj UObject
---@param name string 根据名称或者路径
---@param type_str string 组件类型名称 eg:PapeGames.X3.X3Animator
---@param is_recursion boolean 是否需要递归查找
---@return table | UnityEngine.Component
function LuaCompHelper.GetComponent(obj, name, type_str, is_recursion, no_log)
    if GameObjectUtil.IsNull(obj) then
        Debug.LogWarning("[LuaCompHelper.GetComponent]--failed:", obj, ":", name, ":", type_str)
        return nil
    end
    name = name and name or ""
    type_str = type_str and type_str or GAME_OBJECT_TYPE
    obj = GetGameObject(obj.gameObject, name, is_recursion)
    if not obj and not no_log then
        Debug.LogWarning("[LuaCompHelper.GetComponent]--failed:", obj, ":", name)
        return nil
    end
    return GetComponent(obj, type_str, no_log)
end

---清理所有cache
function LuaCompHelper.ClearAllCache()
    ClearAllCache()
end

---根据gameObject清理缓存
---@param obj GameObject
function LuaCompHelper.RemoveCache(obj)
    local cache, index = GetCacheByObj(obj)
    if index then
        RemoveCacheByIndex(index)
    end
end

Init()
return LuaCompHelper