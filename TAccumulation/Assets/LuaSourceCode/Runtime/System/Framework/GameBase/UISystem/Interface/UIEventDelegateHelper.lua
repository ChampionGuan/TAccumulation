---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/8/22 11:08
---
local UIUtility = CS.X3Game.UIUtility
---@class UIEventDelegateHelper
local UIEventDelegateHelper = {}
---@type UIEventConf
local UIEventConf = require("Runtime.System.Framework.GameBase.UISystem.Interface.UIEventConf")
local EventDelegate = require("Runtime.System.Framework.GameBase.UISystem.Interface.EventDelegate")

---@type UIEventType
UIEventDelegateHelper.UIEventType = UIEventConf.UIEventType
---@type UIEventHandlerType
UIEventDelegateHelper.UIEventHandlerType = UIEventConf.UIEventHandlerType

---@type table<string,fun(type:UObject | ObjLinker,type:string):int>
local funcMap = {}
---@type table<UIEventType,string>
local componentNameMap = {}
---@type<UIEventHandlerType,string>
local handlerNameMap = {}
local get_id, get_obj_name, get_component_name, check_match, get_handler_name

---@param eventType UIEventType
---@param keyOrObj string | UObject
---@param target GameObjectCtrl
function UIEventDelegateHelper.GetComponentID(keyOrObj, eventType, target)
    if not eventType then
        Debug.LogError("[UIEventDelegateHelper.GetComponentID] failed,eventType is nil")
        return 0
    end
    local obj, name = get_obj_name(keyOrObj, target)
    local id = get_id(eventType, obj, name)
    if not id or id == 0 then
        Debug.LogWarningFormat("[UIEventDelegateHelper.GetComponentID] failed target[%s] name[%s] 未找到相关组件[%s]", obj, name, get_component_name(eventType))
    end
    return id
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
---@param target GameObjectCtrl
---@param isSelf boolean
function UIEventDelegateHelper.RegisterEventDelegate(id, eventType, handlerType, func, target, isSelf)
    if not eventType or not handlerType or not id or id == 0 or not func then
        if id and id == 0 then
            Debug.LogErrorFormat("[UIEventDelegateHelper.RegisterEventDelegate] failed 未找到相关组件[%s]", get_component_name(eventType))
        else
            Debug.LogErrorFormat("[UIEventDelegateHelper.RegisterEventDelegate] failed eventType = %s,handlerType=%s,id=%s,func=%s", get_component_name(eventType), handlerType, id, func)
        end

        return
    end
    if UNITY_EDITOR then
        if type(func) ~= "function" then
            Debug.LogErrorFormat("[UIEventDelegateHelper.RegisterEventDelegate] type(func)~=function ")
            return
        end
        if not check_match(eventType, handlerType, "RegisterEventDelegate") then
            return
        end
    end
    EventDelegate:Add(id, eventType, handlerType, func, target, isSelf)
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
function UIEventDelegateHelper.UnregisterEventDelegate(id, eventType, handlerType, func)
    if not eventType or not id or id == 0 then
        Debug.LogWarningFormat("[UIEventDelegateHelper.UnregisterEventDelegate] failed eventType = %s,handlerType=%s,id=%s,func=%s", get_component_name(eventType), handlerType, id, func)
        return
    end
    if UNITY_EDITOR and eventType and handlerType then
        if not check_match(eventType, handlerType, "UnregisterEventDelegate") then
            return
        end
    end
    EventDelegate:Remove(id, eventType, handlerType, func)
end

---@param id int
function UIEventDelegateHelper.UnregisterEventDelegateById(id)
    if not id or id == 0 then
        Debug.LogWarningFormat("[UIEventDelegateHelper.UnregisterEventDelegateById] failed id=%s", id)
        return
    end
    for k, v in pairs(UIEventDelegateHelper.UIEventType) do
        UIEventDelegateHelper.UnregisterEventDelegate(id, v)
    end
end

---@param target GameObjectCtrl | table
---@param eventType UIEventType
function UIEventDelegateHelper.UnregisterByTarget(target, eventType, handlerType)
    EventDelegate:RemoveByTarget(target, eventType, handlerType)
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param senderId int
---@vararg any
function UIEventDelegateHelper.Invoke(senderId, eventType, handlerType, ...)
    if not senderId or senderId == 0 then
        Debug.LogWarning("[UIEventDelegateHelper.Invoke] id ==0")
        return
    end
    if UNITY_EDITOR then
        if not check_match(eventType, handlerType, "Invoke") then
            return
        end
    end
    return EventDelegate:Invoke(senderId, eventType, handlerType, ...)
end

local objLinkerType = typeof(CS.PapeGames.X3UI.ObjLinker)
---@param eventType UIEventType
---@param linkerOrObj UObject | PapeGames.X3UI.ObjLinker
---@param name string
get_id = function(eventType, linkerOrObj, name)
    if eventType and linkerOrObj ~= nil then
        name = name or ""
        local func = funcMap[eventType]
        if not func then
            local conf = UIEventConf.UIEventTypeConf[eventType]
            if conf then
                func = UIUtility[conf.GetComponentID]
                if func then
                    funcMap[eventType] = func
                end
            end
        end

        if func then
            if not string.isnilorempty(name) then
                if linkerOrObj:GetType() == objLinkerType then
                    if not string.find(name, "/", 1, true) then
                        name = string.hash(name)
                    end
                else
                    if GameObjectCtrl.IsOCX(name) then
                        name = string.hash(name)
                    end
                end
            end
            return func(linkerOrObj, name)
        end
    end
    Debug.LogErrorFormat("GetComponentID --failed eventType=[%s],linkerOrObj=[%s]", eventType, linkerOrObj)
    return 0
end

---@param keyOrObj string | UObject
---@param target GameObjectCtrl | table
---@return UObject,string
get_obj_name = function(keyOrObj, target)
    local obj
    local name = ""
    if target then
        if type(keyOrObj) == "string" or string.isnilorempty(keyOrObj) then
            if target.__GameObjectCtrl then
                name = keyOrObj
                local linker = target:GetLinker()
                if not linker then
                    obj = target:GetComponent()
                else
                    obj = linker
                end
            elseif target.__Component then
                name = keyOrObj
                obj = target:GetLinker()
            end
        else
            if keyOrObj ~= nil then
                obj = keyOrObj.gameObject
            end

        end
    else
        if keyOrObj ~= nil then
            obj = keyOrObj.gameObject
        end
    end

    return obj, name
end

---@param eventType UIEventType
---@return string
get_component_name = function(eventType)
    if not eventType then
        return "invalid"
    end
    local res = componentNameMap[eventType]
    if not res then
        for k, v in pairs(UIEventDelegateHelper.UIEventType) do
            if v == eventType then
                res = k
                break
            end
        end
        componentNameMap[eventType] = res
    end
    return res
end

---@param handlerType UIEventHandlerType
---@return string
get_handler_name = function(handlerType)
    for k, v in pairs(UIEventConf.UIEventHandlerType) do
        if v == handlerType then
            return k
        end
    end
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@return boolean
check_match = function(eventType, handlerType, funcName)
    local res = string.startswith(get_handler_name(handlerType), get_component_name(eventType))
    if not res then
        Debug.LogErrorFormat("[UIEventDelegateHelper.%s] [%s] --->mismatch[%s]", get_component_name(eventType), get_handler_name(handlerType), funcName)
        return res
    end
    return res
end

local function init()
    EventDelegate = EventDelegate.new()
    EventDelegate:SetPool(PoolUtil.GetTable, PoolUtil.ReleaseTable)
    if UNITY_EDITOR then
        for k, v in pairs(UIEventConf.UIEventType) do
            local id = v * 10
            for m, n in pairs(UIEventConf.UIEventHandlerType) do
                if string.startswith(m, k) then
                    handlerNameMap[id + n] = m
                end
            end
        end
        for k, v in pairs(handlerNameMap) do
            UIEventConf.UIEventHandlerType[v] = k
        end
    end
end

init()

return UIEventDelegateHelper