---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/9/17 11:46
---
local UIEventDelegateHelper = require("Runtime.System.Framework.GameBase.UISystem.Interface.UIEventDelegateHelper")
---@type UIEventType
UICtrl.UIEventType = UIEventDelegateHelper.UIEventType
---@type UIEventHandlerType
UICtrl.UIEventHandlerType = UIEventDelegateHelper.UIEventHandlerType

---@param key_or_path string | UObject
---@type UIEventType
---@return int
function UICtrl:GetComponentID(key_or_path, eventType)
    return self:_InternalInvokeFunc("GetComponentID", false, key_or_path, eventType, self)
end

--region button
---设置Button回调
---@param key_or_path string | UObject  OCX key_or_path
---@param onclick fun(type:GameObject) 点击回调方法
---@param onTouchDown fun(type:GameObject) 按下回调方法
---@param onTouchUp fun(type:GameObject) 弹起回调方法
---@param onTouchExit fun(type:GameObject) 移出回调方法
function UICtrl:AddButtonListener(key_or_path, onclick, onTouchDown, onTouchUp, onTouchExit)
    local id = self:GetComponentID(key_or_path, self.UIEventType.Button)
    if onclick ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Button, self.UIEventHandlerType.Button_OnClick, onclick)
    end
    if onTouchDown ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Button, self.UIEventHandlerType.Button_OnTouchDown, onTouchDown)
    end
    if onTouchUp ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Button, self.UIEventHandlerType.Button_OnTouchUp, onTouchUp)
    end
    if onTouchExit ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Button, self.UIEventHandlerType.Button_OnTouchExit, onTouchExit)
    end
end

---移除Button回调
---@param key_or_path string | UObject OCX key_or_path
---@param cb fun(type:GameObject) Action<GameObject> 为nil时则清除该Button的所有回调
function UICtrl:RemoveButtonListener(key_or_path, cb)
    local id = self:GetComponentID(key_or_path, self.UIEventType.Button)
    self:_UnregisterEventDelegate(id, self.UIEventType.Button, self.UIEventHandlerType.Button_OnClick)
end

---添加长按
---@param key_or_path string | UObject
---@param cb fun(type:GameObject,type:number)
function UICtrl:AddLongPressListener(key_or_path, cb)
    local id = self:GetComponentID(key_or_path, self.UIEventType.LongPressHandler)
    self:_RegisterEventDelegate(id, self.UIEventType.LongPressHandler, self.UIEventHandlerType.LongPressHandler_OnLongPress, cb)
end

---设置SwitchButton回调
---@param key_or_path string | UObject
---@param cb fun(type:GameObject,type:boolean)
function UICtrl:AddSwitchButtonListener(key_or_path, cb)
    local id = self:GetComponentID(key_or_path, self.UIEventType.SwitchButton)
    self:_RegisterEventDelegate(id, self.UIEventType.SwitchButton, self.UIEventHandlerType.SwitchButton_OnValueChanged, cb)
end

--endregion
--region InputField增加回调事件
---给X3InputField, TMP_InputField, InputField增加回调事件
---@param key_or_path string | UObject
---@param onValueChanged fun(type:string):void 内容变动事件
---@param onEndEdit fun(type:string):void 结束编辑事件
---@param onEndEditAndCheck fun(type:string, type:bool):void 结束编辑事件(包含检查结果)
---@param onClick fun(type:GameObject):void 点击输入框事件
function UICtrl:AddInputListener(key_or_path, onValueChanged, onEndEdit, onEndEditAndCheck, onClick)
    local id = self:GetComponentID(key_or_path, self.UIEventType.InputField)
    if onValueChanged ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.InputField, self.UIEventHandlerType.InputField_OnValueChanged, onValueChanged)
    end
    if onEndEdit ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.InputField, self.UIEventHandlerType.InputField_OnEndEdit, onEndEdit)
    end
    if onEndEditAndCheck ~= nil then
        UIUtil.UIEventDelegateHelper.RegisterEventDelegate(id, UIUtil.UIEventType.InputField, self.UIEventHandlerType.InputField_OnEndEditAndCheck, onEndEditAndCheck)
    end
    if onClick ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.InputField, self.UIEventHandlerType.InputField_OnClick, onClick)
    end
end
--endregion

--region DropDown
---@param key_or_path UObject
---@param onValueChanged fun(type:X3DropDown,int,int)
---@param onCellLoad fun(type:X3DropDown,GameObject,int)
---@param onValueWillChange fun(type:X3DropDown,int,int):bool
function UICtrl:AddDropDownListener(key_or_path, onValueChanged, onCellLoad, onValueWillChange)
    local id = self:GetComponentID(key_or_path, self.UIEventType.Dropdown)
    if onValueChanged ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Dropdown, self.UIEventHandlerType.Dropdown_OnValueChanged, onValueChanged)
    end
    if onCellLoad ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Dropdown, self.UIEventHandlerType.Dropdown_OnCellLoad, onCellLoad)
    end
    if onValueWillChange ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.Dropdown, self.UIEventHandlerType.Dropdown_OnValueWillChange, onValueWillChange)
    end
end
--endregion

--region ListView/GridListView
---设置ListView的回调
---@param key_or_path string | UObject
---@param onCellLoad fun(view:ListView, cellIns:GameObject, cellIdx:int):Vector2 加载Cell数据（需要返回Vector2）
---@param onCellClick fun(view:ListView, cellIns:GameObject, cellIdx:int) Cell被点击
---@param onCellLongPress fun(view:ListView, cellIns:GameObject, cellIdx:int, longPressIdx:int) Cell触发长按
---@param onCellCentered fun(view:ListView, cellIns:GameObject, cellIdx:int) Cell处于ViewPort中间
function UICtrl:AddListViewListener(key_or_path, onCellLoad, onCellClick, onCellLongPress, onCellCentered)
    local id = self:GetComponentID(key_or_path, self.UIEventType.ListView)
    if onCellLoad ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellLoad, onCellLoad)
    end
    if onCellClick ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellClick, onCellClick)
    end
    if onCellLongPress ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellLongPress, onCellLongPress)
    end
    if onCellCentered ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellCentered, onCellCentered)
    end
end

---设置GridView的回调
---@param key_or_path string | UObject
---@param onCellLoad fun(view:ListView, cellIns:GameObject, cellIdx:int):Vector2 加载Cell数据（需要返回Vector2）
---@param onCellClick fun(view:ListView, cellIns:GameObject, cellIdx:int) Cell被点击
---@param onCellLongPress fun(view:ListView, cellIns:GameObject, cellIdx:int, longPressIdx:int) Cell触发长按
---@param onCellCentered fun(view:ListView, cellIns:GameObject, cellIdx:int) Cell处于ViewPort中间
function UICtrl:AddGridViewListener(key_or_path, onCellLoad, onCellClick, onCellLongPress, onCellCentered)
    self:AddListViewListener(key_or_path, onCellLoad, onCellClick, onCellLongPress, onCellCentered)
end

--endregion

--region ExpandView
---设置ExpandView的回调
---@param key_or_path string | UObject
---@param onGetChildCellCount fun(view:ExpandView, cellIdx:int):Int 获取二级列表数量
---@param onChildCellLoad fun(view:ExpandView, childCellIns:GameObject, childCellIdx:int, cellIdx:int) 加载二级Cell
---@param onChildCellClick fun(view:ExpandView, childCellIns:GameObject, childCellIdx:int, cellIdx:int) 二级Cell被点击
---@param onChildCellLongPress fun(view:ExpandView, childCellIns:GameObject, childCellIdx:int, longPressIdx:int, cellIdx:int) 二级Cell触发长按
---@param onCellExpand fun(view:ExpandView, cellIdx:int, isExpand:bool) 展开关闭时回调
function UICtrl:AddExpandViewListener(key_or_path, onGetChildCellCount, onChildCellLoad, onChildCellClick, onChildCellLongPress, onCellExpand)
    local id = self:GetComponentID(key_or_path, self.UIEventType.ExpandView)
    if onGetChildCellCount ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ExpandView, self.UIEventHandlerType.ExpandView_OnGetChildCellCount, onGetChildCellCount)
    end
    if onChildCellLoad ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ExpandView, self.UIEventHandlerType.ExpandView_OnChildCellLoad, onChildCellLoad)
    end
    if onChildCellClick ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ExpandView, self.UIEventHandlerType.ExpandView_OnChildCellClick, onChildCellClick)
    end
    if onChildCellLongPress ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ExpandView, self.UIEventHandlerType.ExpandView_OnChildCellLongPress, onChildCellLongPress)
    end
    if onCellExpand ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.ExpandView, self.UIEventHandlerType.ExpandView_OnCellExpand, onCellExpand)
    end
end
--endregion

--region TabMenu
---设置TabMenu事件回调
---@param key_or_path string | UObject
---@param onValueChanged fun(type:TabMenu,type:int,type:int) UnityAction<TabMenu, int(new idx), int(old idx)> 菜单选中发生变化
---@param onCellLoad fun(type:TabMenu,type:GameObject,type:int) UnityAction<TabMenu, GameObject, int(idx)> 加载菜单
---@param checkCellSwitch fun(type:int,type:int,type:bool) Func<int(new idx), int(old idx), bool(是否可以切换)>> 判断是否改变TabCell的状态, 结果值为false不会切换
function UICtrl:AddTabMenuListener(key_or_path, onValueChanged, onCellLoad, checkCellSwitch)
    local id = self:GetComponentID(key_or_path, self.UIEventType.TabMenu)
    if onValueChanged ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.TabMenu, self.UIEventHandlerType.TabMenu_OnValueChanged, onValueChanged)
    end
    if onCellLoad ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.TabMenu, self.UIEventHandlerType.TabMenu_OnCellLoad, onCellLoad)
    end
    if checkCellSwitch ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.TabMenu, self.UIEventHandlerType.TabMenu_OnValueWillChange, checkCellSwitch)
    end
end
--endregion

--region X3TabMenu
---设置X3TabMenu事件回调
---@param key_or_path string | UObject
---@param onValueChanged fun(type:X3TabMenu,type:int,type:int) UnityAction<X3TabMenu, int(new idx), int(old idx)> 菜单选中发生变化
---@param onCellLoad fun(type:X3TabMenu,type:GameObject,type:int) UnityAction<X3TabMenu, GameObject, int(idx)> 加载一级菜单
---@param checkCellSwitch fun(type:X3TabMenu,type:int,type:int):Boolean Func<X3TabMenu,int(new idx),  int(childIdx),>> 判断是否改变TabCell的状态, 结果值为false不会切换
---@param onChildCellLoad fun(type:X3TabMenu,type:GameObject,type:int,type:int)UnityAction<X3TabMenu, GameObject, int(idx) int(childIdx)> 加载二级级菜单
---@param onGetChildCellCount fun(type:X3TabMenu,type:int):Int UnityAction<X3TabMenu, int(idx)> 加载二级级菜单
---@param onCellExpand fun(type:X3TabMenu,type:int,type:bool) UnityAction<X3TabMenu, int(idx),bool> 展开折叠事件
function UICtrl:AddX3TabMenuListener(key_or_path, onValueChanged, onCellLoad, checkCellSwitch, onChildCellLoad, onGetChildCellCount, onCellExpand)
    local id = self:GetComponentID(key_or_path, self.UIEventType.X3TabMenu)
    if onValueChanged ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.X3TabMenu, self.UIEventHandlerType.X3TabMenu_OnValueChanged, onValueChanged)
    end
    if onCellLoad ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.X3TabMenu, self.UIEventHandlerType.X3TabMenu_OnCellLoad, onCellLoad)
    end
    if checkCellSwitch ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.X3TabMenu, self.UIEventHandlerType.X3TabMenu_OnValueWillChange, checkCellSwitch)
    end

    if onChildCellLoad ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.X3TabMenu, self.UIEventHandlerType.X3TabMenu_OnChildCellLoad, onChildCellLoad)
    end

    if onGetChildCellCount ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.X3TabMenu, self.UIEventHandlerType.X3TabMenu_OnGetChildCellCount, onGetChildCellCount)
    end
    if onCellExpand ~= nil then
        self:_RegisterEventDelegate(id, self.UIEventType.X3TabMenu, self.UIEventHandlerType.X3TabMenu_OnCellExpand, onCellExpand)
    end
end
--endregion

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
function UICtrl:_RegisterEventDelegate(id, eventType, handlerType, func)
    self:_InternalInvokeFunc("RegisterEventDelegate", false, id, eventType, handlerType, func, self)
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
function UICtrl:_UnregisterEventDelegate(id, eventType, handlerType, func)
    self:_InternalInvokeFunc("UnregisterEventDelegate", false, id, eventType, handlerType, func)
end