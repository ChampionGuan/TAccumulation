---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2022/9/16 22:36
---@class EventDelegate
local EventDelegate = class("EventDelegate")
---@class EventDelegateData
---@field eventType UIEventType
---@field handlerType UIEventHandlerType
---@field eventFunc function
---@field eventTarget table
---@field eventId int
---@field isSelf boolean

function EventDelegate:ctor()
    ---@type table<int,EventDelegateData>
    self.eventMap = {}
    ---@type table[]
    self.pool = {}
    ---@type fun():table
    self.poolGetTable = nil
    ---@type fun(type:table)
    self.poolReleaseTable = nil
    ---@type table<table,int>
    self.targetMap = {}
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
---@param target table
---@param isSelf boolean
function EventDelegate:Add(id, eventType, handlerType, func, target, isSelf)
    if not eventType or not handlerType or not id or not func then
        Debug.LogErrorFormat("[EventDelegate] Add failed eventType = %s,handlerType=%s,id=%s,func=%s", eventType, handlerType, id, func)
        return
    end
    if UNITY_EDITOR then
        if type(func)~="function" then
            Debug.LogErrorFormat("[EventDelegate] Add failed  func is not lua function eventType = %s,handlerType=%s,id=%s,func=%s", eventType, handlerType, id, func)
            return
        end
    end
    ---@type EventDelegateData
    local res = nil
    if not self.eventMap[id] then
        self.eventMap[id] = self:GetTable()
    end
    if not self.eventMap[id][eventType] then
        self.eventMap[id][eventType] = self:GetTable()
    end

    res = self.eventMap[id][eventType][handlerType]
    if res then
        self:Release(res)
    end
    res = self:GenData(id, eventType, handlerType, func, target)
    if isSelf then
        res.isSelf = isSelf
    end
    self.eventMap[id][eventType][handlerType] = res
    if target then
        if not self.targetMap[target] then
            self.targetMap[target] = self:GetTable()
        end
        table.insert(self.targetMap[target], id)
    end
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
function EventDelegate:Remove(id, eventType, handlerType, func)
    if not eventType or not id then
        return
    end
    local res = self.eventMap[id]
    if res then
        if res[eventType] then
            local temp
            if handlerType then
                temp = res[eventType][handlerType]
                res[eventType][handlerType] = nil
            else
                temp = res[eventType]
                for k, v in pairs(temp) do
                    self:Release(v)
                end
                res[eventType] = nil
            end
            self:Release(temp)
        end
    end
end

---@param target table
---@param eventType UIEventType
---@param handlerType UIEventHandlerType
function EventDelegate:RemoveByTarget(target, eventType, handlerType)
    local ids = self.targetMap[target]
    if ids then
        for k, id in pairs(ids) do
            if not eventType and not handlerType then
                local res = self.eventMap[id]
                if res then
                    for e, v in pairs(res) do
                        for h, d in pairs(v) do
                            self:Release(d)
                        end
                        self:Release(v)
                    end
                    self:Release(res)
                    self.eventMap[id] = nil
                end
            else
                self:Remove(id, eventType, handlerType)
            end
        end
        self:Release(ids)
        self.targetMap[target] = nil
    end
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@return EventDelegateData
function EventDelegate:Get(id, eventType, handlerType)
    local res = self.eventMap[id]
    if res then
        if res[eventType] then
            return res[eventType][handlerType]
        end
    end
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@vararg
function EventDelegate:Invoke(id, eventType, handlerType, ...)
    local eventData = self:Get(id, eventType, handlerType)
    if eventData then
        local call = eventData.eventFunc
        if call then
            local isSelf = eventData.isSelf
            if isSelf then
                return true, call(eventData.eventTarget, ...)
            end
            return true, call(...)
        end
    end
    return false
end

---@param eventType UIEventType
---@param handlerType UIEventHandlerType
---@param id int
---@param func function
---@param target table
---@return EventDelegateData
function EventDelegate:GenData(id, eventType, handlerType, func, target)
    ---@type EventDelegateData
    local res = self:GetTable()
    res.eventType = eventType
    res.handlerType = handlerType
    res.eventId = id
    res.eventFunc = func
    res.eventTarget = target
    return res
end

---@param data EventDelegateData | table
function EventDelegate:Release(data)
    if self.poolReleaseTable then
        self.poolReleaseTable(data)
    else
        table.insert(self.pool, data)
    end
end

---@type table
function EventDelegate:GetTable()
    if self.poolGetTable then
        return self.poolGetTable()
    end
    if #self.pool > 0 then
        return table.remove(self.pool)
    end
    return {}
end

---@param poolGet fun():table
---@param poolRelease fun(type:table)
function EventDelegate:SetPool(poolGet, poolRelease)
    self.poolGetTable = poolGet
    self.poolReleaseTable = poolRelease
end

return EventDelegate