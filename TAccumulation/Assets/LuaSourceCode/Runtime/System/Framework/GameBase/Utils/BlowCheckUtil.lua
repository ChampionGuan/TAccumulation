---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by hongyun.
--- DateTime: 2022/2/10 15:15

---@class BlowCheckUtil 吹气检测工具类
BlowCheckUtil = {}
local this = BlowCheckUtil

---吹气的C#类
local CS_MicPuff = CS.X3Game.Platform.MicPuff
BlowCheckUtil.PermissionType = {
    Unknown = -1, --没有申请过，未知
    Success = 0, --权限获取成功
    Fail = 1, --权限获取失败
}
---启动回调的错误码
BlowCheckUtil.ErrorCode = {
    Success = 0, ---成功
    AlreadyRunning = 1, ---已经在运行中
    AlreadyStarting = 2, ---已经在启动中
    MicNotExists = 3, ---无可用的录音设备
    SetCategoryFailed = 4, ---设置AudioSessionCategory失败
    Cancelled = 5, ---被取消了（启动过程中调用了Stop()）
    Unknown = 6, ---未知
    NoPermission = 7, ---未获得录音权限
}
BlowCheckUtil.PermissionState = BlowCheckUtil.PermissionType.Unknown
BlowCheckUtil.IsCanRecover = false --是否自动恢复

---检测到有效吹气（开始）
---@type fun()
local onPuffStarted = nil
---触发了吹气（成功）
---@type fun()
local onPuffDetected = nil
---@type fun()
local onPuffStopped = nil
---距吹气成功的进度
---@type fun(t:float)
local onPuffProgress = nil
---@type bool 运行状态，防止频繁点击结束时延帧导致的错误开启
local isRunning = false
---@type AudioRecordUtil
local AudioRecordUtil = require("Runtime.System.X3Game.Modules.AudioRecord.AudioRecordUtil")

function BlowCheckUtil.OnGameFocus(focus)
    if BlowCheckUtil.PermissionState == BlowCheckUtil.PermissionType.Fail then
        return
    end

    Debug.LogFormat("BlowCheckUtil.OnGameFocus focus= %s", focus and 1 or 0)
    if focus then
        if BlowCheckUtil.IsCanRecover then
            BlowCheckUtil.StartCheck()
        end
    else
        BlowCheckUtil.EndCheck()
    end
end

---添加吹气检测监听
---@param onBlowSuccess fun() Action 吹气检测成功回调
---@param onBlowStart fun() Action 开始吹气动作的回调
---@param onBlowStop fun() Action 停止吹气动作的回调
---@param onBlowProgress fun(progress:float) Action 停止吹气动作的回调
function BlowCheckUtil.AddListener(onBlowSuccess, onBlowStart, onBlowStop, onBlowProgress)
    EventMgr.AddListener("Game_Focus", BlowCheckUtil.OnGameFocus)
    onPuffStarted = onBlowStart
    onPuffDetected = onBlowSuccess
    onPuffStopped = onBlowStop
    onPuffProgress = onBlowProgress
end

---移除吹气检测监听
function BlowCheckUtil.RemoveListener()
    BlowCheckUtil.IsCanRecover = false
    EventMgr.RemoveListener("Game_Focus", BlowCheckUtil.OnGameFocus)
    onPuffStarted = nil
    onPuffDetected = nil
    onPuffStopped = nil
    onPuffProgress = nil
end

---开始吹气检测
---@param cb fun(errorCode:int) 请求回调
function BlowCheckUtil.StartCheck(cb)
    if not UNITY_EDITOR and AIRTEST then
        --特殊平台需求不需要调用吹气,默认成功
        if cb then
            cb(this.ErrorCode.Success)
        end
        return
    end
    isRunning = true
    AudioRecordUtil.InitAndroidDevice()
    DevicePermissionUtility.RequestPermissionHaveTips(PlatformConst.PermissionType.RECORD_AUDIO, function(requestGranted)
        if (not requestGranted) then
            this.PermissionState = BlowCheckUtil.PermissionType.Fail
            if (cb) then
                cb(this.ErrorCode.NoPermission)
            end
        else
            this.PermissionState = BlowCheckUtil.PermissionType.Success
            if isRunning then
                this.InternalStartCheck(cb)
            end
        end
        Debug.LogFormatWithTag(GameConst.LogTag.Blow, "Blow CheckPermission result=%s, isRunning=%s", BlowCheckUtil.PermissionState, isRunning and 1 or 0)
    end)
end

---执行真正意义上的开始吹气
---@param cb fun(errorCode:int) 请求回调
function BlowCheckUtil.InternalStartCheck(cb)
    CS_MicPuff.Instance.Delegate = this
    CS_MicPuff.Instance:Start(function(errorCode)
        if (errorCode ~= 0) then
            Debug.LogErrorFormat("启动吹气失败：%s", errorCode)
        end
        ---执行回调
        if cb then
            cb(errorCode)
        end
        --如果回调回来已经停止了，需要再调用Stop
        if isRunning == false then
            BlowCheckUtil.EndCheck()
        end
    end)
end

---结束吹气检测
function BlowCheckUtil.EndCheck()
    isRunning = false
    CS_MicPuff.Instance:Stop()
    CS_MicPuff.Instance.Delegate = nil
end

---设置吹气检测参数
---@param volume float 最低音量 默认值3
---@param frameCount int 连续帧数 默认值10
function BlowCheckUtil.SetParam(volume, frameCount)
    volume = volume or 3
    frameCount = frameCount or 10
    CS_MicPuff.VolumeThreshold = volume
    CS_MicPuff.PuffFrameCountThreshold = frameCount
end

--region MicPuff Delegates
function BlowCheckUtil.OnStarted()

end
function BlowCheckUtil.OnPuffStarted()
    if onPuffStarted then
        onPuffStarted()
    end
end
function BlowCheckUtil.OnPuffDetected()
    if onPuffDetected then
        onPuffDetected()
    end
end
function BlowCheckUtil.OnPuffStopped()
    if onPuffStopped then
        onPuffStopped()
    end
end
function BlowCheckUtil.OnPuffProgress(p)
    if onPuffProgress then
        onPuffProgress(p)
    end
end
function BlowCheckUtil.OnStopped()

end
--endregion

return BlowCheckUtil