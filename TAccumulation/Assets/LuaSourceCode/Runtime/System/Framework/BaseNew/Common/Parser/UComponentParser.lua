---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/6 21:33
---

---@class Framework.UComponentParser:Framework.BaseParser
local UComponentParser = class("UComponentParser", Framework.BaseParser)

local SUPER = "super"
local TEMPLATE = "__index"
local COM_KEY = "__comps__"

local ComponentMeta = {
    __index = function(t, key)
        local temp = rawget(t, TEMPLATE)
        if not temp then
            return
        end
        local res = temp[key]
        if res ~= nil then
            return res
        end
        temp = rawget(t, SUPER)
        if not temp then
            return
        end
        res = temp[key]
        if res ~= nil then
            return res
        end
        local comps = rawget(t, COM_KEY)
        if comps then
            for _, v in ipairs(comps) do
                res = v[key]
                if res ~= nil then
                    return res
                end
            end
        end

        return nil
    end
}

---@class Framework.Components:Framework.Component
---@field private __comps__ Framework.UComponent[]
local Components = class("Components", Framework.Component, true)

---@private
---@param comps Framework.UComponent[]
function Components:SetComps(comps)
    if not self.__comps__ then
        self.__comps__ = PoolUtil.GetTable()
    end
    for _, v in pairs(comps) do
        local comp = Framework.Parser.UComponentParser:CreateUComponent(v)
        comp:SetOwner(self)
        table.insert(self.__comps__, comp)
    end
end

---@private
function Components:Destroy()
    for _, v in pairs(self.__comps__) do
        Framework.Parser.UComponentParser:ReleaseComponent(v)
    end
    PoolUtil.ReleaseTable(self.__comps__)
    self.__comps__ = nil
    Framework.Component.Destroy(self)
end

---@param target Framework.Components
local function BindMeta(target)
    rawset(target, SUPER, Framework.Component)
    rawset(target, TEMPLATE, Components)
    setmetatable(target, ComponentMeta)
end

function UComponentParser:OnInit()
    ---@private
    ---@type table<int,string>
    self.enumToKey = {}
    ---@private
    ---@type table<Framework.UComponent,UComponent.BaseComponent>
    self.componentTemplate = {}
    ---@private
    ---@type string
    self.rootDir = ""
    ---@private
    ---@type table<table,table<string,UComponent.BaseComponent>>
    self.targetMap = {}
    ---@private
    ---@type Framework.UComponent[]
    self.typeEnum = {}
    ---@type fun():table
    self.poolGet = nil
    ---@type fun(type:table)
    self.poolRelease = nil
    ---@type string
    self.externPath = nil
    ---@type table<int,boolean>
    self.externEnumToKey = nil
    ---@type Pool
    self.componentPool = PoolUtil.Get(function()
        return Components.new()
    end, function(comp)
        comp:Destroy()
    end)

    ---@type table<Framework.UComponent,Pool>
    self.uComponentPoolMap = {}

    ---@type fun(type:Framework.UComponent):UComponent.BaseComponent
    self.onGetUComponent = handler(self, self.OnCreateUComponent)
    ---@type fun(type:UComponent.BaseComponent)
    self.onReleaseUComponent = handler(self, self.OnReleaseUComponent)

end

---@param target table
---@param compType Framework.UComponent | Framework.UComponent[]
---@return UComponent.BaseComponent,boolean
function UComponentParser:Bind(target, name, compType)
    local comp = self:GetTargetComponent(target, name)
    if comp then
        return comp
    end
    if type(compType) == "table" then
        ---@type Framework.Components
        comp = self.componentPool:Get()
        comp:SetComps(compType)
        BindMeta(comp)
    else
        comp = self:CreateUComponent(compType)
    end

    self:AddComponent(target, name, comp)
    return comp, true
end

---@param target table
function UComponentParser:UnBind(target)
    local comps = self.targetMap[target]
    if comps then
        self.targetMap[target] = nil
        for _, comp in pairs(comps) do
            self:ReleaseComponent(comp)
        end
        self:ReleaseTable(comps)
    end
end

---清理数据
function UComponentParser:OnDestroy()
    table.clear(self.enumToKey)
    table.clear(self.targetMap)
    table.clear(self.enumToComponent)
    table.clear(self.typeEnum)
    table.clear(self.uComponentPoolMap)
    self.componentPool = nil
end

---@param poolGet fun():table
---@param poolRelease fun(type:table)
function UComponentParser:SetPool(poolGet, poolRelease)
    self.poolGet = poolGet
    self.poolRelease = poolRelease
end

---@param externPath string
function UComponentParser:SetExtern(externPath, externEnum)
    self.externPath = externPath
    self.externEnumToKey = {}
    for _, v in pairs(externEnum) do
        self.externEnumToKey[v] = true
    end
end

---@param compType Framework.UComponent
---@param target table
function UComponentParser:BindComponentHandler(compType, target)
    if not target or not compType then
        self.logger:LogErrorFormat("[UComponentParser:BindComponentHandler] compType=[%s],target=[%s]", compType, target)
        return
    end
    local comp = self:GetComponentTemplate(compType)
    if comp then
        for k, v in pairs(comp) do
            if type(v) == "function" and not target[k] then
                target[k] = v
            end
        end
    end
end

--region 私有函数
---@private
---@param target table
---@param name string
---@param comp UComponent.BaseComponent
function UComponentParser:AddComponent(target, name, comp)
    local res = self.targetMap[target]
    if not res then
        res = self:GetTable()
        self.targetMap[target] = res
    end
    res[name] = comp
    comp:SetName(name)
    comp:SetHandler(Framework.FunctionGetHandler)
end

---@private
---@param target table
---@param name string
---@return Framework.Component
function UComponentParser:GetTargetComponent(target, name)
    local res = self.targetMap[target]
    if not res then
        res = self:GetTable()
        self.targetMap[target] = res
    end
    return res[name]
end

---@private
---@param comp UComponent.BaseComponent
function UComponentParser:ReleaseComponent(comp)
    if comp.__Components then
        self.componentPool:Release(comp)
    else
        self:ReleaseUComponent(comp)
    end
end

---@private
---@param compType Framework.UComponent
---@return UComponent.BaseComponent
function UComponentParser:CreateUComponent(compType)
    local pool = self.uComponentPoolMap[compType]
    if not pool then
        pool = PoolUtil.Get(self.onGetUComponent, self.onReleaseUComponent)
        self.uComponentPoolMap[compType] = pool
    end
    ---@type UComponent.BaseComponent
    local comp = pool:Get(compType)
    comp:SetType(compType)
    return comp
end

---@private
---@param comp UComponent.BaseComponent
function UComponentParser:ReleaseUComponent(comp)
    local compType = comp:GetType()
    local pool = self.uComponentPoolMap[compType]
    if pool then
        pool:Release(comp)
    end
end

---@private
---@param compType Framework.UComponent
function UComponentParser:OnCreateUComponent(compType)
    local template = self:GetComponentTemplate(compType)
    if template then
        return template.new()
    end
end

---@private
---@param com Framework.UComponent
function UComponentParser:OnReleaseUComponent(com)
    com:Destroy()
end

---@private
---@param compType Framework.UComponent
function UComponentParser:GetComponentTemplate(compType)
    if not compType then
        self.logger:LogErrorFormat("[UComponentParser:GetComponentTemplate] failed compType is nil")
        return
    end
    local comp = self.componentTemplate[compType]
    if not comp then
        local rootPath = self.rootDir
        if self.externEnumToKey[compType] then
            rootPath = self.externPath
        end
        local path = string.concat(rootPath, self.enumToKey[compType])
        comp = require(path)
        self.componentTemplate[compType] = comp
        LuaUtil.UnLoadLua(path)
    end
    return comp
end

---@param compType Framework.UComponent
---@param isCreate boolean
function UComponentParser:GetComponent(compType, isCreate)
    if not isCreate then
        return self:GetComponentTemplate(compType)
    else
        return self:CreateUComponent(compType)
    end
end

---@private
---@return table
function UComponentParser:GetTable()
    if self.poolGet then
        return self.poolGet()
    end
    return PoolUtil.GetTable()
end

---@private
---@param t
function UComponentParser:ReleaseTable(t)
    if self.poolRelease then
        self.poolRelease(t)
    end
    return PoolUtil.ReleaseTable(t)
end

---@protected
function UComponentParser:OnDestroy()
    table.clear(self.enumToKey)
    table.clear(self.targetMap)
    table.clear(self.componentTemplate)
    table.clear(self.uComponentPoolMap)
    PoolUtil.Release(self.componentPool)
    self.typeEnum = nil
    self.componentPool = nil
    self.onGetUComponent = nil
    self.onReleaseUComponent = nil
end

--endregion

return UComponentParser