---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/8 19:58
---

---@class Framework.ViewParser:Framework.BaseParser
local ViewParser = class("ViewParser", Framework.BaseParser)

local COM_KEY = "__comps__"
local SUB_VIEW_KEY = "__views__"
local SELF_COM_KEY = "__self_comps__"
local SELF_COMP_NAME = "__self__"
local SUPER = "super"
local TEMPLATE = "__index"
local VIEW_TAG_FORMAT = "UIView_%sView"
local ViewMeta

--region 公开方法

---@param target Framework.BaseView
---@param viewType X3Game.ViewType
---@return Framework.BaseView,boolean
function ViewParser:Bind(target, viewType)
    if not target or not viewType then
        self.logger:LogErrorFormat("[ViewParser:Bind] failed target is [%s],viewTag is [%s]", target and target.__cname or nil, viewType)
        return
    end
    ---@type Framework.BaseView
    local view, isNew = self.super.Bind(self, target, viewType)
    if isNew then
        self:BindView(view)
    end
    return view, isNew
end

---@param go GameObject
---@param viewType X3Game.ViewType
---@param target Framework.UICtrl
---@return Framework.BaseView
function ViewParser:BindByObj(go, viewType, target)
    local view = self:Get(target, go)
    if not view then
        view = self:Create(viewType)
        self:Add(target, go, view)
        local linker = Framework.GetLinker(go)
        view:SetLinker(linker)
        view:SetOwner(go, target)
        self:BindView(view)
        
    end
    return view
end

---@param target Framework.BaseView
---@param viewTag string
---@return Framework.BaseView
function ViewParser:BindByViewTag(target, viewTag)
    if not target or not viewTag then
        self.logger:LogErrorFormat("[ViewParser:BindByViewTag] failed target is [%s],viewTag is [%s]", target and target.__cname or nil, viewTag)
        return
    end
    local viewType = self:GetViewTypeByViewTag(viewTag)
    if viewType then
        return self:Bind(target, viewType)
    end
end

--endregion

--region 私有方法
---@private
---@param viewTag string
---@return X3Game.ViewType
function ViewParser:GetViewTypeByViewTag(viewTag)
    local res = self.viewTagToViewType[viewTag]
    if not res then
        res = string.format(VIEW_TAG_FORMAT, viewTag)
        self.viewTagToViewType[viewTag] = self.typeEnum[res]
    end
    return self.viewTagToViewType[viewTag]
end

---@private
---@param target Framework.BaseView
---@param key string
---@return UComponent.BaseComponent
function ViewParser:BindComponents(target, key)
    local comps = rawget(target[TEMPLATE], COM_KEY)
    if not comps then
        return
    end
    local compType = comps[key]
    if compType then
        local comp, isNew = Framework.Parser.UComponentParser:Bind(target, key, compType)
        if isNew then
            comp:SetOwner(target)
            comp:SetCtrl(target:GetCtrl())
            comp:SetLinker(target:GetLinker())
            rawset(target, key, comp)
        end
        return comp
    end
    return nil
end

---@private
---@param target Framework.BaseView
---@param key string
---@return UComponent.BaseComponent
function ViewParser:BindViews(target, key)
    local comps = rawget(target[TEMPLATE], SUB_VIEW_KEY)
    if not comps then
        return
    end
    local compType = comps[key]
    if compType then
        local comp, isNew = Framework.Parser.ViewParser:Bind(target, compType)
        if isNew then
            comp:SetOwner(target)
            comp:SetLinker(Framework.GetLinker(target:GetLinker(), key))
            rawset(target, key, comp)
        end

        return comp
    end
    return
end

---@private
---@param target Framework.BaseView
---@return UComponent.BaseComponent
function ViewParser:BindSelfComponents(target)
    local comp = rawget(target, SELF_COMP_NAME)
    if comp then
        return comp
    end
    local comps = rawget(target[TEMPLATE], SELF_COM_KEY)
    if not comps then
        return
    end
    comp, isNew = Framework.Parser.UComponentParser:Bind(target, "", comps)
    if isNew then
        comp:SetOwner(target)
        comp:SetLinker(target:GetLinker())
        comp:SetCtrl(target:GetCtrl())
        rawset(target, SELF_COMP_NAME, comp)
    end

    return comp
end

---@param view Framework.BaseView
function ViewParser:BindView(view)
    view:SetHandler(Framework.FunctionGetHandler)
    rawset(view, SUPER, view[SUPER])
    rawset(view, TEMPLATE, view[TEMPLATE])
    setmetatable(view, ViewMeta)
end

function ViewParser:OnInit()
    self.super.OnInit(self)
    ---@type table<string,X3Game.ViewType>
    self.viewTagToViewType = {}
end

function ViewParser:OnDestroy()
    table.clear(self.viewTagToViewType)
    self.super.OnDestroy()
end

ViewMeta = {
    ---@param key string
    __index = function(target, key)
        local temp = rawget(target, TEMPLATE)
        if not temp then
            return
        end
        local res = temp[key]
        if res ~= nil then
            return res
        end
        temp = rawget(target, SUPER)
        if not temp then
            return
        end
        res = temp[key]
        if res ~= nil then
            return res
        end
        res = Framework.Parser.ViewParser:BindComponents(target, key)
        if res then
            return res
        end
        res = Framework.Parser.ViewParser:BindViews(target, key)
        if res then
            return res
        end

        res = Framework.Parser.ViewParser:BindSelfComponents(target)
        if res then
            return res[key]
        end
        return nil
    end
}

--endregion



return ViewParser