---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/8 21:41
---
---@class Framework.CtrlParser:Framework.BaseParser
local CtrlParser = class("CtrlParser", Framework.BaseParser)
local SPLIT = "__"
local TAG = "."

--region 公开方法
---@param target Framework.UICtrl
---@param ctrlType X3Game.CtrlType
---@param noBindView boolean
---@return Framework.UICtrl
function CtrlParser:Bind(target, ctrlType, noBindView)
    ---@type Framework.GameObjectCtrl
    local ctrl, isNew = self.super.Bind(self, target, ctrlType)
    if isNew then
        if Framework.IsTypeOfGameObjectCtrl(target) then
            ctrl:SetOwner(nil, target)
            ctrl:SetLinker(target:GetLinker())
            ctrl:Init()
        end
    end
    if isNew and not noBindView then
        self:BindViewByCtrlType(ctrl, ctrlType)
    end
    return ctrl
end

---@param go GameObject
---@param ctrlType X3Game.CtrlType
---@param viewType X3Game.ViewType
---@param target Framework.UICtrl
---@return Framework.UICtrl
function CtrlParser:BindByObj(go, ctrlType, target, viewType)
    local ctrl = self:Get(target, go)
    if not ctrl then
        ctrl = self:Create(ctrlType)
        self:Add(target, go, ctrl)
        local linker = Framework.GetLinker(go)
        ctrl:SetLinker(linker)
        ctrl:SetOwner(go, target)
        if viewType then
            Framework.Parser.CtrlParser:BindViewByViewType(ctrl, viewType)
        else
            Framework.Parser.CtrlParser:BindViewByCtrlType(ctrl, ctrlType)
        end
    end
    return ctrl
end

---@param target Framework.UICtrl
---@param ctrlType X3Game.CtrlType
function CtrlParser:BindViewByCtrlType(target, ctrlType)
    self:BindViewByViewType(target, self:GetViewType(ctrlType))
end

---@param target Framework.UICtrl
---@param viewType X3Game.ViewType
function CtrlParser:BindViewByViewType(target, viewType)
    self:BindView(target, Framework.Parser.ViewParser:Bind(target, viewType))
end

---@class X3Game.View.UseArgString2View
---@param target Framework.UICtrl
---@param viewTag string
---@return X3Game.View.UseArgString2View
function CtrlParser:BindViewByTag(target, viewTag)
    self:BindView(target, Framework.Parser.ViewParser:BindByViewTag(target, viewTag))
end

---@param target Framework.UICtrl
---@param view Framework.BaseView
function CtrlParser:BindView(target, view)
    if target and view then
        target:SetView(view)
        view:SetCtrl(target)
        target:Init()
    else
        self.logger:LogError("[CtrlParser:BindView] failed ctrl is nil or view is nil")
    end
end

--endregion

--region 私有方法
---@private
---@param ctrlType X3Game.CtrlType
---@return X3Game.ViewType
function CtrlParser:GetViewType(ctrlType)
    return self.ctrlToView[ctrlType]
end

---@protected
function CtrlParser:OnInit()
    self.super.OnInit(self)
    ---@type table<X3Game.CtrlType,X3Game.ViewType>
    self.ctrlToView = {}
    ---@type table<Framework.GameObjectCtrl,table<X3Game.ViewType,Framework.BaseView>>
    self.targetObjMap = {}
end

---@protected
function CtrlParser:OnDestroy()
    table.clear(self.ctrlToView)
    self.super.OnDestroy(self)
end

---@private
---@param ctrlType X3Game.CtrlType
function CtrlParser:GetPath(ctrlType)
    local strKey = self.enumToKey[ctrlType]
    local res = string.replace(strKey, SPLIT, TAG)
    return string.concat(self.rootDir, res)
end


--endregion

---@param rootDir string
---@param typeEnum Framework.BaseType
---@param ctrlToView table<X3Game.CtrlType,X3Game.ViewType>
function CtrlParser:Parse(rootDir, typeEnum, ctrlToView)
    self.super.Parse(self, rootDir, typeEnum)
    self.ctrlToView = ctrlToView
end

return CtrlParser