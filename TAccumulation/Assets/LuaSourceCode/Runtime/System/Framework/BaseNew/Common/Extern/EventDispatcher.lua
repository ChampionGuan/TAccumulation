---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/5 15:47
---@class Framework.EventDispatcher
---@field private proxy EventMgr
---@field private owner Framework.BaseCtrl
local EventDispatcher = class("EventDispatcher", nil, nil, true)

---派发事件
---可以传递任意参数，具体参数可自行定义
---@param event_name string | int 需要保持唯一
---@vararg any
function EventDispatcher:Fire(event_name, ...)
    self.proxy.Dispatch(event_name, ...)
end

---异步派发事件[目前是隔一帧执行]
---可以传递任意参数，具体参数可自行定义
---@param event_name string | int 需要保持唯一
---@vararg any
function EventDispatcher:FireAsync(event_name, ...)
    self.proxy.DispatchAsync(event_name, ...)
end

---注册事件 调用的时候，如果有target 会以冒号方式调用（可以访问方法里面的self），如果没有，就点调用
---@param event_name string | int
---@param func function
function EventDispatcher:Add(event_name, func)
    self.proxy.AddListener(event_name, func, self.owner)
end

---只执行一次的事件,不需要自行刪除
---@param event_name string | int
---@param func function
function EventDispatcher:AddOnce(event_name, func)
    self.proxy.AddListenerOnce(event_name, func, self.owner)
end

---根据绑定的target反注册事件
function EventDispatcher:RemoveAll()
    self.proxy.RemoveListenerByTarget(self.owner)
end

---根据事件名称反注册事件
---@param event_name string | int
---@param func function
function EventDispatcher:Remove(event_name, func)
    self.proxy.RemoveListener(event_name, func, self.owner)
end

---@param event_name string
function EventDispatcher:RemoveByName(event_name)
    self.proxy.RemoveListenerByName(event_name, self.owner)
end

--region  底层调用
---@private
---@param proxy Debug
function EventDispatcher:SetProxy(proxy)
    self.proxy = proxy
end

---@private
---@param owner Framework.BaseCtrl
function EventDispatcher:SetOwner(owner)
    self.owner = owner
end

---@private
function EventDispatcher:Init()

end

---@private
function EventDispatcher:Destroy()
    self:RemoveAll()
    self.owner = nil
end
--endregion

return EventDispatcher