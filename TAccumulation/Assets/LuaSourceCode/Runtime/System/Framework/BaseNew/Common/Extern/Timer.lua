---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/5 15:44
---@class Framework.Timer
---@field private proxy TimerMgr
---@field owner Framework.BaseCtrl
local Timer = class("Timer", nil, nil, true)

---添加延时回调（忽略scale）
---@param delay number 单位是秒
---@param func function
---@param count boolean | number  如果是number的话，执行次数，-1或者true:无限次，>=1 执行count次数
---@param update_type number TimerMgr.UpdateType  1:update 2:lateupdate,3:fixupdate 默认1
---@param tag_name string 标签名称，用于调试
---@return int 用于取消注册的唯一id
function Timer:Add(delay, func, count, update_type, tag_name)
    return self.proxy.AddTimer(delay, func, self.owner, count, update_type, tag_name)
end

---添加延时回调,考虑scale
---@param delay number 单位是秒
---@param func function
---@param count boolean | number  如果是number的话，执行次数，-1或者true:无限次，>=1 执行count次数
---@param update_type number TimerMgr.UpdateType  1:update 2:lateupdate,3:fixupdate 默认1
---@param tag_name string 标签名称，用于调试
---@return int 用于取消注册的唯一id
function Timer:AddScaled(delay, func, count, update_type, tag_name)
    return self.proxy.AddScaledTimer(delay, func, self.owner, count, update_type, tag_name)
end

---延时帧调用
---@param frame_count int 几帧之后执行
---@param func function
---@param count int 执行次数
---@param update_type number TimerMgr.UpdateType  1:update 2:lateupdate,3:fixupdate 默认1
---@return int
function Timer:AddTimerByFrame(frame_count, func, count, update_type)
    return Timer:AddTimer(frame_count, func, self.owner, count, update_type)
end

---取消延时回调
---@param timer_id number
function Timer:Discard(timer_id)
    self.proxy.Discard(timer_id)
end

---根据绑定的target取消所有延时回调
function Timer:DiscardAll()
    self.proxy.DiscardTimerByTarget(self.owner)
end

---获取零时区时间戳
---@param date _date
---@return number
function Timer:GetUnixTimestamp(date)
    return self.proxy.GetUnixTimestamp(date)
end

---根据零时区时间戳转换成当前服务器所在时区日期
---@param timestamp number
---@return _date
function Timer:GetDateByUnixTimestamp(timestamp)
    return self.proxy.GetDateByUnixTimestamp(timestamp)
end

---根据服务器下发的时间戳计算日期
---@param timestamp number
---@return _date
function Timer:GetDateByServerTimestamp(timestamp)
    return self.proxy.GetDateByServerTimestamp(timestamp)
end

---获取时区
---@return number
function Timer:GetTimeZone()
    return self.proxy.GetTimeZone()
end

---获取服务器时区时间戳偏移量
function Timer:GetZoneTimestampOffset()
    return self.proxy.GetZoneTimestampOffset()
end

---获取当前时间戳（单位是秒）浮点数,服务器同步的时间戳
---返回的是unix的时间戳
---@param is_force boolean 是否需要同步一次
---@return int
function Timer:GetCurTimeSeconds(is_force)
    return self.proxy.GetCurTimeSeconds(is_force)
end

---@return float
function Timer:GetRealTimeSeconds()
    return self.proxy.GetRealTimeSeconds()
end

---@return _date
function Timer:GetCurDate(is_force)
    return self.proxy.GetCurDate(is_force)
end

---获取RealtimeSinceStartup
---@param force boolean 是否需要强制校验
---@return float
function Timer:RealtimeSinceStartup(force)
    return self.proxy.RealtimeSinceStartup(force)
end

---返回游戏当前帧数
---@return int
function Timer:GetFrameCount()
    return self.proxy.GetFrameCount()
end

---获取当前tick
---@param is_unscaled boolean
---@return number
function Timer:GetCurTickDelta(is_unscaled)
    return self.proxy.GetCurTickDelta(is_unscaled)
end

--region  底层调用
---@private
---@param proxy Debug
function Timer:SetProxy(proxy)
    self.proxy = proxy
end

---@private
---@param owner Framework.BaseCtrl
function Timer:SetOwner(owner)
    self.owner = owner
end

---@private
function Timer:Init()

end

---@private
function Timer:Destroy()
    self:DiscardAll()
    self.owner = nil
end

--endregion

return Timer