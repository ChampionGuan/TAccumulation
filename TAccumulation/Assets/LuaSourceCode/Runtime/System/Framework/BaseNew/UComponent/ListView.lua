---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/5 21:12
---
---列表组件
---@class UComponent.ListView:UComponent.LoadOrSetMenu
local ListView = class("ListView", Framework.Parser.UComponentParser:GetComponent(UComponent.LoadOrSetMenu))

---设置ListView的回调
---@param onCellLoad fun(view:ListView, cellIns:GameObject, cellIdx:int):Vector2 加载Cell数据（需要返回Vector2）
---@param onCellClick fun(view:ListView, cellIns:GameObject, cellIdx:int) Cell被点击
---@param onCellLongPress fun(view:ListView, cellIns:GameObject, cellIdx:int, longPressIdx:int) Cell触发长按
---@param onCellCentered fun(view:ListView, cellIns:GameObject, cellIdx:int) Cell处于ViewPort中间
---@param onScrollEnd fun(type:X3ScrollView) UnityAction<BaseScrollView> 滚动结束
---@param onScrolling fun(type:X3ScrollView,type:Vector2) UnityAction<BaseScrollView, Vector2> 滚动中
---@param onRefresh fun(type:X3ScrollView,type:float) UnityAction<X3ScrollView, float> 触发刷新事件
function ListView:SetListener(onCellLoad, onCellClick, onCellLongPress, onCellCentered, onScrolling, onScrollEnd, onRefresh)
    local id = self:GetComponentID(self.UIEventType.ListView)
    local res = (onCellLoad or onCellClick or onCellLongPress or onCellCentered or onScrolling or onScrollEnd or onRefresh) ~= nil
    if res then
        if onCellLoad ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellLoad, onCellLoad)
        end
        if onCellClick ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellClick, onCellClick)
        end
        if onCellLongPress ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellLongPress, onCellLongPress)
        end
        if onCellCentered ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellCentered, onCellCentered)
        end
        if onCellCentered ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ListView, self.UIEventHandlerType.ListView_OnCellCentered, onCellCentered)
        end
        if onScrolling ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ScrollView, self.UIEventHandlerType.ScrollView_OnScrolling, onScrolling)
        end
        if onScrollEnd ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ScrollView, self.UIEventHandlerType.ScrollView_OnScrollEnd, onScrollEnd)
        end
        if onRefresh ~= nil then
            self:_RegisterEventDelegate(id, self.UIEventType.ScrollView, self.UIEventHandlerType.ScrollView_OnRefresh, onRefresh)
        end
    else
        self:_UnregisterEventDelegate(id, self.UIEventType.ListView)
        self:_UnregisterEventDelegate(id, self.UIEventType.ScrollView)
    end

end

---@param cellIdx int
---@param duration float
---@param ease int
---@param onComplete fun()
function ListView:GoTo(cellIdx, duration, ease, onComplete)
    duration = duration or 0
    ease = ease or CS.PapeGames.X3.EasingFunction.Ease.Linear
    self:_InvokeFunc("GoToGridListView", cellIdx, duration, ease, onComplete)
end

---调用GridView/ListView/ExpandView的Refresh()
---@param cellIdx int Cell序号(0=第一个Cell，-1=刷新当前显示中的所有Cell)
function ListView:Refresh(cellIdx)
    self:_InvokeFunc("RefreshGridListView", cellIdx)
end

---设置ListView选中cell
---@param cellIdx int
---@param sendClickEvent boolean 是否发送click事件
function ListView:SelectCell(cellIdx, sendClickEvent)
    self:_InvokeFunc("SelectCell", cellIdx, sendClickEvent)
end

---将ScrollView滚动到normalizedPosition
---normalizedPosition: 滚动到右上角为(1, 1)，左下角为(0, 0)
---@param normalizedPosition Vector2
---@param duration number float 滚动时间（秒）
---@param easing int PapeGames.X3.EasingFunction.Ease 缓动
---@param onComplete  fun(type:X3ScrollView)  System.Action<X3ScrollView> 滚动完毕的回调
function ListView:ScrollTo(normalizedPosition, duration, easing, onComplete)
    easing = easing or CS.PapeGames.X3.EasingFunction.Ease.EaseInSine
    self:_InvokeFunc("ScrollTo", normalizedPosition, duration, easing, onComplete)
end

---将ScrollView滚动到normalizedPosition
---normalizedPosition: 滚动到右上角为(1, 1)，左下角为(0, 0)
---@param cellIdx int
---@param duration number float 滚动时间（秒）
---@param easing int PapeGames.X3.EasingFunction.Ease 缓动
---@param onComplete  fun(type:X3ScrollView)  System.Action<X3ScrollView> 滚动完毕的回调
function ListView:ScrollToCell(cellIdx, duration, easing, onComplete)
    easing = easing or CS.PapeGames.X3.EasingFunction.Ease.EaseInSine
    self:_InvokeFunc("ScrollToCell", cellIdx, duration, easing, onComplete)
end

---将ScrollView滚动到localPoint
---localPoint为以Content左下角为原点的坐标
---@param localPoint Vector2
---@param duration number float 滚动时间（秒）
---@param easing int PapeGames.X3.EasingFunction.Ease 缓动
---@param onComplete fun(type:X3ScrollView) System.Action<X3ScrollView> 滚动完毕的回调
function ListView:ScrollToLocalPoint(localPoint, duration, easing, onComplete)
    easing = easing or CS.PapeGames.X3.EasingFunction.Ease.EaseInSine
    self:_InvokeFunc("ScrollToLocalPoint", localPoint, duration, easing, onComplete)
end

---将ScrollView滚动到Content下的RT位置
---RT为Content下的子（支持递归）对象，滚动的结果是RT处于ScrollView的中心位置
---@param rt RectTransform  目标RT
---@param duration number float 滚动时间（秒）
---@param easing int PapeGames.X3.EasingFunction.Ease 缓动
---@param onComplete fun(type:X3ScrollView) System.Action<X3ScrollView> 滚动完毕的回调
function ListView:ScrollToTarget(rt, duration, easing, onComplete)
    easing = easing or CS.PapeGames.X3.EasingFunction.Ease.EaseInSine
    self:_InvokeFunc("ScrollToTarget", rt, duration, easing, onComplete)
end

---根据key播放动画
---@param key string
---@param finishCall fun(obj:ListView)
function ListView:PlayMotionWithKey(key,finishCall)
    if not string.isnilorempty(key) then
        local listView = self:GetComponent(UComponentType.GridListView)
        if listView then
            listView:PlayMotionWithKey(key,finishCall)
        end
    else
        Debug.LogError("[ListView:PlayMotionWithKey] failed,key is nil")
    end
end

---根据id下播放动画
---@param idx int
---@param finishCall fun(obj:ListView)
function ListView:PlayMotionWithCellIdx(idx,finishCall)
    idx = idx or 0
    local listView = self:GetComponent(UComponentType.GridListView)
    if listView then
        listView:PlayMotionWithCellIdx(idx,finishCall)
    end
end

return ListView