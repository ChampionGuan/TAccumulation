---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/6/5 16:23
---
---@class Framework
---@field BaseCtrl Framework.BaseCtrl
---@field GameObjectCtrl Framework.GameObjectCtrl
---@field UICtrl Framework.UICtrl
---@field UIViewCtrl Framework.UIViewCtrl
---@field BaseComponent UComponent.BaseComponent
---@field Component Framework.Component
---@field AbstractType Framework.AbstractType
---@field BaseView Framework.BaseView
---@field Parser Framework.Parser
---@field BaseParser Framework.BaseParser
---@field Logger Framework.Logger
---@field EventDispatcher Framework.EventDispatcher
---@field Timer Framework.Timer
---@field FunctionGetHandler fun(funcName:string,isCs:boolean):function
Framework = {}
Framework.RootPath = "Runtime.System.Framework.BaseNew."
require(string.concat(Framework.RootPath, "Common.Init"))
Framework.Component = require(string.concat(Framework.RootPath, "UComponent.Component"))
Framework.BaseComponent = require(string.concat(Framework.RootPath, "UComponent.BaseComponent"))
Framework.BaseView = require(string.concat(Framework.RootPath, "UISystem.BaseView"))
Framework.UICtrl = require(string.concat(Framework.RootPath, "UISystem.UICtrl"))
Framework.UIViewCtrl = require(string.concat(Framework.RootPath, "UISystem.UIViewCtrl"))
Framework.BindHelper = require("Runtime.System.Framework.GameBase.Helper.LuaBindHelper")

---@type Framework.UComponent
UComponent = require(string.concat(Framework.RootPath, "UComponent.TypeDefine.UComponent"))

--region 类型解析
---@type Framework.UComponentType
UComponentType = Framework.Parser.UComponentTypeParser:Parse(require(string.concat(Framework.RootPath, "UComponent.TypeDefine.UComponentType")))
Framework.AbstractType = require(string.concat(Framework.RootPath, "UComponent.TypeDefine.AbstractType"))
Framework.Parser.UComponentParser:Parse(string.concat(Framework.RootPath, "UComponent."), UComponent)
Framework.Parser.UComponentParser:SetExtern(string.concat(Framework.RootPath, "UComponent.Extern."), require(string.concat(Framework.RootPath, "UComponent.TypeDefine.UComponentExtern")))
--endregion



local GAME_OBJECT_TYPE = "__Framework.GameObjectCtrl"
local BASE_CTRL_TYPE = "__Framework.BaseCtrl"

---@return boolean
function Framework.IsTypeOfGameObjectCtrl(t)
    return t[GAME_OBJECT_TYPE]
end

---@return boolean
function Framework.IsTypeOfBaseCtrl(t)
    return t[BASE_CTRL_TYPE]
end

--region 底层调用

---@param target Framework.BaseCtrl
function Framework.UnBindTarget(target)
    Framework.Parser.CtrlParser:UnBind(target)
    Framework.Parser.ViewParser:UnBind(target)
    Framework.Parser.UComponentParser:UnBind(target)
end

---@param target Framework.BaseCtrl
function Framework.ClearTarget(target)
    local func = Framework.FunctionGetHandler("ClearTarget", false)
    if func then
        func(target)
    end
end

---@param go GameObject
function Framework.ClearComponents(go)
    local func = Framework.FunctionGetHandler("ClearComponents", false)
    if func then
        func(go)
    end
end

---@param obj UObject 根节点
---@param name string ocx名称或者是路径
---@param type_str Framework.UComponentType default GameObject
---@param is_recursion boolean 是否需要递归查找
---@param no_log boolean 是否打印日志
---@return UObject
function Framework.GetComponent(obj, name, type_str, is_recursion, no_log)
    local func = Framework.FunctionGetHandler("GetComponent", false)
    return func and func(obj, name, type_str, is_recursion, no_log)
end

---@return PapeGames.X3UI.ObjLinker
---@param name string
function Framework.GetLinker(go, name)
    return Framework.GetComponent(go, name, UComponentType.ObjLinker)
end

---@class X3Game.Ctrl.UseArgName2
---@param go GameObject
---@param ctrlType X3Game.CtrlType
---@param viewType X3Game.ViewType 默认跟进ctrlType映射关系查找
---@param target Framework.GameObjectCtrl
---@return X3Game.Ctrl.UseArgName2
function Framework.GetOrAddCtrl(go, ctrlType, target, viewType)
    if UNITY_EDITOR then
        Framework.AttachByType(go, ctrlType)
    end
    return Framework.Parser.CtrlParser:BindByObj(go, ctrlType, target, viewType)
end

---@class X3Game.View.UseArgName2
---@param go GameObject
---@param viewType X3Game.ViewType 默认跟进ctrlType映射关系查找
---@param target Framework.GameObjectCtrl
---@return X3Game.View.UseArgName2
function Framework.GetOrAddView(go, viewType, target)
    if UNITY_EDITOR then
        Framework.AttachByViewType(go, viewType)
    end
    return Framework.Parser.ViewParser:BindByObj(go, viewType, target)
end

---@param go GameObject
---@param path string
---@param target Framework.GameObjectCtrl
---@param is_cache boolean
---@return Framework.GameObjectCtrl
function Framework.GetOrAddCtrlByPath(go, path, target, is_cache)
    return Framework.BindHelper.GetOrAddCtrl(go, path, target, is_cache)
end

---@param go GameObject
---@param path string
function Framework.RemoveCtrlByPath(go, path)
    Framework.BindHelper.RemoveCtrl(go, path)
end

---@param target Framework.GameObjectCtrl
---@return Framework.GameObjectCtrl[]
function Framework.GetAllByTarget(target)
    local res = PoolUtil.GetTable()
    if Framework.IsTypeOfGameObjectCtrl(target) then
        local views = Framework.Parser.ViewParser:GetAllByTarget(target:GetView())
        if views then
            for k, v in pairs(views) do
                local ctrl = v:GetCtrl()
                if ctrl ~= nil and ctrl ~= target then
                    if not table.containsvalue(res,ctrl) then
                        table.insert(res, ctrl)
                    end
                end
            end
            PoolUtil.ReleaseTable(views)
        end
    end
    local ctrls = Framework.Parser.CtrlParser:GetAllByTarget(target)
    if ctrls then
        for k, v in pairs(ctrls) do
            if v ~= target then
                if not table.containsvalue(res,v) then
                    table.insert(res, v)
                end
            end
        end
        PoolUtil.ReleaseTable(ctrls)
    end
    return res
end

---初始化
function Framework.Init()
    Framework.Parser.UComponentParser:Parse(string.concat(Framework.RootPath, "UComponent."), UComponent)
    Framework.Parser.UComponentParser:SetExtern(string.concat(Framework.RootPath, "UComponent.Extern."), require(string.concat(Framework.RootPath, "UComponent.TypeDefine.UComponentExtern")))
end

---清理
function Framework.Clear()
    Framework.Parser.Clear()
end

--region 编辑器使用
---@param go GameObject
---@param path string
function Framework.Attach(go, path)
    if UNITY_EDITOR then
        if not go then
            return
        end
        CS.X3Game.LuaUICtrl.Attach(Framework.GetComponent(go, nil, UComponentType.GameObject), path)
    end
end

---@param go GameObject
---@param ctrlType X3Game.CtrlType
function Framework.AttachByType(go, ctrlType)
    if UNITY_EDITOR then
        Framework.Attach(go, Framework.Parser.CtrlParser:GetPath(ctrlType))
    end
end

---@param go GameObject
---@param viewType X3Game.ViewType
function Framework.AttachByViewType(go, viewType)
    if UNITY_EDITOR then
        Framework.Attach(go, Framework.Parser.ViewParser:GetPath(viewType))
    end
end
--endregion


--endregion
return Framework












