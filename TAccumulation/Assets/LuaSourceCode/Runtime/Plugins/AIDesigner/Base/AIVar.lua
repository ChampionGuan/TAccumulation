---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/2/8 12:57
---

---@class AIVar:Class
local AIVar = AIUtil.class("AIVar")
---ctor
---@param key string
---@param type AIVarType
---@param value any
---@param beReused boolean
function AIVar:ctor(key, type, value, beReused)
    self._isArray = false
    self._beReused = beReused or true
    self._key = key
    self._type = type
    self._value = value
    self._defaultValue = value
    self.__onValueUpdate = nil
end

function AIVar:IsArray()
    return self._isArray
end

function AIVar:GetKey()
    return self._key
end

function AIVar:GetType()
    return self._type
end

function AIVar:GetValue()
    return self._value
end

function AIVar:SetValue(value)
    self._value = value
    AIUtil.TryCall(self.__onValueUpdate, self)
end

function AIVar:ResetDefault()
    self:SetValue(self._defaultValue)
end

function AIVar:CanBeReused()
    return self._beReused
end

---@class AIArrayVar:AIVar
local AIArrayVar = AIUtil.class("AIArrayVar", AIVar)
---ctor
---@param key string
---@param type AIVarType
---@param value table<number,AIVar>
function AIArrayVar:ctor(key, type, value)
    AIVar.ctor(self, key, type, value or {})
    self._isArray = true
    self._varPool = {}
end

---@param index Int
---@return AIVar
function AIArrayVar:GetChild(index)
    if not index or index < 1 or index > self:Count() then
        return
    end
    return self._value[index]
end

---@param index Int
---@return any
function AIArrayVar:GetChildValue(index)
    local child = self:GetChild(index)
    if not child then
        return
    end
    return child:GetValue()
end

---@param index Int
---@param value any
---@return any
function AIArrayVar:SetChildValue(index, value)
    local child = self:GetChild(index)
    if not child then
        return
    end
    return child:SetValue(value)
end

---@param child AIVar
function AIArrayVar:AddChild(child)
    if not child or child:GetType() ~= self._type then
        return
    end
    if not self._OnSubValueUpdate then
        self._OnSubValueUpdate = function(sub)
            AIUtil.TryCall(self.__onValueUpdate, self, sub)
        end
    end

    child.__onValueUpdate = self._OnSubValueUpdate
    table.insert(self._value, child)
    AIUtil.TryCall(self.__onValueUpdate, self)
end

---@param value any
function AIArrayVar:AddChildValue(value)
    self:AddChild(self:_Temp(value))
end

---@param index Int
function AIArrayVar:RemoveChild(index)
    if not index then
        return
    end
    if not self:GetChild(index) then
        return
    end

    local child = table.remove(self._value, index)
    self:_Recycle(child)
    AIUtil.TryCall(self.__onValueUpdate, self)
end

function AIArrayVar:Clear()
    while self:Count() > 0 do
        self:RemoveChild(self:Count())
    end
end

---@return Int
function AIArrayVar:Count()
    return #self._value
end

---@param size Int
function AIArrayVar:SetSize(size)
    local count = self:Count()
    if count == size then
        return
    end

    if count < size then
        for index = count + 1, size do
            self:AddChildValue(nil)
        end
    else
        for index = count, size + 1, -1 do
            self:RemoveChild(index)
        end
    end
end

function AIArrayVar:_Temp(value)
    local var = table.remove(self._varPool)
    if not var then
        var = AIVar.new(self:GetKey(), self:GetType(), value)
    else
        var:SetValue(value)
    end
    return var
end

---@param var AIVar
function AIArrayVar:_Recycle(var)
    if not var or not var:CanBeReused() then
        return
    end
    table.insert(self._varPool, var)
end

return {
    AIVar = AIVar,
    AIArrayVar = AIArrayVar
}