---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by chaoguan.
--- DateTime: 2021/3/16 11:19
---

------@type number
local _uniqueID = 0
---@return number
local UniqueID = function()
    _uniqueID = _uniqueID + 1
    return _uniqueID
end

---简化版AI计时器
---用于AI节点
---@class AITimer:Class
---@field _cache table
---@field _map table
local AITimer = AIUtil.class("AITimer")
---ctor
function AITimer:ctor()
    self._cache = {}
    self._map = {}
end

function AITimer:Tick(delta)
    for _, timer in pairs(self._map) do
        if timer and not timer.paused then
            timer._leftCD = timer._leftCD - delta
            if timer._listener then
                timer._funcUpdate(timer._listener, timer._leftCD)
            else
                timer._funcUpdate(timer._leftCD)
            end
            if timer._leftCD < timer._minCD then
                self:Discard(timer._id)
            end
        end
    end
end

---@return number 唯一ID
function AITimer:AddTimer(cdMax, cdMin, listener, funcUpdate)
    if not funcUpdate then
        return nil, false
    end
    local timer = #self._cache > 0 and table.remove(self._cache) or {}
    local id = UniqueID()
    timer._id = id
    timer._paused = false
    timer._minCD = cdMin
    timer._leftCD = cdMax
    timer._listener = listener
    timer._funcUpdate = funcUpdate
    self._map[id] = timer
    return id, true
end

---@param id number
function AITimer:Discard(id)
    if not id then
        return
    end
    local timer = self._map[id]
    if not timer then
        return
    end
    self._map[id] = nil
    table.insert(self._cache, timer)
end

---@param id number
---@param paused boolean
function AITimer:Pause(id, paused)
    if not id then
        return
    end
    local timer = self._map[id]
    if not timer then
        return
    end
    timer._paused = paused
end

return AITimer