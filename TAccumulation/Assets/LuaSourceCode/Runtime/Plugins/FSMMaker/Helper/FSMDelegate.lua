---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/9/26 20:18
---
---@class FSM.FSMDelegate
local FSMDelegate = class("FSMDelegate")

function FSMDelegate:ctor()
    ---@private
    ---@type X3Game.FSMMgr
    self.fsmMgr = nil

    ---@private
    ---@type FSM.FSMMgr
    self.fsmMakerMgr = nil

    ---@private
    ---@type PapeGames.FSMMaker.Runtime.IFSMSyncDelegate
    self.syncDelegate = nil

    ---是否通知变更
    ---@private
    ---@type boolean
    self.isEnabled = true

    ---@private
    ---@type FSM.FSMContext
    self.context = nil

    ---@private
    ---@type PapeGames.FSMMaker.Runtime.FSMSyncData
    self.syncData = nil

    ---@private
    ---@type table<FSM.FSMVarType,string>
    self.syncDataMap = {
        [FSMConst.FSMVarType.Rect] = "Rect",
        [FSMConst.FSMVarType.Vector2] = "Vector2",
        [FSMConst.FSMVarType.Vector3] = "Vector3",
        [FSMConst.FSMVarType.Vector4] = "Vector4",
        [FSMConst.FSMVarType.Array] = {
            [FSMConst.FSMVarType.Rect] = "RectList",
            [FSMConst.FSMVarType.String] = "StringList",
            [FSMConst.FSMVarType.Bool] = "BoolList",
            [FSMConst.FSMVarType.Int] = "FloatList",
            [FSMConst.FSMVarType.Float] = "FloatList",
            [FSMConst.FSMVarType.UObject] = "ObjectList",
            [FSMConst.FSMVarType.Vector2] = "Vector2List",
            [FSMConst.FSMVarType.Vector3] = "Vector3List",
            [FSMConst.FSMVarType.Vector4] = "Vector4List",
        },
    }
end

--region 操作函数
---@param fsmPath string
---@return
function FSMDelegate:Start(fsmPath)
    return self.fsmMgr.Start(fsmPath)
end

---@param id
---@param resetVariables boolean
function FSMDelegate:Restart(id, resetVariables)
    self.context:LogFormat("[FSMDelegate:Stop] fsmId =[%s,%s] resetVariables=[%s]", id, self:GetFSMName(id), resetVariables)
    self.fsmMgr.Restart(id, resetVariables)
end

---@param id
---@param destroy boolean
function FSMDelegate:Stop(id, destroy)
    self.context:LogFormat("[FSMDelegate:Stop] fsmId =[%s,%s] ", id, self:GetFSMName(id))
    self.fsmMgr.Stop(id, destroy)
end

---@param id
---@param isPaused boolean
function FSMDelegate:Pause(id, isPaused)
    self.context:LogFormat("[FSMDelegate:Pause] fsmId =[%s,%s] isPaused=[%s]", id, self:GetFSMName(id), isPaused)
    self.fsmMgr.Pause(id, isPaused)
end

---@param name string
---@param value FSMVarValueType
function FSMDelegate:SetVariableValue(fsmId, name, value)
    self.context:LogFormat("[FSMDelegate:SetVariableValue] fsmId =[%s,%s] name=[%s] value=[%s] ", fsmId, self:GetFSMName(fsmId), name, value)
    self:SetEnabled(false)
    local var = self:GetVariable(fsmId, name)
    if var then
        self:ParseValue(var, value)
    else
        self.context:LogWarningFormat("[FSMDelegate:SetVariableValue] failed var not exist!!! fsm=[%s,%s] varName=[%s]", fsmId, self:GetFSMName(fsmId), name)
    end
    self:SetEnabled(true)
end

---@param name string
---@param value FSMVarValueType
function FSMDelegate:SetGlobalVariableValue(name, value)
    self.context:LogFormat("[FSMDelegate:SetGlobalVariableValue] name=[%s] value=[%s] ", name, value)
    self:SetEnabled(false)
    local var = self:GetGlobalVariable(name)
    if var then
        self:ParseValue(var, value)
    else
        self.context:LogWarningFormat("[FSMDelegate:SetGlobalVariableValue] failed var not exist!!! name=[%s]", name)
    end
    self:SetEnabled(true)
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@param varName string
---@param value FSMVarValueType
function FSMDelegate:SetActionVariableValue(fsmId, layerName, stateName, actionId, varName, value)
    self.context:LogFormat("[FSMDelegate:SetActionVariableValue] fsmId=[%s,%s] layerName=[%s] stateName=[%s] actionId=[%s] varName=[%s] value=[%s]", fsmId, self:GetFSMName(fsmId), layerName, stateName, actionId, varName, value)
    self:SetEnabled(false)
    local fsm = self.fsmMakerMgr:GetFSM(fsmId)
    if fsm then
        local var = self:GetActionVariable(fsmId, layerName, stateName, actionId, varName)
        if var then
            self:ParseValue(var, value)
            self:SetEnabled(true)
            return
        end
    else
        self.context:LogErrorFormat("[FSMDelegate:SetActionVariableValue] failed fsmId=[%s,%s] fsm not exist!!! ", fsmId, self:GetFSMName(fsmId))
    end
    self.context:LogErrorFormat("[FSMDelegate:SetActionVariableValue] failed fsmId=[%s,%s] ,layerName=[%s], stateName=[%s], actionId=[%s], varName=[%s]", fsmId, self:GetFSMName(fsmId), layerName, stateName, actionId, varName)
    self:SetEnabled(true)
end

---@return table<int,string>
function FSMDelegate:SetActionEnabled(fsmId, layerName, stateName, actionId, isEnabled)
    local fsm = self.fsmMakerMgr:GetFSM(fsmId)
    if fsm then
        local layer = fsm:GetLayer(layerName)
        if layer then
            local state = layer:GetState(stateName)
            if state then
                local action = state:GetAction(actionId)
                if action then
                    if action:IsEnabled() ~= isEnabled then
                        self.context:LogFormat("[FSMDelegate:SetActionEnabled] fsmId=[%s,%s] layerName=[%s] stateName=[%s] actionId=[%s] isEnabled=[%s] ", fsmId, self:GetFSMName(fsmId), layerName, stateName, actionId, isEnabled)
                        action:SetEnabled(isEnabled)
                    end
                    return
                end
            end
        end
    else
        self.context:LogErrorFormat("[FSMDelegate:SetActionEnabled] failed fsmId=[%s] fsm not exist!!! ", fsmId)
    end
end

---@return table<int,string>
function FSMDelegate:SetStateEnabled(fsmId, layerName, stateName, isEnabled)
    local fsm = self.fsmMakerMgr:GetFSM(fsmId)
    if fsm then
        local layer = fsm:GetLayer(layerName)
        if layer then
            local state = layer:GetState(stateName)
            if state then
                if state:IsEnabled() ~= isEnabled then
                    self.context:LogFormat("[FSMDelegate:SetStateEnabled] fsmId=[%s,%s] layerName=[%s] stateName=[%s] isEnabled=[%s] ", fsmId, self:GetFSMName(fsmId), layerName, stateName, isEnabled)
                    state:SetEnabled(isEnabled)
                end
                return
            end
        end
    else
        self.context:LogErrorFormat("[FSMDelegate:SetStateEnabled] failed fsmId=[%s] fsm not exist!!! ", fsmId)
    end
end

---@return table<int,string>
function FSMDelegate:SetLayerEnabled(fsmId, layerName, isEnabled)
    local fsm = self.fsmMakerMgr:GetFSM(fsmId)
    if fsm then
        local layer = fsm:GetLayer(layerName)
        if layer then
            if layer:IsEnabled() ~= isEnabled then
                layer:SetEnabled(isEnabled)
                self.context:LogFormat("[FSMDelegate:SetLayerEnabled] fsmId=[%s,%s] layerName=[%s] isEnabled=[%s] ", fsmId, self:GetFSMName(fsmId), layerName, isEnabled)
            end
            return
        end
    else
        self.context:LogErrorFormat("[FSMDelegate:SetLayerEnabled] failed fsmId=[%s] fsm not exist!!! ", fsmId)
    end
end

---@return table<int,string>
function FSMDelegate:GetAllRunningFSM()
    local res = {}
    self.fsmMakerMgr:GetAllRunningFSM(res)
    return res
end

---@param fsmId int
function FSMDelegate:DebugFSM(fsmId)
    local fsm = self:GetFSM(fsmId)
    fsm:NotifyValueChanged()
end

---@param fsmId int
---@return number
function FSMDelegate:GetFSMTime(fsmId)
    local fsm = self:GetFSM(fsmId)
    if fsm then
        return fsm:GetCurrentTime()
    end
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@return number
function FSMDelegate:GetActionBeginTime(fsmId, layerName, stateName, actionId)
    local action = self:GetAction(fsmId, layerName, stateName, actionId)
    if action then
        return action.actionBeginTime or 0
    end
    return 0
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@return number
function FSMDelegate:GetActionEndTime(fsmId, layerName, stateName, actionId)
    local action = self:GetAction(fsmId, layerName, stateName, actionId)
    if action then
        return action.actionEndTime or 0
    end
    return 0
end

---@param fsmId
---@param varName string
function FSMDelegate:GetLuaObjectValue(fsmId,varName)
    local var = self:GetVariable(fsmId,varName)
    if var then
        if var:IsLuaObject() then
            return JsonUtil.Encode(var:GetValue())
        else
            return "var is not LuaObject"
        end
    end
    return ""
end

---@param fsmId
---@param varName string
function FSMDelegate:GetActionLuaObjectValue(fsmId, layerName, stateName, actionId, varName)
    local var = self:GetActionVariable(fsmId, layerName, stateName, actionId, varName)
    if var then
        if var:IsLuaObject() then
            return JsonUtil.Encode(var:GetValue())
        else
            return "var is not LuaObject"
        end
    end
    return ""
end

--endregion

--region 数据变更
---@param fsmId int
---@param name string
---@param value FSMVarValueType
function FSMDelegate:OnVariableValueChanged(fsmId, name, value)
    if not self:IsEnabled() then
        return
    end
    local var = self:GetVariable(fsmId,name)
    local res = self:ParseValueForCS(var, value)
    self.syncDelegate:OnVariableValueChanged(fsmId, name, res)
end

---@param name string
---@param value FSMVarValueType
function FSMDelegate:OnGlobalVariableValueChanged(name, value)
    if not self:IsEnabled() then
        return
    end
    local var = self:GetGlobalVariable(name)
    local res = self:ParseValueForCS(var, value)
    self.syncDelegate:OnVariableValueChanged(-1, name, res)
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@param name string
---@param value FSMVarValueType
function FSMDelegate:OnActionVariableValueChanged(fsmId, layerName, stateName, actionId, name, value)
    if not self:IsEnabled() then
        return
    end
    local var = self:GetActionVariable(fsmId, layerName, stateName, actionId, name)
    local res = self:ParseValueForCS(var, value)
    self.syncDelegate:OnActionVariableValueChanged(fsmId, layerName, stateName, actionId, name, res)
end

---@param fsmId int
---@param layerName string
---@param fromStateName string
---@param toStateName string
function FSMDelegate:OnFSMStateChanged(fsmId, layerName, fromStateName, toStateName)
    if not self:IsEnabled() then
        return
    end
    self.syncDelegate:OnFSMStateChanged(fsmId, layerName, fromStateName, toStateName)
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@param from int
---@param to int
function FSMDelegate:OnActionStateChanged(fsmId, layerName, stateName, actionId, from, to)
    if not self:IsEnabled() then
        return
    end
    self.syncDelegate:OnActionStateChanged(fsmId, layerName, stateName, actionId, from, to)
end

---@param fsmId int
---@param fsmName string
function FSMDelegate:OnStartFSM(fsmId, fsmName)
    if not self:IsEnabled() then
        return
    end
    self.syncDelegate:OnStartFSM(fsmId, fsmName)
end

---@param fsmId int
function FSMDelegate:OnStopFSM(fsmId)
    if not self:IsEnabled() then
        return
    end
    self.syncDelegate:OnStopFSM(fsmId)
end
--endregion

--region 基础设置
---@param mgr X3Game.FSMMgr
---@param fsmMakerMgr FSM.FSMMgr
---@param context FSM.FSMContext
function FSMDelegate:SetFSMMgr(mgr, fsmMakerMgr, context)
    self.fsmMgr = mgr
    self.fsmMakerMgr = fsmMakerMgr
    self.context = context
end

---@param syncDelegate
function FSMDelegate:SetSyncDelegate(syncDelegate)
    self.syncDelegate = syncDelegate
end

---@param syncData PapeGames.FSMMaker.Runtime.FSMSyncData
function FSMDelegate:SetSyncData(syncData)
    self.syncData = syncData
end

--endregion

---@param isEnabled boolean
function FSMDelegate:SetEnabled(isEnabled)
    self.isEnabled = isEnabled
end

---@private
---@param fsmVar FSM.FSMVar | FSM.FSMVarArray
---@param value Object
function FSMDelegate:ParseValue(fsmVar, value)
    if fsmVar:IsArray() then
        local res = PoolUtil.GetTable()
        for k = 0, value.Count - 1 do
            table.insert(res, value[k])
        end
        fsmVar:SetValue(res)
        PoolUtil.ReleaseTable(res)
    else
        fsmVar:SetValue(value)
    end
end

---@param fsmVar FSM.FSMVar
---@param value any
---@return UObject
function FSMDelegate:ParseValueForCS(fsmVar, value)
    if not fsmVar then
        return value
    end
    local data = self.syncData
    if data == nil then
        return value
    end
    local varType = fsmVar.varType
    if varType == FSMConst.FSMVarType.LuaObject then
        if type(value) =="table" then
            if value.__cname then
                return value.__cname
            end
            return "table"
        else
            return tostring(value)
        end
    end
    local isArray = fsmVar:IsArray()
    local field = self.syncDataMap[varType]
    if field then
        if isArray then
            field = field[fsmVar.subVarType]
            if not field then
                self.context:LogErrorFormat("[ParseValueForCS] failed varType[%s] is nil",value)
                return value
            end
            data[field] = value
        else
            data[field] = value
        end
        local res = data[field]
        return res
    end

    return value
end

---@param fsmId int
---@param varName string
---@return FSM.FSMVar
function FSMDelegate:GetVariable(fsmId, varName)
    return self.fsmMgr.GetVariable(fsmId, varName)
end

---@param varName string
---@return FSM.FSMVar
function FSMDelegate:GetGlobalVariable(varName)
    return self.fsmMgr.GetGlobalVariable(varName)
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@param varName string
---@return FSM.FSMVar
function FSMDelegate:GetActionVariable(fsmId, layerName, stateName, actionId, varName)
    local fsm = self.fsmMakerMgr:GetFSM(fsmId)
    if fsm then
        local layer = fsm:GetLayer(layerName)
        if layer then
            local state = layer:GetState(stateName)
            if state then
                local action = state:GetAction(actionId)
                if action then
                    ---@type FSM.FSMVar
                    local var = action[varName]
                    return var
                end
            end
        end

    end
    return nil
end

---@param id
---@return string
function FSMDelegate:GetFSMName(id)
    local fsm, ok = self:GetFSM(id)
    if ok then
        return fsm.name
    end
    return fsm
end

---@param id int
---@return FSM.FSM,bool
function FSMDelegate:GetFSM(id)
    if id then
        local fsm = self.fsmMakerMgr:GetFSM(id)
        if fsm then
            return fsm, true
        end
    end
    return string.format("fsm[id] not exist!!!", id), false
end

---@param fsmId int
---@param layerName string
---@param stateName string
---@param actionId int
---@return FSM.FSMAction
function FSMDelegate:GetAction(fsmId, layerName, stateName, actionId)
    local fsm = self:GetFSM(fsmId)
    if fsm then
        local layer = fsm:GetLayer(layerName)
        if layer then
            local state = layer:GetState(stateName)
            if state then
                return state:GetAction(actionId)
            end
        end
    end
    return nil
end

---是否开启
---@return boolean
function FSMDelegate:IsEnabled()
    return self.isEnabled and self:IsConnected()
end

---@return boolean 是否已经连接
function FSMDelegate:IsConnected()
    return self.syncDelegate ~= nil
end

---@private
function FSMDelegate:Destroy()
    self.syncDelegate = nil
    self.syncData = nil
end

return FSMDelegate