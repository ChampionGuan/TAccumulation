---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/8/8 17:43
---

---@class FSM.FSMMgr
local FSMMakerMgr = class("FSMMakerMgr")

function FSMMakerMgr:ctor()

    ---当前running的FSM
    ---@private
    ---@type table<int,FSM.FSM>
    self.fsmMap = table.createOrderTable()

    ---共享context
    ---@private
    ---@type FSM.FSMContext
    self.sharedFsmContext = FSMHelper.CreateComponent(FSMConst.FSMComponent.FSMContext)

    ---是否有FSM正在跑
    ---@private
    ---@type boolean
    self.isRunning = false

    ---是否是暂停
    ---@private
    ---@type boolean
    self.isPaused = false

    ---启动id
    ---@private
    ---@type int
    self.startId = 0

    ---被Destroy的fsm
    ---@private
    ---@type table<int,bool>
    self.deleteMap = {}
end

---@param fsmPath string
---@param owner table
---@param fsmContext FSM.FSMContext
---@param playgroundBlackboard FSM.FSMBlackboard
---@param blackboardMap table<string,FSMVarValueType>
---@return int
function FSMMakerMgr:Create(fsmPath, owner, fsmContext, playgroundBlackboard,blackboardMap)
    if not fsmPath then
        Debug.LogError("[FSMMakerMgr.Create] failed fsmPath is nil")
        return
    end
    if self:IsExist(fsmPath) then
        Debug.LogWarningFormat("[FSMMakerMgr.Create] failed fsm has exist fsm=[%s]", fsmPath)
        return self:GetFSM(fsmPath)
    end
    fsmContext = fsmContext or self.sharedFsmContext
    local fsm = self:InternalCreateFSM(fsmPath)
    local blackboard = FSMHelper.CreateComponent(FSMConst.FSMComponent.FSMBlackboard)
    fsm:SetBasic(fsmPath, fsm, nil, fsmContext, owner)
    fsm:SetBlackboard(blackboard, playgroundBlackboard)
    blackboard:SetBasic(fsm.name, fsm, nil, fsmContext)
    self:InternalLoadFSM(fsm, fsmPath)
    local id = self:GenId()
    fsm:SetId(id)
    self.fsmMap[id] = fsm
    if fsmContext:GetDelegate() then
        fsmContext:GetDelegate():OnStartFSM(id, fsmPath)
    end
    if blackboardMap then
        for k,v in pairs(blackboardMap) do
            fsm:SetVariableValue(k,v)
        end
    end
    fsm:Start()
    self.isRunning = true
    return id
end

---@param id
---@return FSM.FSM
function FSMMakerMgr:GetFSM(id)
    return self.fsmMap[id]
end

---@param id int
function FSMMakerMgr:Destroy(id)
    local fsm = self:GetFSM(id)
    if fsm then
        self:DestroyFSM(fsm)
    end
end

---@param fsm FSM.FSM
function FSMMakerMgr:DestroyFSM(fsm)
    if fsm then
        local id = fsm.id
        self.deleteMap[id] = true
        fsm:Exit()
        FSMHelper.ReleaseComponent(fsm)
        self:CheckRunning()
    end
end

function FSMMakerMgr:Update()
    if not self:IsRunning() then
        return
    end
    for _, fsm in pairs(self.fsmMap) do
        fsm:OnUpdate()
    end
    
    for id,_ in pairs(self.deleteMap) do
        self.fsmMap[id] = nil
        self.deleteMap[id] = nil
    end
end

function FSMMakerMgr:LateUpdate()
    if not self:IsRunning() then
        return
    end
    for _, fsm in pairs(self.fsmMap) do
        fsm:OnLateUpdate()
    end
end

function FSMMakerMgr:FixedUpdate()
    if not self:IsRunning() then
        return
    end
    for _, fsm in pairs(self.fsmMap) do
        fsm:OnFixedUpdate()
    end
end

---@param id
---@return boolean
function FSMMakerMgr:IsExist(id)
    return id ~= nil and self.fsmMap[id] ~= nil
end

---@param eventName string
---@param id int
function FSMMakerMgr:FireEvent(eventName, id)
    if id then
        local fsm = self:GetFSM(id)
        if fsm then
            fsm:FireEvent(eventName)
        else
            Debug.LogErrorFormat("[FSMMakerMgr:FireEvent] failed fsm[%s] not exist!!!", id)
        end
        return
    end
    for _, fsm in pairs(self.fsmMap) do
        fsm:FireEvent(eventName)
    end

end

---@param isPaused boolean
function FSMMakerMgr:Pause(isPaused)
    if isPaused == self.isPaused then
        return
    end
    self.isPaused = isPaused
    for _, fsm in pairs(self.fsmMap) do
        fsm:Pause(isPaused)
    end
end

---@return boolean
function FSMMakerMgr:IsRunning()
    return not self.isPaused and self.isRunning
end

---@param res table<int,string>
function FSMMakerMgr:GetAllRunningFSM(res)
    for k, v in pairs(self.fsmMap) do
        res[k] = v.name
    end
end

---数据清理
function FSMMakerMgr:Clear()
    self.isRunning = false
    for _, fsm in pairs(self.fsmMap) do
        FSMHelper.ReleaseComponent(fsm)
    end
    table.clear(self.deleteMap)
    self.fsmMap:Clear()
    FSMHelper.Clear()
    self.startId = 0
end

---@private
---@param fsmPath string
---@return FSM.FSM
function FSMMakerMgr:InternalCreateFSM(fsmPath)
    local fsm = FSMHelper.CreateComponent(FSMConst.FSMComponent.FSM)
    fsm:SetName(fsmPath)
    return fsm
end

---@private
---@param fsm FSM.FSM
function FSMMakerMgr:InternalRemoveFSM(fsm)
    FSMHelper.ReleaseComponent(fsm)
end

---@private
---@param fsm FSM.FSM
---@param fsmPath string
function FSMMakerMgr:InternalLoadFSM(fsm, fsmPath)
    local fsmReader = FSMHelper.CreateComponent(FSMConst.FSMComponent.FSMReader)
    fsmReader:SetBasic(fsm.name, fsm, nil, fsm.context)
    fsmReader:Load(fsm, fsmPath)
    fsm:OnAwake()
    FSMHelper.ReleaseComponent(fsmReader)
end

---@private
function FSMMakerMgr:CheckRunning()
    self.isRunning = #self.fsmMap > 0
end

---id 创建
---@return int
function FSMMakerMgr:GenId()
    self.startId = self.startId + 1
    return self.startId
end

return FSMMakerMgr