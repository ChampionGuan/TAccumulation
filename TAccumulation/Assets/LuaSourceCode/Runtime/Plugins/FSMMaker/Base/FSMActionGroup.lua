---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/8/9 11:24
--- 所有action的容器
---@type FSM.FSMAction
local FSMAction = require(FSMConst.FSMActionPath)
---@class FSM.FSMActionGroup:FSM.FSMAction
local FSMActionGroup = class("FSMActionGroup", FSMAction)

---@private
function FSMActionGroup:ctor()
    FSMAction.ctor(self)
    ---action列表
    ---@private
    ---@type FSM.FSMAction[]
    self.actions = {}

    ---action 是否是顺序执行
    ---@private
    ---@type FSM.ExecutionType
    self.executionType = FSMConst.ExecutionType.Sequence

    self:SetIsUpdateEnabled(true)
end

--region 底层对外函数
---@private
---@param action FSM.FSMAction
function FSMActionGroup:Add(action)
    if self:HasAction(action) then
        self.context:LogErrorFormat("[FSMActionGroup:Add] action has exists action=[%s]", action.name)
        return
    end
    table.insert(self.actions, action)
end

---@private
---@param  executionType FSM.ExecutionType
function FSMActionGroup:SetExecutionType(executionType)
    self.executionType = executionType or FSMConst.ExecutionType.Sequence
end

---@private
---是否是顺序执行
---@return boolean
function FSMActionGroup:IsSequence()
    return self.executionType == FSMConst.ExecutionType.Sequence
end

---@private
---@param action FSM.FSMAction
function FSMActionGroup:HasAction(action)
    return table.containsvalue(self.actions, action)
end
--endregion

--region 周期函数
---@private
function FSMActionGroup:OnAwake()
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() then
            action:OnAwake()
        end
    end
end

---@private
function FSMActionGroup:OnEnter()
    local isFinish = true
    local isSequence = self:IsSequence()
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() then
            action:SetRunningState(FSMConst.FSMRunningState.None)
        end
    end
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() then
            if self:IsRunning() then
                self:EnterAction(action)
                if isSequence then
                    if action:IsRunning() then
                        return
                    elseif action:IsFinish() then
                        self:ExitAction(action)
                    end
                else
                    if action:IsRunning() then
                        isFinish = false
                    elseif action:IsFinish() then
                        self:ExitAction(action)
                    end
                end
            else
                return
            end

        end
    end
    if isFinish then
        self:Finish()
    end
end

---@private
function FSMActionGroup:OnUpdate()
    if not self:IsRunning() then
        return
    end
    local isFinish = true
    if self:IsSequence() then
        for _, action in ipairs(self.actions) do
            if not self:IsRunning() then
                return
            end
            if action:IsEnabled() then
                if action:IsFinish() then
                    self:ExitAction(action)
                elseif action:IsRunning() then
                    if action:IsUpdateEnabled() then
                        action:OnUpdate()
                        if action:IsRunning() then
                            isFinish = false
                            break
                        elseif action:IsFinish() then
                            self:ExitAction(action)
                        end
                    else
                        isFinish = false
                        break
                    end

                elseif not action:IsEntered() then
                    self:EnterAction(action)
                    if action:IsRunning() then
                        action:OnUpdate()
                        isFinish = false
                        break
                    elseif action:IsFinish() then
                        self:ExitAction(action)
                    end
                end
            end
        end
    else
        for _, action in ipairs(self.actions) do
            if not self:IsRunning() then
                return
            end
            if action:IsEnabled() then
                if action:IsFinish() then
                    self:ExitAction(action)
                elseif action:IsRunning() then
                    if action:IsUpdateEnabled() then
                        action:OnUpdate()
                        if action:IsRunning() then
                            isFinish = false
                        elseif action:IsFinish() then
                            self:ExitAction(action)
                        end
                    else
                        isFinish = false
                    end
                end
            end
        end
    end

    if isFinish then
        self:Finish()
    end
end

---@private
function FSMActionGroup:OnLateUpdate()
    if not self:IsRunning() then
        return
    end
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() and action:IsUpdateEnabled() and action:IsRunning() then
            action:OnLateUpdate()
        end
    end
end

---@private
function FSMActionGroup:OnFixedUpdate()
    if not self:IsRunning() then
        return
    end
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() and action:IsUpdateEnabled() and action:IsRunning() then
            action:OnFixedUpdate()
        end
    end
end

---@private
function FSMActionGroup:OnPause(isPaused)
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() then
            action:OnPause(isPaused)
        end
    end
end

---@private
function FSMActionGroup:OnReset()
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() then
            action:OnReset()
        end
    end
end

---@private
function FSMActionGroup:OnDestroy()
    for _, action in ipairs(self.actions) do
        if action:IsEnabled() then
            action:OnDestroy()
        end
    end
end

---@private
function FSMActionGroup:OnExit()
    for _, action in ipairs(self.actions) do
        self:ExitAction(action)
    end
end
--endregion

--region 私有函数
---@private
---@param action FSM.FSMAction
function FSMActionGroup:EnterAction(action)
    if action:IsEnabled() then
        if not action:IsEntered() then
            action:Enter()
        end
    end
end

---@private
---@param action FSM.FSMAction
function FSMActionGroup:ExitAction(action)
    if action:IsEnabled() then
        if action:IsEntered() then
            action:Exit()
        end
    end
end

---@private
---@param idx int
---@return FSM.FSMAction
function FSMActionGroup:GetAction(idx)
    return idx and self.actions[idx] or nil
end

---@private
---@param id int
---@return FSM.FSMAction
function FSMActionGroup:GetActionById(id)
    for k, v in ipairs(self.actions) do
        if v:GetComponentType() == FSMConst.FSMComponent.FSMActionGroup then
            local action = v:GetActionById(id)
            if action then
                return action
            end
        else
            if v.id == id then
                return v
            end
        end
    end
end

--endregion

function FSMActionGroup:ToString()
    local actions = self.context:GetTable()
    for _, v in ipairs(self.actions) do
        table.insert(actions, v:ToString())
    end
    local res = string.format("id=[%s],actions=[%s]", self.id, table.concat(actions, ","))
    self.context:ReleaseTable(actions)
    return res
end

---@private
---通知数据变更
function FSMActionGroup:NotifyValueChanged()
    for _, v in ipairs(self.actions) do
        v:NotifyValueChanged()
    end
end

return FSMActionGroup