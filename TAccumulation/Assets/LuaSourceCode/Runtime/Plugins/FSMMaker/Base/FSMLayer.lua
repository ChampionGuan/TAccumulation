---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/8/8 17:57
--- 分层

---@type FSM.FSMBase
local FSMBaseNode = require(FSMConst.FSMBaseNodePath)

---@class FSM.FSMLayer:FSM.FSMBaseNode
local FSMLayer = class("FSMLayer", FSMBaseNode)

---@private
function FSMLayer:ctor()

    ---当前层的所有状态
    ---@private
    ---@type table<string,FSM.FSMState>
    self.stateMap = table.createOrderTable()

    ---当前状态
    ---@private
    ---@type FSM.FSMState
    self.current = nil

    ---上次状态名
    ---@private
    ---@type string
    self.lastStateName = nil

    ---默认状态
    ---@private
    ---@type string
    self.defaultStateName = nil

    ---所属层
    ---@private
    ---@type int
    self.idx = 0

    ---注册的transition
    ---@private
    ---@type FSM.FSMTransition
    self.transition = nil

    self:SetIsUpdateEnabled(true)
end

--region 公开函数
---@param eventName string
function FSMLayer:FireEvent(eventName)
    if self.context:IsDebug() then
        self.context:LogFormat("[FSMLayer:FireEvent] eventName=[%s] layer=[%s],state=[%s]", eventName, self.name,self.current and self.current.name or "default")
    end
    local transition = self.transition
    local stateName = nil
    if transition ~= nil then
        stateName = transition:GetStateName(eventName)
    end
    if stateName == nil then
        local state = self.current or self:GetDefaultState()
        stateName = state:GetTransitionStateName(eventName)
    end
    if stateName ~= nil then
        self:ChangeState(stateName)
    end
end

---@param stateName string
function FSMLayer:ChangeState(stateName)
    if string.isnilorempty(stateName) then
        self.context:LogErrorFormat("[FSMLayer:ChangeState] failed stateName is nil or empty stateName=[%s]", stateName)
        return
    end
    if not self:HasState(stateName) then
        self.context:LogErrorFormat("[FSMLayer:ChangeState] failed state not exist stateName=[%s]", stateName)
        return
    end
    local state = self:GetState(stateName)
    local current = self.current
    if state ~= nil and state ~= current then
        self.lastStateName = current and current.name or nil
        if self.context:IsDebug() then
            self.context:LogFormat("[FSMLayer:ChangeState] from [%s] to [%s] layer=[%s]", self.lastStateName, stateName, self.name)
        end
        self:NotifyValueChanged(self.lastStateName,stateName)
        if current then
            current:Exit()
        end
        self.current = state
        state:Enter()
    else
        self.context:LogWarningFormat("[FSMLayer:ChangeState] failed state has already enter stateName=[%s]", stateName)
    end
end

--endregion



--region 周期函数
---@private
function FSMLayer:OnAwake()
    if self:IsEnabled() then
        for _, state in pairs(self.stateMap) do
            if state:IsEnabled() then
                state:OnAwake()
            end
        end
    end
end

---@private
function FSMLayer:OnEnter()
    if self.current then
        self.current:OnEnter()
    end
end

---@private
function FSMLayer:OnUpdate()
    if not self:IsRunning() then
        return
    end
    if self.current:IsRunning() then
        self.current:OnUpdate()
    end
end

---@private
function FSMLayer:OnLateUpdate()
    if not self:IsRunning() then
        return
    end
    if self.current:IsRunning() then
        self.current:OnLateUpdate()
    end
end

---@private
function FSMLayer:OnFixedUpdate()
    if not self:IsRunning() then
        return
    end
    if self.current:IsRunning() then
        self.current:OnFixedUpdate()
    end
end

---@private
function FSMLayer:OnExit()
    self.current:Exit()
end

---@private
---@param isPaused boolean
function FSMLayer:OnPause(isPaused)
    self.current:OnPause(isPaused)
end

---@private
function FSMLayer:OnReset()
    for _, state in pairs(self.stateMap) do
        if self:IsRunning() then
            if state:IsEnabled() then
                state:OnReset()
            end
        end
    end
end

---@private
function FSMLayer:OnDestroy()
    FSMHelper.ReleaseComponent(self.transition)
    self.transition = nil

    for k, v in pairs(self.stateMap) do
        FSMHelper.ReleaseComponent(v)
    end
    self.stateMap:Clear()
end

--endregion

--region 底层调用
---@private
---@param idx int
---@param defaultStateName string
function FSMLayer:Set(idx, defaultStateName)
    self.idx = idx
    self:SetDefaultStateName(defaultStateName)
end

---@private
---@param name string
function FSMLayer:SetDefaultStateName(name)
    if string.isnilorempty(name) then
        self.context:LogError("[FSMLayer:SetDefaultStateName] failed defaultStateName is nil or empty")
        return
    end
    self.defaultStateName = name
    if self:GetDefaultState() == nil then
        self.context:LogError("[FSMLayer:SetDefaultStateName] failed defaultState not exist: self=[%s]", self.defaultStateName, self:ToString())
    end
end

---@private
---@return string
function FSMLayer:GetCurrentStateName()
    if self.current ~= nil then
        return self.current.name
    end
end

---@private
---@return FSM.FSMState
function FSMLayer:GetDefaultState()
    return (self.stateMap and self.defaultStateName) and self:GetState(self.defaultStateName) or nil
end

---@private
---@param stateName string
---@return boolean
function FSMLayer:HasState(stateName)
    return self.stateMap[stateName] ~= nil
end

---@private
---@param state FSM.FSMState
function FSMLayer:Add(state)
    if self:HasState(state.name) then
        self.context:LogErrorFormat("[FSMLayer:Add] failed state has exist stateName=[%s]", state.name)
        return
    end
    self.stateMap[state.name] = state
end

---@private
---@param transition FSM.FSMTransition
function FSMLayer:SetTransition(transition)
    if self.transition then
        self.context:LogErrorFormat("[FSMState:AddTransition] failed transition has already exist transition=[%s]", transition.name)
        return
    end
    self.transition = transition
end
--endregion

---@private
---通知数据变更过
---@param fromState string
---@param toState string
---@param isAll boolean
function FSMLayer:NotifyValueChanged(fromState,toState,isAll)
    if string.isnilorempty(fromState) then
        fromState = self.lastStateName
    end
    if string.isnilorempty(toState) then
        toState = self:GetCurrentStateName()
    end
    local delegate = self.context:GetDelegate()
    if delegate then
        delegate:OnFSMStateChanged(self.fsm.id,self.name,fromState,toState)
    end
    if isAll then
        for _,v in pairs(self.stateMap) do
            v:NotifyValueChanged()
        end
    end
end

---@private
---@param stateName string
---@return FSM.FSMState
function FSMLayer:GetState(stateName)
    local state = stateName and self.stateMap[stateName] or nil
    if not state then
        self.context:LogErrorFormat("[FSMState:GetState] failed state not exist state=[%s]", stateName)
    end
    return state
end

---@return string
function FSMLayer:ToString()
    local states = self.context:GetTable()
    for k, _ in pairs(self.stateMap) do
        table.insert(states, k)
    end
    local res = string.format("name=[%s],idx=[%s],states=[%s],defaultStateName=[%s]", self.name, self.idx, table.concat(states, ","), self.defaultStateName)
    self.context:ReleaseTable(states)
    return res
end

return FSMLayer