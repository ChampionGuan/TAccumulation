---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/8/9 15:22
--- 数组类型
---@type FSM.FSMVar
local FSMVar = require(FSMConst.FSMVarPath)

---@class FSM.FSMVarArray:FSM.FSMVar
---@field private subVarType FSM.FSMVarType
local FSMVarArray = class("FSMVarArray", FSMVar)

--region 公开方法
---@param value FSMVarValueType
function FSMVarArray:SetValue(value)
    self:CheckValue()
    if value == nil then
        self.context:LogErrorFormat("[FSMVarArray] SetValue failed value is nil value=[%s],name=[%s]", value, self.name)
        return
    end
    if self.context:IsDebug() then
        if type(value) ~= "table" then
            self.context:LogErrorFormat("[FSMVarArray] SetValue failed value is not table value=[%s],valueType=[%s],name=[%s]", value, type(value), self.name)
            return
        end
    end
    if self:IsReadonly() then
        self.context:LogErrorFormat("[FSMVar:SetValue] failed try change readonly var[%s]", self:ToString())
        return
    end

    table.clear(self.value)
    for k, v in ipairs(value) do
        self.value[k] = v
    end
    self:NotifyValueChanged()
end

---@param value FSMVarValueType
---@param idx int
function FSMVarArray:AddElement(value, idx)
    if value == nil then
        return self.context:LogErrorFormat("[FSMVarArray:AddElement] failed value is nil name=[%s]", self.name)
    end
    if self:IsReadonly() then
        self.context:LogErrorFormat("[FSMVarArray:SetValue] failed try change readonly var[%s]", self:ToString())
        return
    end
    self:CheckValue()
    if idx then
        table.insert(self.value, idx, value)
    else
        table.insert(self.value, value)
    end
    self:NotifyValueChanged()
end

---@param value FSMVarValueType
function FSMVarArray:RemoveElement(value)
    if self:IsReadonly() then
        self.context:LogErrorFormat("[FSMVarArray:RemoveElement] failed try change readonly var[%s]", self:ToString())
        return
    end
    if value == nil then
        self.context:LogWarningFormat("[FSMVarArray:RemoveElement] failed value is nil self=[%s]", self:ToString())
        return
    end
    self:CheckValue()
    table.removebyvalue(self.value, value, true)
    self:NotifyValueChanged()
end

---@param idx int
function FSMVarArray:RemoveElementByIndex(idx)
    if self:IsReadonly() then
        self.context:LogErrorFormat("[FSMVarArray:RemoveElementByIndex] failed try change readonly var[%s]", self:ToString())
        return
    end
    if idx == nil then
        self.context:LogWarningFormat("[FSMVarArray:RemoveElementByIndex] failed idx is nil self=[%s]", self:ToString())
        return
    end
    self:CheckValue()
    table.remove(self.value, idx)
    self:NotifyValueChanged()
end

---@param idx int
---@param value FSMVarValueType
function FSMVarArray:SetElement(idx, value)
    if self:IsReadonly() then
        self.context:LogErrorFormat("[FSMVarArray:ChangeValue] failed try change readonly var[%s]", self:ToString())
        return
    end
    if idx ~= nil then
        if self.value then
            if self.value[idx] == nil then
                self:AddElement(value, idx)
            else
                self.value[idx] = value
            end
            self:NotifyValueChanged()
        else
            self.context:LogErrorFormat("[FSMVarArray:SetElement] failed idx not exist idx=[%s],self=[%s]", idx, self:ToString())
        end
    else
        self.context:LogError("[FSMVarArray:SetElement] failed idx is nil self=[%s]", self:ToString())
    end
end

---@param idx int
---@return FSMVarValueType
function FSMVarArray:GetElement(idx)
    if idx == nil then
        self.context:LogWarningFormat("[FSMVarArray:GetValueByIdx] failed idx is nil self=[%s]", self:ToString())
        return
    end
    self:CheckValue()
    return self.value[idx]
end

---@return int
function FSMVarArray:GetLength()
    return self.value and #self.value or 0
end

---@return string
function FSMVarArray:ToString()
    self:CheckValue()
    local value = self.value
    local valueRef = nil
    if self.subVarType == FSMConst.FSMVarType.Bool then
        valueRef = self.context:GetTable()
        for k, v in ipairs(self.value) do
            valueRef[k] = tostring(v)
        end
        value = valueRef
    end
    local res = string.format("[FSMVarArray] name=[%s],varType=[%s],values=[%s],shareType=[%s],subVarType=[%s],readonly=[%s]", self.name, self.varType, table.concat(value, ","), self.shareType, self.subVarType, self.readonly)
    if valueRef then
        self.context:ReleaseTable(valueRef)
    end
    return res
end

--endregion

--region 底层调用
---@private
---@param subVarType FSM.FSMVarType
function FSMVarArray:SetSubVarType(subVarType)
    self.subVarType = subVarType
end

---@private
function FSMVarArray:OnDestroy()
    self.context:ReleaseTable(self.value)
    FSMVar.OnDestroy(self)
end

---数据解析
---@private
---@param name string
---@param varType FSM.FSMVarType
---@param value FSMVarValueType
---@param shareType FSM.FSMVarShareType
---@param subVarType FSM.FSMVarType
---@param readonly boolean
function FSMVarArray:Parse(name, value, varType, shareType, subVarType, readonly)
    FSMVar.Parse(self, name, value, varType, shareType, readonly)
    self:SetSubVarType(subVarType)
end

---@private
function FSMVarArray:CheckValue()
    if not self.value then
        self.value = self.context:GetTable()
    end
end

---设置初始化数据
---@private
function FSMVarArray:SetInitValue(value)
    self:CheckValue()
    if value == nil then
        return
    end

    table.clear(self.value)

    if self.initValue ~= nil then
        table.clear(self.initValue)
    else
        self.initValue = self.context:GetTable()
    end
    for k, v in ipairs(value) do
        table.insert(self.initValue, v)
        table.insert(self.value, v)
    end
end
--endregion



return FSMVarArray