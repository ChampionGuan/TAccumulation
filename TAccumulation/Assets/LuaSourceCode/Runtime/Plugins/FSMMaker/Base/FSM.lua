---
--- Generated by EmmyLua(https:..github.com.EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023.8.8 17:49
--- 状态机

---@type FSM.FSMBaseNode
local FSMBaseNode = require(FSMConst.FSMBaseNodePath)
---@class FSM.FSM:FSM.FSMBaseNode
---@field blackboard FSM.FSMBlackboard
---@field globalBlackboard FSM.FSMBlackboard
local FSM = class("FSM", FSMBaseNode)

---@private
function FSM:ctor()

    ---状态机层
    ---@private
    ---@type FSM.FSMLayer[]
    self.layers = nil

    ---是否是暂停模式
    ---@private
    ---@type boolean
    self.isPaused = false

    ---当前运行时间
    ---@private
    ---@type number
    self.currentTime = 0

    self:SetIsUpdateEnabled(true)

    ---@private
    ---@type table
    self.externMap = nil
end


--region 公开函数

---设置变量值
---@param varName string
---@param value FSMVarValueType
function FSM:SetVariableValue(varName, value)
    local var = self.blackboard:GetVariable(varName)
    if var then
        var:SetValue(value)
    else
        self.context:LogWarning("[FSMMgr.SetVariable] failed fsm[%s] var[%s] not exist!!!", self.name, varName)
    end
end

---获取变量值
---@param varName string
---@return FSMVarValueType
function FSM:GetVariableValue(varName)
    local var = self:GetVariable(varName)
    if var then
        return var:GetValue()
    else
        self.context:LogWarningFormat("[FSMMgr.SetVariable] failed fsm[%s] var[%s] not exist!!!", self.name, varName)
    end
end

---设置变量
---@param name string
---@param varType FSM.FSMVarType
---@param value FSMVarValueType
---@param subVarType FSM.FSMVarType
---@param readonly boolean
---@return FSM.FSMVar | FSM.FSMVarArray
function FSM:SetVariable(name, value, varType, subVarType, readonly)
    return self.blackboard:SetVariable(name, value, varType, subVarType, readonly)
end

---获取变量
---@param varName string
---@return FSM.FSMVar | FSM.FSMVarArray
function FSM:GetVariable(varName)
    local var = self.blackboard:GetVariable(varName)
    if var then
        return var
    else
        self.context:LogWarningFormat("[FSM:GetVariable] failed fsm[%s] var[%s] not exist!!!", self.name, varName)
    end
    return nil
end

---设置全局变量值
---@param varName string
---@param value FSMVarValueType
function FSM:SetGlobalVariableValue(varName, value)
    local var = self.globalBlackboard:GetVariable(varName)
    if var then
        var:SetValue(value)
    else
        self.context:LogWarningFormat("[FSM:SetGlobalVariable] failed fsm[%s] var[%s] not exist!!!", self.name, varName)
    end
end

---获取全局变量值
---@param varName string
---@return FSMVarValueType
function FSM:GetGlobalVariableValue(varName)
    local var = self:GetGlobalVariable(varName)
    if var then
        return var:GetValue()
    else
        self.context:LogWarningFormat("[FSM:GetGlobalVariableValue] failed fsm[%s] var[%s] not exist!!!", self.name, varName)
    end
end

---新增变量
---@param name string
---@param varType FSM.FSMVarType
---@param value FSMVarValueType
---@param subVarType FSM.FSMVarType
---@param readonly boolean
---@return FSM.FSMVar | FSM.FSMVarArray
function FSM:SetGlobalVariable(name, value, varType, subVarType, readonly)
    return self.globalBlackboard:SetVariable(name, value, varType, subVarType, readonly)
end

---获取全局变量
---@param varName string
---@return FSM.FSMVar | FSM.FSMVarArray
function FSM:GetGlobalVariable(varName)
    local var = self.globalBlackboard:GetVariable(varName)
    if var then
        return var
    else
        self.context:LogWarningFormat("[FSM:GetGlobalVariable] failed fsm[%s] var[%s] not exist!!!", self.name, varName)
    end
end

---触发事件
---@param eventName string
function FSM:FireEvent(eventName)
    for _, layer in ipairs(self.layers) do
        if self:IsRunning() then
            if layer:IsEnabled() then
                layer:FireEvent(eventName)
            end
        end
    end
end

---切换状态
---@param stateName string
function FSM:ChangeState(stateName)
    for _, layer in ipairs(self.layers) do
        if self:IsRunning() then
            if layer:IsEnabled() then
                layer:ChangeState(stateName)
            end
        end
    end
end



--endregion


--region 对外函数

---@private
---@param blackboard FSM.FSMBlackboard
---@param globalBlackboard
function FSM:SetBlackboard(blackboard, globalBlackboard)
    self.blackboard = blackboard
    self.globalBlackboard = globalBlackboard
end

---@private
---@param layer FSM.FSMLayer
function FSM:Add(layer)
    if not layer then
        self.context:LogErrorFormat("[FSM:Add] failed layer is nil")
        return
    end
    if not self.layers then
        self.layers = self.context:GetTable()
    end
    if self:HasLayer(layer) then
        self.context:LogErrorFormat("[FSM:Add] failed layer has exist layer=[%s]", layer.name)
        return
    end
    table.insert(self.layers, layer)
end

---@private
---@param layerName string
---@return FSM.FSMLayer
function FSM:GetLayer(layerName)
    for k, v in ipairs(self.layers) do
        if layerName == v.name then
            return v
        end
    end
    self.context:LogErrorFormat("[FSM:GetLayer] failed layer not exist layer=[%s]", layerName)
end

---@private
---@param layer FSM.FSMLayer
---@return boolean
function FSM:HasLayer(layer)
    return table.containsvalue(self.layers, layer)
end

---重新启动
---@private
---@param resetVariables boolean 是否重置黑板数据
function FSM:Restart(resetVariables)
    if resetVariables then
        self:ResetVariables()
    end
    self:Reset()
    self:Start()
end

--启动，会触发重置
---@private
function FSM:Start()
    if self.context:IsDebug() then
        self.currentTime = 0
    end
    self:Enter()
    self:FireEvent(FSMConst.EventName.FSMStart)
end

--停止
---@private
function FSM:Stop()
    self:Exit()
end

--重置
---@private
function FSM:Reset()
    self:OnReset()
end

---重置黑板数据
---@private
function FSM:ResetVariables()
    self.blackboard:Reset()
end

---@private
---@param isPaused boolean
function FSM:Pause(isPaused)
    if isPaused == self.isPaused then
        return
    end
    self.isPaused = isPaused
    self:OnPause(isPaused)
end

---@return boolean
function FSM:IsRunning()
    if self.isPaused then
        return false
    end
    return FSMBaseNode.IsRunning(self)
end

---@return number
function FSM:GetCurrentTime()
    return self.currentTime
end

--endregion

--region 周期函数
---@private
function FSM:OnAwake()
    for _, layer in ipairs(self.layers) do
        if self:IsEnabled() then
            if layer:IsEnabled() then
                layer:OnAwake()
            end
        end
    end
end

---@private
function FSM:OnEnter()
    for _, layer in ipairs(self.layers) do
        if self:IsEnabled() then
            if layer:IsEnabled() then
                layer:Enter()
            end
        end
    end
end

---@private
function FSM:OnUpdate()
    if not self:IsRunning() then
        return
    end
    if self.context:IsDebug() then
        self.currentTime = self.currentTime + self.context:GetDeltaTime()
    end
    for _, layer in ipairs(self.layers) do
        if self:IsRunning() then
            if layer:IsEnabled() then
                layer:OnUpdate()
            end
        end
    end
end

---@private
function FSM:OnLateUpdate()
    if not self:IsRunning() then
        return
    end
    for _, layer in ipairs(self.layers) do
        if self:IsRunning() then
            if layer:IsEnabled() then
                layer:OnLateUpdate()
            end
        end
    end
end

---@private
function FSM:OnFixedUpdate()
    if not self:IsRunning() then
        return
    end
    for _, layer in ipairs(self.layers) do
        if self:IsRunning() then
            if layer:IsEnabled() then
                layer:OnFixedUpdate()
            end
        end
    end
end

---@private
function FSM:OnExit()
    for _, layer in ipairs(self.layers) do
        if self:IsRunning() then
            if layer:IsEnabled() then
                layer:Exit()
            end
        end
    end
end

---@private
function FSM:OnReset()
    for _, layer in ipairs(self.layers) do
        if layer:IsEnabled() then
            layer:OnReset()
        end
    end
end

---@private
function FSM:OnPause(isPaused)
    for _, layer in ipairs(self.layers) do
        if layer:IsEnabled() then
            layer:OnPause(isPaused)
        end
    end
end

---@private
function FSM:OnDestroy()
    for _, layer in ipairs(self.layers) do
        if layer:IsEnabled() then
            layer:Destroy()
        end
    end
    FSMHelper.ReleaseComponent(self.blackboard)
    self.context:ReleaseTable(self.layers)
    self.context:ReleaseTable(self.externMap)
    self.externMap = nil
    self.blackboard = nil
    self.layers = nil
    self.globalBlackboard = nil
end

---@private
function FSM:NotifyValueChanged()
    self.blackboard:NotifyValueChanged()
    self.globalBlackboard:NotifyValueChanged()
    for _, layer in ipairs(self.layers) do
        if layer:IsEnabled() then
            layer:NotifyValueChanged(nil, nil, true)
        end
    end
end

--region 第三方数据临时存储
---设置第三方数据
---@param key any
---@param value any
function FSM:SetExternValue(key,value)
    if self.externMap == nil then
        self.externMap = self.context:GetTable()
    end
    self.externMap[key] = value
end

---获取第三方数据
---@param key any
---@return any
function FSM:GetExternValue(key)
    if key==nil then
        return 
    end
    if self.externMap then
        return self.externMap[key]
    end
end
--endregion

--endregion



return FSM