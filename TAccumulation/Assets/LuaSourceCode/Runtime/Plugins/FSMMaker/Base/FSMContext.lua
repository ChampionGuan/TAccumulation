---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/8/9 17:14
---

---@type FSM.FSMBase
local FSMBase = require(FSMConst.FSMBasePath)
---@class FSM.FSMContext:FSM.FSMBase
local FSMContext = class("FSMContext", FSMBase)

---@private
function FSMContext:ctor()
    ---@private
    ---@type table[]
    self.tablePool = {}

    ---@private
    ---@type Debug
    self.logger = nil

    ---@private
    ---@type boolean
    self.logEnable = true

    ---@private
    ---@type X3Game.FSMMgr
    self.fsmMgr = nil

    ---@private
    ---@type EventMgr
    self.eventMgr = nil
    
    ---@private
    ---@type FSM.FSMDelegate
    self.fsmDelegate = nil
end

--region API

---当前是否是debug模式
---@return boolean
function FSMContext:IsDebug()
    return UNITY_EDITOR
end

---@param logger Debug
---@param owner table
---@param fsmMgr X3Game.FSMMgr
---@param eventMgr EventMgr
---@param fsmDelegate FSM.FSMDelegate
function FSMContext:Set(logger, owner, fsmMgr, eventMgr,fsmDelegate)
    self.logger = logger
    self.fsmMgr = fsmMgr
    self.eventMgr = eventMgr
    self.fsmDelegate = fsmDelegate
    self:SetOwner(owner)
end

--region 默认值相关
---@param varType FSM.FSMVarType
function FSMContext:GetDefaultValue(varType)
    if varType ~= nil then
        return FSMConst.DefaultValue[varType]
    end
end

---触发事件
---@param eventName string
---@param isGame boolean
---@param isGlobal boolean
function FSMContext:FireEvent(eventName, isGlobal, isGame)
    if isGlobal and self.fsmMgr then
        self.fsmMgr.FireEvent(eventName)
    end
    if isGame and self.eventMgr then
        self.eventMgr.Dispatch(eventName)
    end
end

--endregion

--region 数学计算
---@param min Int
---@param max Int
---@return Int
function FSMContext:Random(min, max)
    if min == 0 and max == 1 then
        return math.random()
    end
    return math.random(min, max)
end

---@param value float
---@return float
function FSMContext:Ceil(value)
    return math.ceil(value)
end

---@param value float
---@return float
function FSMContext:Floor(value)
    return math.floor(value)
end
--endregion

--region 时间戳
---@return number
function FSMContext:GetRealtime()
    return os.time()
end

---@return number
function FSMContext:GetDeltaTime()
    return 0
end

--endregion

--endregion

--region 打印日志
function FSMContext:Log(...)
    if self:IsLogEnable() then
        self.logger:Log(...)
    end
end

function FSMContext:LogFormat(...)
    if self:IsLogEnable() then
        self.logger:LogFormat(...)
    end
end

function FSMContext:LogErrorFormat(...)
    if self:IsLogEnable() then
        self.logger:LogErrorFormat(...)
    end
end

function FSMContext:LogError(...)
    if self:IsLogEnable() then
        self.logger:LogError(...)
    end
end

function FSMContext:LogWarning(...)
    if self:IsLogEnable() then
        self.logger:LogWarning(...)
    end
end

function FSMContext:LogWarningFormat(...)
    if self:IsLogEnable() then
        self.logger:LogWarningFormat(...)
    end
end

function FSMContext:LogFatal(...)
    if self:IsLogEnable() then
        self.logger:LogFatal(...)
    end
end

function FSMContext:LogFatalFormat(...)
    if self:IsLogEnable() then
        self.logger:LogFatalFormat(...)
    end
end

---@return boolean
function FSMContext:IsLogEnable()
    return self.logEnable and self.logger ~= nil
end

---@param logEnable boolean
function FSMContext:SetLogEnable(logEnable)
    self.logEnable = logEnable
end

--endregion

--region DEBUG

---@param fsmDelegate FSM.FSMDelegate
function FSMContext:SetDelegate(fsmDelegate)
    self.fsmDelegate = fsmDelegate
end

---@return FSM.FSMDelegate
function FSMContext:GetDelegate()
    return self.fsmDelegate
end

--endregion

--region 缓存池
---@return table
function FSMContext:GetTable()
    if #self.tablePool > 0 then
        return table.remove(self.tablePool)
    end
    return {}
end

---@param t table
function FSMContext:ReleaseTable(t)
    if t then
        table.clear(t)
        table.insert(self.tablePool, t)
    end
end

--endregion

return FSMContext