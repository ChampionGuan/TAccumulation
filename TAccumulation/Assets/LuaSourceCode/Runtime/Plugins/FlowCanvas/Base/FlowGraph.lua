---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/2/6 16:03
---@type int
local startId = 0
---@class FlowGraph
---@field graphId int
---@field private graphOwner NodeCanvas.Framework.GraphOwner
---@field private flowContext FlowContext
---@field private blackboard FlowBlackboard
---@field private nodeDelegate IFlowNode
---@field private nodePool table<string,Pool>
---@field private owner Flow.FlowGraphMgr
local FlowGraph = class("FlowGraph")
function FlowGraph:ctor()
    ---FlowGraph graph 上的所有node 
    ---@type table<int,FlowNode>
    self.nodeMap = {}
end

---启动graph
function FlowGraph:Start()
    self.graphOwner:StartBehaviour()
end

---重新启动
function FlowGraph:ReStart()
    self.graphOwner:RestartBehaviour()
end

---停止
function FlowGraph:Stop()
    self.graphOwner:StopBehaviour()
end

---暂停
function FlowGraph:Pause()
    self.graphOwner:PauseBehaviour()
end

---继续
function FlowGraph:Resume()
    self.graphOwner:StartBehaviour()
end

---@param flowContext FlowContext
function FlowGraph:SetFlowContext(flowContext)
    self.flowContext = flowContext
    for k, v in pairs(self.nodeMap) do
        v.flowContext = self.flowContext
    end
end

---@return FlowContext
function FlowGraph:GetFlowContext()
    return self.flowContext
end

---@param graphOwner NodeCanvas.Framework.GraphOwner
function FlowGraph:SetGraphOwner(graphOwner)
    self.graphOwner = graphOwner
    self.blackboard:Set(graphOwner.blackboard)
end

---@return NodeCanvas.Framework.GraphOwner
function FlowGraph:GetGraphOwner()
    return self.graphOwner
end

---@param graphId int
---@param owner Flow.FlowGraphMgr
function FlowGraph:Set(graphId, owner)
    self.owner = owner
    self.graphId = graphId
    self.nodePool = self.owner.nodePool
    self.nodeDelegate = self.owner:CreateNodeDelegate()
    self.nodeDelegate.graph = self
    self.blackboard = self.owner:CreateBlackboard()
    self.flowContext = self.owner.flowContext
end

---@return int
function FlowGraph:GetId()
    return self.graphId
end

---销毁graph
function FlowGraph:Destroy()
    self:OnClear()
end

---@param id int
---@return FlowNode
function FlowGraph:Get(id)
    return self.nodeMap[id]
end

---@param id int
---@param className string
function FlowGraph:GetOrAdd(id, className)
    local node = self:Get(id)
    if not node then
        node = self:Add(id, className)
    end
end

---@param id int
function FlowGraph:Remove(id)
    local node = self:Get(id)
    if node then
        self:DestroyNode(node)
    end
end

---@param id int
---@param className string
function FlowGraph:Add(id, className)
    local node = self:Get(id)
    if not node then
        node = self:Create(className)
        node.id = id
        node.graph = self
        node.blackboard = self.blackboard
        node.flowContext = self.flowContext
        self.nodeMap[id] = node
    end
    return node
end

---@return FlowVar
---@param var X3Game.FlowArg
function FlowGraph:ParseVariable(var)
    local flowVar = self.owner:CreateVar()
    flowVar:Parse(var)
    return flowVar
end

---@param var FlowVar
function FlowGraph:ReleaseVar(var)
    self.owner:ReleaseVar(var)
end

---@private
---@return int
function FlowGraph:GenInsId()
    startId = startId + 1
    return startId
end

---@private
---@param className string
---@return FlowNode
function FlowGraph:Create(className)
    local node = self.owner:CreateNode(className)
    if node then
        node:OnAwake()
    end
    return node
end

---@private
---@param node FlowNode
function FlowGraph:DestroyNode(node)
    if node then
        self.owner:ReleaseNode(node)
    end
end

---@return IFlowNode
function FlowGraph:GetNodeDelegate()
    return self.nodeDelegate
end

---清理相关数据
function FlowGraph:OnClear()
    for k, v in pairs(self.nodeMap) do
        self:DestroyNode(v)
    end
    table.clear(self.nodeMap)
    self.owner:ReleaseBlackboard(self.blackboard)
    self.owner:ReleaseNodeDelegate(self.nodeDelegate)
    self.owner = nil
    self.blackboard = nil
    self.flowContext = nil
    self.nodeDelegate = nil
end

return FlowGraph