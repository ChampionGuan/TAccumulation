---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/2/11 16:47
---@class IFlowDelegate
---@field graphMgr Flow.FlowGraphMgr
local IFlowDelegate = class("IFlowDelegate")

---@param graphId int
---@param nodeId int
---@param className string
---@param graphOwner NodeCanvas.Framework.GraphOwner
function IFlowDelegate:OnCreate(graphId, nodeId, graphOwner, className)
    self.graphMgr:GetOrAddNodeDelegate(graphId,graphOwner):OnCreate(nodeId, className)
end

---@param graphId int
---@param nodeId int
---@param argList System.Collections.Generic.IList<X3Game.FlowArg>
---@param eventArgList System.Collections.Generic.IList<X3Game.FlowArg>
function IFlowDelegate:OnExecute(graphId, nodeId, argList, eventArgList)
    local nodeDelegate = self.graphMgr:GetOrAddNodeDelegate(graphId)
    nodeDelegate:ParseVariable(nodeId,argList,eventArgList)
    nodeDelegate:OnEnter(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnExit(graphId, nodeId)
    self.graphMgr:GetOrAddNodeDelegate(graphId):OnExit(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnStart(graphId, nodeId)
    self.graphMgr:GetOrAddNodeDelegate(graphId):OnStart(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnStop(graphId, nodeId)
    self.graphMgr:GetOrAddNodeDelegate(graphId):OnStop(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnPause(graphId, nodeId)
    self.graphMgr:GetOrAddNodeDelegate(graphId):OnPause(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnResume(graphId, nodeId)
    self.graphMgr:GetOrAddNodeDelegate(graphId):OnResume(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnReset(graphId, nodeId)
    self.graphMgr:GetOrAddNodeDelegate(graphId):OnReset(nodeId)
end

---@param graphId int
---@param nodeId int
---@return FlowState
function IFlowDelegate:OnUpdate(graphId, nodeId)
    return self.graphMgr:GetOrAddNodeDelegate(graphId):OnUpdate(nodeId)
end

---@param graphId int
---@param nodeId int
function IFlowDelegate:OnDestroy(graphId, nodeId)
    local graph = self.graphMgr:GetOrAdd(graphId)
    graph:Remove(nodeId)
end

---@param graphOwner NodeCanvas.Framework.GraphOwner
function IFlowDelegate:OwnerBehaviourStateChange(graphOwner)
    return self.graphMgr:GetOrAddByGraphOwner(graphOwner)
end

---@param graphMgr Flow.FlowGraphMgr
function IFlowDelegate:Set(graphMgr)
    self.graphMgr = graphMgr
end

return IFlowDelegate