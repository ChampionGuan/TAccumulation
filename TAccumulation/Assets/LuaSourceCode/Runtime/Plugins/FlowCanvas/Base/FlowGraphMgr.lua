---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/2/6 15:59

---@type FlowGraph
local FlowGraph = require("Runtime.Plugins.FlowCanvas.Base.FlowGraph")

---@type IFlowNode
local IFlowNode = require("Runtime.Plugins.FlowCanvas.Base.IFlowNode")

---@type FlowBlackboard
local FlowBlackboard = require("Runtime.Plugins.FlowCanvas.Base.FlowBlackboard")

---@type FlowVar
local FlowVar = require("Runtime.Plugins.FlowCanvas.Base.FlowVar")

---@class Flow.FlowGraphMgr
local FlowGraphMgr = class("FlowGraphMgr")
function FlowGraphMgr:ctor()
    ---@type table<string,Pool>
    self.nodePool = {}
    ---@type table<int,FlowGraph>
    self.runningMap = {}
    ---@type Pool
    self.graphPool = PoolUtil.Get(function()
        return FlowGraph.new()
    end, function(graph)
        graph:Destroy()
    end)
    ---@type Pool
    self.nodeDelegatePool = PoolUtil.Get(function()
        return IFlowNode.new()
    end, function(nodeDelegate)
        nodeDelegate:Clear()
    end)
    self.blackboardPool = PoolUtil.Get(function() 
        return FlowBlackboard.new()
    end,function(blackboard)
        blackboard:Clear()
    end)
    self.varPool = PoolUtil.Get(function()
        return FlowVar.new()
    end,function(var)
        var:Clear()
    end)
    ---@type FlowContext
    self.flowContext = require("Runtime.Plugins.FlowCanvas.Base.FlowContext")
end

---@param graphId
---@return FlowGraph
function FlowGraphMgr:GetOrAdd(graphId)
    local isCreate = false
    local graph = self:Get(graphId)
    if not graph then
        graph = self:CreateGraph(graphId)
        self.runningMap[graphId] = graph
        graph:Set(graphId, self)
        isCreate = true
    end
    return graph, isCreate
end

---@param graphOwner NodeCanvas.Framework.GraphOwner
---@return FlowGraph
function FlowGraphMgr:GetOrAddByGraphOwner(graphOwner)
    if not graphOwner then
        Debug.LogErrorFormat("FlowMgr.GetOrAdd failed graphOwner is nil")
        return nil
    end
    local graphId = graphOwner.graph:GetInstanceID()
    local graph = self:GetOrAdd(graphId)
    graph:SetGraphOwner(graphOwner)
    return graph
end

---@param graph FlowGraph
function FlowGraphMgr:Destroy(graph)
    if graph then
        self.runningMap[graph:GetId()] = nil
        self:ReleaseGraph(graph)
    end
end

---@param graphId int
---@return FlowGraph
function FlowGraphMgr:Get(graphId)
    return self.runningMap[graphId]
end

---@param graphId int
---@return IFlowNode
function FlowGraphMgr:GetOrAddNodeDelegate(graphId,graphOwner)
    local graph = graphOwner==nil and self:GetOrAdd(graphId) or self:GetOrAddByGraphOwner(graphOwner)
    return graph:GetNodeDelegate()
end

---@return IFlowDelegate
function FlowGraphMgr:CreateNodeDelegate()
    return self.nodeDelegatePool:Get()
end

---@param nodeDelegate IFlowNode
function FlowGraphMgr:ReleaseNodeDelegate(nodeDelegate)
    return self.nodeDelegatePool:Release(nodeDelegate)
end

---@return FlowBlackboard
function FlowGraphMgr:CreateBlackboard()
    return self.blackboardPool:Get()
end

---@param blackboard FlowBlackboard
function FlowGraphMgr:ReleaseBlackboard(blackboard)
    return self.blackboardPool:Release(blackboard)
end

---@private
---@param graphId int
---@return FlowGraph
function FlowGraphMgr:CreateGraph(graphId)
    ---@type FlowGraph
    return self.graphPool:Get()
end

---@private
---@param flowGraph FlowGraph
function FlowGraphMgr:ReleaseGraph(flowGraph)
    if flowGraph then
        if self.graphPool then
            self.graphPool:Release(flowGraph)
        else
            flowGraph:OnDestroy()
        end

    end
end

---@return FlowVar
function FlowGraphMgr:CreateVar()
    return self.varPool:Get()
end

---@param var FlowVar
function FlowGraphMgr:ReleaseVar(var)
    self.varPool:Release(var)
end

---@param className string
function FlowGraphMgr:CreateNode(className)
    if string.isnilorempty(className) then
        Debug.LogErrorFormat("[FlowGraphMgr:CreateNode failed]:className=%s",className)
        return
    end
    local pool = self:GetNodePool(className)
    ---@type FlowNode
    local node = pool:Get()
    node.className =className
    return node
end

---@param node FlowNode
function FlowGraphMgr:ReleaseNode(node)
    if not node then return end
    local pool = self:GetNodePool(node.className)
    pool:Release(node)
end

---@param className string
---@return Pool
function FlowGraphMgr:GetNodePool(className)
    local pool = self.nodePool[className]
    if not pool then
        local path = self:GetNodePath(className)
        local template = require(path)
        pool = PoolUtil.Get(function()
            return template.new()
        end, function(t)
            t:OnClear()
            table.clear(t)
        end)
        self.nodePool[className] = pool
    end
    return pool
end

---@private
---@param className string
---@return string
function FlowGraphMgr:GetNodePath(className)
    return FlowConst.FlowClassType[className]
end

return FlowGraphMgr