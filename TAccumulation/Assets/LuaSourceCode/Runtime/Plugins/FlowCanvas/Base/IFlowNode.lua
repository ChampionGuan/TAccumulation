---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiaozhu.
--- DateTime: 2023/2/14 17:42
---
---@class IFlowNode
---@field graph FlowGraph
local IFlowNode = class("IFlowNode")

---@param id int
---@param className string
function IFlowNode:OnCreate(id, className)
    local node = self.graph:GetOrAdd(id, className)
    if node then
        node:OnAwake()
    end
end

---@param id int
function IFlowNode:OnAwake(id)
    local node = self.graph:Get(id)
    if node then
        node:OnAwake()
    end
end

---逻辑进入
---@param id int
function IFlowNode:OnEnter(id)
    local node = self.graph:Get(id)
    if node then
        node:OnEnter()
    end
end

---逻辑退出
---@param id int
function IFlowNode:OnExit(id)
    local node = self.graph:Get(id)
    if node then
        node:OnExit()
    end
end

---状态check
---@param id int
function IFlowNode:OnUpdate(id)
    local node = self.graph:Get(id)
    if node then
        return node:OnUpdate()
    end
    return FlowState.Failure
end

---暂停
---@param id int
function IFlowNode:OnPause(id)
    local node = self.graph:Get(id)
    if node then
        return node:OnPause()
    end
end

---继续
---@param id int
function IFlowNode:OnResume(id)
    local node = self.graph:Get(id)
    if node then
        return node:OnResume()
    end
end

---启动
---@param id int
function IFlowNode:OnStart(id)
    local node = self.graph:Get(id)
    if node then
        return node:OnStart()
    end
end

---停止
---@param id int
function IFlowNode:OnStop(id)
    local node = self.graph:Get(id)
    if node then
        return node:OnStop()
    end
end

---销毁
---@param id int
function IFlowNode:OnDestroy(id)
    local node = self.graph:Get(id)
    if node then
        return node:OnDestroy()
    end
end

---@param id int
---@param argList System.Collections.Generic.IList<X3Game.FlowArg>
---@param eventArgList System.Collections.Generic.IList<X3Game.FlowArg>
function IFlowNode:ParseVariable(id, argList, eventArgList)
    local node = self.graph:Get(id)
    if not node then
        return false
    end
    local arg = PoolUtil.GetTable()
    local eventArg = PoolUtil.GetTable()
    self:Parse(argList,arg)
    self:Parse(eventArgList,eventArg)
    node:ParseVariable(arg,eventArg)
    self:ReleaseVar(arg)
    self:ReleaseVar(eventArg)
    PoolUtil.ReleaseTable(arg)
    PoolUtil.ReleaseTable(eventArg)
    return true
end

---@param args FlowVar[]
function IFlowNode:ReleaseVar(args)
    for k,v in pairs(args) do
        self.graph:ReleaseVar(v)
    end
end

---@private
---@param argList System.Collections.Generic.IList<X3Game.FlowArg>
---@return boolean
function IFlowNode:Parse(argList, target)
    if not argList or argList.Count == 0 then
        return false
    end
    local graph = self.graph
    local count = argList.Count
    for k = 0, count-1 do
        local v = argList[k]
        table.insert(target, graph:ParseVariable(v))
    end
    return true
end

function IFlowNode:Clear()
    self.graph = nil
end

return IFlowNode